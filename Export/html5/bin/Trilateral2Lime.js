(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { // Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
$hx_exports["hxGeomAlgo"] = $hx_exports["hxGeomAlgo"] || {};
$hx_exports["hxGeomAlgo"]["_HxPoint"] = $hx_exports["hxGeomAlgo"]["_HxPoint"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g2 = 0;
			var _g3 = this.parent.__windows;
			while(_g2 < _g3.length) {
				var window1 = _g3[_g2];
				++_g2;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if(window1.context != null) {
					window1.onRender.dispatch(window1.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				this.parent.__window.onFocusOut.dispatch();
				this.parent.__window.onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__window.onFocusIn.dispatch();
				this.parent.__window.onActivate.dispatch();
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g11 = data.buttons.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g21 = 0;
				var _g3 = data.axes.length;
				while(_g21 < _g3) {
					var i2 = _g21++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g4 = 0;
				var _g12 = data.buttons.length;
				while(_g4 < _g12) {
					var i3 = _g4++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g22 = 0;
				var _g31 = data.axes.length;
				while(_g22 < _g31) {
					var i4 = _g22++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function($window) {
		if($window != null) {
			this.__windows.push($window);
			this.__windowByID.h[$window.id] = $window;
			var f = $bind(this,this.__onWindowClose);
			var window1 = $window;
			var tmp = function() {
				f(window1);
			};
			$window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = $window;
				$window.onActivate.add($bind(this,this.onWindowActivate));
				$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				$window.onDropFile.add($bind(this,this.onWindowDropFile));
				$window.onEnter.add($bind(this,this.onWindowEnter));
				$window.onExpose.add($bind(this,this.onWindowExpose));
				$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				$window.onKeyDown.add($bind(this,this.onKeyDown));
				$window.onKeyUp.add($bind(this,this.onKeyUp));
				$window.onLeave.add($bind(this,this.onWindowLeave));
				$window.onMinimize.add($bind(this,this.onWindowMinimize));
				$window.onMouseDown.add($bind(this,this.onMouseDown));
				$window.onMouseMove.add($bind(this,this.onMouseMove));
				$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				$window.onMouseUp.add($bind(this,this.onMouseUp));
				$window.onMouseWheel.add($bind(this,this.onMouseWheel));
				$window.onMove.add($bind(this,this.onWindowMove));
				$window.onRender.add($bind(this,this.render));
				$window.onResize.add($bind(this,this.onWindowResize));
				$window.onRestore.add($bind(this,this.onWindowRestore));
				$window.onTextEdit.add($bind(this,this.onTextEdit));
				$window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch($window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			f(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp1 = function(button) {
			f1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp2 = function(button1) {
			f2(gamepad3,button1);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp3 = function() {
			f3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			f(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp1 = function(button) {
			f1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp2 = function(button1) {
			f2(joystick3,button1);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp3 = function() {
			f3(joystick4);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp4 = function(hat,position) {
			f4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp5 = function(trackball,x,y) {
			f5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("Trilateral2Lime",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	ManifestResources.init(config);
	var app = new Main();
	var _this = app.meta;
	if(__map_reserved["build"] != null) {
		_this.setReserved("build","17");
	} else {
		_this.h["build"] = "17";
	}
	var _this1 = app.meta;
	if(__map_reserved["company"] != null) {
		_this1.setReserved("company","Nanjizal");
	} else {
		_this1.h["company"] = "Nanjizal";
	}
	var _this2 = app.meta;
	if(__map_reserved["file"] != null) {
		_this2.setReserved("file","Trilateral2Lime");
	} else {
		_this2.h["file"] = "Trilateral2Lime";
	}
	var _this3 = app.meta;
	if(__map_reserved["name"] != null) {
		_this3.setReserved("name","Trilateral2Lime");
	} else {
		_this3.h["name"] = "Trilateral2Lime";
	}
	var _this4 = app.meta;
	if(__map_reserved["packageName"] != null) {
		_this4.setReserved("packageName","net.nanjizal.trilateral2lime");
	} else {
		_this4.h["packageName"] = "net.nanjizal.trilateral2lime";
	}
	var _this5 = app.meta;
	if(__map_reserved["version"] != null) {
		_this5.setReserved("version","1.0.0");
	} else {
		_this5.h["version"] = "1.0.0";
	}
	var attributes = { allowHighDPI : false, alwaysOnTop : false, borderless : false, element : null, frameRate : 60, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "Trilateral2Lime", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 16777215, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var _g2 = 0;
	var _g11 = ManifestResources.preloadLibraries;
	while(_g2 < _g11.length) {
		var library = _g11[_g2];
		++_g2;
		app.__preloader.addLibrary(library);
	}
	var _g21 = 0;
	var _g3 = ManifestResources.preloadLibraryNames;
	while(_g21 < _g3.length) {
		var name = _g3[_g21];
		++_g21;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	ApplicationMain.start(app);
};
ApplicationMain.start = function(app) {
	var result = app.exec();
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() {
	var qReal = new geom_structure_Mat1x4(0.,0.,Math.sin(0.),Math.cos(0.));
	var qDual = new geom_structure_Mat1x4(0.,0.,-1.,1.);
	var currentLength = Math.sqrt(qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		qReal.x *= mul;
		qReal.y *= mul;
		qReal.z *= mul;
		qReal.w *= mul;
	}
	var real = qReal;
	var q = new geom_structure_Mat1x4(qDual.x,qDual.y,qDual.z,0.);
	q = new geom_structure_Mat1x4(q.x * 0.5,q.y * 0.5,q.z * 0.5,q.w * 0.5);
	this.offset = new geom_structure_DualQ(real,new geom_structure_Mat1x4(q.x * real.w + q.y * real.z - q.z * real.y + q.w * real.x,-q.x * real.z + q.y * real.w + q.z * real.x + q.w * real.y,q.x * real.y - q.y * real.x + q.z * real.w + q.w * real.z,-q.x * real.x - q.y * real.y - q.z * real.z + q.w * real.w));
	this.sceneTransform = true;
	this.itemModel = new geom_move_Axis3();
	this.axisModel = new geom_move_Axis3();
	this.colors = new Float32Array(100);
	this.indices = new Int32Array(100);
	this.vertices = new Float32Array(100);
	this.model = new geom_structure_DualQ(new geom_structure_Mat1x4(0.,0.,0.,1.),new geom_structure_Mat1x4(0.,0.,0.,0.));
	var this1 = new Int32Array(Main.largeEnough + 2);
	this1[0] = 0;
	this1[1] = 0;
	this.ind = this1;
	var this11 = new Float32Array(Main.largeEnough + 2);
	this11[0] = 0.;
	this11[1] = 0.;
	this.cols = this11;
	var this12 = new Float32Array(Main.largeEnough + 2);
	this12[0] = 0.;
	this12[1] = 0.;
	this.textPos = this12;
	var this13 = new Float32Array(Main.largeEnough + 2);
	this13[0] = 0.;
	this13[1] = 0.;
	this.verts = this13;
	this.BACK = true;
	this.CULL_FACE = true;
	this.DEPTH_TEST = true;
	this.start = false;
	lime_app_Application.call(this);
	this.setupSideTrace();
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.shaderInput = function(gl,program,name,att,arr,number) {
	var buffer = gl.createBuffer();
	var arrBuffer = gl.ARRAY_BUFFER;
	gl.bindBuffer(arrBuffer,buffer);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,arrBuffer,arr,gl.STATIC_DRAW);
	var flo = gl.getAttribLocation(program,name);
	gl.vertexAttribPointer(flo,att,number,false,0,0);
	gl.enableVertexAttribArray(flo);
	gl.bindBuffer(arrBuffer,null);
};
Main.uploadDataToBuffers = function(gl,program,vertices,colors,texture) {
	var name = Main.posName;
	var number = gl.FLOAT;
	var buffer = gl.createBuffer();
	var arrBuffer = gl.ARRAY_BUFFER;
	gl.bindBuffer(arrBuffer,buffer);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,arrBuffer,vertices,gl.STATIC_DRAW);
	var flo = gl.getAttribLocation(program,name);
	gl.vertexAttribPointer(flo,3,number,false,0,0);
	gl.enableVertexAttribArray(flo);
	gl.bindBuffer(arrBuffer,null);
	var name1 = Main.colorName;
	var number1 = gl.FLOAT;
	var buffer1 = gl.createBuffer();
	var arrBuffer1 = gl.ARRAY_BUFFER;
	gl.bindBuffer(arrBuffer1,buffer1);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,arrBuffer1,colors,gl.STATIC_DRAW);
	var flo1 = gl.getAttribLocation(program,name1);
	gl.vertexAttribPointer(flo1,4,number1,false,0,0);
	gl.enableVertexAttribArray(flo1);
	gl.bindBuffer(arrBuffer1,null);
	if(texture != null) {
		var name2 = Main.textureName;
		var number2 = gl.FLOAT;
		var buffer2 = gl.createBuffer();
		var arrBuffer2 = gl.ARRAY_BUFFER;
		gl.bindBuffer(arrBuffer2,buffer2);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,arrBuffer2,texture,gl.STATIC_DRAW);
		var flo2 = gl.getAttribLocation(program,name2);
		gl.vertexAttribPointer(flo2,2,number2,false,0,0);
		gl.enableVertexAttribArray(flo2);
		gl.bindBuffer(arrBuffer2,null);
	}
};
Main.passIndicesToShader = function(gl,indices) {
	var indexBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,indices,gl.STATIC_DRAW);
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);
};
Main.ident = function() {
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = 1.0;
	arr[1] = 0.0;
	arr[2] = 0.0;
	arr[3] = 0.0;
	arr[4] = 1.0;
	arr[5] = 0.0;
	arr[6] = 0.0;
	arr[7] = 0.0;
	arr[8] = 1.0;
	arr[9] = 0.0;
	arr[10] = 0.0;
	arr[11] = 0.0;
	arr[12] = 1.0;
	arr[13] = 0.0;
	arr[14] = 0.0;
	arr[15] = 0.0;
	return arr;
};
Main.getOffset = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,Math.sin(0.),Math.cos(0.));
	var qReal = this1;
	var this2 = new geom_structure_Mat1x4(0.,0.,-1.,1.);
	var qDual = this2;
	var currentLength = Math.sqrt(qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		qReal.x *= mul;
		qReal.y *= mul;
		qReal.z *= mul;
		qReal.w *= mul;
		var real = qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w;
	}
	var real1 = qReal;
	var this3 = new geom_structure_Mat1x4(qDual.x,qDual.y,qDual.z,0.);
	var q = this3;
	var this4 = new geom_structure_Mat1x4(q.x * 0.5,q.y * 0.5,q.z * 0.5,q.w * 0.5);
	q = this4;
	var this5 = new geom_structure_Mat1x4(q.x * real1.w + q.y * real1.z - q.z * real1.y + q.w * real1.x,-q.x * real1.z + q.y * real1.w + q.z * real1.x + q.w * real1.y,q.x * real1.y - q.y * real1.x + q.z * real1.w + q.w * real1.z,-q.x * real1.x - q.y * real1.y - q.z * real1.z + q.w * real1.w);
	var dual = this5;
	var this6 = new geom_structure_DualQ(real1,dual);
	return this6;
};
Main.__super__ = lime_app_Application;
Main.prototype = $extend(lime_app_Application.prototype,{
	resetPosition: function() {
		var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
		var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
		var this3 = new geom_structure_DualQ(this1,this2);
		this.model = this3;
	}
	,setupSideTrace: function() {
		new htmlHelper_tools_DivertTrace();
	}
	,onWindowCreate: function() {
		var context = this.__window.context;
		var this1 = new Float32Array(16);
		var arr = this1;
		arr[0] = 1.0;
		arr[1] = 0.0;
		arr[2] = 0.0;
		arr[3] = 0.0;
		arr[4] = 1.0;
		arr[5] = 0.0;
		arr[6] = 0.0;
		arr[7] = 0.0;
		arr[8] = 1.0;
		arr[9] = 0.0;
		arr[10] = 0.0;
		arr[11] = 0.0;
		arr[12] = 1.0;
		arr[13] = 0.0;
		arr[14] = 0.0;
		arr[15] = 0.0;
		this.matrix32Array = arr;
		switch(context.type) {
		case "cairo":
			break;
		case "canvas":
			break;
		case "dom":
			break;
		case "flash":
			break;
		case "opengl":case "opengles":case "webgl":
			this.gl = context.webgl;
			this.glProgram = lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$.fromSources(this.gl,"attribute vec3 pos;" + "attribute vec4 color;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(pos, 1.);" + " vcol = color;" + "}","precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}");
			this.gl.useProgram(this.glProgram);
			this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA);
			this.gl.enable(this.gl.BLEND);
			var verts = this.verts;
			var cols = this.cols;
			var _e = verts;
			var _e1 = verts;
			var _e2 = verts;
			var _e3 = verts;
			var _e4 = verts;
			var _e5 = verts;
			var _e6 = verts;
			var _e7 = verts;
			var _e8 = verts;
			var _e9 = cols;
			var tmp = function(colorA,colorB,colorC) {
				geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e9,(colorA >> 16 & 255) / 255);
				var v = (colorA & 255) / 255;
				_e9[(_e9[0] | 0) * 4 + 2 + 2] = v;
				var v1 = (colorA >> 8 & 255) / 255;
				_e9[(_e9[0] | 0) * 4 + 1 + 2] = v1;
				var v2 = (colorA >> 24 & 255) / 255;
				_e9[(_e9[0] | 0) * 4 + 3 + 2] = v2;
				var pos_ = _e9[0] + 1.;
				_e9[0] = pos_;
				if(_e9[0] > _e9[1] - 1) {
					_e9[1] = _e9[0];
				}
				geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e9,(colorB >> 16 & 255) / 255);
				var v3 = (colorB & 255) / 255;
				_e9[(_e9[0] | 0) * 4 + 2 + 2] = v3;
				var v4 = (colorB >> 8 & 255) / 255;
				_e9[(_e9[0] | 0) * 4 + 1 + 2] = v4;
				var v5 = (colorB >> 24 & 255) / 255;
				_e9[(_e9[0] | 0) * 4 + 3 + 2] = v5;
				var pos_1 = _e9[0] + 1.;
				_e9[0] = pos_1;
				if(_e9[0] > _e9[1] - 1) {
					_e9[1] = _e9[0];
				}
				geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e9,(colorC >> 16 & 255) / 255);
				var v6 = (colorC & 255) / 255;
				_e9[(_e9[0] | 0) * 4 + 2 + 2] = v6;
				var v7 = (colorC >> 8 & 255) / 255;
				_e9[(_e9[0] | 0) * 4 + 1 + 2] = v7;
				var v8 = (colorC >> 24 & 255) / 255;
				_e9[(_e9[0] | 0) * 4 + 3 + 2] = v8;
				var pos_2 = _e9[0] + 1.;
				_e9[0] = pos_2;
				if(_e9[0] > _e9[1] - 1) {
					_e9[1] = _e9[0];
				}
			};
			var _e10 = cols;
			var tmp1 = function(color,times) {
				var _g = 0;
				var _g1 = times;
				while(_g < _g1) {
					var i = _g++;
					geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e10,(color >> 16 & 255) / 255);
					var v9 = (color & 255) / 255;
					_e10[(_e10[0] | 0) * 4 + 2 + 2] = v9;
					var v10 = (color >> 8 & 255) / 255;
					_e10[(_e10[0] | 0) * 4 + 1 + 2] = v10;
					var v11 = (color >> 24 & 255) / 255;
					_e10[(_e10[0] | 0) * 4 + 3 + 2] = v11;
					var pos_3 = _e10[0] + 1.;
					_e10[0] = pos_3;
					if(_e10[0] > _e10[1] - 1) {
						_e10[1] = _e10[0];
					}
					geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e10,(color >> 16 & 255) / 255);
					var v12 = (color & 255) / 255;
					_e10[(_e10[0] | 0) * 4 + 2 + 2] = v12;
					var v13 = (color >> 8 & 255) / 255;
					_e10[(_e10[0] | 0) * 4 + 1 + 2] = v13;
					var v14 = (color >> 24 & 255) / 255;
					_e10[(_e10[0] | 0) * 4 + 3 + 2] = v14;
					var pos_4 = _e10[0] + 1.;
					_e10[0] = pos_4;
					if(_e10[0] > _e10[1] - 1) {
						_e10[1] = _e10[0];
					}
					geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e10,(color >> 16 & 255) / 255);
					var v15 = (color & 255) / 255;
					_e10[(_e10[0] | 0) * 4 + 2 + 2] = v15;
					var v16 = (color >> 8 & 255) / 255;
					_e10[(_e10[0] | 0) * 4 + 1 + 2] = v16;
					var v17 = (color >> 24 & 255) / 255;
					_e10[(_e10[0] | 0) * 4 + 3 + 2] = v17;
					var pos_5 = _e10[0] + 1.;
					_e10[0] = pos_5;
					if(_e10[0] > _e10[1] - 1) {
						_e10[1] = _e10[0];
					}
				}
			};
			var _e11 = verts;
			var _e12 = verts;
			var tmp2 = function(pos_6) {
				_e12[0] = pos_6;
				if(_e12[0] > _e12[1] - 1) {
					_e12[1] = _e12[0];
				}
				return pos_6;
			};
			var _e13 = verts;
			var tmp3 = function() {
				return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(_e13);
			};
			var _e14 = verts;
			var tmp4 = function(id) {
				return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_size(_e14,id);
			};
			this.pen = new trilateral2_Pen({ triangle : function(ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
				return geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.triangle(_e,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
			}, transform : function(m) {
				geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(_e1,m);
			}, transformRange : function(m1,start,end) {
				geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformRange(_e2,m1,start,end);
			}, next : function() {
				var pos_7 = _e3[0] + 1.;
				_e3[0] = pos_7;
				if(_e3[0] > _e3[1] - 1) {
					_e3[1] = _e3[0];
				}
				return _e3[0];
			}, hasNext : function() {
				return _e4[0] < geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(_e4);
			}, get_pos : function() {
				return _e5[0];
			}, set_pos : function(pos_8) {
				_e6[0] = pos_8;
				if(_e6[0] > _e6[1] - 1) {
					_e6[1] = _e6[0];
				}
				return pos_8;
			}, get_size : function() {
				return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(_e7);
			}, set_size : function(id1) {
				return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_size(_e8,id1);
			}},{ cornerColors : tmp, colorTriangles : tmp1, get_pos : function() {
				return _e11[0];
			}, set_pos : tmp2, get_size : tmp3, set_size : tmp4});
			this.pen.transformMatrix = this.scaleToGL();
			trilateral2_Shaper.transformMatrix = this.scaleToGL();
			var gridLines = new trilateral2Lime_GridLines(this.pen,600);
			gridLines.draw(10,60226304,-258540557);
			var tmp5 = this.verts;
			var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
			var this3 = this2;
			var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-0.2);
			var s = this4;
			var this5 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
			geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(tmp5,this5);
			var die = new trilateral2Lime_Die(this.pen);
			this.startEnd = die.create(300.,300.);
			break;
		default:
		}
		this.start = true;
	}
	,updateDie: function() {
		var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
		var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
		var this3 = new geom_structure_DualQ(this1,this2);
		var modelDie = this3;
		modelDie = this.itemModel.updateCalculate(modelDie);
		var a = modelDie.real;
		var b = modelDie.real;
		var mag = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
		var q;
		if(mag < 0) {
			q = null;
		} else {
			var oneOver = 1 / mag;
			var a1 = modelDie.real;
			var this4 = new geom_structure_Mat1x4(a1.x * oneOver,a1.y * oneOver,a1.z * oneOver,a1.w * oneOver);
			var a2 = modelDie.dual;
			var this5 = new geom_structure_Mat1x4(a2.x * oneOver,a2.y * oneOver,a2.z * oneOver,a2.w * oneOver);
			var this6 = new geom_structure_DualQ(this4,this5);
			q = this6;
		}
		var this7 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var m = this7;
		var w = q.real.w;
		var x = q.real.x;
		var y = q.real.y;
		var z = q.real.z;
		m.a = w * w + x * x - y * y - z * z;
		m.e = 2 * x * y + 2 * w * z;
		m.i = 2 * x * z - 2 * w * y;
		m.b = 2 * x * y - 2 * w * z;
		m.f = w * w + y * y - x * x - z * z;
		m.j = 2 * y * z + 2 * w * x;
		m.c = 2 * x * z + 2 * w * y;
		m.g = 2 * y * z - 2 * w * x;
		m.k = w * w + z * z - x * x - y * y;
		var a3 = q.dual;
		var this8 = new geom_structure_Mat1x4(a3.x * 2.,a3.y * 2.,a3.z * 2.,a3.w * 2.);
		var q1 = this8;
		var a4 = q.real;
		var this9 = new geom_structure_Mat1x4(-a4.x,-a4.y,-a4.z,a4.w);
		var q2 = this9;
		var this10 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
		q1 = this10;
		var this11 = new geom_structure_Mat1x4(q1.x,q1.y,q1.z,1.);
		var t = this11;
		m.d = t.x;
		m.h = t.y;
		m.l = t.z;
		var trans = m;
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformRange(this.verts,trans,this.startEnd.start,this.startEnd.end);
		this.uploadVectors();
	}
	,render: function(context) {
		if(!this.start) {
			return;
		}
		switch(context.type) {
		case "cairo":
			break;
		case "canvas":
			break;
		case "dom":
			break;
		case "flash":
			break;
		case "opengl":case "opengles":case "webgl":
			this.gl.viewport(0,0,this.__window.__width,this.__window.__height);
			if(this.DEPTH_TEST) {
				this.gl.enable(this.gl.DEPTH_TEST);
			}
			this.gl.depthMask(false);
			if(this.CULL_FACE) {
				this.gl.enable(this.gl.CULL_FACE);
			}
			if(this.BACK) {
				this.gl.cullFace(this.gl.BACK);
			}
			this.gl.colorMask(false,false,false,true);
			var r = (context.attributes.background >> 16 & 255) / 255;
			var g = (context.attributes.background >> 8 & 255) / 255;
			var b = (context.attributes.background & 255) / 255;
			var a = (context.attributes.background >> 24 & 255) / 255;
			this.gl.clearColor(r,g,b,a);
			this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			var modelViewProjectionID = this.gl.getUniformLocation(this.glProgram,"modelViewProjection");
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(this.gl,modelViewProjectionID,false,this.matrix32Array);
			this.gl.drawArrays(this.gl.TRIANGLES,0,this.indices.length);
			break;
		default:
		}
	}
	,update: function(deltaTime) {
		if(!this.start) {
			return;
		}
		this.updateDie();
		this.model = this.axisModel.updateCalculate(this.model);
		var q1 = this.offset;
		var q2 = this.model;
		var q11 = q2.real;
		var q21 = q1.real;
		var this1 = new geom_structure_Mat1x4(q11.x * q21.w + q11.y * q21.z - q11.z * q21.y + q11.w * q21.x,-q11.x * q21.z + q11.y * q21.w + q11.z * q21.x + q11.w * q21.y,q11.x * q21.y - q11.y * q21.x + q11.z * q21.w + q11.w * q21.z,-q11.x * q21.x - q11.y * q21.y - q11.z * q21.z + q11.w * q21.w);
		var q12 = q2.dual;
		var q22 = q1.real;
		var this2 = new geom_structure_Mat1x4(q12.x * q22.w + q12.y * q22.z - q12.z * q22.y + q12.w * q22.x,-q12.x * q22.z + q12.y * q22.w + q12.z * q22.x + q12.w * q22.y,q12.x * q22.y - q12.y * q22.x + q12.z * q22.w + q12.w * q22.z,-q12.x * q22.x - q12.y * q22.y - q12.z * q22.z + q12.w * q22.w);
		var a = this2;
		var q13 = q1.dual;
		var q23 = q2.real;
		var this3 = new geom_structure_Mat1x4(q13.x * q23.w + q13.y * q23.z - q13.z * q23.y + q13.w * q23.x,-q13.x * q23.z + q13.y * q23.w + q13.z * q23.x + q13.w * q23.y,q13.x * q23.y - q13.y * q23.x + q13.z * q23.w + q13.w * q23.z,-q13.x * q23.x - q13.y * q23.y - q13.z * q23.z + q13.w * q23.w);
		var b = this3;
		var this4 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
		var this5 = new geom_structure_DualQ(this1,this4);
		var this6 = this5;
		var a1 = this6.real;
		var b1 = this6.real;
		var mag = a1.x * b1.x + a1.y * b1.y + a1.z * b1.z + a1.w * b1.w;
		var this7;
		if(mag < 0) {
			this7 = null;
		} else {
			var oneOver = 1 / mag;
			var a2 = this6.real;
			var this8 = new geom_structure_Mat1x4(a2.x * oneOver,a2.y * oneOver,a2.z * oneOver,a2.w * oneOver);
			var a3 = this6.dual;
			var this9 = new geom_structure_Mat1x4(a3.x * oneOver,a3.y * oneOver,a3.z * oneOver,a3.w * oneOver);
			var this10 = new geom_structure_DualQ(this8,this9);
			this7 = this10;
		}
		var a4 = this7.real;
		var b2 = this7.real;
		var mag1 = a4.x * b2.x + a4.y * b2.y + a4.z * b2.z + a4.w * b2.w;
		var q;
		if(mag1 < 0) {
			q = null;
		} else {
			var oneOver1 = 1 / mag1;
			var a5 = this7.real;
			var this11 = new geom_structure_Mat1x4(a5.x * oneOver1,a5.y * oneOver1,a5.z * oneOver1,a5.w * oneOver1);
			var a6 = this7.dual;
			var this12 = new geom_structure_Mat1x4(a6.x * oneOver1,a6.y * oneOver1,a6.z * oneOver1,a6.w * oneOver1);
			var this13 = new geom_structure_DualQ(this11,this12);
			q = this13;
		}
		var this14 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var m = this14;
		var w = q.real.w;
		var x = q.real.x;
		var y = q.real.y;
		var z = q.real.z;
		m.a = w * w + x * x - y * y - z * z;
		m.e = 2 * x * y + 2 * w * z;
		m.i = 2 * x * z - 2 * w * y;
		m.b = 2 * x * y - 2 * w * z;
		m.f = w * w + y * y - x * x - z * z;
		m.j = 2 * y * z + 2 * w * x;
		m.c = 2 * x * z + 2 * w * y;
		m.g = 2 * y * z - 2 * w * x;
		m.k = w * w + z * z - x * x - y * y;
		var a7 = q.dual;
		var this15 = new geom_structure_Mat1x4(a7.x * 2.,a7.y * 2.,a7.z * 2.,a7.w * 2.);
		var q3 = this15;
		var a8 = q.real;
		var this16 = new geom_structure_Mat1x4(-a8.x,-a8.y,-a8.z,a8.w);
		var q24 = this16;
		var this17 = new geom_structure_Mat1x4(q3.x * q24.w + q3.y * q24.z - q3.z * q24.y + q3.w * q24.x,-q3.x * q24.z + q3.y * q24.w + q3.z * q24.x + q3.w * q24.y,q3.x * q24.y - q3.y * q24.x + q3.z * q24.w + q3.w * q24.z,-q3.x * q24.x - q3.y * q24.y - q3.z * q24.z + q3.w * q24.w);
		q3 = this17;
		var this18 = new geom_structure_Mat1x4(q3.x,q3.y,q3.z,1.);
		var t = this18;
		m.d = t.x;
		m.h = t.y;
		m.l = t.z;
		var trans = m;
		var scale = 1 / Math.tan(0.785398163395);
		var dif = 99.9;
		var this19 = new geom_structure_Mat4x4(scale,0.,0.,0.,0.,scale,0.,0.,0.,0.,-100. / dif,-10. / dif,0.,0.,-1.,0.);
		var r = this19;
		var this20 = new geom_structure_Mat4x4(trans.a,trans.b,trans.c,trans.d,trans.e,trans.f,trans.g,trans.h,trans.i,trans.j,trans.k,trans.l,0.,0.,0.,1.);
		var s = this20;
		var this21 = new geom_structure_Mat4x4(r.a * s.a + r.b * s.e + r.c * s.i + r.d * s.m,r.a * s.b + r.b * s.f + r.c * s.j + r.d * s.n,r.a * s.c + r.b * s.g + r.c * s.k + r.d * s.o,r.a * s.d + r.b * s.h + r.c * s.l + r.d * s.p,r.e * s.a + r.f * s.e + r.g * s.i + r.h * s.m,r.e * s.b + r.f * s.f + r.g * s.j + r.h * s.n,r.e * s.c + r.f * s.g + r.g * s.k + r.h * s.o,r.e * s.d + r.f * s.h + r.g * s.l + r.h * s.p,r.i * s.a + r.j * s.e + r.k * s.i + r.l * s.m,r.i * s.b + r.j * s.f + r.k * s.j + r.l * s.n,r.i * s.c + r.j * s.g + r.k * s.k + r.l * s.o,r.i * s.d + r.j * s.h + r.k * s.l + r.l * s.p,r.m * s.a + r.n * s.e + r.o * s.i + r.p * s.m,r.m * s.b + r.n * s.f + r.o * s.j + r.p * s.n,r.m + s.c + r.n * s.g + r.o * s.k + r.p * s.o,r.m * s.d + r.n * s.h + r.o * s.l + r.p * s.p);
		var arr = this.matrix32Array;
		var here = this21;
		arr[0] = here.a;
		arr[1] = here.e;
		arr[2] = here.i;
		arr[3] = here.m;
		arr[4] = here.b;
		arr[5] = here.f;
		arr[6] = here.j;
		arr[7] = here.n;
		arr[8] = here.c;
		arr[9] = here.g;
		arr[10] = here.k;
		arr[11] = here.o;
		arr[12] = here.d;
		arr[13] = here.h;
		arr[14] = here.l;
		arr[15] = here.p;
	}
	,transformVerticesToGL: function() {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformAll(this.verts,this.scaleToGL());
	}
	,scaleToGL: function() {
		this.scale = 0.00166666666666666677;
		var this1 = new geom_structure_Mat1x4(this.scale,-this.scale,this.scale,1.);
		var v = this1;
		var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this3 = this2;
		var this4 = new geom_structure_Mat4x3(1.,0.,0.,-1.,0.,1.,0.,1.,0.,0.,1.,0.);
		var s = this4;
		var this5 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
		var this6 = this5;
		var this7 = new geom_structure_Mat4x3(this6.a * v.x,this6.b,this6.c,this6.d,this6.e,this6.f * v.y,this6.g,this6.h,this6.i,this6.j,this6.k * v.z,this6.l);
		return this7;
	}
	,reloadVectors: function() {
		var this1 = this.verts;
		this.vertices = this1.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) * 9 + 2);
		var this2 = this.cols;
		this.colors = this2.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this2) * 4 + 2);
		var this3 = this.textPos;
		var texs = this3.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this3) * 6 + 2);
		var this4 = new Float32Array(Main.largeEnough + 2);
		var this5 = this4;
		this5[0] = 0.;
		this5[1] = 0.;
		var this6 = this5;
		var this7 = this6;
		this.verts = this7;
		var this8 = new Float32Array(Main.largeEnough + 2);
		var this9 = this8;
		this9[0] = 0.;
		this9[1] = 0.;
		var this10 = this9;
		var this11 = this10;
		this.cols = this11;
		var gl = this.gl;
		var indices = this.indices;
		var indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,indices,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);
		var gl1 = this.gl;
		var program = this.glProgram;
		var vertices = this.vertices;
		var colors = this.colors;
		var texture = null;
		var name = Main.posName;
		var number = gl1.FLOAT;
		var buffer = gl1.createBuffer();
		var arrBuffer = gl1.ARRAY_BUFFER;
		gl1.bindBuffer(arrBuffer,buffer);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl1,arrBuffer,vertices,gl1.STATIC_DRAW);
		var flo = gl1.getAttribLocation(program,name);
		gl1.vertexAttribPointer(flo,3,number,false,0,0);
		gl1.enableVertexAttribArray(flo);
		gl1.bindBuffer(arrBuffer,null);
		var name1 = Main.colorName;
		var number1 = gl1.FLOAT;
		var buffer1 = gl1.createBuffer();
		var arrBuffer1 = gl1.ARRAY_BUFFER;
		gl1.bindBuffer(arrBuffer1,buffer1);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl1,arrBuffer1,colors,gl1.STATIC_DRAW);
		var flo1 = gl1.getAttribLocation(program,name1);
		gl1.vertexAttribPointer(flo1,4,number1,false,0,0);
		gl1.enableVertexAttribArray(flo1);
		gl1.bindBuffer(arrBuffer1,null);
		if(texture != null) {
			var name2 = Main.textureName;
			var number2 = gl1.FLOAT;
			var buffer2 = gl1.createBuffer();
			var arrBuffer2 = gl1.ARRAY_BUFFER;
			gl1.bindBuffer(arrBuffer2,buffer2);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl1,arrBuffer2,texture,gl1.STATIC_DRAW);
			var flo2 = gl1.getAttribLocation(program,name2);
			gl1.vertexAttribPointer(flo2,2,number2,false,0,0);
			gl1.enableVertexAttribArray(flo2);
			gl1.bindBuffer(arrBuffer2,null);
		}
	}
	,uploadVectors: function() {
		var this1 = this.verts;
		this.vertices = this1.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) * 9 + 2);
		var this2 = this.cols;
		this.colors = this2.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this2) * 4 + 2);
		var this3 = this.textPos;
		var texs = this3.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this3) * 6 + 2);
		this.indices = this.createIndices();
		var gl = this.gl;
		var indices = this.indices;
		var indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,indices,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);
		var gl1 = this.gl;
		var program = this.glProgram;
		var vertices = this.vertices;
		var colors = this.colors;
		var texture = null;
		var name = Main.posName;
		var number = gl1.FLOAT;
		var buffer = gl1.createBuffer();
		var arrBuffer = gl1.ARRAY_BUFFER;
		gl1.bindBuffer(arrBuffer,buffer);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl1,arrBuffer,vertices,gl1.STATIC_DRAW);
		var flo = gl1.getAttribLocation(program,name);
		gl1.vertexAttribPointer(flo,3,number,false,0,0);
		gl1.enableVertexAttribArray(flo);
		gl1.bindBuffer(arrBuffer,null);
		var name1 = Main.colorName;
		var number1 = gl1.FLOAT;
		var buffer1 = gl1.createBuffer();
		var arrBuffer1 = gl1.ARRAY_BUFFER;
		gl1.bindBuffer(arrBuffer1,buffer1);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl1,arrBuffer1,colors,gl1.STATIC_DRAW);
		var flo1 = gl1.getAttribLocation(program,name1);
		gl1.vertexAttribPointer(flo1,4,number1,false,0,0);
		gl1.enableVertexAttribArray(flo1);
		gl1.bindBuffer(arrBuffer1,null);
		if(texture != null) {
			var name2 = Main.textureName;
			var number2 = gl1.FLOAT;
			var buffer2 = gl1.createBuffer();
			var arrBuffer2 = gl1.ARRAY_BUFFER;
			gl1.bindBuffer(arrBuffer2,buffer2);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl1,arrBuffer2,texture,gl1.STATIC_DRAW);
			var flo2 = gl1.getAttribLocation(program,name2);
			gl1.vertexAttribPointer(flo2,2,number2,false,0,0);
			gl1.enableVertexAttribArray(flo2);
			gl1.bindBuffer(arrBuffer2,null);
		}
	}
	,createIndices: function() {
		var this1 = this.ind;
		this1[0] = 0;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
		var _g = 0;
		var _g1 = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this.verts);
		while(_g < _g1) {
			var i = _g++;
			var this2 = this.ind;
			var v = i * 3;
			this2[this2[0] * 3 + 2] = v;
			var this3 = this.ind;
			var v1 = i * 3 + 1;
			this3[this3[0] * 3 + 1 + 2] = v1;
			var this4 = this.ind;
			var v2 = i * 3 + 2;
			this4[this4[0] * 3 + 2 + 2] = v2;
			var this5 = this.ind;
			var pos_ = this5[0] + 1;
			this5[0] = pos_;
			if(this5[0] > this5[1] - 1) {
				this5[1] = this5[0];
			}
		}
		var this6 = this.ind;
		var arr = this6.subarray(2,this6[1] * 3 + 2);
		return arr;
	}
	,clearTriangles: function() {
		var this1 = new Float32Array(Main.largeEnough + 2);
		var this2 = this1;
		this2[0] = 0.;
		this2[1] = 0.;
		var this3 = this2;
		var this4 = this3;
		this.verts = this4;
		var this5 = new Float32Array(Main.largeEnough + 2);
		var this6 = this5;
		this6[0] = 0.;
		this6[1] = 0.;
		var this7 = this6;
		var this8 = this7;
		this.cols = this8;
	}
	,clearVerticesAndColors: function() {
		var vl = this.vertices.length;
		var il = this.indices.length;
		var cl = this.colors.length;
		var this1 = new Float32Array(vl);
		this.vertices = this1;
		var this2 = new Int32Array(il);
		this.indices = this2;
		var this3 = new Float32Array(cl);
		this.colors = this3;
	}
	,onKeyDown: function(key,modifier) {
		if(!this.start) {
			return;
		}
		var k = key;
		if(k == 1073742048) {
			var v = 1.;
			var _this = this.axisModel.rz;
			_this.trinary.set_trit(v);
			if(_this.trinary.changed) {
				if(v == 0.) {
					_this.value = 0.;
				} else {
					var f = v;
					_this.value = -f * _this.step;
				}
			}
		} else if(k == 1073742050) {
			var v1 = -1.;
			var _this1 = this.axisModel.rz;
			_this1.trinary.set_trit(v1);
			if(_this1.trinary.changed) {
				if(v1 == 0.) {
					_this1.value = 0.;
				} else {
					var f1 = v1;
					_this1.value = -f1 * _this1.step;
				}
			}
		} else {
			var v2 = 0.;
			var _this2 = this.axisModel.rz;
			_this2.trinary.set_trit(v2);
			if(_this2.trinary.changed) {
				if(v2 == 0.) {
					_this2.value = 0.;
				} else {
					var f2 = v2;
					_this2.value = -f2 * _this2.step;
				}
			}
		}
		if(k == 9) {
			var v3 = -1.;
			var _this3 = this.axisModel.ty;
			_this3.trinary.set_trit(v3);
			if(_this3.trinary.changed) {
				if(v3 == 0.) {
					_this3.value = 0.;
				} else {
					var f3 = v3;
					_this3.value = -f3 * _this3.step;
				}
			}
		} else if(k == 1073742049) {
			var v4 = 1.;
			var _this4 = this.axisModel.ty;
			_this4.trinary.set_trit(v4);
			if(_this4.trinary.changed) {
				if(v4 == 0.) {
					_this4.value = 0.;
				} else {
					var f4 = v4;
					_this4.value = -f4 * _this4.step;
				}
			}
		} else {
			var v5 = 0.;
			var _this5 = this.axisModel.ty;
			_this5.trinary.set_trit(v5);
			if(_this5.trinary.changed) {
				if(v5 == 0.) {
					_this5.value = 0.;
				} else {
					var f5 = v5;
					_this5.value = -f5 * _this5.step;
				}
			}
		}
		if(k == 32) {
			var v6 = -1.;
			var _this6 = this.axisModel.tx;
			_this6.trinary.set_trit(v6);
			if(_this6.trinary.changed) {
				if(v6 == 0.) {
					_this6.value = 0.;
				} else {
					var f6 = v6;
					_this6.value = -f6 * _this6.step;
				}
			}
		} else if(k == 1073742052) {
			var v7 = 1.;
			var _this7 = this.axisModel.tx;
			_this7.trinary.set_trit(v7);
			if(_this7.trinary.changed) {
				if(v7 == 0.) {
					_this7.value = 0.;
				} else {
					var f7 = v7;
					_this7.value = -f7 * _this7.step;
				}
			}
		} else {
			var v8 = 0.;
			var _this8 = this.axisModel.tx;
			_this8.trinary.set_trit(v8);
			if(_this8.trinary.changed) {
				if(v8 == 0.) {
					_this8.value = 0.;
				} else {
					var f8 = v8;
					_this8.value = -f8 * _this8.step;
				}
			}
		}
		if(k == 127) {
			var v9 = -1.;
			var _this9 = this.axisModel.tz;
			_this9.trinary.set_trit(v9);
			if(_this9.trinary.changed) {
				if(v9 == 0.) {
					_this9.value = 0.;
				} else {
					var f9 = v9;
					_this9.value = -f9 * _this9.step;
				}
			}
		} else if(k == 13) {
			var v10 = 1.;
			var _this10 = this.axisModel.tz;
			_this10.trinary.set_trit(v10);
			if(_this10.trinary.changed) {
				if(v10 == 0.) {
					_this10.value = 0.;
				} else {
					var f10 = v10;
					_this10.value = -f10 * _this10.step;
				}
			}
		} else {
			var v11 = 0.;
			var _this11 = this.axisModel.tz;
			_this11.trinary.set_trit(v11);
			if(_this11.trinary.changed) {
				if(v11 == 0.) {
					_this11.value = 0.;
				} else {
					var f11 = v11;
					_this11.value = -f11 * _this11.step;
				}
			}
		}
		if(k == 1073741904) {
			var v12 = -1.;
			var _this12 = this.axisModel.ry;
			_this12.trinary.set_trit(v12);
			if(_this12.trinary.changed) {
				if(v12 == 0.) {
					_this12.value = 0.;
				} else {
					var f12 = v12;
					_this12.value = -f12 * _this12.step;
				}
			}
		} else if(k == 1073741903) {
			var v13 = 1.;
			var _this13 = this.axisModel.ry;
			_this13.trinary.set_trit(v13);
			if(_this13.trinary.changed) {
				if(v13 == 0.) {
					_this13.value = 0.;
				} else {
					var f13 = v13;
					_this13.value = -f13 * _this13.step;
				}
			}
		} else {
			var v14 = 0.;
			var _this14 = this.axisModel.ry;
			_this14.trinary.set_trit(v14);
			if(_this14.trinary.changed) {
				if(v14 == 0.) {
					_this14.value = 0.;
				} else {
					var f14 = v14;
					_this14.value = -f14 * _this14.step;
				}
			}
		}
		if(k == 1073741906) {
			var v15 = -1.;
			var _this15 = this.axisModel.rx;
			_this15.trinary.set_trit(v15);
			if(_this15.trinary.changed) {
				if(v15 == 0.) {
					_this15.value = 0.;
				} else {
					var f15 = v15;
					_this15.value = -f15 * _this15.step;
				}
			}
		} else if(k == 1073741905) {
			var v16 = 1.;
			var _this16 = this.axisModel.rx;
			_this16.trinary.set_trit(v16);
			if(_this16.trinary.changed) {
				if(v16 == 0.) {
					_this16.value = 0.;
				} else {
					var f16 = v16;
					_this16.value = -f16 * _this16.step;
				}
			}
		} else {
			var v17 = 0.;
			var _this17 = this.axisModel.rx;
			_this17.trinary.set_trit(v17);
			if(_this17.trinary.changed) {
				if(v17 == 0.) {
					_this17.value = 0.;
				} else {
					var f17 = v17;
					_this17.value = -f17 * _this17.step;
				}
			}
		}
		if(k == 114 || k == 112) {
			var _this18 = this.axisModel;
			_this18.rx.value = 0.;
			_this18.ry.value = 0.;
			_this18.rz.value = 0.;
			_this18.tx.value = 0.;
			_this18.ty.value = 0.;
			_this18.tz.value = 0.;
			this.resetPosition();
		}
		if(k == 97) {
			this.swapAxisModel();
		}
		haxe_Log.trace(this.axisModel,{ fileName : "Source/Main.hx", lineNumber : 390, className : "Main", methodName : "onKeyDown"});
	}
	,swapAxisModel: function() {
		this.sceneTransform = !this.sceneTransform;
		if(this.sceneTransform) {
			this.axisModel = this.sceneModel;
		} else {
			this.axisModel = this.itemModel;
		}
	}
	,__class__: Main
});
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	var bundle;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy17:assets%2Flime.pngy4:sizei38023y4:typey5:IMAGEy2:idR1y7:preloadtgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var fracs_DifferencePreference = $hxEnums["fracs.DifferencePreference"] = { __ename__ : "fracs.DifferencePreference", __constructs__ : ["CLOCKWISE","ANTICLOCKWISE","SMALL","LARGE"]
	,CLOCKWISE: {_hx_index:0,__enum__:"fracs.DifferencePreference",toString:$estr}
	,ANTICLOCKWISE: {_hx_index:1,__enum__:"fracs.DifferencePreference",toString:$estr}
	,SMALL: {_hx_index:2,__enum__:"fracs.DifferencePreference",toString:$estr}
	,LARGE: {_hx_index:3,__enum__:"fracs.DifferencePreference",toString:$estr}
};
var fracs_Angles = function() { };
$hxClasses["fracs.Angles"] = fracs_Angles;
fracs_Angles.__name__ = "fracs.Angles";
fracs_Angles.pi2pi = function(angle) {
	if(angle <= Math.PI && angle > -Math.PI) {
		return angle;
	} else {
		var a = (angle + Math.PI) % (2 * Math.PI);
		if(a >= 0) {
			return a - Math.PI;
		} else {
			return a + Math.PI;
		}
	}
};
fracs_Angles.zeroto2pi = function(angle) {
	if(angle >= 0 && angle > Math.PI) {
		return angle;
	} else {
		var a = angle % (2 * Math.PI);
		if(a >= 0) {
			return a;
		} else {
			return a + 2 * Math.PI;
		}
	}
};
fracs_Angles.zerotoMinus2pi = function(angle) {
	if(angle <= 0 && angle > -Math.PI) {
		return angle;
	} else {
		var a = angle % (2 * Math.PI);
		var a1 = a >= 0 ? a : a + 2 * Math.PI;
		return -(Math.PI * 2 - a1);
	}
};
fracs_Angles.differencePrefer = function(a,b,prefer) {
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(a >= 0 && a > Math.PI) {
			f = a;
		} else {
			var a1 = a % (2 * Math.PI);
			f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f1;
		if(b >= 0 && b > Math.PI) {
			f1 = b;
		} else {
			var a2 = b % (2 * Math.PI);
			f1 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
		}
		var this2 = f1;
		var zb = this2;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif = clockwise ? theta : -theta;
		if(dif > 0) {
			return dif;
		} else {
			return 2 * Math.PI + dif;
		}
		break;
	case 1:
		var f2;
		if(a >= 0 && a > Math.PI) {
			f2 = a;
		} else {
			var a3 = a % (2 * Math.PI);
			f2 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
		}
		var this3 = f2;
		var za1 = this3;
		var f3;
		if(b >= 0 && b > Math.PI) {
			f3 = b;
		} else {
			var a4 = b % (2 * Math.PI);
			f3 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
		}
		var this4 = f3;
		var zb1 = this4;
		var fa1 = za1;
		var fb1 = zb1;
		var theta1 = Math.abs(fa1 - fb1);
		var clockwise1 = fa1 < fb1;
		var dif1 = clockwise1 ? theta1 : -theta1;
		if(dif1 < 0) {
			return dif1;
		} else {
			return -2 * Math.PI + dif1;
		}
		break;
	case 2:
		var f4;
		if(a >= 0 && a > Math.PI) {
			f4 = a;
		} else {
			var a5 = a % (2 * Math.PI);
			f4 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
		}
		var this5 = f4;
		var za2 = this5;
		var f5;
		if(b >= 0 && b > Math.PI) {
			f5 = b;
		} else {
			var a6 = b % (2 * Math.PI);
			f5 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
		}
		var this6 = f5;
		var zb2 = this6;
		var fa2 = za2;
		var fb2 = zb2;
		var theta2 = Math.abs(fa2 - fb2);
		var smallest = theta2 <= Math.PI;
		var clockwise2 = fa2 < fb2;
		var dif2 = clockwise2 ? theta2 : -theta2;
		if(smallest) {
			return dif2;
		} else if(clockwise2) {
			return -(2 * Math.PI - theta2);
		} else {
			return 2 * Math.PI - theta2;
		}
		break;
	case 3:
		var f6;
		if(a >= 0 && a > Math.PI) {
			f6 = a;
		} else {
			var a7 = a % (2 * Math.PI);
			f6 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
		}
		var this7 = f6;
		var za3 = this7;
		var f7;
		if(b >= 0 && b > Math.PI) {
			f7 = b;
		} else {
			var a8 = b % (2 * Math.PI);
			f7 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
		}
		var this8 = f7;
		var zb3 = this8;
		var fa3 = za3;
		var fb3 = zb3;
		var theta3 = Math.abs(fa3 - fb3);
		var largest = theta3 > Math.PI;
		var clockwise3 = fa3 < fb3;
		var dif3 = clockwise3 ? theta3 : -theta3;
		if(largest) {
			return dif3;
		} else if(clockwise3) {
			return -(2 * Math.PI - theta3);
		} else {
			return 2 * Math.PI - theta3;
		}
		break;
	}
};
fracs_Angles.difference = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f1;
	if(b >= 0 && b > Math.PI) {
		f1 = b;
	} else {
		var a2 = b % (2 * Math.PI);
		f1 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
	}
	var this2 = f1;
	var zb = this2;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var clockwise = fa < fb;
	if(clockwise) {
		return theta;
	} else {
		return -theta;
	}
};
fracs_Angles.differenceClockWise = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f1;
	if(b >= 0 && b > Math.PI) {
		f1 = b;
	} else {
		var a2 = b % (2 * Math.PI);
		f1 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
	}
	var this2 = f1;
	var zb = this2;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	if(dif > 0) {
		return dif;
	} else {
		return 2 * Math.PI + dif;
	}
};
fracs_Angles.differenceAntiClockwise = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f1;
	if(b >= 0 && b > Math.PI) {
		f1 = b;
	} else {
		var a2 = b % (2 * Math.PI);
		f1 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
	}
	var this2 = f1;
	var zb = this2;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	if(dif < 0) {
		return dif;
	} else {
		return -2 * Math.PI + dif;
	}
};
fracs_Angles.differenceSmall = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f1;
	if(b >= 0 && b > Math.PI) {
		f1 = b;
	} else {
		var a2 = b % (2 * Math.PI);
		f1 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
	}
	var this2 = f1;
	var zb = this2;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var smallest = theta <= Math.PI;
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	if(smallest) {
		return dif;
	} else if(clockwise) {
		return -(2 * Math.PI - theta);
	} else {
		return 2 * Math.PI - theta;
	}
};
fracs_Angles.differenceLarge = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f1;
	if(b >= 0 && b > Math.PI) {
		f1 = b;
	} else {
		var a2 = b % (2 * Math.PI);
		f1 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
	}
	var this2 = f1;
	var zb = this2;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var largest = theta > Math.PI;
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	if(largest) {
		return dif;
	} else if(clockwise) {
		return -(2 * Math.PI - theta);
	} else {
		return 2 * Math.PI - theta;
	}
};
fracs_Angles.differenceSmallLarge = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f1;
	if(b >= 0 && b > Math.PI) {
		f1 = b;
	} else {
		var a2 = b % (2 * Math.PI);
		f1 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
	}
	var this2 = f1;
	var zb = this2;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var smallest = theta <= Math.PI;
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	var other = clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
	if(smallest) {
		return { small : dif, large : other};
	} else {
		return { small : other, large : dif};
	}
};
var fracs__$Fraction_FractionArray_$Impl_$ = {};
$hxClasses["fracs._Fraction.FractionArray_Impl_"] = fracs__$Fraction_FractionArray_$Impl_$;
fracs__$Fraction_FractionArray_$Impl_$.__name__ = "fracs._Fraction.FractionArray_Impl_";
fracs__$Fraction_FractionArray_$Impl_$._new = function(val) {
	var this1 = val == null ? [] : val;
	return this1;
};
fracs__$Fraction_FractionArray_$Impl_$.add = function(this1,val) {
	this1[this1.length] = val;
};
fracs__$Fraction_FractionArray_$Impl_$.toString = function(this1) {
	var l = this1.length;
	var str = "";
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var this2 = this1[i];
		var n = this2.numerator;
		var d = this2.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? this2.positive ? "" + n : "-" + n : this2.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		str = str + "\n" + out;
	}
	return str;
};
var fracs__$Fraction_Fraction_$Impl_$ = {};
$hxClasses["fracs._Fraction.Fraction_Impl_"] = fracs__$Fraction_Fraction_$Impl_$;
fracs__$Fraction_Fraction_$Impl_$.__name__ = "fracs._Fraction.Fraction_Impl_";
fracs__$Fraction_Fraction_$Impl_$._new = function(numerator,denominator,positive,value) {
	if(positive == null) {
		positive = true;
	}
	var numNeg = numerator < 0;
	var denoNeg = denominator < 0;
	if(value == null) {
		value = positive ? numerator / denominator : -numerator / denominator;
	}
	if(numNeg || denoNeg) {
		if(!(numNeg && denoNeg)) {
			positive = !positive;
		}
		if(numNeg) {
			numerator = -numerator;
		}
		if(denoNeg) {
			denominator = -denominator;
		}
	}
	var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
	return this1;
};
fracs__$Fraction_Fraction_$Impl_$.optimize = function(this1) {
	var f = this1.value;
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac1 = arr[i];
		fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac1;
		}
	}
	return fracStore;
};
fracs__$Fraction_Fraction_$Impl_$.optimizeFraction = function(this1) {
	var f = this1.positive ? this1.numerator / this1.denominator : -this1.numerator / this1.denominator;
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac1 = arr[i];
		fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac1;
		}
	}
	return fracStore;
};
fracs__$Fraction_Fraction_$Impl_$.toFloat = function(this1) {
	if(this1.positive) {
		return this1.numerator / this1.denominator;
	} else {
		return -this1.numerator / this1.denominator;
	}
};
fracs__$Fraction_Fraction_$Impl_$.float = function(this1) {
	return this1.value;
};
fracs__$Fraction_Fraction_$Impl_$.verbose = function(this1) {
	return "{ numerator:" + this1.numerator + ", denominator: " + this1.denominator + ", positive: " + (this1.positive == null ? "null" : "" + this1.positive) + ", value: " + this1.value + " }";
};
fracs__$Fraction_Fraction_$Impl_$.fromString = function(val) {
	var i = val.indexOf("/");
	var frac;
	if(i != -1) {
		var numerator = Std.parseInt(HxOverrides.substr(val,0,i));
		var denominator = Std.parseInt(HxOverrides.substr(val,i + 1,val.length));
		var positive = true;
		var value = null;
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive = !positive;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
		frac = this1;
	} else {
		var f = parseFloat(val);
		var arr = fracs_Fracs.approximateFractions(f);
		var dist = Infinity;
		var dif;
		var l = arr.length;
		var fracFloat;
		var frac1;
		var fracStore = arr[0];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i1 = _g++;
			var frac2 = arr[i1];
			fracFloat = frac2.positive ? frac2.numerator / frac2.denominator : -frac2.numerator / frac2.denominator;
			dif = Math.abs(fracFloat - f);
			if(dif < dist) {
				dist = dif;
				fracStore = frac2;
			}
		}
		frac = fracStore;
	}
	return frac;
};
fracs__$Fraction_Fraction_$Impl_$.toString = function(this1) {
	var n = this1.numerator;
	var d = this1.denominator;
	var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? this1.positive ? "" + n : "-" + n : this1.positive ? "" + n + "/" + d : "-" + n + "/" + d;
	return out;
};
fracs__$Fraction_Fraction_$Impl_$.fromFloat = function(f) {
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac1 = arr[i];
		fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac1;
		}
	}
	return fracStore;
};
fracs__$Fraction_Fraction_$Impl_$.firstFloat = function(f) {
	var arr = fracs_Fracs.approximateFractions(f);
	var fracStore = arr[0];
	return fracStore;
};
fracs__$Fraction_Fraction_$Impl_$.byDenominator = function(this1,val) {
	var n = this1.numerator;
	var d = this1.denominator;
	var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? this1.positive ? "" + n : "-" + n : this1.positive ? "" + n + "/" + d : "-" + n + "/" + d;
	var out1 = out;
	if(!(this1.denominator == val || out1 == "0" || out1 == "1")) {
		var dom = Math.round(this1.value * val);
		var numerator = dom;
		var denominator = val;
		var positive = true;
		var value = null;
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive = !positive;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this2 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
		var frac = this2;
		var n1 = frac.numerator;
		var d1 = frac.denominator;
		var out2 = n1 == 0 ? "0" : n1 == d1 ? "1" : d1 == 1 ? frac.positive ? "" + n1 : "-" + n1 : frac.positive ? "" + n1 + "/" + d1 : "-" + n1 + "/" + d1;
		out1 = out2;
	}
	return out1;
};
fracs__$Fraction_Fraction_$Impl_$.all = function(f) {
	return fracs_Fracs.approximateFractions(f);
};
fracs__$Fraction_Fraction_$Impl_$.similarToFraction = function(this1) {
	var f = this1.positive ? this1.numerator / this1.denominator : -this1.numerator / this1.denominator;
	return fracs_Fracs.approximateFractions(f);
};
fracs__$Fraction_Fraction_$Impl_$.similarToValue = function(this1) {
	return fracs_Fracs.approximateFractions(this1.value);
};
var fracs_Fracs = function() { };
$hxClasses["fracs.Fracs"] = fracs_Fracs;
fracs_Fracs.__name__ = "fracs.Fracs";
fracs_Fracs.grabDecimalInput = function(decimalVal) {
	var decimal = Math.abs(parseFloat(decimalVal));
	if(isNaN(decimal)) {
		return 0.;
	} else {
		return decimal;
	}
};
fracs_Fracs.approximateFractions = function(f) {
	var positive = f <= 0 ? false : true;
	var numerators = [0,1];
	var denominators = [1,0];
	var f2 = f <= 0 ? -f : f;
	var fStr = f2 == null ? "null" : "" + f2;
	var digits = "";
	var ix = fStr.indexOf(".");
	if(ix == -1) {
		digits = fStr;
	} else if(ix == 0) {
		digits = HxOverrides.substr(fStr,1,fStr.length);
	} else if(ix < fStr.length) {
		digits = HxOverrides.substr(fStr,0,ix) + HxOverrides.substr(fStr,ix + 1,fStr.length);
	}
	var LStr = digits;
	var numDigits = LStr.length;
	var L2 = f2;
	var numIntDigits = Std.string(L2).length;
	if(L2 == 0) {
		numIntDigits = 0;
	}
	var numDigitsPastDecimal = numDigits - numIntDigits;
	var i = numDigitsPastDecimal;
	var L = parseFloat(digits);
	while(i > 0 && L % 2 == 0) {
		L /= 2;
		--i;
	}
	i = numDigitsPastDecimal;
	while(i > 0 && L % 5 == 0) {
		L /= 5;
		--i;
	}
	var maxNumerator = L;
	var d2 = f2;
	var calcD;
	var prevCalcD = null;
	var val = null;
	var this1 = val == null ? [] : val;
	var arrFraction = this1;
	var j = 0;
	var _g = 2;
	while(_g < 1000) {
		var i1 = _g++;
		var L21 = Math.floor(d2);
		numerators[i1] = L21 * numerators[i1 - 1] + numerators[i1 - 2] | 0;
		if(Math.abs(numerators[i1]) > maxNumerator) {
			break;
		}
		denominators[i1] = L21 * denominators[i1 - 1] + denominators[i1 - 2] | 0;
		calcD = numerators[i1] / denominators[i1];
		if(calcD == prevCalcD) {
			break;
		}
		var numerator = numerators[i1];
		var denominator = denominators[i1];
		var positive1 = positive;
		var value = f;
		if(positive1 == null) {
			positive1 = true;
		}
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive1 ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive1 = !positive1;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this2 = { numerator : numerator, denominator : denominator, positive : positive1, value : value};
		arrFraction[arrFraction.length] = this2;
		if(calcD == f2) {
			break;
		}
		prevCalcD = calcD;
		d2 = 1 / (d2 - L21);
	}
	return arrFraction;
};
fracs_Fracs.getMaxNumerator = function(f) {
	var fStr = f == null ? "null" : "" + f;
	var digits = "";
	var ix = fStr.indexOf(".");
	if(ix == -1) {
		digits = fStr;
	} else if(ix == 0) {
		digits = HxOverrides.substr(fStr,1,fStr.length);
	} else if(ix < fStr.length) {
		digits = HxOverrides.substr(fStr,0,ix) + HxOverrides.substr(fStr,ix + 1,fStr.length);
	}
	var LStr = digits;
	var numDigits = LStr.length;
	var L2 = f;
	var numIntDigits = (L2 == null ? "null" : "" + L2).length;
	if(L2 == 0) {
		numIntDigits = 0;
	}
	var numDigitsPastDecimal = numDigits - numIntDigits;
	var i = numDigitsPastDecimal;
	var L = parseFloat(digits);
	while(i > 0 && L % 2 == 0) {
		L /= 2;
		--i;
	}
	i = numDigitsPastDecimal;
	while(i > 0 && L % 5 == 0) {
		L /= 5;
		--i;
	}
	return L;
};
fracs_Fracs.extractDigitStr = function(fStr) {
	var f2 = "";
	var ixe = fStr.indexOf("E");
	if(ixe == -1) {
		ixe = fStr.indexOf("e");
	}
	if(ixe == -1) {
		f2 = fStr;
	} else {
		f2 = HxOverrides.substr(fStr,0,ixe);
	}
	var digits = "";
	var ix = f2.indexOf(".");
	if(ix == -1) {
		digits = f2;
	} else if(ix == 0) {
		digits = HxOverrides.substr(f2,1,f2.length);
	} else if(ix < f2.length) {
		digits = HxOverrides.substr(f2,0,ix) + HxOverrides.substr(f2,ix + 1,f2.length);
	}
	return digits;
};
fracs_Fracs.getMaxNumeratorStr = function(fStr) {
	var f2 = "";
	var ixe = fStr.indexOf("E");
	if(ixe == -1) {
		ixe = fStr.indexOf("e");
	}
	if(ixe == -1) {
		f2 = fStr;
	} else {
		f2 = HxOverrides.substr(fStr,0,ixe);
	}
	var digits = "";
	var ix = f2.indexOf(".");
	if(ix == -1) {
		digits = f2;
	} else if(ix == 0) {
		digits = HxOverrides.substr(f2,1,f2.length);
	} else if(ix < f2.length) {
		digits = HxOverrides.substr(f2,0,ix) + HxOverrides.substr(f2,ix + 1,f2.length);
	}
	var LStr = digits;
	var numDigits = LStr.length;
	var L2 = fStr;
	var numIntDigits = L2.length;
	if(L2 == "0") {
		numIntDigits = 0;
	}
	var numDigitsPastDecimal = numDigits - numIntDigits;
	var i = numDigitsPastDecimal;
	var L = parseFloat(fStr);
	while(i > 0 && L % 2 == 0) {
		L /= 2;
		--i;
	}
	i = numDigitsPastDecimal;
	while(i > 0 && L % 5 == 0) {
		L /= 5;
		--i;
	}
	return L;
};
var fracs__$Pi2pi_Pi2pi_$Impl_$ = {};
$hxClasses["fracs._Pi2pi.Pi2pi_Impl_"] = fracs__$Pi2pi_Pi2pi_$Impl_$;
fracs__$Pi2pi_Pi2pi_$Impl_$.__name__ = "fracs._Pi2pi.Pi2pi_Impl_";
fracs__$Pi2pi_Pi2pi_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.fromFloat = function(f) {
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.additionPi = function(this1,b) {
	var f = this1 + b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.subtractionPi = function(this1,b) {
	var f = this1 - b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.dividePi = function(this1,b) {
	var f = this1 / b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.timesPi = function(this1,b) {
	var f = this1 * b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.addition = function(this1,b) {
	var f = this1 + b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.subtraction = function(this1,b) {
	var f = this1 - b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.divide = function(this1,b) {
	var f = this1 / b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.times = function(this1,b) {
	var f = this1 * b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.get_degrees = function(this1) {
	return this1 * 180 / Math.PI;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.set_degrees = function(this1,val) {
	this1 = Math.PI * val / 180;
	return val;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.fromFraction = function(val) {
	var f = (val.positive ? val.numerator / val.denominator : -val.numerator / val.denominator) * Math.PI;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.tofraction = function(this1) {
	var f = this1 / Math.PI;
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac1 = arr[i];
		fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac1;
		}
	}
	return fracStore;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.fromString = function(val) {
	var i = val.indexOf("/");
	var frac;
	if(i != -1) {
		var numerator = Std.parseInt(HxOverrides.substr(val,0,i));
		var denominator = Std.parseInt(HxOverrides.substr(val,i + 1,val.length));
		var positive = true;
		var value = null;
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive = !positive;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
		frac = this1;
	} else {
		var f = parseFloat(val);
		var arr = fracs_Fracs.approximateFractions(f);
		var dist = Infinity;
		var dif;
		var l = arr.length;
		var fracFloat;
		var frac1;
		var fracStore = arr[0];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i1 = _g++;
			var frac2 = arr[i1];
			fracFloat = frac2.positive ? frac2.numerator / frac2.denominator : -frac2.numerator / frac2.denominator;
			dif = Math.abs(fracFloat - f);
			if(dif < dist) {
				dist = dif;
				fracStore = frac2;
			}
		}
		frac = fracStore;
	}
	var frac3 = frac;
	var f1 = (frac3.positive ? frac3.numerator / frac3.denominator : -frac3.numerator / frac3.denominator) * Math.PI;
	var f2;
	if(f1 <= Math.PI && f1 > -Math.PI) {
		f2 = f1;
	} else {
		var a = (f1 + Math.PI) % (2 * Math.PI);
		f2 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this2 = f2;
	return this2;
};
fracs__$Pi2pi_Pi2pi_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
var fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$ = {};
$hxClasses["fracs._ZeroTo2pi.ZeroTo2pi_Impl_"] = fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$;
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.__name__ = "fracs._ZeroTo2pi.ZeroTo2pi_Impl_";
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.fromFloat = function(f) {
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.additionPi = function(this1,b) {
	var f = this1 + b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.subtractionPi = function(this1,b) {
	var f = this1 - b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.dividePi = function(this1,b) {
	var f = this1 / b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.timesPi = function(this1,b) {
	var f = this1 * b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.addition = function(this1,b) {
	var f = this1 + b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.subtraction = function(this1,b) {
	var f = this1 - b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.divide = function(this1,b) {
	var f = this1 / b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.times = function(this1,b) {
	var f = this1 * b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this2 = f1;
	return this2;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.get_degrees = function(this1) {
	return this1 * 180 / Math.PI;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.set_degrees = function(this1,val) {
	this1 = Math.PI * val / 180;
	return val;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.fromFraction = function(val) {
	var f = (val.positive ? val.numerator / val.denominator : -val.numerator / val.denominator) * Math.PI;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.tofraction = function(this1) {
	var f = this1 / Math.PI;
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac1 = arr[i];
		fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac1;
		}
	}
	return fracStore;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.fromString = function(val) {
	var i = val.indexOf("/");
	var frac;
	if(i != -1) {
		var numerator = Std.parseInt(HxOverrides.substr(val,0,i));
		var denominator = Std.parseInt(HxOverrides.substr(val,i + 1,val.length));
		var positive = true;
		var value = null;
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive = !positive;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
		frac = this1;
	} else {
		var f = parseFloat(val);
		var arr = fracs_Fracs.approximateFractions(f);
		var dist = Infinity;
		var dif;
		var l = arr.length;
		var fracFloat;
		var frac1;
		var fracStore = arr[0];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i1 = _g++;
			var frac2 = arr[i1];
			fracFloat = frac2.positive ? frac2.numerator / frac2.denominator : -frac2.numerator / frac2.denominator;
			dif = Math.abs(fracFloat - f);
			if(dif < dist) {
				dist = dif;
				fracStore = frac2;
			}
		}
		frac = fracStore;
	}
	var frac3 = frac;
	var f1 = (frac3.positive ? frac3.numerator / frac3.denominator : -frac3.numerator / frac3.denominator) * Math.PI;
	var f2;
	if(f1 >= 0 && f1 > Math.PI) {
		f2 = f1;
	} else {
		var a = f1 % (2 * Math.PI);
		f2 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this2 = f2;
	return this2;
};
fracs__$ZeroTo2pi_ZeroTo2pi_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
var geom_constraints__$Interval_Interval_$Impl_$ = {};
$hxClasses["geom.constraints._Interval.Interval_Impl_"] = geom_constraints__$Interval_Interval_$Impl_$;
geom_constraints__$Interval_Interval_$Impl_$.__name__ = "geom.constraints._Interval.Interval_Impl_";
geom_constraints__$Interval_Interval_$Impl_$._new = function(interval) {
	var this1 = interval;
	return this1;
};
geom_constraints__$Interval_Interval_$Impl_$.valid = function(this1) {
	return this1.u > this1.l;
};
geom_constraints__$Interval_Interval_$Impl_$.fix = function(this1) {
	if(!(this1.u > this1.l)) {
		var l = this1.u;
		this1.u = this1.l;
		this1.l = l;
	}
};
geom_constraints__$Interval_Interval_$Impl_$.clampClosed = function(this1,v) {
	if(v <= this1.l) {
		return this1.l;
	} else if(v >= this1.u) {
		return this1.u;
	} else {
		return v;
	}
};
geom_constraints__$Interval_Interval_$Impl_$.clampOpen = function(this1,v) {
	if(v < this1.l) {
		return this1.l;
	} else if(v > this1.u) {
		return this1.u;
	} else {
		return v;
	}
};
geom_constraints__$Interval_Interval_$Impl_$.close = function(this1,v,delta) {
	if(delta == null) {
		delta = 0.00001;
	}
	var interval = new geom_structure_Range(this1.u + delta,this1.l - delta);
	return v == (v <= interval.l ? interval.l : v >= interval.u ? interval.u : v);
};
geom_constraints__$Interval_Interval_$Impl_$.above = function(this1,v) {
	return v > this1.u;
};
geom_constraints__$Interval_Interval_$Impl_$.below = function(this1,v) {
	return v < this1.l;
};
geom_constraints__$Interval_Interval_$Impl_$.inClampOpen = function(this1,v) {
	return v == (v < this1.l ? this1.l : v > this1.u ? this1.u : v);
};
geom_constraints__$Interval_Interval_$Impl_$.inClampClosed = function(this1,v) {
	return v == (v <= this1.l ? this1.l : v >= this1.u ? this1.u : v);
};
geom_constraints__$Interval_Interval_$Impl_$.unit = function(v) {
	var interval = new geom_structure_Range(1.,0.);
	if(v <= interval.l) {
		return interval.l;
	} else if(v >= interval.u) {
		return interval.u;
	} else {
		return v;
	}
};
geom_constraints__$Interval_Interval_$Impl_$.unitFloat = function(v) {
	var interval = new geom_structure_Range(1.,-1.);
	if(v <= interval.l) {
		return interval.l;
	} else if(v >= interval.u) {
		return interval.u;
	} else {
		return v;
	}
};
geom_constraints__$Interval_Interval_$Impl_$.unitNegative = function(v) {
	var interval = new geom_structure_Range(1.,-1.);
	if(v <= interval.l) {
		return interval.l;
	} else if(v >= interval.u) {
		return interval.u;
	} else {
		return v;
	}
};
geom_constraints__$Interval_Interval_$Impl_$.inUnitFloat = function(v) {
	var interval = new geom_structure_Range(1.,-1.);
	return v == (v <= interval.l ? interval.l : v >= interval.u ? interval.u : v);
};
geom_constraints__$Interval_Interval_$Impl_$.random = function(this1) {
	return Math.random() * (this1.u - this1.l) + this1.l;
};
geom_constraints__$Interval_Interval_$Impl_$.randomInt = function(this1) {
	return Math.round(Math.random() * (this1.u - this1.l) + this1.l);
};
var geom_constraints__$Interval_RadianInterval_$Impl_$ = {};
$hxClasses["geom.constraints._Interval.RadianInterval_Impl_"] = geom_constraints__$Interval_RadianInterval_$Impl_$;
geom_constraints__$Interval_RadianInterval_$Impl_$.__name__ = "geom.constraints._Interval.RadianInterval_Impl_";
geom_constraints__$Interval_RadianInterval_$Impl_$._new = function() {
	var this1 = new geom_structure_Range(-Math.PI,Math.PI);
	return this1;
};
geom_constraints__$Interval_RadianInterval_$Impl_$.wrap = function(this1,v) {
	if(v == (v <= this1.l ? this1.l : v >= this1.u ? this1.u : v)) {
		return v;
	} else {
		return v - Math.PI * 2 * Math.floor((v + Math.PI) / (Math.PI * 2));
	}
};
geom_constraints__$Interval_RadianInterval_$Impl_$.inPiWrap = function(v) {
	var this1 = new geom_structure_Range(-Math.PI,Math.PI);
	var this2 = this1;
	return v == (v <= this2.l ? this2.l : v >= this2.u ? this2.u : v);
};
geom_constraints__$Interval_RadianInterval_$Impl_$.wrapRadian = function(v) {
	var this1 = new geom_structure_Range(-Math.PI,Math.PI);
	var this2 = this1;
	if(v == (v <= this2.l ? this2.l : v >= this2.u ? this2.u : v)) {
		return v;
	} else {
		return v - Math.PI * 2 * Math.floor((v + Math.PI) / (Math.PI * 2));
	}
};
var geom_constraints_Precision = function() { };
$hxClasses["geom.constraints.Precision"] = geom_constraints_Precision;
geom_constraints_Precision.__name__ = "geom.constraints.Precision";
geom_constraints_Precision.floatToStringPrecision = function(n,prec) {
	if(n == 0) {
		var _g = [];
		var _g1 = 0;
		var _g2 = prec;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push("0");
		}
		return "0." + _g.join("");
	}
	var minusSign = n < 0.0;
	n = Math.abs(n);
	var intPart = Math.floor(n);
	var p = Math.pow(10,prec);
	var fracPart = Math.round(p * (n - intPart));
	var buf_b = "";
	if(minusSign) {
		buf_b += String.fromCodePoint(45);
	}
	buf_b += Std.string(intPart == null ? "null" : "" + intPart);
	if(fracPart == 0) {
		buf_b += String.fromCodePoint(46);
		var _g3 = 0;
		var _g11 = prec;
		while(_g3 < _g11) {
			var i1 = _g3++;
			buf_b += String.fromCodePoint(48);
		}
	} else {
		buf_b += String.fromCodePoint(46);
		p /= 10;
		var nZeros = 0;
		while(fracPart < p) {
			p /= 10;
			buf_b += String.fromCodePoint(48);
		}
		buf_b += fracPart == null ? "null" : "" + fracPart;
	}
	return buf_b;
};
geom_constraints_Precision.max4 = function(f0,f1,f2,f3) {
	return Math.round(Math.max(Math.max(Math.max(f0,f1),f2),f3));
};
geom_constraints_Precision.max3 = function(f0,f1,f2) {
	return Math.round(Math.max(Math.max(f0,f1),f2));
};
var geom_curve_Bezier = function() { };
$hxClasses["geom.curve.Bezier"] = geom_curve_Bezier;
geom_curve_Bezier.__name__ = "geom.curve.Bezier";
geom_curve_Bezier.approxInterval = function(x) {
	var d = 0.67;
	return x / (1 - d + Math.pow(Math.pow(d,4) + 0.25 * x * x,0.25));
};
geom_curve_Bezier.approxInverseInterval = function(x) {
	var b = 0.39;
	return x * (1 - b + Math.sqrt(b * b + 0.25 * x * x));
};
geom_curve_Bezier.quadError = function(p0,p1,p2) {
	var this1 = new geom_structure_Mat1x2(p1.x - p0.x,p1.y - p0.y);
	var p10 = this1;
	var this2 = new geom_structure_Mat1x2(p2.x - p0.x,p2.y - p0.y);
	var p20 = this2;
	var this3 = new geom_structure_Mat1x2(p10.x * p20.x,p10.y * p20.y);
	var this4 = this3;
	var t = this4.x + this4.y;
	var this5 = new geom_structure_Mat1x2(p20.x * p20.x,p20.y * p20.y);
	var this6 = this5;
	var t1 = t / (this6.x + this6.y);
	var interval = new geom_structure_Range(1.,0.);
	var t2 = t1 <= interval.l ? interval.l : t1 >= interval.u ? interval.u : t1;
	var this7 = p0;
	var this8 = new geom_structure_Mat1x2(this7.x - p20.x,this7.y - p20.y);
	var s = this8;
	var this9 = new geom_structure_Mat1x2(-s.x,-s.y);
	var n = this9;
	var this10 = new geom_structure_Mat1x2(n.x * t2,n.y * t2);
	var tn = this10;
	var this11 = new geom_structure_Mat1x2(s.x + tn.x,s.y + tn.y);
	var p = this11;
	var this12 = new geom_structure_Mat1x2(p.x - p10.x,p.y - p10.y);
	var c = this12;
	return 0.5 * (c.x * c.x + c.y * c.y);
};
geom_curve_Bezier.subdiv = function(tol,p0,p1,p2) {
	var this1 = new geom_structure_Mat1x2(p1.x * 2,p1.y * 2);
	var a = this1;
	var this2 = new geom_structure_Mat1x2(a.x - p0.x,a.y - p0.y);
	var a1 = this2;
	var this3 = new geom_structure_Mat1x2(a1.x - p2.x,a1.y - p2.y);
	var dd = this3;
	var this4 = new geom_structure_Mat1x2(p1.x - p0.x,p1.y - p0.y);
	var p10 = this4;
	var this5 = new geom_structure_Mat1x2(p2.x - p1.x,p2.y - p1.y);
	var p21 = this5;
	var this6 = new geom_structure_Mat1x2(p2.x - p0.x,p2.y - p0.y);
	var p20 = this6;
	var this7 = new geom_structure_Mat1x2(p10.x * dd.x,p10.y * dd.y);
	var this8 = this7;
	var u0 = this8.x + this8.y;
	var this9 = new geom_structure_Mat1x2(p20.x * dd.x,p20.y * dd.y);
	var this10 = this9;
	var u2 = this10.x + this10.y;
	var cross = p20.x * dd.y - p20.y * dd.x;
	var x0 = u0 / cross;
	var x2 = u2 / cross;
	var scale = Math.abs(cross) / (Math.sqrt(dd.x * dd.x + dd.y * dd.y) * Math.abs(x2 - x0));
	var d = 0.67;
	var a0 = x0 / (1 - d + Math.pow(Math.pow(d,4) + 0.25 * x0 * x0,0.25));
	var d1 = 0.67;
	var a2 = x2 / (1 - d1 + Math.pow(Math.pow(d1,4) + 0.25 * x2 * x2,0.25));
	var count = 0.5 * Math.abs(a2 - a0) * Math.sqrt(scale / tol);
	var n = Math.ceil(count);
	var b = 0.39;
	var u01 = a0 * (1 - b + Math.sqrt(b * b + 0.25 * a0 * a0));
	var b1 = 0.39;
	var u21 = a2 * (1 - b1 + Math.sqrt(b1 * b1 + 0.25 * a2 * a2));
	var result = [0.];
	var _g = 1;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		var x = a0 + (a2 - a0) * i / n;
		var b2 = 0.39;
		var u = x * (1 - b2 + Math.sqrt(b2 * b2 + 0.25 * x * x));
		var t = (u - u01) / (u21 - u01);
		result[i] = t;
	}
	result[n] = 1.;
	return result;
};
geom_curve_Bezier.quadraticThru = function(t,s,c,e) {
	c = 2 * c - 0.5 * (s + e);
	var u = 1 - t;
	return Math.pow(u,2) * s + 2 * u * t * c + Math.pow(t,2) * e;
};
geom_curve_Bezier.quadratic = function(t,s,c,e) {
	var u = 1 - t;
	return Math.pow(u,2) * s + 2 * u * t * c + Math.pow(t,2) * e;
};
geom_curve_Bezier.quadSegment = function(t0,t1,s,c,e) {
	var u = t1 - t0;
	return s + (c - s + t0 * (e - 2 * c + s)) * u;
};
geom_curve_Bezier.cubic = function(t,s,c1,c2,e) {
	var u = 1 - t;
	return Math.pow(u,3) * s + 3 * Math.pow(u,2) * t * c1 + 3 * u * Math.pow(t,2) * c2 + Math.pow(t,3) * e;
};
var geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$ = {};
$hxClasses["geom.flat.f32._Float32Flat.Float32Flat_Impl_"] = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$;
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.__name__ = "geom.flat.f32._Float32Flat.Float32Flat_Impl_";
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.readItem = function(this1,k) {
	return this1[k + 2];
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.writeItem = function(this1,k,v) {
	this1[k + 2] = v;
	return v;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	return this2;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size = function(this1) {
	return this1[1] | 0;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_size = function(this1,id) {
	var pos_ = id;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_index = function(this1) {
	return this1[0] | 0;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_index = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_pos = function(this1) {
	return this1[0];
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_pos = function(this1,pos_) {
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return pos_;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.updateLen = function(this1) {
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.hasNext = function(this1) {
	return this1[0] < geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.next = function(this1) {
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return this1[0];
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.increment = function(this1) {
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return this1[0];
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.toArray = function(this1) {
	return this1.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) + 2);
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.fromArray = function(arr) {
	var this1 = new Float32Array(arr.length + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var flat = this2;
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 2] = arr[i];
	}
	flat[0] = 0;
	flat[1] = l;
	return flat;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.clone = function(this1) {
	var this2 = new Float32Array(this1.length - 2 + 2);
	var this3 = this2;
	this3[0] = 0.;
	this3[1] = 0.;
	var flat = this3;
	var arr = this1.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) + 2);
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 2] = arr[i];
	}
	flat[0] = 0;
	flat[1] = l;
	return flat;
};
geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.fill = function(this1,arr) {
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		this1[i + 2] = arr[i];
	}
	this1[0] = 0;
	this1[1] = l;
};
var geom_flat_f32__$Float32Flat4_Float32Flat4_$Impl_$ = {};
$hxClasses["geom.flat.f32._Float32Flat4.Float32Flat4_Impl_"] = geom_flat_f32__$Float32Flat4_Float32Flat4_$Impl_$;
geom_flat_f32__$Float32Flat4_Float32Flat4_$Impl_$.__name__ = "geom.flat.f32._Float32Flat4.Float32Flat4_Impl_";
geom_flat_f32__$Float32Flat4_Float32Flat4_$Impl_$.readItem = function(this1,k) {
	return this1[(this1[0] | 0) * 4 + k + 2];
};
geom_flat_f32__$Float32Flat4_Float32Flat4_$Impl_$.writeItem = function(this1,k,v) {
	this1[(this1[0] | 0) * 4 + k + 2] = v;
	return v;
};
geom_flat_f32__$Float32Flat4_Float32Flat4_$Impl_$._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this3 = this2;
	return this3;
};
geom_flat_f32__$Float32Flat4_Float32Flat4_$Impl_$.get_index = function(this1) {
	return this1[0] | 0;
};
geom_flat_f32__$Float32Flat4_Float32Flat4_$Impl_$.set_index = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32__$Float32Flat4_Float32Flat4_$Impl_$.getArray = function(this1) {
	return this1.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) * 4 + 2);
};
var geom_flat_f32__$Float32Flat6_Float32Flat6_$Impl_$ = {};
$hxClasses["geom.flat.f32._Float32Flat6.Float32Flat6_Impl_"] = geom_flat_f32__$Float32Flat6_Float32Flat6_$Impl_$;
geom_flat_f32__$Float32Flat6_Float32Flat6_$Impl_$.__name__ = "geom.flat.f32._Float32Flat6.Float32Flat6_Impl_";
geom_flat_f32__$Float32Flat6_Float32Flat6_$Impl_$.readItem = function(this1,k) {
	return this1[(this1[0] | 0) * 6 + k + 2];
};
geom_flat_f32__$Float32Flat6_Float32Flat6_$Impl_$.writeItem = function(this1,k,v) {
	this1[(this1[0] | 0) * 6 + k + 2] = v;
	return v;
};
geom_flat_f32__$Float32Flat6_Float32Flat6_$Impl_$._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this3 = this2;
	return this3;
};
geom_flat_f32__$Float32Flat6_Float32Flat6_$Impl_$.get_index = function(this1) {
	return this1[0] | 0;
};
geom_flat_f32__$Float32Flat6_Float32Flat6_$Impl_$.set_index = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32__$Float32Flat6_Float32Flat6_$Impl_$.getArray = function(this1) {
	return this1.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) * 6 + 2);
};
var geom_flat_f32__$Float32Flat9_Float32Flat9_$Impl_$ = {};
$hxClasses["geom.flat.f32._Float32Flat9.Float32Flat9_Impl_"] = geom_flat_f32__$Float32Flat9_Float32Flat9_$Impl_$;
geom_flat_f32__$Float32Flat9_Float32Flat9_$Impl_$.__name__ = "geom.flat.f32._Float32Flat9.Float32Flat9_Impl_";
geom_flat_f32__$Float32Flat9_Float32Flat9_$Impl_$.readItem = function(this1,k) {
	return this1[(this1[0] | 0) * 9 + k + 2];
};
geom_flat_f32__$Float32Flat9_Float32Flat9_$Impl_$.writeItem = function(this1,k,v) {
	this1[(this1[0] | 0) * 9 + k + 2] = v;
	return v;
};
geom_flat_f32__$Float32Flat9_Float32Flat9_$Impl_$._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this3 = this2;
	return this3;
};
geom_flat_f32__$Float32Flat9_Float32Flat9_$Impl_$.get_index = function(this1) {
	return this1[0] | 0;
};
geom_flat_f32__$Float32Flat9_Float32Flat9_$Impl_$.set_index = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32__$Float32Flat9_Float32Flat9_$Impl_$.getArray = function(this1) {
	return this1.subarray(2,geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) * 9 + 2);
};
var geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$ = {};
$hxClasses["geom.flat.f32._Float32FlatRGBA.Float32FlatRGBA_Impl_"] = geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$;
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.__name__ = "geom.flat.f32._Float32FlatRGBA.Float32FlatRGBA_Impl_";
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this3 = this2;
	var this4 = this3;
	return this4;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_red = function(this1) {
	return this1[(this1[0] | 0) * 4 + 2];
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_green = function(this1) {
	return this1[(this1[0] | 0) * 4 + 1 + 2];
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_green = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 1 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_blue = function(this1) {
	return this1[(this1[0] | 0) * 4 + 2 + 2];
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_blue = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_alpha = function(this1) {
	return this1[(this1[0] | 0) * 4 + 3 + 2];
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_alpha = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 3 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_rgb = function(this1,col) {
	geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(this1,(col >> 16 & 255) / 255);
	var v = (col & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	var v1 = (col >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v1;
	this1[(this1[0] | 0) * 4 + 3 + 2] = 1.;
	return col;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_rgb = function(this1) {
	return Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255) | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_red(this1) * 255) << 16;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_argb = function(this1,col) {
	geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(this1,(col >> 16 & 255) / 255);
	var v = (col & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	var v1 = (col >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v1;
	var v2 = (col >> 24 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 3 + 2] = v2;
	return col;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_argb = function(this1) {
	return Math.round(this1[(this1[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_red(this1) * 255) << 16 | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255);
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.readItem = function(this1,k) {
	return this1[(this1[0] | 0) * 4 + k + 2];
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.writeItem = function(this1,k,v) {
	this1[(this1[0] | 0) * 4 + k + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.colorTriangles = function(this1,color,times) {
	var _g = 0;
	var _g1 = times;
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(this1,(color >> 16 & 255) / 255);
		var v = (color & 255) / 255;
		this1[(this1[0] | 0) * 4 + 2 + 2] = v;
		var v1 = (color >> 8 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 1 + 2] = v1;
		var v2 = (color >> 24 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 3 + 2] = v2;
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(this1,(color >> 16 & 255) / 255);
		var v3 = (color & 255) / 255;
		this1[(this1[0] | 0) * 4 + 2 + 2] = v3;
		var v4 = (color >> 8 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 1 + 2] = v4;
		var v5 = (color >> 24 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 3 + 2] = v5;
		var pos_1 = this1[0] + 1.;
		this1[0] = pos_1;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(this1,(color >> 16 & 255) / 255);
		var v6 = (color & 255) / 255;
		this1[(this1[0] | 0) * 4 + 2 + 2] = v6;
		var v7 = (color >> 8 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 1 + 2] = v7;
		var v8 = (color >> 24 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 3 + 2] = v8;
		var pos_2 = this1[0] + 1.;
		this1[0] = pos_2;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.cornerColors = function(this1,colorA,colorB,colorC) {
	geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(this1,(colorA >> 16 & 255) / 255);
	var v = (colorA & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	var v1 = (colorA >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v1;
	var v2 = (colorA >> 24 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 3 + 2] = v2;
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(this1,(colorB >> 16 & 255) / 255);
	var v3 = (colorB & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v3;
	var v4 = (colorB >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v4;
	var v5 = (colorB >> 24 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 3 + 2] = v5;
	var pos_1 = this1[0] + 1.;
	this1[0] = pos_1;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(this1,(colorC >> 16 & 255) / 255);
	var v6 = (colorC & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v6;
	var v7 = (colorC >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v7;
	var v8 = (colorC >> 24 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 3 + 2] = v8;
	var pos_2 = this1[0] + 1.;
	this1[0] = pos_2;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.hex = function(this1) {
	return "0x" + StringTools.hex(Math.round(this1[(this1[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_red(this1) * 255) << 16 | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255));
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.hexAll = function(this1) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var str = "Float32FlatRGBA: \n";
	var _g = 0;
	var _g1 = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		str += "0x" + StringTools.hex(Math.round(this1[(this1[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.get_red(this1) * 255) << 16 | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255)) + "\n";
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return str;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.alphaChannel = function(int) {
	return (int >> 24 & 255) / 255;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.redChannel = function(int) {
	return (int >> 16 & 255) / 255;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.greenChannel = function(int) {
	return (int >> 8 & 255) / 255;
};
geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.blueChannel = function(int) {
	return (int & 255) / 255;
};
var geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$ = {};
$hxClasses["geom.flat.f32._Float32FlatTriangle.Float32FlatTriangle_Impl_"] = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$;
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.__name__ = "geom.flat.f32._Float32FlatTriangle.Float32FlatTriangle_Impl_";
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this3 = this2;
	var this4 = this3;
	return this4;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax = function(this1) {
	return this1[(this1[0] | 0) * 9 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay = function(this1) {
	return this1[(this1[0] | 0) * 9 + 1 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 1 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az = function(this1) {
	return this1[(this1[0] | 0) * 9 + 2 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 2 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx = function(this1) {
	return this1[(this1[0] | 0) * 9 + 3 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 3 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by = function(this1) {
	return this1[(this1[0] | 0) * 9 + 4 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 4 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz = function(this1) {
	return this1[(this1[0] | 0) * 9 + 5 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 5 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx = function(this1) {
	return this1[(this1[0] | 0) * 9 + 6 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 6 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy = function(this1) {
	return this1[(this1[0] | 0) * 9 + 7 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 7 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz = function(this1) {
	return this1[(this1[0] | 0) * 9 + 8 + 2];
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 8 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform = function(this1,m) {
	var this2 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az(this1),1.);
	var pa = this2;
	var this3 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz(this1),1.);
	var pb = this3;
	var this4 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz(this1),1.);
	var pc = this4;
	var this5 = new geom_structure_Mat1x4(m.a * pa.x + m.b * pa.y + m.c * pa.z + m.d,m.e * pa.x + m.f * pa.y + m.g * pa.z + m.h,m.i * pa.x + m.j * pa.y + m.k * pa.z + m.l,1.);
	pa = this5;
	var this6 = new geom_structure_Mat1x4(m.a * pb.x + m.b * pb.y + m.c * pb.z + m.d,m.e * pb.x + m.f * pb.y + m.g * pb.z + m.h,m.i * pb.x + m.j * pb.y + m.k * pb.z + m.l,1.);
	pb = this6;
	var this7 = new geom_structure_Mat1x4(m.a * pc.x + m.b * pc.y + m.c * pc.z + m.d,m.e * pc.x + m.f * pc.y + m.g * pc.z + m.h,m.i * pc.x + m.j * pc.y + m.k * pc.z + m.l,1.);
	pc = this7;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,pa.x);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,pa.y);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az(this1,pa.z);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,pb.x);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,pb.y);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz(this1,pb.z);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,pc.x);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,pc.y);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz(this1,pc.z);
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformAll = function(this1,m) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var _g = 0;
	var _g1 = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformRange = function(this1,m,start,end) {
	this1[0] = start;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	if(end > geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) - 1) {
		geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
	}
	var _g = start;
	var _g1 = end + 1;
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.triangle = function(this1,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,ax_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,ay_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az(this1,az_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,bx_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,by_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz(this1,bz_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,cx_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,cy_);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz(this1,cz_);
	var windingAdjusted = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.adjustWinding(this1);
	if(windingAdjusted) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,ax_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,ay_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,cx_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,cy_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,bx_);
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,by_);
	}
	return windingAdjusted;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.adjustWinding = function(this1) {
	return geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) - geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) + (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) - geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1)) + (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) - geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1)) > 0;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_x = function(this1) {
	return Math.min(Math.min(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1));
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_x = function(this1,x) {
	var dx = x - Math.min(Math.min(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1));
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) + dx);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) + dx);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) + dx);
	return x;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_y = function(this1) {
	return Math.min(Math.min(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1));
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_y = function(this1,y) {
	var dy = y - Math.min(Math.min(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1));
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) + dy);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) + dy);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) + dy);
	return y;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_z = function(this1) {
	return Math.min(Math.min(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz(this1));
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_z = function(this1,z) {
	var dz = z - Math.min(Math.min(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz(this1));
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_az(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az(this1) + dz);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bz(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz(this1) + dz);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cz(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz(this1) + dz);
	return z;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_right = function(this1) {
	return Math.max(Math.max(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1));
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bottom = function(this1) {
	return Math.max(Math.max(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1));
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_back = function(this1) {
	return Math.max(Math.max(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz(this1));
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.moveDelta = function(this1,dx,dy) {
	var _g = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(_g,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(_g) + dx);
	var _g1 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(_g1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(_g1) + dy);
	var _g2 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(_g2,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(_g2) + dx);
	var _g3 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(_g3,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(_g3) + dy);
	var _g4 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(_g4,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(_g4) + dx);
	var _g5 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(_g5,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(_g5) + dy);
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.sign = function(n) {
	return Math.abs(n) / n | 0;
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.liteHit = function(this1,px,py) {
	var planeAB = (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) - py) - (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) - py);
	var planeBC = (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) - py) - (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) - py);
	var planeCA = (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) - py) - (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) - py);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.fullHit = function(this1,px,py) {
	if(px > Math.min(Math.min(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1)) && px < Math.max(Math.max(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1)) && py > Math.min(Math.min(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1)) && py < Math.max(Math.max(geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1))) {
		return true;
	}
	var planeAB = (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) - py) - (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) - py);
	var planeBC = (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) - py) - (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) - py);
	var planeCA = (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) - py) - (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) - px) * (geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) - py);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.rotate = function(this1,x,y,theta) {
	var cos = Math.cos(theta);
	var sin = Math.sin(theta);
	var _g = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(_g,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(_g) - x);
	var _g1 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(_g1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(_g1) - y);
	var _g2 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(_g2,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(_g2) - x);
	var _g3 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(_g3,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(_g3) - y);
	var _g4 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(_g4,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(_g4) - x);
	var _g5 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(_g5,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(_g5) - y);
	var dx = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1);
	var dy = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,dx * sin + dy * cos);
	dx = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1);
	dy = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,dx * sin + dy * cos);
	dx = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1);
	dy = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,dx * sin + dy * cos);
	var _g6 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(_g6,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(_g6) + x);
	var _g7 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(_g7,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(_g7) + y);
	var _g8 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(_g8,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(_g8) + x);
	var _g9 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(_g9,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(_g9) + y);
	var _g10 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(_g10,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(_g10) + x);
	var _g11 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(_g11,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(_g11) + y);
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.rotateTrig = function(this1,x,y,cos,sin) {
	var _g = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(_g,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(_g) - x);
	var _g1 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(_g1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(_g1) - y);
	var _g2 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(_g2,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(_g2) - x);
	var _g3 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(_g3,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(_g3) - y);
	var _g4 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(_g4,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(_g4) - x);
	var _g5 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(_g5,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(_g5) - y);
	var dx = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1);
	var dy = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(this1,dx * sin + dy * cos);
	dx = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1);
	dy = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(this1,dx * sin + dy * cos);
	dx = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1);
	dy = geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(this1,dx * sin + dy * cos);
	var _g6 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ax(_g6,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(_g6) + x);
	var _g7 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_ay(_g7,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(_g7) + y);
	var _g8 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_bx(_g8,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(_g8) + x);
	var _g9 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_by(_g9,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(_g9) + y);
	var _g10 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cx(_g10,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(_g10) + x);
	var _g11 = this1;
	geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.set_cy(_g11,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(_g11) + y);
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.prettyString = function(this1) {
	return "{ ax: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) + ", ay: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) + ", az: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az(this1) + " }" + "\n" + "{ bx: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) + ", by: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) + ", bz: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz(this1) + " }" + "\n" + "{ cx: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) + ", cy: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) + ", az: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz(this1) + " }" + "\n";
};
geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.prettyAll = function(this1) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var str = "Float32FlatTriangle: \n";
	var _g = 0;
	var _g1 = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		str += "{ ax: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(this1) + ", ay: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(this1) + ", az: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_az(this1) + " }" + "\n" + "{ bx: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(this1) + ", by: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(this1) + ", bz: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bz(this1) + " }" + "\n" + "{ cx: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(this1) + ", cy: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(this1) + ", az: " + geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cz(this1) + " }" + "\n";
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return str;
};
var geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$ = {};
$hxClasses["geom.flat.f32._Float32FlatTriangleXY.Float32FlatTriangleXY_Impl_"] = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$;
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.__name__ = "geom.flat.f32._Float32FlatTriangleXY.Float32FlatTriangleXY_Impl_";
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this3 = this2;
	var this4 = this3;
	return this4;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax = function(this1) {
	return this1[(this1[0] | 0) * 6 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay = function(this1) {
	return this1[(this1[0] | 0) * 6 + 1 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 1 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx = function(this1) {
	return this1[(this1[0] | 0) * 6 + 3 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 3 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by = function(this1) {
	return this1[(this1[0] | 0) * 6 + 4 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 4 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx = function(this1) {
	return this1[(this1[0] | 0) * 6 + 6 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 6 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy = function(this1) {
	return this1[(this1[0] | 0) * 6 + 7 + 2];
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 7 + 2] = v;
	return v;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.transform = function(this1,m) {
	var this2 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1),1.,1.);
	var pa = this2;
	var this3 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1),1.,1.);
	var pb = this3;
	var this4 = new geom_structure_Mat1x4(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1),1.,1.);
	var pc = this4;
	var this5 = new geom_structure_Mat1x4(m.a * pa.x + m.b * pa.y + m.c * pa.z + m.d,m.e * pa.x + m.f * pa.y + m.g * pa.z + m.h,m.i * pa.x + m.j * pa.y + m.k * pa.z + m.l,1.);
	pa = this5;
	var this6 = new geom_structure_Mat1x4(m.a * pb.x + m.b * pb.y + m.c * pb.z + m.d,m.e * pb.x + m.f * pb.y + m.g * pb.z + m.h,m.i * pb.x + m.j * pb.y + m.k * pb.z + m.l,1.);
	pb = this6;
	var this7 = new geom_structure_Mat1x4(m.a * pc.x + m.b * pc.y + m.c * pc.z + m.d,m.e * pc.x + m.f * pc.y + m.g * pc.z + m.h,m.i * pc.x + m.j * pc.y + m.k * pc.z + m.l,1.);
	pc = this7;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,pa.x);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,pa.y);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,pb.x);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,pb.y);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,pc.x);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,pc.y);
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.transformAll = function(this1,m) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var _g = 0;
	var _g1 = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.transformRange = function(this1,m,start,end) {
	this1[0] = start;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	if(end > geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1) - 1) {
		geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
	}
	var _g = start;
	var _g1 = end + 1;
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.fromPosition = function(this1,tri) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	tri[0] = 0;
	if(tri[0] > tri[1] - 1) {
		tri[1] = tri[0];
	}
	var _g = 0;
	var _g1 = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(tri);
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ax(tri));
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_ay(tri));
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_bx(tri));
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_by(tri));
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cx(tri));
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.get_cy(tri));
		(function(_e) {
			return function() {
				var pos_ = _e[0][0] + 1.;
				_e[0][0] = pos_;
				if(_e[0][0] > _e[0][1] - 1) {
					_e[0][1] = _e[0][0];
				}
				return _e[0][0];
			};
		})([tri]);
		var pos_1 = this1[0] + 1.;
		this1[0] = pos_1;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.triangle = function(this1,ax_,ay_,bx_,by_,cx_,cy_) {
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,ax_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,ay_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,bx_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,by_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,cx_);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,cy_);
	var windingAdjusted = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.adjustWinding(this1);
	if(windingAdjusted) {
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,ax_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,ay_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,cx_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,cy_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,bx_);
		geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,by_);
	}
	return windingAdjusted;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.adjustWinding = function(this1) {
	return geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) - geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) + (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) - geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1)) + (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) - geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) * geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1)) > 0;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_x = function(this1) {
	return Math.min(Math.min(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1));
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_x = function(this1,x) {
	var dx = x - Math.min(Math.min(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1));
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) + dx);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) + dx);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) + dx);
	return x;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_y = function(this1) {
	return Math.min(Math.min(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1));
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_y = function(this1,y) {
	var dy = y - Math.min(Math.min(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1));
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) + dy);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) + dy);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) + dy);
	return y;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_right = function(this1) {
	return Math.max(Math.max(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1));
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bottom = function(this1) {
	return Math.max(Math.max(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1));
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.moveDelta = function(this1,dx,dy) {
	var _g = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(_g,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(_g) + dx);
	var _g1 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(_g1,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(_g1) + dy);
	var _g2 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(_g2,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(_g2) + dx);
	var _g3 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(_g3,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(_g3) + dy);
	var _g4 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(_g4,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(_g4) + dx);
	var _g5 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(_g5,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(_g5) + dy);
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.sign = function(n) {
	return Math.abs(n) / n | 0;
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.liteHit = function(this1,px,py) {
	var planeAB = (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) - py) - (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) - py);
	var planeBC = (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) - py) - (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) - py);
	var planeCA = (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) - py) - (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) - py);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.fullHit = function(this1,px,py) {
	if(px > Math.min(Math.min(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1)) && px < Math.max(Math.max(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1)) && py > Math.min(Math.min(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1)) && py < Math.max(Math.max(geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1)),geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1))) {
		return true;
	}
	var planeAB = (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) - py) - (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) - py);
	var planeBC = (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) - py) - (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) - py);
	var planeCA = (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) - py) - (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) - px) * (geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) - py);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.rotate = function(this1,x,y,theta) {
	var cos = Math.cos(theta);
	var sin = Math.sin(theta);
	var _g = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(_g,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(_g) - x);
	var _g1 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(_g1,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(_g1) - y);
	var _g2 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(_g2,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(_g2) - x);
	var _g3 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(_g3,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(_g3) - y);
	var _g4 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(_g4,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(_g4) - x);
	var _g5 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(_g5,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(_g5) - y);
	var dx = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1);
	var dy = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,dx * sin + dy * cos);
	dx = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1);
	dy = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,dx * sin + dy * cos);
	dx = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1);
	dy = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,dx * sin + dy * cos);
	var _g6 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(_g6,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(_g6) + x);
	var _g7 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(_g7,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(_g7) + y);
	var _g8 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(_g8,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(_g8) + x);
	var _g9 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(_g9,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(_g9) + y);
	var _g10 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(_g10,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(_g10) + x);
	var _g11 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(_g11,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(_g11) + y);
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.rotateTrig = function(this1,x,y,cos,sin) {
	var _g = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(_g,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(_g) - x);
	var _g1 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(_g1,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(_g1) - y);
	var _g2 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(_g2,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(_g2) - x);
	var _g3 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(_g3,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(_g3) - y);
	var _g4 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(_g4,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(_g4) - x);
	var _g5 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(_g5,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(_g5) - y);
	var dx = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1);
	var dy = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(this1,dx * sin + dy * cos);
	dx = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1);
	dy = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(this1,dx * sin + dy * cos);
	dx = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1);
	dy = geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(this1,dx * cos - dy * sin);
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(this1,dx * sin + dy * cos);
	var _g6 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ax(_g6,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(_g6) + x);
	var _g7 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_ay(_g7,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(_g7) + y);
	var _g8 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_bx(_g8,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(_g8) + x);
	var _g9 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_by(_g9,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(_g9) + y);
	var _g10 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cx(_g10,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(_g10) + x);
	var _g11 = this1;
	geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.set_cy(_g11,geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(_g11) + y);
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.prettyString = function(this1) {
	return "{ ax: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) + ", ay: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) + " }" + "\n" + "{ bx: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) + ", by: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) + " }" + "\n" + "{ cx: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) + ", cy: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) + " }" + "\n";
};
geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.prettyAll = function(this1) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var str = "Float32FlatTexture: \n";
	var _g = 0;
	var _g1 = geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		str += "{ ax: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ax(this1) + ", ay: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_ay(this1) + " }" + "\n" + "{ bx: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_bx(this1) + ", by: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_by(this1) + " }" + "\n" + "{ cx: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cx(this1) + ", cy: " + geom_flat_f32__$Float32FlatTriangleXY_Float32FlatTriangleXY_$Impl_$.get_cy(this1) + " }" + "\n";
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return str;
};
var geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$ = {};
$hxClasses["geom.flat.i32._Int32Flat.Int32Flat_Impl_"] = geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$;
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.__name__ = "geom.flat.i32._Int32Flat.Int32Flat_Impl_";
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.readItem = function(this1,k) {
	return this1[k + 2];
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.writeItem = function(this1,k,v) {
	this1[k + 2] = v;
	return v;
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$._new = function(len) {
	var this1 = new Int32Array(len + 2);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	return this2;
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.get_size = function(this1) {
	return this1[1];
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.set_size = function(this1,id) {
	var pos_ = id;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.get_pos = function(this1) {
	return this1[0];
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.set_pos = function(this1,pos_) {
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return pos_;
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.updateLen = function(this1) {
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.hasNext = function(this1) {
	return this1[0] < this1[1];
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.next = function(this1) {
	var pos_ = this1[0] + 1;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return this1[0];
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.increment = function(this1) {
	var pos_ = this1[0] + 1;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return this1[0];
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.toArray = function(this1) {
	return this1.subarray(2,this1[1] + 2);
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.fromArray = function(arr) {
	var this1 = new Int32Array(arr.length + 2);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	var flat = this2;
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 2] = arr[i];
	}
	flat[0] = 0;
	flat[1] = l;
	return flat;
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.clone = function(this1) {
	var this2 = new Int32Array(this1.length - 2 + 2);
	var this3 = this2;
	this3[0] = 0;
	this3[1] = 0;
	var flat = this3;
	var arr = this1.subarray(2,this1[1] + 2);
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 2] = arr[i];
	}
	flat[0] = 0;
	flat[1] = l;
	return flat;
};
geom_flat_i32__$Int32Flat_Int32Flat_$Impl_$.fill = function(this1,arr) {
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		this1[i + 2] = arr[i];
	}
	this1[0] = 0;
	this1[1] = l;
};
var geom_flat_i32__$Int32Flat3_Int32Flat3_$Impl_$ = {};
$hxClasses["geom.flat.i32._Int32Flat3.Int32Flat3_Impl_"] = geom_flat_i32__$Int32Flat3_Int32Flat3_$Impl_$;
geom_flat_i32__$Int32Flat3_Int32Flat3_$Impl_$.__name__ = "geom.flat.i32._Int32Flat3.Int32Flat3_Impl_";
geom_flat_i32__$Int32Flat3_Int32Flat3_$Impl_$.readItem = function(this1,k) {
	return this1[this1[0] * 3 + k + 2];
};
geom_flat_i32__$Int32Flat3_Int32Flat3_$Impl_$.writeItem = function(this1,k,v) {
	this1[this1[0] * 3 + k + 2] = v;
	return v;
};
geom_flat_i32__$Int32Flat3_Int32Flat3_$Impl_$._new = function(len) {
	var this1 = new Int32Array(len + 2);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	var this3 = this2;
	return this3;
};
geom_flat_i32__$Int32Flat3_Int32Flat3_$Impl_$.get_pos = function(this1) {
	return this1[0];
};
geom_flat_i32__$Int32Flat3_Int32Flat3_$Impl_$.set_pos = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_i32__$Int32Flat3_Int32Flat3_$Impl_$.getArray = function(this1) {
	return this1.subarray(2,this1[1] * 3 + 2);
};
var geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$ = {};
$hxClasses["geom.flat.ui16._UInt16Flat.UInt16Flat_Impl_"] = geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$;
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.__name__ = "geom.flat.ui16._UInt16Flat.UInt16Flat_Impl_";
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.readItem = function(this1,k) {
	return this1[k + 4];
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.writeItem = function(this1,k,v) {
	this1[k + 4] = v;
	return v;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$._new = function(len) {
	var this1 = new Uint16Array(len + 4);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	this2[2] = 0;
	this2[3] = 0;
	return this2;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.get_size = function(this1) {
	return (this1[2] << 16) + this1[3];
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.set_size = function(this1,id) {
	var pos_ = id;
	this1[0] = pos_ >>> 16;
	this1[1] = pos_ & 65535;
	if(pos_ > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = pos_ >>> 16;
		this1[3] = pos_ & 65535;
	}
	return id;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.get_pos = function(this1) {
	return (this1[0] << 16) + this1[1];
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.set_pos = function(this1,pos_) {
	this1[0] = pos_ >>> 16;
	this1[1] = pos_ & 65535;
	if(pos_ > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = pos_ >>> 16;
		this1[3] = pos_ & 65535;
	}
	return pos_;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.setLength = function(this1,v) {
	this1[2] = v >>> 16;
	this1[3] = v & 65535;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.setPos = function(this1,v) {
	this1[0] = v >>> 16;
	this1[1] = v & 65535;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.getDual16 = function(this1,i) {
	return (this1[i] << 16) + this1[i + 1];
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.setDual16 = function(this1,i,v) {
	this1[i] = v >>> 16;
	this1[i + 1] = v & 65535;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.upper16 = function(this1,v) {
	return v >>> 16;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.lower16 = function(this1,v) {
	return v & 65535;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.updateLen = function(this1,pos_) {
	if(pos_ > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = pos_ >>> 16;
		this1[3] = pos_ & 65535;
	}
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.hasNext = function(this1) {
	return (this1[0] << 16) + this1[1] < (this1[2] << 16) + this1[3];
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.next = function(this1) {
	var pos_ = (this1[0] << 16) + this1[1] + 1;
	this1[0] = pos_ >>> 16;
	this1[1] = pos_ & 65535;
	if(pos_ > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = pos_ >>> 16;
		this1[3] = pos_ & 65535;
	}
	return (this1[0] << 16) + this1[1];
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.increment = function(this1) {
	var pos_ = (this1[0] << 16) + this1[1] + 1;
	this1[0] = pos_ >>> 16;
	this1[1] = pos_ & 65535;
	if(pos_ > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = pos_ >>> 16;
		this1[3] = pos_ & 65535;
	}
	return (this1[0] << 16) + this1[1];
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.toArray = function(this1) {
	return this1.subarray(4,(this1[2] << 16) + this1[3] + 4);
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.fromArray = function(arr) {
	var this1 = new Uint16Array(arr.length + 4);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	this2[2] = 0;
	this2[3] = 0;
	var flat = this2;
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 4] = arr[i];
	}
	flat[0] = 0;
	flat[1] = 0;
	flat[2] = l >>> 16;
	flat[3] = l & 65535;
	return flat;
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.clone = function(this1) {
	var this2 = new Uint16Array(this1.length - 4 + 4);
	var this3 = this2;
	this3[0] = 0;
	this3[1] = 0;
	this3[2] = 0;
	this3[3] = 0;
	var flat = this3;
	var arr = this1.subarray(4,(this1[2] << 16) + this1[3] + 4);
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 4] = arr[i];
	}
	flat[0] = 0;
	flat[1] = 0;
	flat[2] = l >>> 16;
	flat[3] = l & 65535;
	return flat.subarray(4,(flat[2] << 16) + flat[3] + 4);
};
geom_flat_ui16__$UInt16Flat_UInt16Flat_$Impl_$.fill = function(this1,arr) {
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		this1[i + 4] = arr[i];
	}
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = l >>> 16;
	this1[3] = l & 65535;
};
var geom_flat_ui16__$UInt16Flat3_UInt16Flat3_$Impl_$ = {};
$hxClasses["geom.flat.ui16._UInt16Flat3.UInt16Flat3_Impl_"] = geom_flat_ui16__$UInt16Flat3_UInt16Flat3_$Impl_$;
geom_flat_ui16__$UInt16Flat3_UInt16Flat3_$Impl_$.__name__ = "geom.flat.ui16._UInt16Flat3.UInt16Flat3_Impl_";
geom_flat_ui16__$UInt16Flat3_UInt16Flat3_$Impl_$.readItem = function(this1,k) {
	return this1[((this1[0] << 16) + this1[1]) * 3 + k + 4];
};
geom_flat_ui16__$UInt16Flat3_UInt16Flat3_$Impl_$.writeItem = function(this1,k,v) {
	this1[((this1[0] << 16) + this1[1]) * 3 + k + 4] = v;
	return v;
};
geom_flat_ui16__$UInt16Flat3_UInt16Flat3_$Impl_$._new = function(len) {
	var this1 = new Uint16Array(len + 4);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	this2[2] = 0;
	this2[3] = 0;
	var this3 = this2;
	return this3;
};
geom_flat_ui16__$UInt16Flat3_UInt16Flat3_$Impl_$.get_pos = function(this1) {
	return (this1[0] << 16) + this1[1];
};
geom_flat_ui16__$UInt16Flat3_UInt16Flat3_$Impl_$.set_pos = function(this1,id) {
	this1[0] = id >>> 16;
	this1[1] = id & 65535;
	if(id > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = id >>> 16;
		this1[3] = id & 65535;
	}
	return id;
};
geom_flat_ui16__$UInt16Flat3_UInt16Flat3_$Impl_$.getArray = function(this1) {
	return this1.subarray(4,((this1[2] << 16) + this1[3]) * 3 + 4);
};
var geom_matrix_Conversion = function() { };
$hxClasses["geom.matrix.Conversion"] = geom_matrix_Conversion;
geom_matrix_Conversion.__name__ = "geom.matrix.Conversion";
geom_matrix_Conversion._1x2toTpoint = function(m1x2) {
	return { x : m1x2.x, y : m1x2.y};
};
geom_matrix_Conversion._1x2toVec3 = function(m1x2) {
	var this1 = new Array(3);
	var vec = this1;
	vec[0] = m1x2.x;
	vec[1] = m1x2.y;
	vec[2] = 1.;
	return vec;
};
geom_matrix_Conversion.Vectorto1x2 = function(v) {
	var this1 = new geom_structure_Mat1x2(v[0],v[1]);
	return this1;
};
geom_matrix_Conversion.Vectorto1x3 = function(vec) {
	var this1 = new geom_structure_Mat1x3(vec[0],vec[1],vec[2]);
	return this1;
};
geom_matrix_Conversion._1x3toVector = function(m1x3) {
	var this1 = new Array(3);
	var vec = this1;
	vec[0] = m1x3.x;
	vec[1] = m1x3.y;
	vec[2] = m1x3.z;
	return vec;
};
geom_matrix_Conversion.Arrayto1x3 = function(arr) {
	var this1 = new geom_structure_Mat1x3(arr[0],arr[1],arr[2]);
	return this1;
};
geom_matrix_Conversion._1x3toArray = function(m1x3) {
	return [m1x3.x,m1x3.y,m1x3.z];
};
geom_matrix_Conversion.Vectorto1x4 = function(vec) {
	var this1 = new geom_structure_Mat1x4(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix_Conversion._1x4toVector = function(m1x4) {
	var this1 = new Array(4);
	var vec = this1;
	vec[0] = m1x4.x;
	vec[1] = m1x4.y;
	vec[2] = m1x4.z;
	vec[3] = m1x4.w;
	return vec;
};
geom_matrix_Conversion.Arrayto1x4 = function(arr) {
	var this1 = new geom_structure_Mat1x4(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix_Conversion._1x4toArray = function(m1x4) {
	return [m1x4.x,m1x4.y,m1x4.z,m1x4.w];
};
geom_matrix_Conversion.Arrayto2x2 = function(arr) {
	var this1 = new geom_structure_Mat2x2(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix_Conversion._2x2toArray = function(m2x2) {
	return [m2x2.a,m2x2.b,m2x2.c,m2x2.d];
};
geom_matrix_Conversion.Vectorto2x2 = function(vec) {
	var this1 = new geom_structure_Mat2x2(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix_Conversion._2x2toVector = function(m2x2) {
	var this1 = new Array(4);
	var vec = this1;
	vec[0] = m2x2.a;
	vec[1] = m2x2.b;
	vec[2] = m2x2.c;
	vec[3] = m2x2.d;
	return vec;
};
geom_matrix_Conversion.toTmatrix2x2 = function(m2x2) {
	var tm = { a : m2x2.a, b : m2x2.b, c : m2x2.c, d : m2x2.d};
	return tm;
};
geom_matrix_Conversion.Tmatrix2x2to2x2 = function(tm) {
	var m2x2 = tm;
	var this1 = m2x2;
	return this1;
};
geom_matrix_Conversion._2x2toTmatrix2x2numbered = function(m2x2) {
	var tm = { _00 : m2x2.a, _10 : m2x2.b, _01 : m2x2.c, _11 : m2x2.d};
	return tm;
};
geom_matrix_Conversion.Tmatrix2x2numberedto2x2 = function(tm) {
	var this1 = new geom_structure_Mat2x2(tm._00,tm._10,tm._01,tm._11);
	return this1;
};
geom_matrix_Conversion._2x2toAlternate2x2numbered = function(m2x2) {
	var am = { _00 : m2x2.a, _01 : m2x2.b, _10 : m2x2.c, _11 : m2x2.d};
	return am;
};
geom_matrix_Conversion.Alternate2x2numberedto2x2 = function(am) {
	var this1 = new geom_structure_Mat2x2(am._00,am._01,am._10,am._11);
	return this1;
};
geom_matrix_Conversion._2x2toFloat32ArrayTranspose_ = function(m2x2) {
	var this1 = new Float32Array(4);
	var arr = this1;
	arr[0] = m2x2.a;
	arr[1] = m2x2.c;
	arr[2] = m2x2.b;
	arr[3] = m2x2.d;
	return arr;
};
geom_matrix_Conversion._2x2toFloat32Array_ = function(m2x2) {
	var this1 = new Float32Array(4);
	var arr = this1;
	arr[0] = m2x2.a;
	arr[1] = m2x2.b;
	arr[2] = m2x2.c;
	arr[3] = m2x2.d;
	return arr;
};
geom_matrix_Conversion.Float32Array_to2x2Transpose = function(arr) {
	var this1 = new geom_structure_Mat2x2(arr[0],arr[2],arr[1],arr[3]);
	return this1;
};
geom_matrix_Conversion.Float32Array_2x2 = function(arr) {
	var this1 = new geom_structure_Mat2x2(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix_Conversion.Arrayto3x3 = function(arr) {
	var this1 = new geom_structure_Mat3x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8]);
	return this1;
};
geom_matrix_Conversion._3x3toArray = function(m3x3) {
	return [m3x3.a,m3x3.b,m3x3.c,m3x3.d,m3x3.e,m3x3.f,m3x3.g,m3x3.h,m3x3.i];
};
geom_matrix_Conversion._2x2to3x3 = function(m2) {
	var this1 = new geom_structure_Mat3x3(m2.a,m2.b,0.,m2.c,m2.d,0.,0.,0,1.);
	return this1;
};
geom_matrix_Conversion._3x3to2x2 = function(m3x3) {
	var this1 = new geom_structure_Mat2x2(m3x3.a,m3x3.b,m3x3.d,m3x3.e);
	return this1;
};
geom_matrix_Conversion.Vectorto3x3 = function(vec) {
	var this1 = new geom_structure_Mat3x3(vec[0],vec[1],vec[2],vec[3],vec[4],vec[5],vec[6],vec[7],vec[8]);
	return this1;
};
geom_matrix_Conversion._3x3toVector = function(m3x3) {
	var this1 = new Array(8);
	var v = this1;
	v[0] = m3x3.a;
	v[1] = m3x3.b;
	v[2] = m3x3.c;
	v[3] = m3x3.d;
	v[4] = m3x3.e;
	v[5] = m3x3.f;
	v[6] = m3x3.g;
	v[7] = m3x3.h;
	v[8] = m3x3.i;
	return v;
};
geom_matrix_Conversion._3x3toTmatrix3x3 = function(m3x3) {
	var tm = { a : m3x3.a, b : m3x3.b, c : m3x3.c, d : m3x3.d, e : m3x3.e, f : m3x3.f, g : m3x3.g, h : m3x3.h, i : m3x3.i};
	return tm;
};
geom_matrix_Conversion.Tmatrix3x3to3x3 = function(tm) {
	var m3x3 = tm;
	var this1 = m3x3;
	return this1;
};
geom_matrix_Conversion._3x3toTmatrix3x3numbered = function(m3x3) {
	var tm = { _00 : m3x3.a, _10 : m3x3.b, _20 : m3x3.c, _01 : m3x3.d, _11 : m3x3.e, _21 : m3x3.f, _02 : m3x3.g, _12 : m3x3.h, _22 : m3x3.i};
	return tm;
};
geom_matrix_Conversion.Tmatrix3x3numberedto3x3 = function(tm) {
	var this1 = new geom_structure_Mat3x3(tm._00,tm._10,tm._20,tm._01,tm._11,tm._21,tm._02,tm._12,tm._22);
	return this1;
};
geom_matrix_Conversion._m3x3toAlternate3x3numbered = function(m3x3) {
	var tm = { _00 : m3x3.a, _01 : m3x3.b, _02 : m3x3.c, _10 : m3x3.d, _11 : m3x3.e, _12 : m3x3.f, _20 : m3x3.g, _21 : m3x3.h, _22 : m3x3.i};
	return tm;
};
geom_matrix_Conversion.Alternate3x3numberedto3x3 = function(tm) {
	var this1 = new geom_structure_Mat3x3(tm._00,tm._01,tm._02,tm._10,tm._11,tm._12,tm._20,tm._21,tm._22);
	return this1;
};
geom_matrix_Conversion._3x3toFloat32ArrayTranspose_ = function(m3x3) {
	var this1 = new Float32Array(9);
	var arr = this1;
	arr[0] = m3x3.a;
	arr[1] = m3x3.d;
	arr[2] = m3x3.g;
	arr[3] = m3x3.b;
	arr[4] = m3x3.e;
	arr[5] = m3x3.h;
	arr[6] = m3x3.c;
	arr[7] = m3x3.f;
	arr[8] = m3x3.i;
	return arr;
};
geom_matrix_Conversion._3x3toFloat32Array_ = function(m3x3) {
	var this1 = new Float32Array(9);
	var arr = this1;
	arr[0] = m3x3.a;
	arr[1] = m3x3.b;
	arr[2] = m3x3.c;
	arr[3] = m3x3.d;
	arr[4] = m3x3.e;
	arr[5] = m3x3.f;
	arr[6] = m3x3.g;
	arr[7] = m3x3.h;
	arr[8] = m3x3.i;
	return arr;
};
geom_matrix_Conversion.Float32Array_to3x3Transpose = function(arr) {
	var this1 = new geom_structure_Mat3x3(arr[0],arr[3],arr[6],arr[1],arr[4],arr[7],arr[2],arr[5],arr[8]);
	return this1;
};
geom_matrix_Conversion.Float32Array_to3x3 = function(arr) {
	var this1 = new geom_structure_Mat3x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8]);
	return this1;
};
geom_matrix_Conversion._2x2to4x3 = function(m2) {
	var this1 = new geom_structure_Mat4x3(m2.a,m2.b,0.,0.,m2.c,m2.d,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Conversion._4x3to2x2 = function(m4x3) {
	var this1 = new geom_structure_Mat2x2(m4x3.a,m4x3.b,m4x3.e,m4x3.f);
	return this1;
};
geom_matrix_Conversion._3x3to4x3 = function(m3) {
	var this1 = new geom_structure_Mat4x3(m3.a,m3.b,m3.c,0.,m3.d,m3.e,m3.f,0.,m3.g,m3.h,m3.i,0.);
	return this1;
};
geom_matrix_Conversion._4x3to3x3 = function(m4x3) {
	var this1 = new geom_structure_Mat3x3(m4x3.a,m4x3.b,m4x3.c,m4x3.e,m4x3.f,m4x3.g,m4x3.i,m4x3.j,m4x3.k);
	return this1;
};
geom_matrix_Conversion.ArraytoMatrix4x3 = function(arr) {
	var this1 = new geom_structure_Mat4x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8],arr[9],arr[10],arr[11]);
	return this1;
};
geom_matrix_Conversion._4x3toArray = function(m4x3) {
	return [m4x3.a,m4x3.b,m4x3.c,m4x3.d,m4x3.e,m4x3.f,m4x3.g,m4x3.h,m4x3.i,m4x3.j,m4x3.k,m4x3.l];
};
geom_matrix_Conversion._4x3toVector = function(m4x3) {
	var this1 = new Array(12);
	var vec = this1;
	vec[0] = m4x3.a;
	vec[1] = m4x3.b;
	vec[2] = m4x3.c;
	vec[3] = m4x3.d;
	vec[4] = m4x3.e;
	vec[5] = m4x3.f;
	vec[6] = m4x3.g;
	vec[7] = m4x3.h;
	vec[8] = m4x3.i;
	vec[9] = m4x3.j;
	vec[10] = m4x3.k;
	vec[11] = m4x3.l;
	return vec;
};
geom_matrix_Conversion.Vectorto4x3 = function(v) {
	var this1 = new geom_structure_Mat4x3(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11]);
	return this1;
};
geom_matrix_Conversion._4x3toFloat32ArrayTranspose_ = function(m4x3) {
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = m4x3.a;
	arr[1] = m4x3.e;
	arr[2] = m4x3.i;
	arr[3] = 0.;
	arr[4] = m4x3.b;
	arr[5] = m4x3.f;
	arr[6] = m4x3.j;
	arr[7] = 0.;
	arr[8] = m4x3.c;
	arr[9] = m4x3.g;
	arr[10] = m4x3.k;
	arr[11] = 0.;
	arr[12] = m4x3.d;
	arr[13] = m4x3.h;
	arr[14] = m4x3.l;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Conversion._4x3toFloat32ArrayTransposeUpdate_ = function(arr,m4x3) {
	arr[0] = m4x3.a;
	arr[1] = m4x3.e;
	arr[2] = m4x3.i;
	arr[3] = 0.;
	arr[4] = m4x3.b;
	arr[5] = m4x3.f;
	arr[6] = m4x3.j;
	arr[7] = 0.;
	arr[8] = m4x3.c;
	arr[9] = m4x3.g;
	arr[10] = m4x3.k;
	arr[11] = 0.;
	arr[12] = m4x3.d;
	arr[13] = m4x3.h;
	arr[14] = m4x3.l;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Conversion._4x3toFloat32Array_ = function(m4x3) {
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = m4x3.a;
	arr[1] = m4x3.b;
	arr[2] = m4x3.c;
	arr[3] = m4x3.d;
	arr[4] = m4x3.e;
	arr[5] = m4x3.f;
	arr[6] = m4x3.g;
	arr[7] = m4x3.h;
	arr[8] = m4x3.i;
	arr[9] = m4x3.j;
	arr[10] = m4x3.k;
	arr[11] = m4x3.l;
	arr[12] = 0.;
	arr[13] = 0.;
	arr[14] = 0.;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Conversion._4x3toFloat32ArrayUpdate_ = function(arr,m4x3) {
	arr[0] = m4x3.a;
	arr[1] = m4x3.b;
	arr[2] = m4x3.c;
	arr[3] = m4x3.d;
	arr[4] = m4x3.e;
	arr[5] = m4x3.f;
	arr[6] = m4x3.g;
	arr[7] = m4x3.h;
	arr[8] = m4x3.i;
	arr[9] = m4x3.j;
	arr[10] = m4x3.k;
	arr[11] = m4x3.l;
	arr[12] = 0.;
	arr[13] = 0.;
	arr[14] = 0.;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Conversion.Float32Array_to4x3Transpose = function(arr) {
	var this1 = new geom_structure_Mat4x3(arr[0],arr[4],arr[8],arr[12],arr[1],arr[5],arr[9],arr[13],arr[2],arr[6],arr[10],arr[14]);
	return this1;
};
geom_matrix_Conversion.Float32Array_to4x3 = function(arr) {
	var this1 = new geom_structure_Mat4x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8],arr[9],arr[10],arr[11]);
	return this1;
};
geom_matrix_Conversion._4x3toTAffineMatrix = function(m4x3) {
	return { e0 : m4x3.a, e4 : m4x3.b, e8 : m4x3.c, e12 : m4x3.d, e1 : m4x3.e, e5 : m4x3.f, e9 : m4x3.g, e13 : m4x3.h, e2 : m4x3.i, e6 : m4x3.j, e10 : m4x3.k, e14 : m4x3.l};
};
geom_matrix_Conversion.Tmatrix4x4numberedto4x3 = function(m) {
	var this1 = new geom_structure_Mat4x3(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32);
	return this1;
};
geom_matrix_Conversion._4x3toTmatrix4x4numbered = function(m4x3) {
	return { _00 : m4x3.a, _10 : m4x3.b, _20 : m4x3.c, _30 : m4x3.d, _01 : m4x3.e, _11 : m4x3.f, _21 : m4x3.g, _31 : m4x3.h, _02 : m4x3.i, _12 : m4x3.j, _22 : m4x3.k, _32 : m4x3.l, _03 : 0., _13 : 0., _23 : 0., _33 : 1.};
};
geom_matrix_Conversion._4x3toTmatrix4x3 = function(m4x3) {
	var tm4x3 = { a : m4x3.a, b : m4x3.b, c : m4x3.c, d : m4x3.d, e : m4x3.e, f : m4x3.f, g : m4x3.g, h : m4x3.h, i : m4x3.i, j : m4x3.j, k : m4x3.k, l : m4x3.l};
	return tm4x3;
};
geom_matrix_Conversion.Tmatrix4x3to4x3 = function(tm) {
	var m4x3 = new geom_structure_Mat4x3(tm.a,tm.b,tm.c,tm.d,tm.e,tm.f,tm.g,tm.h,tm.i,tm.j,tm.k,tm.l);
	var this1 = m4x3;
	return this1;
};
geom_matrix_Conversion._4x4toFloat32ArrayTranspose_ = function(m4x4) {
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = m4x4.a;
	arr[1] = m4x4.e;
	arr[2] = m4x4.i;
	arr[3] = m4x4.m;
	arr[4] = m4x4.b;
	arr[5] = m4x4.f;
	arr[6] = m4x4.j;
	arr[7] = m4x4.n;
	arr[8] = m4x4.c;
	arr[9] = m4x4.g;
	arr[10] = m4x4.k;
	arr[11] = m4x4.o;
	arr[12] = m4x4.d;
	arr[13] = m4x4.h;
	arr[14] = m4x4.l;
	arr[15] = m4x4.p;
	return arr;
};
geom_matrix_Conversion._4x4toFloat32ArrayTransposeUpdate_ = function(arr,m4x4) {
	arr[0] = m4x4.a;
	arr[1] = m4x4.e;
	arr[2] = m4x4.i;
	arr[3] = m4x4.m;
	arr[4] = m4x4.b;
	arr[5] = m4x4.f;
	arr[6] = m4x4.j;
	arr[7] = m4x4.n;
	arr[8] = m4x4.c;
	arr[9] = m4x4.g;
	arr[10] = m4x4.k;
	arr[11] = m4x4.o;
	arr[12] = m4x4.d;
	arr[13] = m4x4.h;
	arr[14] = m4x4.l;
	arr[15] = m4x4.p;
	return arr;
};
geom_matrix_Conversion._4x4toFloat32Array_ = function(m4x4) {
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = m4x4.a;
	arr[1] = m4x4.b;
	arr[2] = m4x4.c;
	arr[3] = m4x4.d;
	arr[4] = m4x4.e;
	arr[5] = m4x4.f;
	arr[6] = m4x4.g;
	arr[7] = m4x4.h;
	arr[8] = m4x4.i;
	arr[9] = m4x4.j;
	arr[10] = m4x4.k;
	arr[11] = m4x4.l;
	arr[12] = m4x4.m;
	arr[13] = m4x4.n;
	arr[14] = m4x4.o;
	arr[15] = m4x4.p;
	return arr;
};
geom_matrix_Conversion._4x4toFloat32ArrayUpdate_ = function(arr,m4x4) {
	arr[0] = m4x4.a;
	arr[1] = m4x4.b;
	arr[2] = m4x4.c;
	arr[3] = m4x4.d;
	arr[4] = m4x4.e;
	arr[5] = m4x4.f;
	arr[6] = m4x4.g;
	arr[7] = m4x4.h;
	arr[8] = m4x4.i;
	arr[9] = m4x4.j;
	arr[10] = m4x4.k;
	arr[11] = m4x4.l;
	arr[12] = m4x4.m;
	arr[13] = m4x4.n;
	arr[14] = m4x4.o;
	arr[15] = m4x4.p;
	return arr;
};
geom_matrix_Conversion.Float32Array_to4x4Transpose = function(arr) {
	var this1 = new geom_structure_Mat4x4(arr[0],arr[4],arr[8],arr[12],arr[1],arr[5],arr[9],arr[13],arr[2],arr[6],arr[10],arr[14],arr[3],arr[7],arr[11],arr[15]);
	return this1;
};
geom_matrix_Conversion.Float32Array_to4x4 = function(arr) {
	var this1 = new geom_structure_Mat4x4(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8],arr[9],arr[10],arr[11],arr[12],arr[13],arr[14],arr[15]);
	return this1;
};
geom_matrix_Conversion._4x4toTmatrix4x4 = function(m4x4) {
	var tm = { a : m4x4.a, b : m4x4.b, c : m4x4.c, d : m4x4.d, e : m4x4.e, f : m4x4.f, g : m4x4.g, h : m4x4.h, i : m4x4.i, j : m4x4.j, k : m4x4.k, l : m4x4.l, m : m4x4.m, n : m4x4.n, o : m4x4.o, p : m4x4.p};
	return tm;
};
geom_matrix_Conversion.Tmatrix4x4to4x4 = function(tm) {
	var m4x4 = tm;
	var this1 = m4x4;
	return this1;
};
geom_matrix_Conversion._4x4toTmatrix4x4numbered = function(m4x4) {
	var tm = { _00 : m4x4.a, _10 : m4x4.b, _20 : m4x4.c, _30 : m4x4.d, _01 : m4x4.e, _11 : m4x4.f, _21 : m4x4.g, _31 : m4x4.h, _02 : m4x4.i, _12 : m4x4.j, _22 : m4x4.k, _32 : m4x4.l, _03 : m4x4.m, _13 : m4x4.n, _23 : m4x4.o, _33 : m4x4.p};
	return tm;
};
geom_matrix_Conversion.Tmatrix4x4numberedto4x4 = function(tm) {
	var this1 = new geom_structure_Mat4x4(tm._00,tm._10,tm._20,tm._30,tm._01,tm._11,tm._21,tm._31,tm._02,tm._12,tm._22,tm._32,tm._03,tm._13,tm._23,tm._33);
	return this1;
};
geom_matrix_Conversion._4x4toAlternate4x4numbered = function(m4x4) {
	var tm = { _00 : m4x4.a, _01 : m4x4.b, _02 : m4x4.c, _03 : m4x4.d, _10 : m4x4.e, _11 : m4x4.f, _12 : m4x4.g, _13 : m4x4.h, _20 : m4x4.i, _21 : m4x4.j, _22 : m4x4.k, _23 : m4x4.l, _30 : m4x4.m, _31 : m4x4.n, _32 : m4x4.o, _33 : m4x4.p};
	return tm;
};
geom_matrix_Conversion.Alternate4x4numberedto4x4 = function(tm) {
	var this1 = new geom_structure_Mat4x4(tm._00,tm._01,tm._02,tm._03,tm._10,tm._11,tm._12,tm._13,tm._20,tm._21,tm._22,tm._23,tm._30,tm._31,tm._32,tm._33);
	return this1;
};
var geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$ = {};
$hxClasses["geom.matrix._DualQuaternion.DualQuaternion_Impl_"] = geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$;
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.__name__ = "geom.matrix._DualQuaternion.DualQuaternion_Impl_";
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$._new = function(dq) {
	var this1 = dq;
	return this1;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.get_zero = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
	var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.clone = function(this1) {
	var this2 = this1.real;
	var this3 = new geom_structure_Mat1x4(this2.x,this2.y,this2.z,this2.w);
	var this4 = this1.dual;
	var this5 = new geom_structure_Mat1x4(this4.x,this4.y,this4.z,this4.w);
	var this6 = new geom_structure_DualQ(this3,this5);
	return this6;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.equal = function(a,b) {
	var a1 = a.real;
	var b1 = b.real;
	var delta = 0.0000001;
	if(!(Math.abs(a1.x - b1.x) >= delta || Math.abs(a1.y - b1.y) >= delta || Math.abs(a1.z - b1.z) >= delta || Math.abs(a1.w - b1.w) >= delta)) {
		var a2 = a.dual;
		var b2 = b.dual;
		var delta1 = 0.0000001;
		return !(Math.abs(a2.x - b2.x) >= delta1 || Math.abs(a2.y - b2.y) >= delta1 || Math.abs(a2.z - b2.z) >= delta1 || Math.abs(a2.w - b2.w) >= delta1);
	} else {
		return false;
	}
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.notEqual = function(a,b) {
	var tmp;
	var a1 = a.real;
	var b1 = b.real;
	var delta = 0.0000001;
	if(!(Math.abs(a1.x - b1.x) >= delta || Math.abs(a1.y - b1.y) >= delta || Math.abs(a1.z - b1.z) >= delta || Math.abs(a1.w - b1.w) >= delta)) {
		var a2 = a.dual;
		var b2 = b.dual;
		var delta1 = 0.0000001;
		tmp = !(Math.abs(a2.x - b2.x) >= delta1 || Math.abs(a2.y - b2.y) >= delta1 || Math.abs(a2.z - b2.z) >= delta1 || Math.abs(a2.w - b2.w) >= delta1);
	} else {
		tmp = false;
	}
	return !tmp;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.scaleMultiply = function(a,v) {
	var a1 = a.real;
	var this1 = new geom_structure_Mat1x4(a1.x * v,a1.y * v,a1.z * v,a1.w * v);
	var a2 = a.dual;
	var this2 = new geom_structure_Mat1x4(a2.x * v,a2.y * v,a2.z * v,a2.w * v);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.divide = function(a,v) {
	var v1 = 1 / v;
	var a1 = a.real;
	var this1 = new geom_structure_Mat1x4(a1.x * v1,a1.y * v1,a1.z * v1,a1.w * v1);
	var a2 = a.dual;
	var this2 = new geom_structure_Mat1x4(a2.x * v1,a2.y * v1,a2.z * v1,a2.w * v1);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.add = function(a,b) {
	var a1 = a.real;
	var b1 = b.real;
	var this1 = new geom_structure_Mat1x4(a1.x + b1.x,a1.y + b1.y,a1.z + b1.z,a1.w + b1.w);
	var a2 = a.dual;
	var b2 = b.dual;
	var this2 = new geom_structure_Mat1x4(a2.x + b2.x,a2.y + b2.y,a2.z + b2.z,a2.w + b2.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.subtract = function(a,b) {
	var a1 = a.real;
	var b1 = b.real;
	var this1 = new geom_structure_Mat1x4(a1.x - b1.x,a1.y - b1.y,a1.z - b1.z,a1.w - b1.w);
	var a2 = a.dual;
	var b2 = b.dual;
	var this2 = new geom_structure_Mat1x4(a2.x - b2.x,a2.y - b2.y,a2.z - b2.z,a2.w - b2.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.negate = function(a) {
	var a1 = a.real;
	var this1 = new geom_structure_Mat1x4(-a1.x,-a1.y,-a1.z,-a1.w);
	var a2 = a.dual;
	var this2 = new geom_structure_Mat1x4(-a2.x,-a2.y,-a2.z,-a2.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.create = function(r,t) {
	var currentLength = Math.sqrt(r.x * r.x + r.y * r.y + r.z * r.z + r.w * r.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		r.x *= mul;
		r.y *= mul;
		r.z *= mul;
		r.w *= mul;
		var real = r.x * r.x + r.y * r.y + r.z * r.z + r.w * r.w;
	}
	var real1 = r;
	var this1 = new geom_structure_Mat1x4(t.x,t.y,t.z,0.);
	var q = this1;
	var this2 = new geom_structure_Mat1x4(q.x * 0.5,q.y * 0.5,q.z * 0.5,q.w * 0.5);
	q = this2;
	var this3 = new geom_structure_Mat1x4(q.x * real1.w + q.y * real1.z - q.z * real1.y + q.w * real1.x,-q.x * real1.z + q.y * real1.w + q.z * real1.x + q.w * real1.y,q.x * real1.y - q.y * real1.x + q.z * real1.w + q.w * real1.z,-q.x * real1.x - q.y * real1.y - q.z * real1.z + q.w * real1.w);
	var dual = this3;
	var this4 = new geom_structure_DualQ(real1,dual);
	return this4;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.applyScale = function(this1,s) {
	var this2 = this1.real;
	var this3 = new geom_structure_Mat1x4(this2.x,this2.y,this2.z,this2.w);
	var this4 = this1.dual;
	var this5 = new geom_structure_Mat1x4(this4.x,this4.y,this4.z,this4.w);
	var this6 = new geom_structure_DualQ(this3,this5);
	var cloned = this6;
	var this7 = new geom_structure_Mat1x4(0,0,0,Math.sqrt(s));
	var this8 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	var this9 = new geom_structure_DualQ(this7,this8);
	var q2 = this9;
	var q1 = q2.real;
	var q21 = cloned.real;
	var this10 = new geom_structure_Mat1x4(q1.x * q21.w + q1.y * q21.z - q1.z * q21.y + q1.w * q21.x,-q1.x * q21.z + q1.y * q21.w + q1.z * q21.x + q1.w * q21.y,q1.x * q21.y - q1.y * q21.x + q1.z * q21.w + q1.w * q21.z,-q1.x * q21.x - q1.y * q21.y - q1.z * q21.z + q1.w * q21.w);
	var q11 = q2.dual;
	var q22 = cloned.real;
	var this11 = new geom_structure_Mat1x4(q11.x * q22.w + q11.y * q22.z - q11.z * q22.y + q11.w * q22.x,-q11.x * q22.z + q11.y * q22.w + q11.z * q22.x + q11.w * q22.y,q11.x * q22.y - q11.y * q22.x + q11.z * q22.w + q11.w * q22.z,-q11.x * q22.x - q11.y * q22.y - q11.z * q22.z + q11.w * q22.w);
	var a = this11;
	var q12 = cloned.dual;
	var q23 = q2.real;
	var this12 = new geom_structure_Mat1x4(q12.x * q23.w + q12.y * q23.z - q12.z * q23.y + q12.w * q23.x,-q12.x * q23.z + q12.y * q23.w + q12.z * q23.x + q12.w * q23.y,q12.x * q23.y - q12.y * q23.x + q12.z * q23.w + q12.w * q23.z,-q12.x * q23.x - q12.y * q23.y - q12.z * q23.z + q12.w * q23.w);
	var b = this12;
	var this13 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	var this14 = new geom_structure_DualQ(this10,this13);
	cloned = this14;
	return cloned;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.scalar = function(s) {
	var this1 = new geom_structure_Mat1x4(0,0,0,Math.sqrt(s));
	var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.dotProduct = function(a,b) {
	var a1 = a.real;
	var b1 = b.real;
	return a1.x * b1.x + a1.y * b1.y + a1.z * b1.z + a1.w * b1.w;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.normalize = function(this1) {
	var a = this1.real;
	var b = this1.real;
	var mag = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	if(mag < 0) {
		return null;
	}
	var oneOver = 1 / mag;
	var a1 = this1.real;
	var this2 = new geom_structure_Mat1x4(a1.x * oneOver,a1.y * oneOver,a1.z * oneOver,a1.w * oneOver);
	var a2 = this1.dual;
	var this3 = new geom_structure_Mat1x4(a2.x * oneOver,a2.y * oneOver,a2.z * oneOver,a2.w * oneOver);
	var this4 = new geom_structure_DualQ(this2,this3);
	return this4;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.conjugate = function(a) {
	var a1 = a.real;
	var this1 = new geom_structure_Mat1x4(-a1.x,-a1.y,-a1.z,a1.w);
	var a2 = a.dual;
	var this2 = new geom_structure_Mat1x4(-a2.x,-a2.y,-a2.z,a2.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.getTranslation = function(this1) {
	var a = this1.dual;
	var this2 = new geom_structure_Mat1x4(a.x * 2.,a.y * 2.,a.z * 2.,a.w * 2.);
	var q = this2;
	var a1 = this1.real;
	var this3 = new geom_structure_Mat1x4(-a1.x,-a1.y,-a1.z,a1.w);
	var q2 = this3;
	var this4 = new geom_structure_Mat1x4(q.x * q2.w + q.y * q2.z - q.z * q2.y + q.w * q2.x,-q.x * q2.z + q.y * q2.w + q.z * q2.x + q.w * q2.y,q.x * q2.y - q.y * q2.x + q.z * q2.w + q.w * q2.z,-q.x * q2.x - q.y * q2.y - q.z * q2.z + q.w * q2.w);
	q = this4;
	var this5 = new geom_structure_Mat1x4(q.x,q.y,q.z,1.);
	return this5;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.multiplyQ = function(q1,q2) {
	var q11 = q2.real;
	var q21 = q1.real;
	var this1 = new geom_structure_Mat1x4(q11.x * q21.w + q11.y * q21.z - q11.z * q21.y + q11.w * q21.x,-q11.x * q21.z + q11.y * q21.w + q11.z * q21.x + q11.w * q21.y,q11.x * q21.y - q11.y * q21.x + q11.z * q21.w + q11.w * q21.z,-q11.x * q21.x - q11.y * q21.y - q11.z * q21.z + q11.w * q21.w);
	var q12 = q2.dual;
	var q22 = q1.real;
	var this2 = new geom_structure_Mat1x4(q12.x * q22.w + q12.y * q22.z - q12.z * q22.y + q12.w * q22.x,-q12.x * q22.z + q12.y * q22.w + q12.z * q22.x + q12.w * q22.y,q12.x * q22.y - q12.y * q22.x + q12.z * q22.w + q12.w * q22.z,-q12.x * q22.x - q12.y * q22.y - q12.z * q22.z + q12.w * q22.w);
	var a = this2;
	var q13 = q1.dual;
	var q23 = q2.real;
	var this3 = new geom_structure_Mat1x4(q13.x * q23.w + q13.y * q23.z - q13.z * q23.y + q13.w * q23.x,-q13.x * q23.z + q13.y * q23.w + q13.z * q23.x + q13.w * q23.y,q13.x * q23.y - q13.y * q23.x + q13.z * q23.w + q13.w * q23.z,-q13.x * q23.x - q13.y * q23.y - q13.z * q23.z + q13.w * q23.w);
	var b = this3;
	var this4 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	var this5 = new geom_structure_DualQ(this1,this4);
	return this5;
};
geom_matrix__$DualQuaternion_DualQuaternion_$Impl_$.toMatrix4x3 = function(this1) {
	var a = this1.real;
	var b = this1.real;
	var mag = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	var q;
	if(mag < 0) {
		q = null;
	} else {
		var oneOver = 1 / mag;
		var a1 = this1.real;
		var this2 = new geom_structure_Mat1x4(a1.x * oneOver,a1.y * oneOver,a1.z * oneOver,a1.w * oneOver);
		var a2 = this1.dual;
		var this3 = new geom_structure_Mat1x4(a2.x * oneOver,a2.y * oneOver,a2.z * oneOver,a2.w * oneOver);
		var this4 = new geom_structure_DualQ(this2,this3);
		q = this4;
	}
	var this5 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var m = this5;
	var w = q.real.w;
	var x = q.real.x;
	var y = q.real.y;
	var z = q.real.z;
	m.a = w * w + x * x - y * y - z * z;
	m.e = 2 * x * y + 2 * w * z;
	m.i = 2 * x * z - 2 * w * y;
	m.b = 2 * x * y - 2 * w * z;
	m.f = w * w + y * y - x * x - z * z;
	m.j = 2 * y * z + 2 * w * x;
	m.c = 2 * x * z + 2 * w * y;
	m.g = 2 * y * z - 2 * w * x;
	m.k = w * w + z * z - x * x - y * y;
	var a3 = q.dual;
	var this6 = new geom_structure_Mat1x4(a3.x * 2.,a3.y * 2.,a3.z * 2.,a3.w * 2.);
	var q1 = this6;
	var a4 = q.real;
	var this7 = new geom_structure_Mat1x4(-a4.x,-a4.y,-a4.z,a4.w);
	var q2 = this7;
	var this8 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
	q1 = this8;
	var this9 = new geom_structure_Mat1x4(q1.x,q1.y,q1.z,1.);
	var t = this9;
	m.d = t.x;
	m.h = t.y;
	m.l = t.z;
	return m;
};
var geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$ = {};
$hxClasses["geom.matrix._Matrix1x2.Matrix1x2_Impl_"] = geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$;
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.__name__ = "geom.matrix._Matrix1x2.Matrix1x2_Impl_";
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.clone = function(this1) {
	var this2 = new geom_structure_Mat1x2(this1.x,this1.y);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.iterator = function(this1) {
	return HxOverrides.iter([this1.x,this1.y]);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.get_self = function(this1) {
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.get_magnitude = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.set_magnitude = function(this1,length) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	if(currentLength == 0) {
		return 0;
	} else {
		var mul = length / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.normalize = function(this1) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	if(currentLength != 0) {
		var mul = 1. / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		var tmp = this1.x * this1.x + this1.y * this1.y;
	}
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.get_zero = function() {
	var this1 = new geom_structure_Mat1x2(0.,0.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.get_nought = function(this1) {
	var this2 = new geom_structure_Mat1x2(0.,0.);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.get_unit = function() {
	var this1 = new geom_structure_Mat1x2(1.,1.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.get_one = function(this1) {
	var this2 = new geom_structure_Mat1x2(1.,1.);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.get_minus1 = function() {
	var this1 = new geom_structure_Mat1x2(1.,1.);
	var a = this1;
	var this2 = new geom_structure_Mat1x2(-a.x,-a.y);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.get_counting = function() {
	var this1 = new geom_structure_Mat1x2(1.,2.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.get_testCount = function(this1) {
	var this2 = new geom_structure_Mat1x2(1.,2.);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.negating = function(a) {
	var this1 = new geom_structure_Mat1x2(-a.x,-a.y);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.negate = function(this1) {
	var this2 = new geom_structure_Mat1x2(-this1.x,-this1.y);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.adding = function(a,b) {
	var this1 = new geom_structure_Mat1x2(a.x + b.x,a.y + b.y);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.add = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x + b.x,this1.y + b.y);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat1x2(a.x - b.x,a.y - b.y);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x - b.x,this1.y - b.y);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.isEqualling = function(a,b) {
	if(a.x == b.x) {
		return a.y == b.y;
	} else {
		return false;
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.isEqual = function(this1,b) {
	if(this1.x == b.x) {
		return this1.y == b.y;
	} else {
		return false;
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.scaleMultiplying = function(a,v) {
	var this1 = new geom_structure_Mat1x2(a.x * v,a.y * v);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.scaleMultiply = function(this1,v) {
	var this2 = new geom_structure_Mat1x2(this1.x * v,this1.y * v);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.lerpClampT = function(this1,p,t) {
	var interval = new geom_structure_Range(1.,0.);
	var t1 = t <= interval.l ? interval.l : t >= interval.u ? interval.u : t;
	var this2 = this1;
	var this3 = new geom_structure_Mat1x2(this2.x - p.x,this2.y - p.y);
	var s = this3;
	var this4 = new geom_structure_Mat1x2(-s.x,-s.y);
	var n = this4;
	var this5 = new geom_structure_Mat1x2(n.x * t1,n.y * t1);
	var tn = this5;
	var this6 = new geom_structure_Mat1x2(s.x + tn.x,s.y + tn.y);
	return this6;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.lerp = function(this1,p,t) {
	var this2 = this1;
	var this3 = new geom_structure_Mat1x2(this2.x - p.x,this2.y - p.y);
	var s = this3;
	var this4 = new geom_structure_Mat1x2(-s.x,-s.y);
	var n = this4;
	var this5 = new geom_structure_Mat1x2(n.x * t,n.y * t);
	var tn = this5;
	var this6 = new geom_structure_Mat1x2(s.x + tn.x,s.y + tn.y);
	return this6;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.sumXY = function(this1) {
	return this1.x + this1.y;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.topLeft = function() {
	var this1 = new geom_structure_Mat1x2(-1.,1.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.topRight = function() {
	var this1 = new geom_structure_Mat1x2(1.,1.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.bottomLeft = function() {
	var this1 = new geom_structure_Mat1x2(-1.,-1.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.bottomRight = function() {
	var this1 = new geom_structure_Mat1x2(1.,-1.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.north = function() {
	var this1 = new geom_structure_Mat1x2(0.,1.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.south = function() {
	var this1 = new geom_structure_Mat1x2(0.,-1.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.west = function() {
	var this1 = new geom_structure_Mat1x2(-1.,0.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.east = function() {
	var this1 = new geom_structure_Mat1x2(1.,0.);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.dotting = function(a,b) {
	var this1 = new geom_structure_Mat1x2(a.x * b.x,a.y * b.y);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.dot = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x * b.x,this1.y * b.y);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.dividing = function(a,v) {
	var a1 = a;
	var v1 = 1 / v;
	var this1 = new geom_structure_Mat1x2(a1.x * v1,a1.y * v1);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.divide = function(this1,v) {
	var a = this1;
	var v1 = 1 / v;
	var this2 = new geom_structure_Mat1x2(a.x * v1,a.y * v1);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.notEqual = function(a,b) {
	return !(a.x == b.x && a.y == b.y);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.perp = function(this1,b) {
	return this1.x * b.y - this1.y * b.x;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.mid = function(a,b) {
	var this1 = new geom_structure_Mat1x2((a.x + b.x) / 2,(a.y + b.y) / 2);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.distanceBetweenSquare = function(this1,b) {
	var dx = this1.x - b.x;
	var dy = this1.y - b.y;
	return dx * dx + dy * dy;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.distanceBetweenSquare_ = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x - b.x,this1.y - b.y);
	var c = this2;
	return c.x * c.x + c.y * c.y;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.distanceBetween = function(this1,b) {
	var dx = this1.x - b.x;
	var dy = this1.y - b.y;
	return Math.pow(dx * dx + dy * dy,0.5);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.span = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x - b.x,this1.y - b.y);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.lenSquare = function(this1) {
	return this1.x * this1.x + this1.y * this1.y;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.distance = function(this1) {
	return Math.pow(this1.x * this1.x + this1.y * this1.y,0.5);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.isLeft = function(this1,a,b) {
	return (b.x - a.x) * (this1.y - a.y) - (this1.x - a.x) * (b.y - a.y);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.triangleArea = function(a,b,c) {
	return Math.abs(((c.x - b.x) * (a.y - b.y) - (a.x - b.x) * (c.y - b.y)) / 2.);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.sign = function(n) {
	return Math.abs(n) / n | 0;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.thetaDifference = function(a,b) {
	var dx = a.x - b.x;
	var dy = a.y - b.y;
	return Math.atan2(dy,dx);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.inTri = function(this1,a,b,c) {
	var planeAB = (a.x - this1.x) * (b.y - this1.y) - (b.x - this1.x) * (a.y - this1.y);
	var planeBC = (b.x - this1.x) * (c.y - this1.y) - (c.x - this1.x) * (b.y - this1.y);
	var planeCA = (c.x - this1.x) * (a.y - this1.y) - (a.x - this1.x) * (c.y - this1.y);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.inTri2 = function(this1,a,b,c) {
	var v0x = c.x - a.x;
	var v0y = c.y - a.y;
	var v1x = b.x - a.x;
	var v1y = b.y - a.y;
	var v2x = this1.x - a.x;
	var v2y = this1.y - a.y;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	if(u >= 0 && v >= 0) {
		return u + v < 1;
	} else {
		return false;
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.inRect = function(this1,b,c) {
	var small = 0.0000000001;
	var minx = Math.min(b.x,c.x);
	var maxx = Math.max(b.x,c.x);
	var miny = Math.min(b.y,c.y);
	var maxy = Math.max(b.y,c.y);
	if(minx == maxx) {
		if(miny <= this1.y) {
			return this1.y <= maxy;
		} else {
			return false;
		}
	} else if(miny == maxy) {
		if(minx <= this1.x) {
			return this1.x <= maxx;
		} else {
			return false;
		}
	} else if(minx <= this1.x + small && this1.x - small <= maxx && miny <= this1.y + small) {
		return this1.y - small <= maxy;
	} else {
		return false;
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.convex = function(a,b,c) {
	return (a.y - b.y) * (c.x - b.x) + (b.x - a.x) * (c.y - b.y) >= 0;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.cross = function(a,b) {
	return a.x * b.y - a.y * b.x;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.theta = function(this1) {
	return Math.atan2(this1.y,this1.x);
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.close = function(this1,b,delta) {
	if(delta == null) {
		delta = 0.00001;
	}
	var dx = this1.x - b.x;
	if(dx < 0.00001 || dx > -1e-05) {
		var dy = this1.y - b.y;
		if(!(dy < 0.00001)) {
			return dy > -1e-05;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.xClose = function(this1,b,delta) {
	if(delta == null) {
		delta = 0.00001;
	}
	var dx = this1.x - b.x;
	if(!(dx < delta)) {
		return dx > -delta;
	} else {
		return true;
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.yClose = function(this1,b,delta) {
	if(delta == null) {
		delta = 0.00001;
	}
	var dy = this1.y - b.y;
	if(!(dy < delta)) {
		return dy > -delta;
	} else {
		return true;
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.pivotAround = function(this1,omega,pivot) {
	var px = this1.x - pivot.x;
	var py = this1.y - pivot.y;
	var px2 = px * Math.cos(omega) - py * Math.sin(omega);
	py = py * Math.cos(omega) + px * Math.sin(omega);
	var this2 = new geom_structure_Mat1x2(px2 + pivot.x,py + pivot.y);
	return this2;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.toTpoint = function(this1) {
	return { x : this1.x, y : this1.y};
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.toVec3 = function(this1) {
	var this2 = new Array(3);
	var vec = this2;
	vec[0] = this1.x;
	vec[1] = this1.y;
	vec[2] = 1.;
	return vec;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.fromVec3 = function(v) {
	var this1 = new geom_structure_Mat1x2(v[0],v[1]);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.fromArrayPos = function(arr,pos) {
	var this1 = new geom_structure_Mat1x2(arr[pos],arr[pos + 1]);
	return this1;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.toArrayPos = function(this1,arr,pos) {
	arr[pos] = this1.x;
	arr[pos + 1] = this1.y;
	return arr;
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.readItem = function(this1,k) {
	switch(k) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	default:
		throw new js__$Boot_HaxeError("use index less than 2");
	}
};
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.writeItem = function(this1,k,v) {
	switch(k) {
	case 0:
		this1.x = v;
		break;
	case 1:
		this1.y = v;
		break;
	default:
		throw new js__$Boot_HaxeError("use index less than 2");
	}
	return v;
};
var geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$ = {};
$hxClasses["geom.matrix._Matrix1x3.Matrix1x3_Impl_"] = geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$;
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.__name__ = "geom.matrix._Matrix1x3.Matrix1x3_Impl_";
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.clone = function(this1) {
	var this2 = new geom_structure_Mat1x3(this1.x,this1.y,this1.z);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.iterator = function(this1) {
	return HxOverrides.iter([this1.x,this1.y,this1.z]);
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.get_self = function(this1) {
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.get_magnitude = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.set_magnitude = function(this1,length) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
	if(currentLength == 0.) {
		return 0.;
	} else {
		var mul = length / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
	}
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.normalize = function(this1) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		var tmp = this1.x * this1.x + this1.y * this1.y + this1.z * this1.z;
	}
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.get_zero = function() {
	var this1 = new geom_structure_Mat1x3(0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.get_nought = function(this1) {
	var this2 = new geom_structure_Mat1x3(0.,0.,0.);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.get_unit = function() {
	var this1 = new geom_structure_Mat1x3(1.,1.,1.);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.get_one = function(this1) {
	var this2 = new geom_structure_Mat1x3(1.,1.,1.);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.get_minus1 = function() {
	var this1 = new geom_structure_Mat1x3(1.,1.,1.);
	var a = this1;
	var this2 = new geom_structure_Mat1x3(-a.x,-a.y,-a.z);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.get_counting = function() {
	var this1 = new geom_structure_Mat1x3(1.,2.,3.);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.get_testCount = function(this1) {
	var this2 = new geom_structure_Mat1x3(1.,2.,3.);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.identity = function(out) {
	out.x = 1.;
	out.y = 1.;
	out.z = 1.;
	return out;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.copy = function(pin,pout) {
	pout.x = pin.x;
	pout.y = pin.y;
	pout.z = pin.z;
	return pout;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.magnitudeSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.scalarProduct = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.dotProd = function(this1,b) {
	return this1.x * b.x + this1.y * b.y + this1.z * b.z;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.transformPoint = function(this1,t) {
	var this2 = new geom_structure_Mat1x3(t.a * this1.x + t.b * this1.y + t.c * this1.z + t.d,t.e * this1.x + t.f * this1.y + t.g * this1.z + t.h,t.i * this1.x + t.j * this1.y + t.k * this1.z + t.l);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.cross = function(this1,v) {
	var this2 = new geom_structure_Mat1x3(this1.y * v.z - this1.z * v.y,this1.z * v.x - this1.x * v.z,this1.x * v.y - this1.y * v.x);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.divide = function(a,v) {
	var v1 = 1 / v;
	var this1 = new geom_structure_Mat1x3(a.x * v1,a.y * v1,a.z * v1);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.divide2 = function(v,a) {
	var this1 = new geom_structure_Mat1x3(v / a.x,v / a.y,v / a.z);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.notEqual = function(a,b) {
	var delta = 0.0000001;
	return !(!(Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta));
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.negating = function(a) {
	var this1 = new geom_structure_Mat1x3(-a.x,-a.y,-a.z);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.negate = function(this1) {
	var this2 = new geom_structure_Mat1x3(-this1.x,-this1.y,-this1.z);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat1x3(a.x - b.x,a.y - b.y,a.z - b.z);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat1x3(this1.x - b.x,this1.y - b.y,this1.z - b.z);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.adding = function(a,b) {
	var this1 = new geom_structure_Mat1x3(a.x + b.x,a.y + b.y,a.z + b.z);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.add = function(this1,b) {
	var this2 = new geom_structure_Mat1x3(this1.x + b.x,this1.y + b.y,this1.z + b.z);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.scaleMultiplying = function(a,v) {
	var this1 = new geom_structure_Mat1x3(a.x * v,a.y * v,a.z * v);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.scaleMultiply = function(this1,v) {
	var this2 = new geom_structure_Mat1x3(this1.x * v,this1.y * v,this1.z * v);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.isEqualling = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta);
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.isEqual = function(this1,b) {
	var delta = 0.0000001;
	return !(Math.abs(this1.x - b.x) >= delta || Math.abs(this1.y - b.y) >= delta || Math.abs(this1.z - b.z) >= delta);
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.fromVec = function(vec) {
	var this1 = new geom_structure_Mat1x3(vec[0],vec[1],vec[2]);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.staticFromVec = function(this1,vec) {
	var this2 = new geom_structure_Mat1x3(vec[0],vec[1],vec[2]);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.toVector = function(this1) {
	var this2 = new Array(3);
	var vec = this2;
	vec[0] = this1.x;
	vec[1] = this1.y;
	vec[2] = this1.z;
	return vec;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.fromArray = function(arr) {
	var this1 = new geom_structure_Mat1x3(arr[0],arr[1],arr[2]);
	return this1;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.staticFromArray = function(this1,arr) {
	var this2 = new geom_structure_Mat1x3(arr[0],arr[1],arr[2]);
	return this2;
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.toArray = function(this1) {
	return [this1.x,this1.y,this1.z];
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.readItem = function(this1,k) {
	switch(k) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	default:
		throw new js__$Boot_HaxeError("index needs to be below 4");
	}
};
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.writeItem = function(this1,k,v) {
	switch(k) {
	case 0:
		this1.x = v;
		break;
	case 1:
		this1.y = v;
		break;
	case 3:
		this1.z = v;
		break;
	default:
		throw new js__$Boot_HaxeError("index needs to be below 4");
	}
	return v;
};
var geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$ = {};
$hxClasses["geom.matrix._Matrix1x4.Matrix1x4_Impl_"] = geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$;
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.__name__ = "geom.matrix._Matrix1x4.Matrix1x4_Impl_";
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.clone = function(this1) {
	var this2 = new geom_structure_Mat1x4(this1.x,this1.y,this1.z,this1.w);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.iterator = function(this1) {
	var arr = [this1.x,this1.y,this1.z,this1.w];
	return HxOverrides.iter(arr);
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.get_self = function(this1) {
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.get_magnitude = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.set_magnitude = function(this1,length) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	if(currentLength == 0.) {
		return 0.;
	} else {
		var mul = length / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		this1.w *= mul;
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	}
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.normalize = function(this1) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		this1.w *= mul;
		var tmp = this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
	}
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.get_zero = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.get_nought = function(this1) {
	var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.get_unit = function() {
	var this1 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.get_one = function(this1) {
	var this2 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.get_minus1 = function() {
	var this1 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	var a = this1;
	var this2 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,-a.w);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.get_counting = function() {
	var this1 = new geom_structure_Mat1x4(1.,2.,3.,4.);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.get_testCount = function(this1) {
	var this2 = new geom_structure_Mat1x4(1.,2.,3.,4.);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.negating = function(a) {
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,-a.w);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.negate = function(this1) {
	var this2 = new geom_structure_Mat1x4(-this1.x,-this1.y,-this1.z,-this1.w);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat1x4(a.x - b.x,a.y - b.y,a.z - b.z,a.w - b.w);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat1x4(this1.x - b.x,this1.y - b.y,this1.z - b.z,this1.w - b.w);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.adding = function(a,b) {
	var this1 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.add = function(this1,b) {
	var this2 = new geom_structure_Mat1x4(this1.x + b.x,this1.y + b.y,this1.z + b.z,this1.w + b.w);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.scaleMultiplying = function(a,v) {
	var this1 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.scaleMultiply = function(this1,v) {
	var this2 = new geom_structure_Mat1x4(this1.x * v,this1.y * v,this1.z * v,this1.w * v);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.isEqualling = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.isEqual = function(this1,b) {
	var delta = 0.0000001;
	return !(Math.abs(this1.x - b.x) >= delta || Math.abs(this1.y - b.y) >= delta || Math.abs(this1.z - b.z) >= delta || Math.abs(this1.w - b.w) >= delta);
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.identity = function(out) {
	out.x = 1.;
	out.y = 1.;
	out.z = 1.;
	out.w = 1.;
	return out;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.copy = function(pin,pout) {
	pout.x = pin.x;
	pout.y = pin.y;
	pout.z = pin.z;
	pout.w = pin.w;
	return pout;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.projectPoint = function(this1) {
	if(this1.z <= 0) {
		var this2 = new geom_structure_Mat1x4(0.,0.,this1.z,1.);
		return this2;
	} else {
		var this3 = new geom_structure_Mat1x4(this1.x / this1.z,this1.y / this1.z,this1.z,1.);
		return this3;
	}
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.notEqual = function(a,b) {
	var delta = 0.0000001;
	return !(!(Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta));
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.magnitudeSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.scalarProduct = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.dotProd = function(this1,b) {
	return this1.x * b.x + this1.y * b.y + this1.z * b.z + this1.w * b.w;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.transformPoint = function(this1,t) {
	var this2 = new geom_structure_Mat1x4(t.a * this1.x + t.b * this1.y + t.c * this1.z + t.d,t.e * this1.x + t.f * this1.y + t.g * this1.z + t.h,t.i * this1.x + t.j * this1.y + t.k * this1.z + t.l,1.);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.divide = function(a,v) {
	var v1 = 1 / v;
	var this1 = new geom_structure_Mat1x4(a.x * v1,a.y * v1,a.z * v1,a.w * v1);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.divide2 = function(v,a) {
	var this1 = new geom_structure_Mat1x4(v / a.x,v / a.y,v / a.z,v / a.w);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.conjugate = function(a) {
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,a.w);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.multiplyV = function(a,b,out) {
	var ax = a.x;
	var ay = a.y;
	var az = a.z;
	var aw = a.w;
	var bx = b.x;
	var by = b.y;
	var bz = b.z;
	var bw = b.w;
	out.x = ax * bw + aw * bx + ay * bz - az * by;
	out.y = ay * bw + aw * by + az * bx - ax * bz;
	out.z = az * bw + aw * bz + ax * by - ay * bx;
	out.w = aw * bw - ax * bx - ay * by - az * bz;
	return out;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.multiplyQ = function(q,v,out) {
	var vx = v.x;
	var vy = v.y;
	var vz = v.z;
	var qx = q.x;
	var qy = q.y;
	var qz = q.z;
	var qw = q.w;
	out.w = -qx * vx - qy * vy - qz * vz;
	out.x = qw * vx + qy * vz - qz * vy;
	out.y = qw * vy - qx * vz + qz * vx;
	out.z = qw * vz + qx * vy - qy * vx;
	return out;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.cross = function(this1,v) {
	var this2 = new geom_structure_Mat1x4(this1.y * v.z - this1.z * v.y,this1.z * v.x - this1.x * v.z,this1.x * v.y - this1.y * v.x,this1.w * v.w);
	return this2;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.constrainDistance = function(this1,anchor,distance) {
	var this2 = new geom_structure_Mat1x4(this1.x - anchor.x,this1.y - anchor.y,this1.z - anchor.z,this1.w - anchor.w);
	var this3 = this2;
	var currentLength = Math.sqrt(this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this3.x *= mul;
		this3.y *= mul;
		this3.z *= mul;
		this3.w *= mul;
		var tmp = this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w;
	}
	var a = this3;
	var this4 = new geom_structure_Mat1x4(a.x * distance,a.y * distance,a.z * distance,a.w * distance);
	var a1 = this4;
	var this5 = new geom_structure_Mat1x4(a1.x + anchor.x,a1.y + anchor.y,a1.z + anchor.z,a1.w + anchor.w);
	return this5;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.fromVec = function(vec) {
	var this1 = new geom_structure_Mat1x4(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.toVector = function(this1) {
	var this2 = new Array(4);
	var vec = this2;
	vec[0] = this1.x;
	vec[1] = this1.y;
	vec[2] = this1.z;
	vec[3] = this1.w;
	return vec;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.fromArray = function(arr) {
	var this1 = new geom_structure_Mat1x4(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.toArray = function(this1) {
	return [this1.x,this1.y,this1.z,this1.w];
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.readItem = function(this1,k) {
	switch(k) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	case 3:
		return this1.w;
	default:
		throw new js__$Boot_HaxeError("use index less than 4");
	}
};
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.writeItem = function(this1,k,v) {
	switch(k) {
	case 0:
		this1.x = v;
		break;
	case 1:
		this1.y = v;
		break;
	case 3:
		this1.z = v;
		break;
	case 4:
		this1.w = v;
		break;
	default:
		throw new js__$Boot_HaxeError("use index less than 4");
	}
	return v;
};
var geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$ = {};
$hxClasses["geom.matrix._Matrix2x2.Matrix2x2_Impl_"] = geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$;
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.__name__ = "geom.matrix._Matrix2x2.Matrix2x2_Impl_";
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.clone = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.b,this1.c,this1.d);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.iterator = function(this1) {
	return HxOverrides.iter([this1.a,this1.b,this1.c,this1.d]);
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_self = function(this1) {
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_zero = function() {
	var this1 = new geom_structure_Mat2x2(0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_nought = function(this1) {
	var this2 = new geom_structure_Mat2x2(0.,0.,0.,0.);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_unit = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_one = function(this1) {
	var this2 = new geom_structure_Mat2x2(1.,0.,0.,1.);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_minus1 = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,1.);
	var a = this1;
	var this2 = new geom_structure_Mat2x2(-a.a,-a.b,-a.c,-a.d);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_counting = function() {
	var this1 = new geom_structure_Mat2x2(1.,2.,3.,4.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_testCount = function(this1) {
	var this2 = new geom_structure_Mat2x2(1.,2.,3.,4.);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get__1234 = function() {
	var this1 = new geom_structure_Mat2x2(1.,2.,3.,4.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_topLeft = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,-1.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_topRight = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_bottomLeft = function() {
	var this1 = new geom_structure_Mat2x2(-1.,0.,0.,-1.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_bottomRight = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,-1.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_north = function() {
	var this1 = new geom_structure_Mat2x2(0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_south = function() {
	var this1 = new geom_structure_Mat2x2(0.,0.,0.,-1.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_west = function() {
	var this1 = new geom_structure_Mat2x2(-1.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.get_east = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.create = function(this1,a,b,c,d) {
	var this2 = new geom_structure_Mat2x2(a,b,c,d);
	this1 = this2;
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.scale = function(p) {
	var this1 = new geom_structure_Mat2x2(p.x,0.,0.,p.y);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.rotation = function(alpha) {
	var this1 = new geom_structure_Mat2x2(Math.cos(alpha),-Math.sin(alpha),Math.sin(alpha),Math.cos(alpha));
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.transpose = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.c,this1.b,this1.d);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.negating = function(a) {
	var this1 = new geom_structure_Mat2x2(-a.a,-a.b,-a.c,-a.d);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.negate = function(this1) {
	var this2 = new geom_structure_Mat2x2(-this1.a,-this1.b,-this1.c,-this1.d);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.adding = function(a,b) {
	var this1 = new geom_structure_Mat2x2(a.a + b.a,a.b + b.b,a.c + b.c,a.d + b.d);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.add = function(this1,b) {
	var this2 = new geom_structure_Mat2x2(this1.a + b.a,this1.b + b.b,this1.c + b.c,this1.d + b.d);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.notEqual = function(a,b) {
	var delta = 0.0000001;
	return !(!(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta));
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat2x2(a.a - b.a,a.b - b.b,a.c - b.c,a.d - b.d);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat2x2(this1.a - b.a,this1.b - b.b,this1.c - b.c,this1.d - b.d);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.multiplyValue = function(v,m) {
	var this1 = new geom_structure_Mat2x2(m.a * v,m.b * v,m.c * v,m.d * v);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.scaleByVector2 = function(this1,p) {
	var this2 = new geom_structure_Mat2x2(this1.a * p.x,this1.b,this1.c,this1.d * p.y);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.multiply = function(a2,b2) {
	var this1 = new geom_structure_Mat2x2(a2.a * b2.a + a2.b * b2.c,a2.a * b2.b + a2.b * b2.d,a2.c * b2.a + a2.d * b2.c,a2.c * b2.b + a2.d * b2.d);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.multiplyPoint = function(this1,p) {
	var x = this1.a * p.x + this1.c * p.y;
	var y = this1.b * p.x + this1.d * p.y;
	var this2 = new geom_structure_Mat1x2(x,y);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.det = function(this1) {
	return this1.a * this1.d - this1.b * this1.c;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.inverse = function(this1) {
	var d = this1.a * this1.d - this1.b * this1.c;
	if(d == 0) {
		return null;
	} else {
		var this2 = new geom_structure_Mat2x2(this1.d,-this1.b,-this1.c,this1.a);
		var adj = this2;
		var v = 1 / d;
		var this3 = new geom_structure_Mat2x2(adj.a * v,adj.b * v,adj.c * v,adj.d * v);
		return this3;
	}
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.to3x3 = function(this1) {
	var this2 = new geom_structure_Mat3x3(this1.a,this1.b,0.,this1.c,this1.d,0.,0.,0,1.);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.to4x3 = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.a,this1.b,0.,0.,this1.c,this1.d,0.,0.,0.,0.,1.,0.);
	return this2;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.from3x3 = function(m3) {
	var this1 = new geom_structure_Mat2x2(m3.a,m3.b,m3.d,m3.e);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.from4x3 = function(m4) {
	var this1 = new geom_structure_Mat2x2(m4.a,m4.b,m4.e,m4.f);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.fromArr = function(arr) {
	var this1 = new geom_structure_Mat2x2(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.toArray = function(this1) {
	return [this1.a,this1.b,this1.c,this1.d];
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.fromVec = function(vec) {
	var this1 = new geom_structure_Mat2x2(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.toVector = function(this1) {
	var this2 = new Array(4);
	var vec = this2;
	vec[0] = this1.a;
	vec[1] = this1.b;
	vec[2] = this1.c;
	vec[3] = this1.d;
	return vec;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.setXY = function(this1,x,y,v) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			this1.a = v;
			break;
		case 1:
			this1.c = v;
			break;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix2x2");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			this1.b = v;
			break;
		case 1:
			this1.d = v;
			break;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix2x2");
		}
		break;
	default:
		throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix2x2");
	}
	return this1;
};
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.getXY = function(this1,x,y) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a;
		case 1:
			return this1.c;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix2x2");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.b;
		case 1:
			return this1.d;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix2x2");
		}
		break;
	default:
		throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix2x2");
	}
};
var geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$ = {};
$hxClasses["geom.matrix._Matrix3x3.Matrix3x3_Impl_"] = geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$;
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.__name__ = "geom.matrix._Matrix3x3.Matrix3x3_Impl_";
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.clone = function(this1) {
	var this2 = new geom_structure_Mat3x3(this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.iterator = function(this1) {
	var arr = [this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i];
	return HxOverrides.iter(arr);
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.get_self = function(this1) {
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.get_zero = function() {
	var this1 = new geom_structure_Mat3x3(0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.get_nought = function(this1) {
	var this2 = new geom_structure_Mat3x3(0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.get_unit = function() {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.get_one = function(this1) {
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,1.);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.get_minus1 = function() {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,1.);
	var a = this1;
	var this2 = new geom_structure_Mat3x3(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.get_counting = function() {
	var this1 = new geom_structure_Mat3x3(1.,2.,3.,4.,5.,6.,7.,8.,9.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.get_testCount = function(this1) {
	var this2 = new geom_structure_Mat3x3(1.,2.,3.,4.,5.,6.,7.,8.,9.);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.get__123456789 = function() {
	var this1 = new geom_structure_Mat3x3(1.,2.,3.,4.,5.,6.,7.,8.,9.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.radianX = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,c,-s,0.,s,c);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.rotateX = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,0.,c,-s,0.,s,c);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.radianY = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat3x3(c,0.,s,0.,1.,0,-s,0.,c);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.rotateY = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat3x3(c,0.,s,0.,1.,0,-s,0.,c);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.radianZ = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat3x3(c,-s,0.,s,c,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.rotateZ = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat3x3(c,-s,0.,s,c,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.rotate = function(this1,theta) {
	var theta1 = -theta;
	var c = Math.cos(theta1);
	var s = Math.sin(theta1);
	var this2 = new geom_structure_Mat3x3(c,-s,0.,s,c,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.xShear = function(theta) {
	var this1 = new geom_structure_Mat3x3(1.,Math.tan(theta),0.,0,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.shearX = function(this1,theta) {
	var this2 = new geom_structure_Mat3x3(1.,Math.tan(theta),0.,0,1.,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.yShear = function(theta) {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,Math.tan(theta),1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.shearY = function(this1,theta) {
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,Math.tan(theta),1.,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.xFlip = function() {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0,-1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.flipX = function(this1) {
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,0,-1.,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.yFlip = function() {
	var this1 = new geom_structure_Mat3x3(-1.,0.,0.,0,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.flipY = function(this1) {
	var this2 = new geom_structure_Mat3x3(-1.,0.,0.,0,1.,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.xyFlip = function() {
	var this1 = new geom_structure_Mat3x3(-1.,0.,0.,0,-1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.flipXY = function(this1) {
	var this2 = new geom_structure_Mat3x3(-1.,0.,0.,0,-1.,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.sxyz = function(x,y,z) {
	var this1 = new geom_structure_Mat3x3(x,0.,0.,0.,y,0.,0.,0.,z);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.scaleXYZ = function(this1,x,y,z) {
	var this2 = new geom_structure_Mat3x3(x,0.,0.,0.,y,0.,0.,0.,z);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.sx = function(x) {
	var this1 = new geom_structure_Mat3x3(x,0.,0.,0.,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.scaleX = function(this1,x) {
	var this2 = new geom_structure_Mat3x3(x,0.,0.,0.,1.,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.sy = function(y) {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,y,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.scaleY = function(this1,y) {
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,0.,y,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.sz = function(z) {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,z);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.scaleZ = function(this1,z) {
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,z);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.scale = function(this1,s) {
	var this2 = new geom_structure_Mat3x3(s,0.,0.,0.,s,0.,0.,0.,s);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	var q1 = this3;
	var this4 = new geom_structure_Mat3x3(this1.a * q1.a + this1.b * q1.d + this1.c * q1.g,this1.a * q1.b + this1.b * q1.e + this1.c * q1.h,this1.a * q1.c + this1.b * q1.f + this1.c * q1.i,this1.d * q1.a + this1.e * this1.d + this1.f * q1.g,this1.d * q1.b + this1.e * q1.e + this1.f * q1.h,this1.d * q1.c + this1.e * q1.f + this1.f * q1.i,this1.g * this1.a + this1.h * q1.d + this1.i * q1.g,this1.g * q1.b + this1.h * q1.e + this1.i * q1.h,this1.g * q1.c + this1.h * q1.f + this1.i * q1.i);
	return this4;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.scale2D = function(this1,s) {
	var this2 = new geom_structure_Mat3x3(s,0.,0.,0.,s,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.tx = function(x) {
	var this1 = new geom_structure_Mat3x3(1.,0.,x,0.,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.translateX = function(this1,x) {
	var this2 = new geom_structure_Mat3x3(1.,0.,x,0.,1.,0.,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.ty = function(y) {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,y,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.txy = function(x,y) {
	var this1 = new geom_structure_Mat3x3(1.,0.,x,0.,1.,y,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.translateXY = function(this1,x,y) {
	var this2 = new geom_structure_Mat3x3(1.,0.,x,0.,1.,y,0.,0.,1.);
	var q = this2;
	var this3 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this3;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.transpose = function(this1) {
	var this2 = new geom_structure_Mat3x3(this1.a,this1.d,this1.g,this1.b,this1.e,this1.h,this1.c,this1.f,this1.i);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.negating = function(a) {
	var this1 = new geom_structure_Mat3x3(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.negate = function(this1) {
	var this2 = new geom_structure_Mat3x3(-this1.a,-this1.b,-this1.c,-this1.d,-this1.e,-this1.f,-this1.g,-this1.h,-this1.i);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.adding = function(a,b) {
	var this1 = new geom_structure_Mat3x3(a.a + b.a,a.b + b.b,a.c + b.c,a.d + b.d,a.e + b.e,a.f + b.f,a.d + b.d,a.h + b.h,a.i + b.i);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.add = function(this1,b) {
	var this2 = new geom_structure_Mat3x3(this1.a + b.a,this1.b + b.b,this1.c + b.c,this1.d + b.d,this1.e + b.e,this1.f + b.f,this1.d + b.d,this1.h + b.h,this1.i + b.i);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat3x3(a.a - b.a,a.b - b.b,a.c - b.c,a.d - b.d,a.e - b.e,a.f - b.f,a.g - b.g,a.h - b.h,a.i - b.i);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat3x3(this1.a - b.a,this1.b - b.b,this1.c - b.c,this1.d - b.d,this1.e - b.e,this1.f - b.f,this1.g - b.g,this1.h - b.h,this1.i - b.i);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.scaleVector4 = function(this1,p) {
	var this2 = new geom_structure_Mat3x3(this1.a * p.x,this1.b,this1.c,this1.d,this1.e * p.y,this1.f,this1.g,this1.h,this1.i * p.z);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.scaleVector2 = function(this1,p) {
	var this2 = new geom_structure_Mat3x3(this1.a * p.x,this1.b,this1.c,this1.d,this1.e * p.y,this1.f,this1.g,this1.h,this1.i);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.scaleVectorT3 = function(this1,p) {
	var this2 = new geom_structure_Mat3x3(this1.a * p.x,this1.b,this1.c,this1.d,this1.e * p.y,this1.f,this1.g,this1.h,this1.i * p.y);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.multiplyV = function(v,m) {
	var this1 = new geom_structure_Mat3x3(m.a * v,m.b * v,m.c * v,m.d * v,m.e * v,m.f * v,m.g * v,m.h * v,m.i * v);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.multiply = function(p,q) {
	var this1 = new geom_structure_Mat3x3(p.a * q.a + p.b * q.d + p.c * q.g,p.a * q.b + p.b * q.e + p.c * q.h,p.a * q.c + p.b * q.f + p.c * q.i,p.d * q.a + p.e * p.d + p.f * q.g,p.d * q.b + p.e * q.e + p.f * q.h,p.d * q.c + p.e * q.f + p.f * q.i,p.g * p.a + p.h * q.d + p.i * q.g,p.g * q.b + p.h * q.e + p.i * q.h,p.g * q.c + p.h * q.f + p.i * q.i);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta);
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.isEqual = function(this1,b) {
	var delta = 0.0000001;
	return !(Math.abs(this1.a - b.a) >= delta || Math.abs(this1.b - b.b) >= delta || Math.abs(this1.c - b.c) >= delta || Math.abs(this1.d - b.d) >= delta || Math.abs(this1.e - b.e) >= delta || Math.abs(this1.f - b.f) >= delta || Math.abs(this1.g - b.g) >= delta || Math.abs(this1.h - b.h) >= delta || Math.abs(this1.i - b.i) >= delta);
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.notEqual = function(a,b) {
	var delta = 0.0000001;
	return !(!(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta));
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.cofactor = function(this1,a,b,c,d) {
	return a * d - b * c;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.det = function(this1) {
	return this1.a * (this1.e * this1.i - this1.f * this1.h) - this1.b * (this1.d * this1.i - this1.f * this1.g) + this1.c * (this1.d * this1.h - this1.e * this1.g);
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.inverse = function(this1) {
	var d = this1.a * (this1.e * this1.i - this1.f * this1.h) - this1.b * (this1.d * this1.i - this1.f * this1.g) + this1.c * (this1.d * this1.h - this1.e * this1.g);
	if(d == 0) {
		return null;
	} else {
		var this2 = new geom_structure_Mat3x3(this1.e * this1.i - this1.f * this1.h,-(this1.d * this1.i - this1.f * this1.g),this1.d * this1.h - this1.e * this1.g,-(this1.b * this1.i - this1.c * this1.h),this1.a * this1.i - this1.c * this1.g,-(this1.a * this1.h - this1.b * this1.g),this1.b * this1.f - this1.c * this1.e,-(this1.a * this1.f - this1.c * this1.d),this1.a * this1.e - this1.b * this1.d);
		var adj = this2;
		var v = 1 / d;
		var this3 = new geom_structure_Mat3x3(adj.a * v,adj.b * v,adj.c * v,adj.d * v,adj.e * v,adj.f * v,adj.g * v,adj.h * v,adj.i * v);
		return this3;
	}
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.fromArr = function(arr) {
	var this1 = new geom_structure_Mat3x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8]);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.toArray = function(this1) {
	return [this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i];
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.to2x2 = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.b,this1.d,this1.e);
	return this2;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.to3D = function(m2) {
	var this1 = new geom_structure_Mat3x3(m2.a,m2.b,0.,m2.c,m2.d,0.,0.,0,0.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.from2x2 = function(m2) {
	var this1 = new geom_structure_Mat3x3(m2.a,m2.b,0.,m2.c,m2.d,0.,0.,0,1.);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.to4x3 = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.b,this1.d,this1.e);
	var this3 = this2;
	var this4 = new geom_structure_Mat4x3(this3.a,this3.b,0.,0.,this3.c,this3.d,0.,0.,0.,0.,1.,0.);
	return this4;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.from4x3 = function(m4) {
	var this1 = new geom_structure_Mat3x3(m4.a,m4.b,m4.c,m4.e,m4.f,m4.g,m4.i,m4.j,m4.k);
	var m3 = this1;
	var this2 = new geom_structure_Mat4x3(m3.a,m3.b,m3.c,0.,m3.d,m3.e,m3.f,0.,m3.g,m3.h,m3.i,0.);
	var this3 = this2;
	var this4 = new geom_structure_Mat3x3(this3.a,this3.b,this3.c,this3.e,this3.f,this3.g,this3.i,this3.j,this3.k);
	return this4;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.fromVec = function(vec) {
	var this1 = new geom_structure_Mat3x3(vec[0],vec[1],vec[2],vec[3],vec[4],vec[5],vec[6],vec[7],vec[8]);
	return this1;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.toVector = function(this1) {
	var this2 = new Array(8);
	var v = this2;
	v[0] = this1.a;
	v[1] = this1.b;
	v[2] = this1.c;
	v[3] = this1.d;
	v[4] = this1.e;
	v[5] = this1.f;
	v[6] = this1.g;
	v[7] = this1.h;
	v[8] = this1.i;
	return v;
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.setXY = function(this1,x,y,v) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a = v;
		case 1:
			return this1.b = v;
		case 2:
			return this1.c = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix3x3");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.d = v;
		case 1:
			return this1.e = v;
		case 2:
			return this1.f = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix3x3");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.g = v;
		case 1:
			return this1.h = v;
		case 2:
			return this1.i = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix3x3");
		}
		break;
	default:
		throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix3x3");
	}
};
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.getXY = function(this1,x,y) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a;
		case 1:
			return this1.b;
		case 2:
			return this1.c;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix3x3");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.d;
		case 1:
			return this1.e;
		case 2:
			return this1.f;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix3x3");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.g;
		case 1:
			return this1.h;
		case 2:
			return this1.i;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix3x3");
		}
		break;
	default:
		throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix3x3");
	}
};
var geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$ = {};
$hxClasses["geom.matrix._Matrix4x3.Matrix4x3_Impl_"] = geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$;
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.__name__ = "geom.matrix._Matrix4x3.Matrix4x3_Impl_";
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.clone = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.iterator = function(this1) {
	var arr = [this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l];
	return HxOverrides.iter(arr);
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_self = function(this1) {
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_zero = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_nought = function(this1) {
	var this2 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_unit = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_one = function(this1) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_minus1 = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var a = this1;
	var this2 = new geom_structure_Mat4x3(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i,-a.j,-a.k,-a.l);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_counting = function() {
	var this1 = new geom_structure_Mat4x3(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_testCount = function(this1) {
	var this2 = new geom_structure_Mat4x3(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_topLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_topRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_bottomLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_bottomRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_north = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_south = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_west = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_east = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_front = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_frontNorth = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_frontTopLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_frontTopRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_frontBottomLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_frontBottomRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_frontSouth = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_frontWest = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_frontEast = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_back = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_backTopLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_backTopRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_backBottomLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_backBottomRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_backNorth = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_backSouth = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_backWest = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.get_backEast = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.radianX = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.rotateX = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s1.a + this1.b * s1.e + this1.c * s1.i,this1.a * s1.b + this1.b * s1.f + this1.c * s1.j,this1.a * s1.c + this1.b * s1.g + this1.c * s1.k,this1.a * s1.d + this1.b * s1.h + this1.c * s1.l + this1.d,this1.e * s1.a + this1.f * s1.e + this1.g * s1.i,this1.e * s1.b + this1.f * s1.f + this1.g * s1.j,this1.e * s1.c + this1.f * s1.g + this1.g * s1.k,this1.e * s1.d + this1.f * s1.h + this1.g * s1.l + this1.h,this1.i * s1.a + this1.j * s1.e + this1.k * s1.i,this1.i * s1.b + this1.j * s1.f + this1.k * s1.j,this1.i * s1.c + this1.j * s1.g + this1.k * s1.k,this1.i * s1.d + this1.j * s1.h + this1.k * s1.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.rotationX = function(theta) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s1.a + this2.b * s1.e + this2.c * s1.i,this2.a * s1.b + this2.b * s1.f + this2.c * s1.j,this2.a * s1.c + this2.b * s1.g + this2.c * s1.k,this2.a * s1.d + this2.b * s1.h + this2.c * s1.l + this2.d,this2.e * s1.a + this2.f * s1.e + this2.g * s1.i,this2.e * s1.b + this2.f * s1.f + this2.g * s1.j,this2.e * s1.c + this2.f * s1.g + this2.g * s1.k,this2.e * s1.d + this2.f * s1.h + this2.g * s1.l + this2.h,this2.i * s1.a + this2.j * s1.e + this2.k * s1.i,this2.i * s1.b + this2.j * s1.f + this2.k * s1.j,this2.i * s1.c + this2.j * s1.g + this2.k * s1.k,this2.i * s1.d + this2.j * s1.h + this2.k * s1.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.radianY = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat4x3(c,0.,s,0.,0.,1.,0.,0.,-s,0.,c,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.rotateY = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat4x3(c,0.,s,0.,0.,1.,0.,0.,-s,0.,c,0.);
	var s1 = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s1.a + this1.b * s1.e + this1.c * s1.i,this1.a * s1.b + this1.b * s1.f + this1.c * s1.j,this1.a * s1.c + this1.b * s1.g + this1.c * s1.k,this1.a * s1.d + this1.b * s1.h + this1.c * s1.l + this1.d,this1.e * s1.a + this1.f * s1.e + this1.g * s1.i,this1.e * s1.b + this1.f * s1.f + this1.g * s1.j,this1.e * s1.c + this1.f * s1.g + this1.g * s1.k,this1.e * s1.d + this1.f * s1.h + this1.g * s1.l + this1.h,this1.i * s1.a + this1.j * s1.e + this1.k * s1.i,this1.i * s1.b + this1.j * s1.f + this1.k * s1.j,this1.i * s1.c + this1.j * s1.g + this1.k * s1.k,this1.i * s1.d + this1.j * s1.h + this1.k * s1.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.rotationY = function(theta) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this3 = new geom_structure_Mat4x3(c,0.,s,0.,0.,1.,0.,0.,-s,0.,c,0.);
	var s1 = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s1.a + this2.b * s1.e + this2.c * s1.i,this2.a * s1.b + this2.b * s1.f + this2.c * s1.j,this2.a * s1.c + this2.b * s1.g + this2.c * s1.k,this2.a * s1.d + this2.b * s1.h + this2.c * s1.l + this2.d,this2.e * s1.a + this2.f * s1.e + this2.g * s1.i,this2.e * s1.b + this2.f * s1.f + this2.g * s1.j,this2.e * s1.c + this2.f * s1.g + this2.g * s1.k,this2.e * s1.d + this2.f * s1.h + this2.g * s1.l + this2.h,this2.i * s1.a + this2.j * s1.e + this2.k * s1.i,this2.i * s1.b + this2.j * s1.f + this2.k * s1.j,this2.i * s1.c + this2.j * s1.g + this2.k * s1.k,this2.i * s1.d + this2.j * s1.h + this2.k * s1.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.radianZ = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat4x3(c,-s,0.,0.,s,c,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.rotateZ = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat4x3(c,-s,0.,0.,s,c,0.,0.,0.,0.,1.,0.);
	var s1 = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s1.a + this1.b * s1.e + this1.c * s1.i,this1.a * s1.b + this1.b * s1.f + this1.c * s1.j,this1.a * s1.c + this1.b * s1.g + this1.c * s1.k,this1.a * s1.d + this1.b * s1.h + this1.c * s1.l + this1.d,this1.e * s1.a + this1.f * s1.e + this1.g * s1.i,this1.e * s1.b + this1.f * s1.f + this1.g * s1.j,this1.e * s1.c + this1.f * s1.g + this1.g * s1.k,this1.e * s1.d + this1.f * s1.h + this1.g * s1.l + this1.h,this1.i * s1.a + this1.j * s1.e + this1.k * s1.i,this1.i * s1.b + this1.j * s1.f + this1.k * s1.j,this1.i * s1.c + this1.j * s1.g + this1.k * s1.k,this1.i * s1.d + this1.j * s1.h + this1.k * s1.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.rotationZ = function(theta) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this3 = new geom_structure_Mat4x3(c,-s,0.,0.,s,c,0.,0.,0.,0.,1.,0.);
	var s1 = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s1.a + this2.b * s1.e + this2.c * s1.i,this2.a * s1.b + this2.b * s1.f + this2.c * s1.j,this2.a * s1.c + this2.b * s1.g + this2.c * s1.k,this2.a * s1.d + this2.b * s1.h + this2.c * s1.l + this2.d,this2.e * s1.a + this2.f * s1.e + this2.g * s1.i,this2.e * s1.b + this2.f * s1.f + this2.g * s1.j,this2.e * s1.c + this2.f * s1.g + this2.g * s1.k,this2.e * s1.d + this2.f * s1.h + this2.g * s1.l + this2.h,this2.i * s1.a + this2.j * s1.e + this2.k * s1.i,this2.i * s1.b + this2.j * s1.f + this2.k * s1.j,this2.i * s1.c + this2.j * s1.g + this2.k * s1.k,this2.i * s1.d + this2.j * s1.h + this2.k * s1.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.sxy = function(x,y) {
	var this1 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,1,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scaleXY = function(this1,x,y) {
	var this2 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,1,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scalarXY = function(x,y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,1,0.);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.sxyz = function(x,y,z) {
	var this1 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,z,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scaleXYZ = function(this1,x,y,z) {
	var this2 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,z,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scalarXYZ = function(x,y,z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,z,0.);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.sx = function(x) {
	var this1 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scaleX = function(this1,x) {
	var this2 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scalarX = function(x) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.sy = function(y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,y,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scaleY = function(this1,y) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,y,0.,0.,0.,0.,1.,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scalarY = function(y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,y,0.,0.,0.,0.,1.,0.);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.sz = function(z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,z,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scaleZ = function(this1,z) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,z,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scalarZ = function(z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,z,0.);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scale = function(this1,s) {
	var this2 = new geom_structure_Mat4x3(s,0.,0.,0.,0.,s,0.,0.,0.,0.,s,0.);
	var s1 = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s1.a + this1.b * s1.e + this1.c * s1.i,this1.a * s1.b + this1.b * s1.f + this1.c * s1.j,this1.a * s1.c + this1.b * s1.g + this1.c * s1.k,this1.a * s1.d + this1.b * s1.h + this1.c * s1.l + this1.d,this1.e * s1.a + this1.f * s1.e + this1.g * s1.i,this1.e * s1.b + this1.f * s1.f + this1.g * s1.j,this1.e * s1.c + this1.f * s1.g + this1.g * s1.k,this1.e * s1.d + this1.f * s1.h + this1.g * s1.l + this1.h,this1.i * s1.a + this1.j * s1.e + this1.k * s1.i,this1.i * s1.b + this1.j * s1.f + this1.k * s1.j,this1.i * s1.c + this1.j * s1.g + this1.k * s1.k,this1.i * s1.d + this1.j * s1.h + this1.k * s1.l + this1.l);
	var s2 = this3;
	var this4 = new geom_structure_Mat4x3(this1.a * s2.a + this1.b * s2.e + this1.c * s2.i,this1.a * s2.b + this1.b * s2.f + this1.c * s2.j,this1.a * s2.c + this1.b * s2.g + this1.c * s2.k,this1.a * s2.d + this1.b * s2.h + this1.c * s2.l + this1.d,this1.e * s2.a + this1.f * s2.e + this1.g * s2.i,this1.e * s2.b + this1.f * s2.f + this1.g * s2.j,this1.e * s2.c + this1.f * s2.g + this1.g * s2.k,this1.e * s2.d + this1.f * s2.h + this1.g * s2.l + this1.h,this1.i * s2.a + this1.j * s2.e + this1.k * s2.i,this1.i * s2.b + this1.j * s2.f + this1.k * s2.j,this1.i * s2.c + this1.j * s2.g + this1.k * s2.k,this1.i * s2.d + this1.j * s2.h + this1.k * s2.l + this1.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scalar = function(s) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(s,0.,0.,0.,0.,s,0.,0.,0.,0.,s,0.);
	var s1 = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s1.a + this2.b * s1.e + this2.c * s1.i,this2.a * s1.b + this2.b * s1.f + this2.c * s1.j,this2.a * s1.c + this2.b * s1.g + this2.c * s1.k,this2.a * s1.d + this2.b * s1.h + this2.c * s1.l + this2.d,this2.e * s1.a + this2.f * s1.e + this2.g * s1.i,this2.e * s1.b + this2.f * s1.f + this2.g * s1.j,this2.e * s1.c + this2.f * s1.g + this2.g * s1.k,this2.e * s1.d + this2.f * s1.h + this2.g * s1.l + this2.h,this2.i * s1.a + this2.j * s1.e + this2.k * s1.i,this2.i * s1.b + this2.j * s1.f + this2.k * s1.j,this2.i * s1.c + this2.j * s1.g + this2.k * s1.k,this2.i * s1.d + this2.j * s1.h + this2.k * s1.l + this2.l);
	var s2 = this4;
	var this5 = new geom_structure_Mat4x3(this2.a * s2.a + this2.b * s2.e + this2.c * s2.i,this2.a * s2.b + this2.b * s2.f + this2.c * s2.j,this2.a * s2.c + this2.b * s2.g + this2.c * s2.k,this2.a * s2.d + this2.b * s2.h + this2.c * s2.l + this2.d,this2.e * s2.a + this2.f * s2.e + this2.g * s2.i,this2.e * s2.b + this2.f * s2.f + this2.g * s2.j,this2.e * s2.c + this2.f * s2.g + this2.g * s2.k,this2.e * s2.d + this2.f * s2.h + this2.g * s2.l + this2.h,this2.i * s2.a + this2.j * s2.e + this2.k * s2.i,this2.i * s2.b + this2.j * s2.f + this2.k * s2.j,this2.i * s2.c + this2.j * s2.g + this2.k * s2.k,this2.i * s2.d + this2.j * s2.h + this2.k * s2.l + this2.l);
	return this5;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.txyz = function(x,y,z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,z);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translateXYZ = function(this1,x,y,z) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,z);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translationXYZ = function(x,y,z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,z);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.tx = function(x) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translateX = function(this1,x) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,0.,0.,0.,1.,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translationX = function(x) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,0.,0.,0.,1.,0.);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.ty = function(y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,y,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translateY = function(this1,y) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,y,0.,0.,1.,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translationY = function(y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,y,0.,0.,1.,0.);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.tz = function(z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translateZ = function(this1,z) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translationZ = function(z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.txy = function(x,y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translateXY = function(this1,x,y) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.translationXY = function(x,y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,0.);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this4;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.reflection = function(a,b,c) {
	var this1 = new geom_structure_Mat4x3(-a * a + b * b + c * c,-2. * a * b,-2. * a * c,0.,-2. * b * a,-b * b + a * a + c * c,-2. * b * c,0.,-2. * c * a,-2. * c * b,-c * c + b * b + a * a,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.reflectionX = function() {
	var this1 = new geom_structure_Mat4x3(1,2.,2.,0.,2.,1,-2.,0.,2.,-2.,1,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.reflectionY = function() {
	var this1 = new geom_structure_Mat4x3(1,2.,-2.,0.,2.,1,2.,0.,-2.,2.,1,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.reflectionZ = function() {
	var this1 = new geom_structure_Mat4x3(1,-2.,2.,0.,-2.,1,2.,0.,2.,2.,1,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.reflectX = function(this1) {
	var this2 = new geom_structure_Mat4x3(1,2.,2.,0.,2.,1,-2.,0.,2.,-2.,1,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.reflectY = function(this1) {
	var this2 = new geom_structure_Mat4x3(1,2.,-2.,0.,2.,1,2.,0.,-2.,2.,1,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.reflectZ = function(this1) {
	var this2 = new geom_structure_Mat4x3(1,-2.,2.,0.,-2.,1,2.,0.,2.,2.,1,0.);
	var s = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.reflectionNonOrigin = function(this1,a,b,c,d) {
	var this2 = new geom_structure_Mat4x3(1. - 2. * a * a,-2. * b * c,-2. * a * c,-2. * a * d,-2. * b * c,1. - 2. * b * b,-2. * b * c,-2. * b * d,-2. * a * c,2. * b * c,1. - 2. * c * c,-2 * c * d);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.notEqual = function(a,b) {
	var delta = 0.0000001;
	return !(!(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta));
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.negating = function(a) {
	var this1 = new geom_structure_Mat4x3(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i,-a.j,-a.k,-a.l);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.negate = function(this1) {
	var this2 = new geom_structure_Mat4x3(-this1.a,-this1.b,-this1.c,-this1.d,-this1.e,-this1.f,-this1.g,-this1.h,-this1.i,-this1.j,-this1.k,-this1.l);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.add = function(m0,m1) {
	var this1 = new geom_structure_Mat4x3(m0.a + m1.a,m0.b + m1.b,m0.c + m1.c,m0.d + m1.d,m0.e + m1.e,m0.f + m1.f,m0.g + m1.g,m0.h + m1.h,m0.i + m1.i,m0.j + m1.j,m0.k + m1.k,m0.l + m1.l);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.sub = function(m0,m1) {
	var this1 = new geom_structure_Mat4x3(m0.a - m1.a,m0.b - m1.b,m0.c - m1.c,m0.d - m1.d,m0.e - m1.e,m0.f - m1.f,m0.g - m1.g,m0.h - m1.h,m0.i - m1.i,m0.j - m1.j,m0.k - m1.k,m0.l - m1.l);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scaleDownByVector = function(this1,p) {
	var this2 = new geom_structure_Mat1x4(1 / p.x,1 / p.y,1 / p.z,1 / p.w);
	var pd = this2;
	var this3 = new geom_structure_Mat4x3(this1.a * pd.x,this1.b,this1.c,this1.d,this1.e,this1.f * pd.y,this1.g,this1.h,this1.i,this1.j,this1.k * pd.z,this1.l);
	return this3;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.scaleByVector = function(this1,p) {
	var this2 = new geom_structure_Mat4x3(this1.a * p.x,this1.b,this1.c,this1.d,this1.e,this1.f * p.y,this1.g,this1.h,this1.i,this1.j,this1.k * p.z,this1.l);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.multiply = function(r,s) {
	var this1 = new geom_structure_Mat4x3(r.a * s.a + r.b * s.e + r.c * s.i,r.a * s.b + r.b * s.f + r.c * s.j,r.a * s.c + r.b * s.g + r.c * s.k,r.a * s.d + r.b * s.h + r.c * s.l + r.d,r.e * s.a + r.f * s.e + r.g * s.i,r.e * s.b + r.f * s.f + r.g * s.j,r.e * s.c + r.f * s.g + r.g * s.k,r.e * s.d + r.f * s.h + r.g * s.l + r.h,r.i * s.a + r.j * s.e + r.k * s.i,r.i * s.b + r.j * s.f + r.k * s.j,r.i * s.c + r.j * s.g + r.k * s.k,r.i * s.d + r.j * s.h + r.k * s.l + r.l);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.cofactor = function(this1,a,b,c,d,e,f,g,h,i) {
	return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g);
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.det = function(this1) {
	var m = 0.;
	var n = 0.;
	var o = 0.;
	var p = 1.;
	var d = this1.j;
	var e = this1.k;
	var f = this1.l;
	var d1 = this1.i;
	var e1 = this1.k;
	var f1 = this1.l;
	var d2 = this1.i;
	var e2 = this1.j;
	var f2 = this1.l;
	var d3 = this1.i;
	var e3 = this1.j;
	var f3 = this1.k;
	return this1.a * (this1.f * (e * p - f * o) - this1.g * (d * p - f * n) + this1.h * (d * o - e * n)) - this1.b * (this1.e * (e1 * p - f1 * o) - this1.g * (d1 * p - f1 * m) + this1.h * (d1 * o - e1 * m)) + this1.c * (this1.e * (e2 * n - f2 * p) - this1.f * (d2 * n - f2 * m) + this1.h * (d2 * p - e2 * m)) - this1.d * (this1.e * (e3 * o - f3 * n) - this1.f * (d3 * o - f3 * m) + this1.g * (d3 * n - e3 * m));
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.inverse = function(this1) {
	var a = this1.a;
	var b = this1.b;
	var c = this1.c;
	var d = this1.d;
	var e = this1.e;
	var f = this1.f;
	var g = this1.g;
	var h = this1.h;
	var i = this1.i;
	var j = this1.j;
	var k = this1.k;
	var l = this1.l;
	var m = 0.;
	var n = 0.;
	var o = 0.;
	var p = 1.;
	var q = j * o * h - n * k * h + n * g * l - f * o * l - j * g * p + f * k * p;
	var r = m * k * h - i * o * h - m * g * l + e * o * l + i * g * p - e * k * p;
	var s = i * n * h - m * j * h + m * f * l - e * n * l - i * f * p + e * j * p;
	var t = m * j * g - i * n * g - m * f * k + e * n * k + i * f * o - e * j * o;
	var det = a * q + b * r + c * s + d * t;
	if(det == 0) {
		return null;
	} else {
		var detI = 1 / det;
		var this2 = new geom_structure_Mat4x3(q * detI,(n * k * d - j * o * d - n * c * l + b * o * l + j * c * p - b * k * p) * detI,(f * o * d - n * g * d + n * c * h - b * o * h - f * c * p + b * g * p) * detI,(j * g * d - f * k * d - j * c * h + b * k * h + f * c * l - b * g * l) * detI,r * detI,(i * o * d - m * k * d + m * c * l - a * o * l - i * c * p + a * k * p) * detI,(m * g * d - e * o * d - m * c * h + a * o * h + e * c * p - a * g * p) * detI,(e * k * d - i * g * d + i * c * h - a * k * h - e * c * l + a * g * l) * detI,s * detI,(m * j * d - i * n * d - m * b * l + a * n * l + i * b * p - a * j * p) * detI,(e * n * d - m * f * d + m * b * h - a * n * h - e * b * p + a * f * p) * detI,(i * f * d - e * j * d - i * b * h + a * j * h + e * b * l - a * f * l) * detI);
		return this2;
	}
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.orientation = function(pos,dir,up) {
	var this1 = new geom_structure_Mat1x4(dir.y * up.z - dir.z * up.y,dir.z * up.x - dir.x * up.z,dir.x * up.y - dir.y * up.x,dir.w * up.w);
	var right = this1;
	var this2 = new geom_structure_Mat4x3(dir.x,up.x,right.x,pos.x,dir.y,up.y,right.y,pos.y,dir.z,up.z,right.z,pos.z);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.applyRotation = function(this1,p) {
	var this2 = new geom_structure_Mat1x4(this1.a * p.x + this1.b * p.y + this1.c * p.z,this1.e * p.x + this1.f * p.y + this1.g * p.z,this1.h * p.x + this1.i * p.y + this1.j * p.z,1.);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.applyInverseRotation = function(this1,p) {
	var this2 = new geom_structure_Mat1x4(this1.a * p.x + this1.e * p.y + this1.i * p.z,this1.b * p.x + this1.f * p.y + this1.j * p.z,this1.c * p.x + this1.g * p.y + this1.k * p.z,1.);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.orthonormalizeRotation = function(this1) {
	var this2 = new geom_structure_Mat1x4(this1.a,this1.e,this1.i,1.);
	var this3 = this2;
	var currentLength = Math.sqrt(this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this3.x *= mul;
		this3.y *= mul;
		this3.z *= mul;
		this3.w *= mul;
		var tmp = this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w;
	}
	var new_x = this3;
	var this4 = new geom_structure_Mat1x4(this1.b,this1.f,this1.j,1.);
	var v = this4;
	var this5 = new geom_structure_Mat1x4(new_x.y * v.z - new_x.z * v.y,new_x.z * v.x - new_x.x * v.z,new_x.x * v.y - new_x.y * v.x,new_x.w * v.w);
	var this6 = this5;
	var currentLength1 = Math.sqrt(this6.x * this6.x + this6.y * this6.y + this6.z * this6.z + this6.w * this6.w);
	if(currentLength1 != 0.) {
		var mul1 = 1. / currentLength1;
		this6.x *= mul1;
		this6.y *= mul1;
		this6.z *= mul1;
		this6.w *= mul1;
		var tmp1 = this6.x * this6.x + this6.y * this6.y + this6.z * this6.z + this6.w * this6.w;
	}
	var new_z = this6;
	var this7 = new geom_structure_Mat1x4(new_z.y * new_x.z - new_z.z * new_x.y,new_z.z * new_x.x - new_z.x * new_x.z,new_z.x * new_x.y - new_z.y * new_x.x,new_z.w * new_x.w);
	var new_y = this7;
	this1.a = new_x.x;
	this1.b = new_y.x;
	this1.c = new_z.x;
	this1.e = new_x.y;
	this1.f = new_y.y;
	this1.g = new_z.y;
	this1.i = new_x.z;
	this1.j = new_y.z;
	this1.k = new_z.z;
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.makeViewFromOrientation = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.c,this1.b,-this1.a,this1.d,this1.g,this1.f,-this1.e,this1.h,this1.k,this1.j,-this1.i,this1.l);
	var m = this2;
	var this3 = new geom_structure_Mat4x3(m.a,m.e,m.i,0.,m.b,m.f,m.j,0.,m.c,m.g,m.k,0.);
	var m1 = this3;
	var this4 = new geom_structure_Mat1x4(m.d,m.h,m.l,1.);
	var this5 = this4;
	var this6 = new geom_structure_Mat1x4(m1.a * this5.x + m1.b * this5.y + m1.c * this5.z + m1.d,m1.e * this5.x + m1.f * this5.y + m1.g * this5.z + m1.h,m1.i * this5.x + m1.j * this5.y + m1.k * this5.z + m1.l,1.);
	var trans_prime = this6;
	m1.d = -trans_prime.x;
	m1.h = -trans_prime.y;
	m1.l = -trans_prime.z;
	return m1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.invertNormalizedRotation = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.a,this1.e,this1.i,0.,this1.b,this1.f,this1.j,0.,this1.c,this1.g,this1.k,0.);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.invertNormalized = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.a,this1.e,this1.i,0.,this1.b,this1.f,this1.j,0.,this1.c,this1.g,this1.k,0.);
	var m = this2;
	var this3 = new geom_structure_Mat1x4(this1.d,this1.h,this1.l,1.);
	var this4 = this3;
	var this5 = new geom_structure_Mat1x4(m.a * this4.x + m.b * this4.y + m.c * this4.z + m.d,m.e * this4.x + m.f * this4.y + m.g * this4.z + m.h,m.i * this4.x + m.j * this4.y + m.k * this4.z + m.l,1.);
	var trans_prime = this5;
	m.d = -trans_prime.x;
	m.h = -trans_prime.y;
	m.l = -trans_prime.z;
	return m;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.toAffineMatrix = function(this1) {
	return { e0 : this1.a, e4 : this1.b, e8 : this1.c, e12 : this1.d, e1 : this1.e, e5 : this1.f, e9 : this1.g, e13 : this1.h, e2 : this1.i, e6 : this1.j, e10 : this1.k, e14 : this1.l};
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.fromNumbered = function(m) {
	var this1 = new geom_structure_Mat4x3(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.toNumbered = function(this1) {
	return { _00 : this1.a, _10 : this1.b, _20 : this1.c, _30 : this1.d, _01 : this1.e, _11 : this1.f, _21 : this1.g, _31 : this1.h, _02 : this1.i, _12 : this1.j, _22 : this1.k, _32 : this1.l, _03 : 0., _13 : 0., _23 : 0., _33 : 1.};
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.fromArr = function(arr) {
	var this1 = new geom_structure_Mat4x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8],arr[9],arr[10],arr[11]);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.toArray = function(this1) {
	return [this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l];
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.from2x2 = function(m2) {
	var this1 = new geom_structure_Mat4x3(m2.a,m2.b,0.,0.,m2.c,m2.d,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.to2x2 = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.b,this1.e,this1.f);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.from3x3 = function(m3) {
	var this1 = new geom_structure_Mat4x3(m3.a,m3.b,m3.c,0.,m3.d,m3.e,m3.f,0.,m3.g,m3.h,m3.i,0.);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.to3x3 = function(this1) {
	var this2 = new geom_structure_Mat3x3(this1.a,this1.b,this1.c,this1.e,this1.f,this1.g,this1.i,this1.j,this1.k);
	return this2;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.fromVec = function(v) {
	var this1 = new geom_structure_Mat4x3(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11]);
	return this1;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.toVector = function(this1) {
	var this2 = new Array(12);
	var vec = this2;
	vec[0] = this1.a;
	vec[1] = this1.b;
	vec[2] = this1.c;
	vec[3] = this1.d;
	vec[4] = this1.e;
	vec[5] = this1.f;
	vec[6] = this1.g;
	vec[7] = this1.h;
	vec[8] = this1.i;
	vec[9] = this1.j;
	vec[10] = this1.k;
	vec[11] = this1.l;
	return vec;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.setXY = function(this1,x,y,v) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a = v;
		case 1:
			return this1.b = v;
		case 2:
			return this1.c = v;
		case 3:
			return this1.d = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix4x3");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.e = v;
		case 1:
			return this1.f = v;
		case 2:
			return this1.g = v;
		case 3:
			return this1.h = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix4x3");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.i = v;
		case 1:
			return this1.j = v;
		case 2:
			return this1.k = v;
		case 3:
			return this1.l = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix4x3");
		}
		break;
	default:
		throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix4x3");
	}
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.getXY = function(this1,x,y) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a;
		case 1:
			return this1.b;
		case 2:
			return this1.c;
		case 3:
			return this1.d;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix4x3");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.e;
		case 1:
			return this1.f;
		case 2:
			return this1.g;
		case 3:
			return this1.h;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix4x3");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.i;
		case 1:
			return this1.j;
		case 2:
			return this1.k;
		case 3:
			return this1.l;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix4x3");
		}
		break;
	default:
		throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix4x3");
	}
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.updateWebGL = function(this1,arr) {
	var here = this1;
	arr[0] = here.a;
	arr[1] = here.e;
	arr[2] = here.i;
	arr[3] = 0.;
	arr[4] = here.b;
	arr[5] = here.f;
	arr[6] = here.j;
	arr[7] = 0.;
	arr[8] = here.c;
	arr[9] = here.g;
	arr[10] = here.k;
	arr[11] = 0.;
	arr[12] = here.d;
	arr[13] = here.h;
	arr[14] = here.l;
	arr[15] = 1.;
	return arr;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.updateWebGL_ = function(this1,arr) {
	var here = this1;
	arr[0] = here.a;
	arr[1] = here.b;
	arr[2] = here.c;
	arr[3] = here.d;
	arr[4] = here.e;
	arr[5] = here.f;
	arr[6] = here.g;
	arr[7] = here.h;
	arr[8] = here.i;
	arr[9] = here.j;
	arr[10] = here.k;
	arr[11] = here.l;
	arr[12] = 0.;
	arr[13] = 0.;
	arr[14] = 0.;
	arr[15] = 1.;
	return arr;
};
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.pretty = function(this1,prec) {
	var dp = geom_constraints_Precision.floatToStringPrecision;
	var max3 = geom_constraints_Precision.max3;
	var sa = dp(this1.a,prec);
	var sb = dp(this1.b,prec);
	var sc = dp(this1.c,prec);
	var sd = dp(this1.d,prec);
	var se = dp(this1.e,prec);
	var sf = dp(this1.f,prec);
	var sg = dp(this1.g,prec);
	var sh = dp(this1.h,prec);
	var si = dp(this1.i,prec);
	var sj = dp(this1.j,prec);
	var sk = dp(this1.k,prec);
	var sl = dp(this1.l,prec);
	var la = sa.length;
	var lb = sb.length;
	var lc = sc.length;
	var ld = sd.length;
	var le = se.length;
	var lf = sf.length;
	var lg = sg.length;
	var lh = sh.length;
	var li = si.length;
	var lj = sj.length;
	var lk = sk.length;
	var ll = sl.length;
	var r0 = max3(la,le,li);
	var r1 = max3(lb,lf,lj);
	var r2 = max3(lc,lg,lk);
	var r3 = max3(ld,lh,ll);
	var spaces = "";
	var _g = 0;
	var _g1 = r0;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sa = HxOverrides.substr(spaces,0,r0 - la) + sa;
	se = HxOverrides.substr(spaces,0,r0 - le) + se;
	si = HxOverrides.substr(spaces,0,r0 - li) + si;
	var spaces1 = "";
	var _g2 = 0;
	var _g3 = r1;
	while(_g2 < _g3) {
		var n1 = _g2++;
		spaces1 += " ";
	}
	sb = HxOverrides.substr(spaces1,0,r1 - lb) + sb;
	sf = HxOverrides.substr(spaces1,0,r1 - lf) + sf;
	sj = HxOverrides.substr(spaces1,0,r1 - lj) + sj;
	var space = "";
	var _g4 = 0;
	var _g5 = r2;
	while(_g4 < _g5) {
		var n2 = _g4++;
		spaces1 += " ";
	}
	sc = HxOverrides.substr(spaces1,0,r2 - lc) + sc;
	sg = HxOverrides.substr(spaces1,0,r2 - lg) + sg;
	sk = HxOverrides.substr(spaces1,0,r2 - lk) + sk;
	var space1 = "";
	var _g6 = 0;
	var _g7 = r3;
	while(_g6 < _g7) {
		var n3 = _g6++;
		spaces1 += " ";
	}
	sd = HxOverrides.substr(spaces1,0,r3 - ld) + sd;
	sh = HxOverrides.substr(spaces1,0,r3 - lh) + sh;
	sl = HxOverrides.substr(spaces1,0,r3 - ll) + sl;
	return "\n" + "/ " + sa + ", " + sb + ", " + sc + ", " + sd + " \\\n" + "| " + se + ", " + sf + ", " + sg + ", " + sh + " |\n" + "\\ " + si + ", " + sj + ", " + sk + ", " + sl + " /\n";
};
var geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$ = {};
$hxClasses["geom.matrix._Matrix4x4.Matrix4x4_Impl_"] = geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$;
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.__name__ = "geom.matrix._Matrix4x4.Matrix4x4_Impl_";
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.clone = function(this1) {
	var this2 = new geom_structure_Mat4x4(this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l,this1.m,this1.n,this1.o,this1.p);
	return this2;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.iterator = function(this1) {
	return HxOverrides.iter([this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l,this1.m,this1.n,this1.o,this1.p]);
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.get_self = function(this1) {
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.get_zero = function() {
	var this1 = new geom_structure_Mat4x4(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.get_nought = function(this1) {
	var this2 = new geom_structure_Mat4x4(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this2;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.get_unit = function() {
	var this1 = new geom_structure_Mat4x4(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.get_one = function(this1) {
	var this2 = new geom_structure_Mat4x4(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.);
	return this2;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.get_minus1 = function() {
	var this1 = new geom_structure_Mat4x4(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.);
	var a = this1;
	var this2 = new geom_structure_Mat4x4(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i,-a.j,-a.k,-a.l,-a.m,-a.n,-a.o,-a.p);
	return this2;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.get_counting = function() {
	var this1 = new geom_structure_Mat4x4(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.get_testCount = function(this1) {
	var this2 = new geom_structure_Mat4x4(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.);
	return this2;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.get__1_16 = function() {
	var this1 = new geom_structure_Mat4x4(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.notEqual = function(a,b) {
	var delta = 0.0000001;
	return !(!(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta));
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.negating = function(a) {
	var this1 = new geom_structure_Mat4x4(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i,-a.j,-a.k,-a.l,-a.m,-a.n,-a.o,-a.p);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.negate = function(this1) {
	var this2 = new geom_structure_Mat4x4(-this1.a,-this1.b,-this1.c,-this1.d,-this1.e,-this1.f,-this1.g,-this1.h,-this1.i,-this1.j,-this1.k,-this1.l,-this1.m,-this1.n,-this1.o,-this1.p);
	return this2;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.add = function(m0,m1) {
	var this1 = new geom_structure_Mat4x4(m0.a + m1.a,m0.b + m1.b,m0.c + m1.c,m0.d + m1.d,m0.e + m1.e,m0.f + m1.f,m0.g + m1.g,m0.h + m1.h,m0.i + m1.i,m0.j + m1.j,m0.k + m1.k,m0.l + m1.l,m0.m + m1.m,m0.n + m1.n,m0.o + m1.o,m0.p + m1.p);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.sub = function(m0,m1) {
	var this1 = new geom_structure_Mat4x4(m0.a - m1.a,m0.b - m1.b,m0.c - m1.c,m0.d - m1.d,m0.e - m1.e,m0.f - m1.f,m0.g - m1.g,m0.h - m1.h,m0.i - m1.i,m0.j - m1.j,m0.k - m1.k,m0.l - m1.l,m0.m - m1.m,m0.n - m1.n,m0.o - m1.o,m0.p - m1.p);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.multiply = function(r,s) {
	var this1 = new geom_structure_Mat4x4(r.a * s.a + r.b * s.e + r.c * s.i + r.d * s.m,r.a * s.b + r.b * s.f + r.c * s.j + r.d * s.n,r.a * s.c + r.b * s.g + r.c * s.k + r.d * s.o,r.a * s.d + r.b * s.h + r.c * s.l + r.d * s.p,r.e * s.a + r.f * s.e + r.g * s.i + r.h * s.m,r.e * s.b + r.f * s.f + r.g * s.j + r.h * s.n,r.e * s.c + r.f * s.g + r.g * s.k + r.h * s.o,r.e * s.d + r.f * s.h + r.g * s.l + r.h * s.p,r.i * s.a + r.j * s.e + r.k * s.i + r.l * s.m,r.i * s.b + r.j * s.f + r.k * s.j + r.l * s.n,r.i * s.c + r.j * s.g + r.k * s.k + r.l * s.o,r.i * s.d + r.j * s.h + r.k * s.l + r.l * s.p,r.m * s.a + r.n * s.e + r.o * s.i + r.p * s.m,r.m * s.b + r.n * s.f + r.o * s.j + r.p * s.n,r.m + s.c + r.n * s.g + r.o * s.k + r.p * s.o,r.m * s.d + r.n * s.h + r.o * s.l + r.p * s.p);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.scaleDivide = function(m,p) {
	var this1 = new geom_structure_Mat1x4(1 / p.x,1 / p.y,1 / p.z,1 / p.w);
	var pd = this1;
	var this2 = new geom_structure_Mat4x4(m.a * pd.x,m.b,m.c,m.d,m.e,m.f * pd.y,m.g,m.h,m.i,m.j,m.k * pd.z,m.l,m.m,m.n,m.o,m.p * pd.w);
	return this2;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.scaleMultiply1 = function(p,m) {
	var this1 = new geom_structure_Mat4x4(m.a * p.x,m.b,m.c,m.d,m.e,m.f * p.y,m.g,m.h,m.i,m.j,m.k * p.z,m.l,m.m,m.n,m.o,m.p * p.w);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.scaleMultiply2 = function(m,p) {
	var this1 = new geom_structure_Mat4x4(m.a * p.x,m.b,m.c,m.d,m.e,m.f * p.y,m.g,m.h,m.i,m.j,m.k * p.z,m.l,m.m,m.n,m.o,m.p * p.w);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.delta = function(this1,x,y) {
	var this2 = new geom_structure_Mat4x4(this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l,this1.m + x,this1.n + y,this1.o,this1.p);
	return this2;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.matrix4x3 = function(m) {
	var this1 = new geom_structure_Mat4x4(m.a,m.b,m.c,m.d,m.e,m.f,m.g,m.h,m.i,m.j,m.k,m.l,0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.transpose = function(this1) {
	var this2 = new geom_structure_Mat4x4(this1.a,this1.e,this1.i,this1.m,this1.b,this1.f,this1.j,this1.n,this1.c,this1.g,this1.k,this1.o,this1.d,this1.h,this1.l,this1.p);
	return this2;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.updateWebGL = function(this1,arr) {
	var here = this1;
	arr[0] = here.a;
	arr[1] = here.e;
	arr[2] = here.i;
	arr[3] = here.m;
	arr[4] = here.b;
	arr[5] = here.f;
	arr[6] = here.j;
	arr[7] = here.n;
	arr[8] = here.c;
	arr[9] = here.g;
	arr[10] = here.k;
	arr[11] = here.o;
	arr[12] = here.d;
	arr[13] = here.h;
	arr[14] = here.l;
	arr[15] = here.p;
	return arr;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.updateWebGL_ = function(this1,arr) {
	var here = this1;
	arr[0] = here.a;
	arr[1] = here.b;
	arr[2] = here.c;
	arr[3] = here.d;
	arr[4] = here.e;
	arr[5] = here.f;
	arr[6] = here.g;
	arr[7] = here.h;
	arr[8] = here.i;
	arr[9] = here.j;
	arr[10] = here.k;
	arr[11] = here.l;
	arr[12] = here.m;
	arr[13] = here.n;
	arr[14] = here.o;
	arr[15] = here.p;
	return arr;
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.setXY = function(this1,x,y,v) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a = v;
		case 1:
			return this1.b = v;
		case 2:
			return this1.c = v;
		case 3:
			return this1.d = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.e = v;
		case 1:
			return this1.f = v;
		case 2:
			return this1.g = v;
		case 3:
			return this1.h = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.i = v;
		case 1:
			return this1.j = v;
		case 2:
			return this1.k = v;
		case 3:
			return this1.l = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 3:
		switch(y) {
		case 0:
			return this1.m = v;
		case 1:
			return this1.n = v;
		case 2:
			return this1.o = v;
		case 3:
			return this1.p = v;
		default:
			throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix4x4");
		}
		break;
	default:
		throw new js__$Boot_HaxeError("bad set " + x + ", " + y + " on Matrix4x4");
	}
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.getXY = function(this1,x,y) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a;
		case 1:
			return this1.b;
		case 2:
			return this1.c;
		case 3:
			return this1.d;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.e;
		case 1:
			return this1.f;
		case 2:
			return this1.g;
		case 3:
			return this1.h;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.i;
		case 1:
			return this1.j;
		case 2:
			return this1.k;
		case 3:
			return this1.l;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 3:
		switch(y) {
		case 0:
			return this1.m;
		case 1:
			return this1.n;
		case 2:
			return this1.o;
		case 3:
			return this1.p;
		default:
			throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix4x4");
		}
		break;
	default:
		throw new js__$Boot_HaxeError("bad get " + x + ", " + y + " on Matrix4x4");
	}
};
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.pretty = function(this1,prec) {
	var dp = geom_constraints_Precision.floatToStringPrecision;
	var max4 = geom_constraints_Precision.max4;
	var sa = dp(this1.a,prec);
	var sb = dp(this1.b,prec);
	var sc = dp(this1.c,prec);
	var sd = dp(this1.d,prec);
	var se = dp(this1.e,prec);
	var sf = dp(this1.f,prec);
	var sg = dp(this1.g,prec);
	var sh = dp(this1.h,prec);
	var si = dp(this1.i,prec);
	var sj = dp(this1.j,prec);
	var sk = dp(this1.k,prec);
	var sl = dp(this1.l,prec);
	var sm = dp(this1.m,prec);
	var sn = dp(this1.n,prec);
	var so = dp(this1.o,prec);
	var sp = dp(this1.p,prec);
	var la = sa.length;
	var lb = sb.length;
	var lc = sc.length;
	var ld = sd.length;
	var le = se.length;
	var lf = sf.length;
	var lg = sg.length;
	var lh = sh.length;
	var li = si.length;
	var lj = sj.length;
	var lk = sk.length;
	var ll = sl.length;
	var lm = sm.length;
	var ln = sn.length;
	var lo = so.length;
	var lp = sp.length;
	var r0 = max4(la,le,li,lm);
	var r1 = max4(lb,lf,lj,ln);
	var r2 = max4(lc,lg,lk,lo);
	var r3 = max4(ld,lh,ll,lp);
	var spaces = "";
	var _g = 0;
	var _g1 = r0;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sa = HxOverrides.substr(spaces,0,r0 - la) + sa;
	se = HxOverrides.substr(spaces,0,r0 - le) + se;
	si = HxOverrides.substr(spaces,0,r0 - li) + si;
	sm = HxOverrides.substr(spaces,0,r0 - lm) + sm;
	var spaces1 = "";
	var _g2 = 0;
	var _g3 = r1;
	while(_g2 < _g3) {
		var n1 = _g2++;
		spaces1 += " ";
	}
	sb = HxOverrides.substr(spaces1,0,r1 - lb) + sb;
	sf = HxOverrides.substr(spaces1,0,r1 - lf) + sf;
	sj = HxOverrides.substr(spaces1,0,r1 - lj) + sj;
	sn = HxOverrides.substr(spaces1,0,r1 - ln) + sn;
	var space = "";
	var _g4 = 0;
	var _g5 = r2;
	while(_g4 < _g5) {
		var n2 = _g4++;
		spaces1 += " ";
	}
	sc = HxOverrides.substr(spaces1,0,r2 - lc) + sc;
	sg = HxOverrides.substr(spaces1,0,r2 - lg) + sg;
	sk = HxOverrides.substr(spaces1,0,r2 - lk) + sk;
	so = HxOverrides.substr(spaces1,0,r2 - lo) + so;
	var space1 = "";
	var _g6 = 0;
	var _g7 = r3;
	while(_g6 < _g7) {
		var n3 = _g6++;
		spaces1 += " ";
	}
	sd = HxOverrides.substr(spaces1,0,r3 - ld) + sd;
	sh = HxOverrides.substr(spaces1,0,r3 - lh) + sh;
	sl = HxOverrides.substr(spaces1,0,r3 - ll) + sl;
	sp = HxOverrides.substr(spaces1,0,r3 - lp) + sp;
	return "\n" + "/ " + sa + ", " + sb + ", " + sc + ", " + sd + " \\\n" + "| " + se + ", " + sf + ", " + sg + ", " + sh + " |\n" + "| " + si + ", " + sj + ", " + sk + ", " + sl + " |\n" + "\\ " + sm + ", " + sn + ", " + so + ", " + sp + " /\n";
};
var geom_matrix_Projection = function() { };
$hxClasses["geom.matrix.Projection"] = geom_matrix_Projection;
geom_matrix_Projection.__name__ = "geom.matrix.Projection";
geom_matrix_Projection.perspective = function(angleOfView,near,far) {
	if(far == null) {
		far = 100.;
	}
	if(near == null) {
		near = 0.1;
	}
	if(angleOfView == null) {
		angleOfView = 1.57079632679;
	}
	var scale = 1 / Math.tan(angleOfView * 0.5);
	var dif = far - near;
	var this1 = new geom_structure_Mat4x4(scale,0.,0.,0.,0.,scale,0.,0.,0.,0.,-far / dif,-far * near / dif,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Projection.perspectiveAspect = function(fov,aspectRatio,near,far) {
	var f = 1.0 / Math.tan(fov / 2);
	var rangeInv = 1 / (near - far);
	var this1 = new geom_structure_Mat4x4(f / aspectRatio,0.,0.,0.,0.,f,0.,0.,0.,0.,(near + far) * rangeInv,near * far * rangeInv * 2,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Projection.projectionWindow = function(wid,hi,fov) {
	var halfWid = wid / 2;
	var halfHi = hi / 2;
	var tanHalf = Math.tan(fov / 2);
	var scale = halfWid / tanHalf;
	var this1 = new geom_structure_Mat4x3(scale,-0.,-scale,0.,0.,-scale,-halfHi / tanHalf,0.,0.,0.,-1,0.);
	return this1;
};
var geom_matrix__$Quaternion_Quaternion_$Impl_$ = {};
$hxClasses["geom.matrix._Quaternion.Quaternion_Impl_"] = geom_matrix__$Quaternion_Quaternion_$Impl_$;
geom_matrix__$Quaternion_Quaternion_$Impl_$.__name__ = "geom.matrix._Quaternion.Quaternion_Impl_";
geom_matrix__$Quaternion_Quaternion_$Impl_$._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.get_zero = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.get_zeroNormal = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.get_unit = function() {
	var this1 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.get_unitNormal = function() {
	var this1 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	var this2 = this1;
	var currentLength = Math.sqrt(this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this2.x *= mul;
		this2.y *= mul;
		this2.z *= mul;
		this2.w *= mul;
		var tmp = this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w;
	}
	return this2;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.clone = function(this1) {
	var this2 = new geom_structure_Mat1x4(this1.x,this1.y,this1.z,this1.w);
	return this2;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.xRotate = function(angle) {
	var this1 = new geom_structure_Mat1x4(Math.sin(0.5 * angle),0.,0,Math.cos(0.5 * angle));
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.yRotate = function(angle) {
	var this1 = new geom_structure_Mat1x4(0.,Math.sin(0.5 * angle),0.,Math.cos(0.5 * angle));
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.zRotate = function(angle) {
	var this1 = new geom_structure_Mat1x4(0.,0.,Math.sin(0.5 * angle),Math.cos(0.5 * angle));
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.xPIhalf = function() {
	var halfSqrt = Math.sqrt(0.5);
	var this1 = new geom_structure_Mat1x4(halfSqrt,0.,0,halfSqrt);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.yPIhalf = function() {
	var halfSqrt = Math.sqrt(0.5);
	var this1 = new geom_structure_Mat1x4(0.,halfSqrt,0.,halfSqrt);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.zPIhalf = function() {
	var halfSqrt = Math.sqrt(0.5);
	var this1 = new geom_structure_Mat1x4(0.,0.,halfSqrt,halfSqrt);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.createFromAxisAngle = function(x,y,z,theta) {
	var factor = Math.sin(theta / 2.0);
	x *= factor;
	y *= factor;
	z *= factor;
	var w = Math.cos(theta / 2.0);
	var this1 = new geom_structure_Mat1x4(x,y,z,w);
	var this2 = this1;
	var currentLength = Math.sqrt(this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this2.x *= mul;
		this2.y *= mul;
		this2.z *= mul;
		this2.w *= mul;
		var tmp = this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w;
	}
	return this2;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.dot = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.identity = function(out) {
	out.x = 1.;
	out.y = 1.;
	out.z = 1.;
	out.w = 1.;
	return out;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.toMatrix4x1 = function(this1) {
	var this2 = new geom_structure_Mat1x4(this1.x,this1.y,this1.z,this1.w);
	return this2;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.copy = function(pin,pout) {
	pout.x = pin.x;
	pout.y = pin.y;
	pout.z = pin.z;
	pout.w = pin.w;
	return pout;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.get_magnitude = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.set_magnitude = function(this1,length) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	if(currentLength == 0.) {
		return 0.;
	} else {
		var mul = length / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		this1.w *= mul;
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	}
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.dotProduct = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.notEqual = function(a,b) {
	var delta = 0.0000001;
	return !(!(Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta));
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.magnitudeSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.add = function(a,b) {
	var this1 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.subtract = function(a,b) {
	var this1 = new geom_structure_Mat1x4(a.x - b.x,a.y - b.y,a.z - b.z,a.w - b.w);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.scaleMultiply = function(a,v) {
	var this1 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.divide = function(a,v) {
	var v1 = 1 / v;
	var this1 = new geom_structure_Mat1x4(a.x * v1,a.y * v1,a.z * v1,a.w * v1);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.divide2 = function(v,a) {
	var this1 = new geom_structure_Mat1x4(v / a.x,v / a.y,v / a.z,v / a.w);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.conjugate = function(a) {
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,a.w);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.negate = function(a) {
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,-a.w);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.multiplyQ = function(q1,q2) {
	var this1 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.cross = function(this1,v) {
	var this2 = new geom_structure_Mat1x4(this1.y * v.z - this1.z * v.y,this1.z * v.x - this1.x * v.z,this1.x * v.y - this1.y * v.x,this1.w * v.w);
	return this2;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.fromYawPitchRoll = function(yaw,pitch,roll) {
	var n9 = roll * 0.5;
	var n6 = Math.sin(n9);
	var n5 = Math.cos(n9);
	var n8 = pitch * 0.5;
	var n4 = Math.sin(n8);
	var n3 = Math.cos(n8);
	var n7 = yaw * 0.5;
	var n2 = Math.sin(n7);
	var n1 = Math.cos(n7);
	var this1 = new geom_structure_Mat1x4(n1 * n4 * n5 + n2 * n3 * n6,n2 * n3 * n5 - n1 * n4 * n6,n1 * n3 * n6 - n2 * n4 * n5,n1 * n3 * n5 + n2 * n4 * n6);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.fromAxisAngle = function(theta,axis) {
	var half = theta / 2.;
	var c = Math.cos(half);
	var s = Math.sin(half);
	var this1 = new geom_structure_Mat1x4(s * axis.x,s * axis.y,s * axis.z,c);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.lerp = function(a,b,t) {
	var currentLength = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		a.x *= mul;
		a.y *= mul;
		a.z *= mul;
		a.w *= mul;
		var tmp = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
	}
	var currentLength1 = Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w);
	if(currentLength1 != 0.) {
		var mul1 = 1. / currentLength1;
		b.x *= mul1;
		b.y *= mul1;
		b.z *= mul1;
		b.w *= mul1;
		var tmp1 = b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w;
	}
	var v = 1.0 - t;
	var this1 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	var a1 = this1;
	var this2 = new geom_structure_Mat1x4(b.x * t,b.y * t,b.z * t,b.w * t);
	var b1 = this2;
	var this3 = new geom_structure_Mat1x4(a1.x + b1.x,a1.y + b1.y,a1.z + b1.z,a1.w + b1.w);
	return this3;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.set_euler = function(this1,a) {
	var x5 = a.x * .5;
	var y5 = a.y * .5;
	var z5 = a.z * .5;
	var cx = Math.cos(x5);
	var sx = Math.sin(x5);
	var cy = Math.cos(y5);
	var sy = Math.sin(y5);
	var cz = Math.cos(z5);
	var sz = Math.sin(z5);
	this1.w = cx * cy * cz + sx * sy * sz;
	this1.x = sx * cy * cz - cx * sy * sz;
	this1.y = cx * sy * cz + sx * cy * sz;
	this1.z = cx * cy * sz - sx * sy * cz;
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.get_euler = function(this1) {
	var this2 = new geom_structure_Mat1x4(Math.atan2(2 * (this1.w * this1.x + this1.y * this1.z),1 - 2 * (this1.x * this1.x + this1.y * this1.y)),Math.asin(2 * (this1.w * this1.y - this1.z * this1.x)),Math.atan2(2 * (this1.w * this1.z + this1.x * this1.y),1 - 2 * (this1.y * this1.y + this1.z * this1.z)),1.);
	return this2;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.slerp = function(this1,v1,t) {
	var this2 = new geom_structure_Mat1x4(this1.x,this1.y,this1.z,this1.w);
	var v0 = this2;
	var currentLength = Math.sqrt(v0.x * v0.x + v0.y * v0.y + v0.z * v0.z + v0.w * v0.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		v0.x *= mul;
		v0.y *= mul;
		v0.z *= mul;
		v0.w *= mul;
		var tmp = v0.x * v0.x + v0.y * v0.y + v0.z * v0.z + v0.w * v0.w;
	}
	var dot = v0.x * v1.x + v0.y * v1.y + v0.z * v1.z + v0.w * v1.w;
	if(dot < 0.0) {
		var this3 = new geom_structure_Mat1x4(-v1.x,-v1.y,-v1.z,-v1.w);
		v1 = this3;
		dot = -dot;
	}
	if(dot > 0.9995) {
		var _g = t;
		var this4 = new geom_structure_Mat1x4(v1.x - v0.x,v1.y - v0.y,v1.z - v0.z,v1.w - v0.w);
		var _g1 = this4;
		var this5 = new geom_structure_Mat1x4(_g1.x * _g,_g1.y * _g,_g1.z * _g,_g1.w * _g);
		var b = this5;
		var this6 = new geom_structure_Mat1x4(v0.x + b.x,v0.y + b.y,v0.z + b.z,v0.w + b.w);
		var result = this6;
		var currentLength1 = Math.sqrt(result.x * result.x + result.y * result.y + result.z * result.z + result.w * result.w);
		if(currentLength1 != 0.) {
			var mul1 = 1. / currentLength1;
			result.x *= mul1;
			result.y *= mul1;
			result.z *= mul1;
			result.w *= mul1;
			var tmp1 = result.x * result.x + result.y * result.y + result.z * result.z + result.w * result.w;
		}
		return result;
	}
	var theta0 = Math.acos(dot);
	var theta = theta0 * t;
	var sinTheta = Math.sin(theta);
	var sinTheta0 = Math.sin(theta0);
	var ratioA = Math.cos(theta) - dot * sinTheta / sinTheta0;
	var ratioB = sinTheta / sinTheta0;
	var this7 = new geom_structure_Mat1x4(v0.x * ratioA + v1.x * ratioB,v0.y * ratioA + v1.y * ratioB,v0.z * ratioA + v1.z * ratioB,v0.x * ratioA + v1.x * ratioB);
	var q = this7;
	var currentLength2 = Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w);
	if(currentLength2 != 0.) {
		var mul2 = 1. / currentLength2;
		q.x *= mul2;
		q.y *= mul2;
		q.z *= mul2;
		q.w *= mul2;
		var tmp2 = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;
	}
	return q;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.scalarReal = function(s) {
	var this1 = new geom_structure_Mat1x4(0,0,0,Math.sqrt(s));
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.scaled = function(this1,s) {
	var this2 = new geom_structure_Mat1x4(this1.x * s,this1.y * s,this1.z * s,this1.w * s);
	return this2;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.normalize = function(this1) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		this1.w *= mul;
		var tmp = this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
	}
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.fromVec = function(vec) {
	var this1 = new geom_structure_Mat1x4(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.toVector = function(this1) {
	var this2 = new Array(4);
	var vec = this2;
	vec[0] = this1.x;
	vec[1] = this1.y;
	vec[2] = this1.z;
	vec[3] = this1.w;
	return vec;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.fromArray = function(arr) {
	var this1 = new geom_structure_Mat1x4(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.toArray = function(this1) {
	return [this1.x,this1.y,this1.z,this1.w];
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.toMatrix4x3 = function(this1) {
	var this2 = this1;
	var this3 = this2;
	var xx = this3.x * this3.x;
	var xy = this3.x * this3.y;
	var xz = this3.x * this3.z;
	var xw = this3.x * this3.w;
	var yy = this3.y * this3.y;
	var yz = this3.y * this3.z;
	var yw = this3.y * this3.w;
	var zz = this3.z * this3.z;
	var zw = this3.z * this3.w;
	var this4 = new geom_structure_Mat3x3(1 - 2 * (yy + zz),2 * (xy - zw),2 * (xz + yw),2 * (xy + zw),1 - 2 * (xx + zz),2 * (yz - xw),2 * (xz - yw),2 * (yz + xw),1 - 2 * (xx + yy));
	var m = this4;
	var this5 = new geom_structure_Mat2x2(m.a,m.b,m.d,m.e);
	var this6 = this5;
	var this7 = new geom_structure_Mat4x3(this6.a,this6.b,0.,0.,this6.c,this6.d,0.,0.,0.,0.,1.,0.);
	return this7;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.toMatrix3x3 = function(this1) {
	var xx = this1.x * this1.x;
	var xy = this1.x * this1.y;
	var xz = this1.x * this1.z;
	var xw = this1.x * this1.w;
	var yy = this1.y * this1.y;
	var yz = this1.y * this1.z;
	var yw = this1.y * this1.w;
	var zz = this1.z * this1.z;
	var zw = this1.z * this1.w;
	var this2 = new geom_structure_Mat3x3(1 - 2 * (yy + zz),2 * (xy - zw),2 * (xz + yw),2 * (xy + zw),1 - 2 * (xx + zz),2 * (yz - xw),2 * (xz - yw),2 * (yz + xw),1 - 2 * (xx + yy));
	return this2;
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.fromMatrix4x3 = function(m4x3) {
	var this1 = new geom_structure_Mat3x3(m4x3.a,m4x3.b,m4x3.c,m4x3.e,m4x3.f,m4x3.g,m4x3.i,m4x3.j,m4x3.k);
	var m3x3 = this1;
	var this2 = new geom_structure_Mat3x3(0.,0.,0.,0.,0.,0.,0.,0.,0.);
	var tr = m3x3.a + m3x3.e + m3x3.i;
	var s;
	if(tr > 0) {
		s = Math.sqrt(tr + 1.0) * 2;
		var this3 = new geom_structure_Mat1x4((m3x3.h - m3x3.f) / s,(m3x3.c - m3x3.g) / s,(m3x3.d - m3x3.b) / s,0.25 * s);
		return this3;
	} else if(m3x3.a > m3x3.e && m3x3.a > m3x3.i) {
		s = Math.sqrt(1.0 + m3x3.a - m3x3.e - m3x3.i) * 2;
		var this4 = new geom_structure_Mat1x4(0.25 * s,(m3x3.b + m3x3.d) / s,(m3x3.c + m3x3.g) / s,(m3x3.h - m3x3.f) / s);
		return this4;
	} else if(m3x3.e > m3x3.i) {
		s = Math.sqrt(1.0 + m3x3.e - m3x3.a - m3x3.i) * 2;
		var this5 = new geom_structure_Mat1x4((m3x3.b + m3x3.d) / s,0.25 * s,(m3x3.f + m3x3.h) / s,(m3x3.c - m3x3.g) / s);
		return this5;
	} else {
		s = Math.sqrt(1.0 + m3x3.i - m3x3.i - m3x3.e) * 2;
		var this6 = new geom_structure_Mat1x4((m3x3.d - m3x3.b) / s,(m3x3.c + m3x3.g) / s,(m3x3.f + m3x3.h) / s,0.25 * s);
		return this6;
	}
};
geom_matrix__$Quaternion_Quaternion_$Impl_$.fromMatrix3x3 = function(m) {
	var this1 = new geom_structure_Mat3x3(0.,0.,0.,0.,0.,0.,0.,0.,0.);
	var tr = m.a + m.e + m.i;
	var s;
	if(tr > 0) {
		s = Math.sqrt(tr + 1.0) * 2;
		var this2 = new geom_structure_Mat1x4((m.h - m.f) / s,(m.c - m.g) / s,(m.d - m.b) / s,0.25 * s);
		return this2;
	} else if(m.a > m.e && m.a > m.i) {
		s = Math.sqrt(1.0 + m.a - m.e - m.i) * 2;
		var this3 = new geom_structure_Mat1x4(0.25 * s,(m.b + m.d) / s,(m.c + m.g) / s,(m.h - m.f) / s);
		return this3;
	} else if(m.e > m.i) {
		s = Math.sqrt(1.0 + m.e - m.a - m.i) * 2;
		var this4 = new geom_structure_Mat1x4((m.b + m.d) / s,0.25 * s,(m.f + m.h) / s,(m.c - m.g) / s);
		return this4;
	} else {
		s = Math.sqrt(1.0 + m.i - m.i - m.e) * 2;
		var this5 = new geom_structure_Mat1x4((m.d - m.b) / s,(m.c + m.g) / s,(m.f + m.h) / s,0.25 * s);
		return this5;
	}
};
var geom_move_Axis3 = function() {
	this.tz = new geom_move_Parameter();
	this.ty = new geom_move_Parameter();
	this.tx = new geom_move_Parameter();
	this.rz = new geom_move_Parameter();
	this.ry = new geom_move_Parameter();
	this.rx = new geom_move_Parameter();
};
$hxClasses["geom.move.Axis3"] = geom_move_Axis3;
geom_move_Axis3.__name__ = "geom.move.Axis3";
geom_move_Axis3.prototype = {
	reset: function() {
		this.rx.value = 0.;
		this.ry.value = 0.;
		this.rz.value = 0.;
		this.tx.value = 0.;
		this.ty.value = 0.;
		this.tz.value = 0.;
	}
	,pitch: function(v) {
		var _this = this.rx;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,yaw: function(v) {
		var _this = this.ry;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,roll: function(v) {
		var _this = this.rz;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,alongX: function(v) {
		var _this = this.tx;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,alongY: function(v) {
		var _this = this.ty;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,alongZ: function(v) {
		var _this = this.tz;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,updateCalculate: function(q) {
		var rotations = this.rx.trinary.changed || this.ry.trinary.changed || this.rz.trinary.changed;
		var translations = this.tx.trinary.changed || this.ty.trinary.changed || this.tz.trinary.changed;
		if(translations || rotations) {
			var qReal;
			if(rotations) {
				var n9 = this.rz.value * 0.5;
				var n6 = Math.sin(n9);
				var n5 = Math.cos(n9);
				var n8 = this.rx.value * 0.5;
				var n4 = Math.sin(n8);
				var n3 = Math.cos(n8);
				var n7 = this.ry.value * 0.5;
				var n2 = Math.sin(n7);
				var n1 = Math.cos(n7);
				var this1 = new geom_structure_Mat1x4(n1 * n4 * n5 + n2 * n3 * n6,n2 * n3 * n5 - n1 * n4 * n6,n1 * n3 * n6 - n2 * n4 * n5,n1 * n3 * n5 + n2 * n4 * n6);
				qReal = this1;
			} else {
				var this2 = new geom_structure_Mat1x4(0.,0.,0.,1.);
				qReal = this2;
			}
			var qDual;
			if(translations) {
				var this3 = new geom_structure_Mat1x4(this.tx.value,this.ty.value,this.tz.value,1.);
				qDual = this3;
			} else {
				var this4 = new geom_structure_Mat1x4(0.,0.,0.,0.);
				qDual = this4;
			}
			var currentLength = Math.sqrt(qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w);
			if(currentLength != 0.) {
				var mul = 1. / currentLength;
				qReal.x *= mul;
				qReal.y *= mul;
				qReal.z *= mul;
				qReal.w *= mul;
				var real = qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w;
			}
			var real1 = qReal;
			var this5 = new geom_structure_Mat1x4(qDual.x,qDual.y,qDual.z,0.);
			var q1 = this5;
			var this6 = new geom_structure_Mat1x4(q1.x * 0.5,q1.y * 0.5,q1.z * 0.5,q1.w * 0.5);
			q1 = this6;
			var this7 = new geom_structure_Mat1x4(q1.x * real1.w + q1.y * real1.z - q1.z * real1.y + q1.w * real1.x,-q1.x * real1.z + q1.y * real1.w + q1.z * real1.x + q1.w * real1.y,q1.x * real1.y - q1.y * real1.x + q1.z * real1.w + q1.w * real1.z,-q1.x * real1.x - q1.y * real1.y - q1.z * real1.z + q1.w * real1.w);
			var dual = this7;
			var this8 = new geom_structure_DualQ(real1,dual);
			var dualQuaternion = this8;
			var q11 = q.real;
			var q2 = dualQuaternion.real;
			var this9 = new geom_structure_Mat1x4(q11.x * q2.w + q11.y * q2.z - q11.z * q2.y + q11.w * q2.x,-q11.x * q2.z + q11.y * q2.w + q11.z * q2.x + q11.w * q2.y,q11.x * q2.y - q11.y * q2.x + q11.z * q2.w + q11.w * q2.z,-q11.x * q2.x - q11.y * q2.y - q11.z * q2.z + q11.w * q2.w);
			var q12 = q.dual;
			var q21 = dualQuaternion.real;
			var this10 = new geom_structure_Mat1x4(q12.x * q21.w + q12.y * q21.z - q12.z * q21.y + q12.w * q21.x,-q12.x * q21.z + q12.y * q21.w + q12.z * q21.x + q12.w * q21.y,q12.x * q21.y - q12.y * q21.x + q12.z * q21.w + q12.w * q21.z,-q12.x * q21.x - q12.y * q21.y - q12.z * q21.z + q12.w * q21.w);
			var a = this10;
			var q13 = dualQuaternion.dual;
			var q22 = q.real;
			var this11 = new geom_structure_Mat1x4(q13.x * q22.w + q13.y * q22.z - q13.z * q22.y + q13.w * q22.x,-q13.x * q22.z + q13.y * q22.w + q13.z * q22.x + q13.w * q22.y,q13.x * q22.y - q13.y * q22.x + q13.z * q22.w + q13.w * q22.z,-q13.x * q22.x - q13.y * q22.y - q13.z * q22.z + q13.w * q22.w);
			var b = this11;
			var this12 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
			var this13 = new geom_structure_DualQ(this9,this12);
			return this13;
		} else {
			return q;
		}
	}
	,rotationChanged: function() {
		if(!(this.rx.trinary.changed || this.ry.trinary.changed)) {
			return this.rz.trinary.changed;
		} else {
			return true;
		}
	}
	,translationChanged: function() {
		if(!(this.tx.trinary.changed || this.ty.trinary.changed)) {
			return this.tz.trinary.changed;
		} else {
			return true;
		}
	}
	,__class__: geom_move_Axis3
};
var geom_move_Parameter = function() {
	this.trinary = new geom_move_Trinary(0.);
	this.value = 0.;
	this.step = 0.005;
};
$hxClasses["geom.move.Parameter"] = geom_move_Parameter;
geom_move_Parameter.__name__ = "geom.move.Parameter";
geom_move_Parameter.prototype = {
	update: function(v) {
		this.trinary.set_trit(v);
		if(this.trinary.changed) {
			if(v == 0.) {
				this.value = 0.;
			} else {
				var f = v;
				this.value = -f * this.step;
			}
		}
	}
	,__class__: geom_move_Parameter
};
var geom_move_Trinary = function(v) {
	this.changed = false;
	this.set_trit(v);
};
$hxClasses["geom.move.Trinary"] = geom_move_Trinary;
geom_move_Trinary.__name__ = "geom.move.Trinary";
geom_move_Trinary.prototype = {
	set_trit: function(v) {
		if(this.get_trit() == v) {
			this.changed = false;
		} else {
			this.trit = v;
			this.changed = true;
		}
		return v;
	}
	,get_trit: function() {
		return this.trit;
	}
	,increment: function() {
		switch(this.get_trit()) {
		case -1.:
			this.set_trit(0.);
			break;
		case 0.:
			this.set_trit(1.);
			break;
		case 1.:
			this.set_trit(-1.);
			break;
		}
	}
	,decrement: function() {
		switch(this.get_trit()) {
		case -1.:
			this.set_trit(1.);
			break;
		case 0.:
			this.set_trit(-1.);
			break;
		case 1.:
			this.set_trit(0.);
			break;
		}
	}
	,__class__: geom_move_Trinary
};
var geom_obj_DieLayout = function(radius,isLeft) {
	if(isLeft == null) {
		isLeft = false;
	}
	this.radius = radius;
	this.isLeft = isLeft;
};
$hxClasses["geom.obj.DieLayout"] = geom_obj_DieLayout;
geom_obj_DieLayout.__name__ = "geom.obj.DieLayout";
geom_obj_DieLayout.prototype = {
	__class__: geom_obj_DieLayout
};
var geom_obj_CubeTransforms = function() { };
$hxClasses["geom.obj.CubeTransforms"] = geom_obj_CubeTransforms;
geom_obj_CubeTransforms.__name__ = "geom.obj.CubeTransforms";
geom_obj_CubeTransforms.getDieLayout = function(layout) {
	var z = layout.radius;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z);
	var s = this3;
	var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	var t1 = this4;
	var theta = Math.PI / 2;
	var this5 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this6 = this5;
	var c = Math.cos(theta);
	var s1 = Math.sin(theta);
	var this7 = new geom_structure_Mat4x3(c,0.,s1,0.,0.,1.,0.,0.,-s1,0.,c,0.);
	var s2 = this7;
	var this8 = new geom_structure_Mat4x3(this6.a * s2.a + this6.b * s2.e + this6.c * s2.i,this6.a * s2.b + this6.b * s2.f + this6.c * s2.j,this6.a * s2.c + this6.b * s2.g + this6.c * s2.k,this6.a * s2.d + this6.b * s2.h + this6.c * s2.l + this6.d,this6.e * s2.a + this6.f * s2.e + this6.g * s2.i,this6.e * s2.b + this6.f * s2.f + this6.g * s2.j,this6.e * s2.c + this6.f * s2.g + this6.g * s2.k,this6.e * s2.d + this6.f * s2.h + this6.g * s2.l + this6.h,this6.i * s2.a + this6.j * s2.e + this6.k * s2.i,this6.i * s2.b + this6.j * s2.f + this6.k * s2.j,this6.i * s2.c + this6.j * s2.g + this6.k * s2.k,this6.i * s2.d + this6.j * s2.h + this6.k * s2.l + this6.l);
	var r = this8;
	var z1 = layout.radius;
	var this9 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this10 = this9;
	var this11 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z1);
	var s3 = this11;
	var this12 = new geom_structure_Mat4x3(this10.a * s3.a + this10.b * s3.e + this10.c * s3.i,this10.a * s3.b + this10.b * s3.f + this10.c * s3.j,this10.a * s3.c + this10.b * s3.g + this10.c * s3.k,this10.a * s3.d + this10.b * s3.h + this10.c * s3.l + this10.d,this10.e * s3.a + this10.f * s3.e + this10.g * s3.i,this10.e * s3.b + this10.f * s3.f + this10.g * s3.j,this10.e * s3.c + this10.f * s3.g + this10.g * s3.k,this10.e * s3.d + this10.f * s3.h + this10.g * s3.l + this10.h,this10.i * s3.a + this10.j * s3.e + this10.k * s3.i,this10.i * s3.b + this10.j * s3.f + this10.k * s3.j,this10.i * s3.c + this10.j * s3.g + this10.k * s3.k,this10.i * s3.d + this10.j * s3.h + this10.k * s3.l + this10.l);
	var s4 = this12;
	var this13 = new geom_structure_Mat4x3(r.a * s4.a + r.b * s4.e + r.c * s4.i,r.a * s4.b + r.b * s4.f + r.c * s4.j,r.a * s4.c + r.b * s4.g + r.c * s4.k,r.a * s4.d + r.b * s4.h + r.c * s4.l + r.d,r.e * s4.a + r.f * s4.e + r.g * s4.i,r.e * s4.b + r.f * s4.f + r.g * s4.j,r.e * s4.c + r.f * s4.g + r.g * s4.k,r.e * s4.d + r.f * s4.h + r.g * s4.l + r.h,r.i * s4.a + r.j * s4.e + r.k * s4.i,r.i * s4.b + r.j * s4.f + r.k * s4.j,r.i * s4.c + r.j * s4.g + r.k * s4.k,r.i * s4.d + r.j * s4.h + r.k * s4.l + r.l);
	var t2 = this13;
	var theta1 = Math.PI / 2;
	var this14 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this15 = this14;
	var c1 = Math.cos(theta1);
	var s5 = Math.sin(theta1);
	var this16 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c1,-s5,0.,0.,s5,c1,0.);
	var s6 = this16;
	var this17 = new geom_structure_Mat4x3(this15.a * s6.a + this15.b * s6.e + this15.c * s6.i,this15.a * s6.b + this15.b * s6.f + this15.c * s6.j,this15.a * s6.c + this15.b * s6.g + this15.c * s6.k,this15.a * s6.d + this15.b * s6.h + this15.c * s6.l + this15.d,this15.e * s6.a + this15.f * s6.e + this15.g * s6.i,this15.e * s6.b + this15.f * s6.f + this15.g * s6.j,this15.e * s6.c + this15.f * s6.g + this15.g * s6.k,this15.e * s6.d + this15.f * s6.h + this15.g * s6.l + this15.h,this15.i * s6.a + this15.j * s6.e + this15.k * s6.i,this15.i * s6.b + this15.j * s6.f + this15.k * s6.j,this15.i * s6.c + this15.j * s6.g + this15.k * s6.k,this15.i * s6.d + this15.j * s6.h + this15.k * s6.l + this15.l);
	var r1 = this17;
	var z2 = layout.radius;
	var this18 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this19 = this18;
	var this20 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z2);
	var s7 = this20;
	var this21 = new geom_structure_Mat4x3(this19.a * s7.a + this19.b * s7.e + this19.c * s7.i,this19.a * s7.b + this19.b * s7.f + this19.c * s7.j,this19.a * s7.c + this19.b * s7.g + this19.c * s7.k,this19.a * s7.d + this19.b * s7.h + this19.c * s7.l + this19.d,this19.e * s7.a + this19.f * s7.e + this19.g * s7.i,this19.e * s7.b + this19.f * s7.f + this19.g * s7.j,this19.e * s7.c + this19.f * s7.g + this19.g * s7.k,this19.e * s7.d + this19.f * s7.h + this19.g * s7.l + this19.h,this19.i * s7.a + this19.j * s7.e + this19.k * s7.i,this19.i * s7.b + this19.j * s7.f + this19.k * s7.j,this19.i * s7.c + this19.j * s7.g + this19.k * s7.k,this19.i * s7.d + this19.j * s7.h + this19.k * s7.l + this19.l);
	var s8 = this21;
	var this22 = new geom_structure_Mat4x3(r1.a * s8.a + r1.b * s8.e + r1.c * s8.i,r1.a * s8.b + r1.b * s8.f + r1.c * s8.j,r1.a * s8.c + r1.b * s8.g + r1.c * s8.k,r1.a * s8.d + r1.b * s8.h + r1.c * s8.l + r1.d,r1.e * s8.a + r1.f * s8.e + r1.g * s8.i,r1.e * s8.b + r1.f * s8.f + r1.g * s8.j,r1.e * s8.c + r1.f * s8.g + r1.g * s8.k,r1.e * s8.d + r1.f * s8.h + r1.g * s8.l + r1.h,r1.i * s8.a + r1.j * s8.e + r1.k * s8.i,r1.i * s8.b + r1.j * s8.f + r1.k * s8.j,r1.i * s8.c + r1.j * s8.g + r1.k * s8.k,r1.i * s8.d + r1.j * s8.h + r1.k * s8.l + r1.l);
	var t3 = this22;
	var theta2 = -Math.PI / 2;
	var this23 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this24 = this23;
	var c2 = Math.cos(theta2);
	var s9 = Math.sin(theta2);
	var this25 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c2,-s9,0.,0.,s9,c2,0.);
	var s10 = this25;
	var this26 = new geom_structure_Mat4x3(this24.a * s10.a + this24.b * s10.e + this24.c * s10.i,this24.a * s10.b + this24.b * s10.f + this24.c * s10.j,this24.a * s10.c + this24.b * s10.g + this24.c * s10.k,this24.a * s10.d + this24.b * s10.h + this24.c * s10.l + this24.d,this24.e * s10.a + this24.f * s10.e + this24.g * s10.i,this24.e * s10.b + this24.f * s10.f + this24.g * s10.j,this24.e * s10.c + this24.f * s10.g + this24.g * s10.k,this24.e * s10.d + this24.f * s10.h + this24.g * s10.l + this24.h,this24.i * s10.a + this24.j * s10.e + this24.k * s10.i,this24.i * s10.b + this24.j * s10.f + this24.k * s10.j,this24.i * s10.c + this24.j * s10.g + this24.k * s10.k,this24.i * s10.d + this24.j * s10.h + this24.k * s10.l + this24.l);
	var r2 = this26;
	var z3 = layout.radius;
	var this27 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this28 = this27;
	var this29 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z3);
	var s11 = this29;
	var this30 = new geom_structure_Mat4x3(this28.a * s11.a + this28.b * s11.e + this28.c * s11.i,this28.a * s11.b + this28.b * s11.f + this28.c * s11.j,this28.a * s11.c + this28.b * s11.g + this28.c * s11.k,this28.a * s11.d + this28.b * s11.h + this28.c * s11.l + this28.d,this28.e * s11.a + this28.f * s11.e + this28.g * s11.i,this28.e * s11.b + this28.f * s11.f + this28.g * s11.j,this28.e * s11.c + this28.f * s11.g + this28.g * s11.k,this28.e * s11.d + this28.f * s11.h + this28.g * s11.l + this28.h,this28.i * s11.a + this28.j * s11.e + this28.k * s11.i,this28.i * s11.b + this28.j * s11.f + this28.k * s11.j,this28.i * s11.c + this28.j * s11.g + this28.k * s11.k,this28.i * s11.d + this28.j * s11.h + this28.k * s11.l + this28.l);
	var s12 = this30;
	var this31 = new geom_structure_Mat4x3(r2.a * s12.a + r2.b * s12.e + r2.c * s12.i,r2.a * s12.b + r2.b * s12.f + r2.c * s12.j,r2.a * s12.c + r2.b * s12.g + r2.c * s12.k,r2.a * s12.d + r2.b * s12.h + r2.c * s12.l + r2.d,r2.e * s12.a + r2.f * s12.e + r2.g * s12.i,r2.e * s12.b + r2.f * s12.f + r2.g * s12.j,r2.e * s12.c + r2.f * s12.g + r2.g * s12.k,r2.e * s12.d + r2.f * s12.h + r2.g * s12.l + r2.h,r2.i * s12.a + r2.j * s12.e + r2.k * s12.i,r2.i * s12.b + r2.j * s12.f + r2.k * s12.j,r2.i * s12.c + r2.j * s12.g + r2.k * s12.k,r2.i * s12.d + r2.j * s12.h + r2.k * s12.l + r2.l);
	var t4 = this31;
	var theta3 = -Math.PI / 2;
	var this32 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this33 = this32;
	var c3 = Math.cos(theta3);
	var s13 = Math.sin(theta3);
	var this34 = new geom_structure_Mat4x3(c3,0.,s13,0.,0.,1.,0.,0.,-s13,0.,c3,0.);
	var s14 = this34;
	var this35 = new geom_structure_Mat4x3(this33.a * s14.a + this33.b * s14.e + this33.c * s14.i,this33.a * s14.b + this33.b * s14.f + this33.c * s14.j,this33.a * s14.c + this33.b * s14.g + this33.c * s14.k,this33.a * s14.d + this33.b * s14.h + this33.c * s14.l + this33.d,this33.e * s14.a + this33.f * s14.e + this33.g * s14.i,this33.e * s14.b + this33.f * s14.f + this33.g * s14.j,this33.e * s14.c + this33.f * s14.g + this33.g * s14.k,this33.e * s14.d + this33.f * s14.h + this33.g * s14.l + this33.h,this33.i * s14.a + this33.j * s14.e + this33.k * s14.i,this33.i * s14.b + this33.j * s14.f + this33.k * s14.j,this33.i * s14.c + this33.j * s14.g + this33.k * s14.k,this33.i * s14.d + this33.j * s14.h + this33.k * s14.l + this33.l);
	var r3 = this35;
	var z4 = layout.radius;
	var this36 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this37 = this36;
	var this38 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z4);
	var s15 = this38;
	var this39 = new geom_structure_Mat4x3(this37.a * s15.a + this37.b * s15.e + this37.c * s15.i,this37.a * s15.b + this37.b * s15.f + this37.c * s15.j,this37.a * s15.c + this37.b * s15.g + this37.c * s15.k,this37.a * s15.d + this37.b * s15.h + this37.c * s15.l + this37.d,this37.e * s15.a + this37.f * s15.e + this37.g * s15.i,this37.e * s15.b + this37.f * s15.f + this37.g * s15.j,this37.e * s15.c + this37.f * s15.g + this37.g * s15.k,this37.e * s15.d + this37.f * s15.h + this37.g * s15.l + this37.h,this37.i * s15.a + this37.j * s15.e + this37.k * s15.i,this37.i * s15.b + this37.j * s15.f + this37.k * s15.j,this37.i * s15.c + this37.j * s15.g + this37.k * s15.k,this37.i * s15.d + this37.j * s15.h + this37.k * s15.l + this37.l);
	var s16 = this39;
	var this40 = new geom_structure_Mat4x3(r3.a * s16.a + r3.b * s16.e + r3.c * s16.i,r3.a * s16.b + r3.b * s16.f + r3.c * s16.j,r3.a * s16.c + r3.b * s16.g + r3.c * s16.k,r3.a * s16.d + r3.b * s16.h + r3.c * s16.l + r3.d,r3.e * s16.a + r3.f * s16.e + r3.g * s16.i,r3.e * s16.b + r3.f * s16.f + r3.g * s16.j,r3.e * s16.c + r3.f * s16.g + r3.g * s16.k,r3.e * s16.d + r3.f * s16.h + r3.g * s16.l + r3.h,r3.i * s16.a + r3.j * s16.e + r3.k * s16.i,r3.i * s16.b + r3.j * s16.f + r3.k * s16.j,r3.i * s16.c + r3.j * s16.g + r3.k * s16.k,r3.i * s16.d + r3.j * s16.h + r3.k * s16.l + r3.l);
	var t5 = this40;
	var theta4 = Math.PI;
	var this41 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this42 = this41;
	var c4 = Math.cos(theta4);
	var s17 = Math.sin(theta4);
	var this43 = new geom_structure_Mat4x3(c4,0.,s17,0.,0.,1.,0.,0.,-s17,0.,c4,0.);
	var s18 = this43;
	var this44 = new geom_structure_Mat4x3(this42.a * s18.a + this42.b * s18.e + this42.c * s18.i,this42.a * s18.b + this42.b * s18.f + this42.c * s18.j,this42.a * s18.c + this42.b * s18.g + this42.c * s18.k,this42.a * s18.d + this42.b * s18.h + this42.c * s18.l + this42.d,this42.e * s18.a + this42.f * s18.e + this42.g * s18.i,this42.e * s18.b + this42.f * s18.f + this42.g * s18.j,this42.e * s18.c + this42.f * s18.g + this42.g * s18.k,this42.e * s18.d + this42.f * s18.h + this42.g * s18.l + this42.h,this42.i * s18.a + this42.j * s18.e + this42.k * s18.i,this42.i * s18.b + this42.j * s18.f + this42.k * s18.j,this42.i * s18.c + this42.j * s18.g + this42.k * s18.k,this42.i * s18.d + this42.j * s18.h + this42.k * s18.l + this42.l);
	var r4 = this44;
	var z5 = layout.radius;
	var this45 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this46 = this45;
	var this47 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z5);
	var s19 = this47;
	var this48 = new geom_structure_Mat4x3(this46.a * s19.a + this46.b * s19.e + this46.c * s19.i,this46.a * s19.b + this46.b * s19.f + this46.c * s19.j,this46.a * s19.c + this46.b * s19.g + this46.c * s19.k,this46.a * s19.d + this46.b * s19.h + this46.c * s19.l + this46.d,this46.e * s19.a + this46.f * s19.e + this46.g * s19.i,this46.e * s19.b + this46.f * s19.f + this46.g * s19.j,this46.e * s19.c + this46.f * s19.g + this46.g * s19.k,this46.e * s19.d + this46.f * s19.h + this46.g * s19.l + this46.h,this46.i * s19.a + this46.j * s19.e + this46.k * s19.i,this46.i * s19.b + this46.j * s19.f + this46.k * s19.j,this46.i * s19.c + this46.j * s19.g + this46.k * s19.k,this46.i * s19.d + this46.j * s19.h + this46.k * s19.l + this46.l);
	var s20 = this48;
	var this49 = new geom_structure_Mat4x3(r4.a * s20.a + r4.b * s20.e + r4.c * s20.i,r4.a * s20.b + r4.b * s20.f + r4.c * s20.j,r4.a * s20.c + r4.b * s20.g + r4.c * s20.k,r4.a * s20.d + r4.b * s20.h + r4.c * s20.l + r4.d,r4.e * s20.a + r4.f * s20.e + r4.g * s20.i,r4.e * s20.b + r4.f * s20.f + r4.g * s20.j,r4.e * s20.c + r4.f * s20.g + r4.g * s20.k,r4.e * s20.d + r4.f * s20.h + r4.g * s20.l + r4.h,r4.i * s20.a + r4.j * s20.e + r4.k * s20.i,r4.i * s20.b + r4.j * s20.f + r4.k * s20.j,r4.i * s20.c + r4.j * s20.g + r4.k * s20.k,r4.i * s20.d + r4.j * s20.h + r4.k * s20.l + r4.l);
	var t6 = this49;
	var tt2 = layout.isLeft == true ? t3 : t2;
	var tt3 = layout.isLeft == true ? t2 : t3;
	var tt4 = layout.isLeft == true ? t5 : t4;
	var tt5 = layout.isLeft == true ? t4 : t5;
	return [t1,tt2,tt3,tt4,tt5,t6];
};
var geom_obj_Quad2D = function(A,B,C,D) {
	this.A = A;
	this.B = B;
	this.C = C;
	this.D = D;
};
$hxClasses["geom.obj.Quad2D"] = geom_obj_Quad2D;
geom_obj_Quad2D.__name__ = "geom.obj.Quad2D";
geom_obj_Quad2D.prototype = {
	__class__: geom_obj_Quad2D
};
var geom_structure_DualQ = function(real,dual) {
	this.real = real;
	this.dual = dual;
};
$hxClasses["geom.structure.DualQ"] = geom_structure_DualQ;
geom_structure_DualQ.__name__ = "geom.structure.DualQ";
geom_structure_DualQ.prototype = {
	__class__: geom_structure_DualQ
};
var geom_structure_Mat1x2 = function(x,y) {
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
};
$hxClasses["geom.structure.Mat1x2"] = geom_structure_Mat1x2;
geom_structure_Mat1x2.__name__ = "geom.structure.Mat1x2";
geom_structure_Mat1x2.prototype = {
	__class__: geom_structure_Mat1x2
};
var geom_structure_Mat1x3 = function(x,y,z) {
	this.z = 0.;
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["geom.structure.Mat1x3"] = geom_structure_Mat1x3;
geom_structure_Mat1x3.__name__ = "geom.structure.Mat1x3";
geom_structure_Mat1x3.prototype = {
	__class__: geom_structure_Mat1x3
};
var geom_structure_Mat1x4 = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	this.w = 1.;
	this.z = 0.;
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["geom.structure.Mat1x4"] = geom_structure_Mat1x4;
geom_structure_Mat1x4.__name__ = "geom.structure.Mat1x4";
geom_structure_Mat1x4.prototype = {
	__class__: geom_structure_Mat1x4
};
var geom_structure_Mat2x2 = function(a,b,c,d) {
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
};
$hxClasses["geom.structure.Mat2x2"] = geom_structure_Mat2x2;
geom_structure_Mat2x2.__name__ = "geom.structure.Mat2x2";
geom_structure_Mat2x2.prototype = {
	__class__: geom_structure_Mat2x2
};
var geom_structure_Mat3x3 = function(a,b,c,d,e,f,g,h,i) {
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
};
$hxClasses["geom.structure.Mat3x3"] = geom_structure_Mat3x3;
geom_structure_Mat3x3.__name__ = "geom.structure.Mat3x3";
geom_structure_Mat3x3.prototype = {
	__class__: geom_structure_Mat3x3
};
var geom_structure_Mat4x3 = function(a,b,c,d,e,f,g,h,i,j,k,l) {
	this.l = 0.;
	this.k = 0.;
	this.j = 0.;
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
	this.j = j;
	this.k = k;
	this.l = l;
};
$hxClasses["geom.structure.Mat4x3"] = geom_structure_Mat4x3;
geom_structure_Mat4x3.__name__ = "geom.structure.Mat4x3";
geom_structure_Mat4x3.prototype = {
	__class__: geom_structure_Mat4x3
};
var geom_structure_Mat4x4 = function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) {
	this.p = 0.;
	this.o = 0.;
	this.n = 0.;
	this.m = 0.;
	this.l = 0.;
	this.k = 0.;
	this.j = 0.;
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
	this.j = j;
	this.k = k;
	this.l = l;
	this.m = m;
	this.n = n;
	this.o = o;
	this.p = p;
};
$hxClasses["geom.structure.Mat4x4"] = geom_structure_Mat4x4;
geom_structure_Mat4x4.__name__ = "geom.structure.Mat4x4";
geom_structure_Mat4x4.prototype = {
	__class__: geom_structure_Mat4x4
};
var geom_structure_Range = function(u,l) {
	this.l = 0.;
	this.u = 0.;
	this.u = u;
	this.l = l;
};
$hxClasses["geom.structure.Range"] = geom_structure_Range;
geom_structure_Range.__name__ = "geom.structure.Range";
geom_structure_Range.prototype = {
	__class__: geom_structure_Range
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g11 = l;
				while(_g1 < _g11) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v4 = v;
				var _g_head = v4.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g2 = 0;
					var _g12 = haxe_Serializer.BASE64.length;
					while(_g2 < _g12) {
						var i3 = _g2++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b11 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b12 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e1 = v;
				this.serializeString($hxEnums[e1.__enum__].__constructs__[e1._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g3 = 0;
			while(_g3 < params.length) {
				var p = params[_g3];
				++_g3;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw new js__$Boot_HaxeError("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = _$String_String_$Impl_$.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : "haxe.zip.ExtraField", __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : "haxe.zip.Huffman", __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g2 = t.table;
			var _g1 = t.n;
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g2 = 0;
		var _g3 = nlengths;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g4 = 1;
		var _g5 = maxbits - 1;
		while(_g4 < _g5) {
			var i2 = _g4++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g6 = 0;
		var _g7 = nlengths;
		while(_g6 < _g7) {
			var i3 = _g6++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : "haxe.zip._InflateImpl.State", __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n1 = h.n;
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g2 = hclen;
				var _g3 = 19;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g4 = 0;
				var _g5 = hlit + hdist;
				while(_g4 < _g5) {
					var i2 = _g4++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.unzip = function(f) {
	if(!f.compressed) {
		return f.data;
	}
	throw new js__$Boot_HaxeError("No uncompress support");
};
haxe_zip_Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw new js__$Boot_HaxeError("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw new js__$Boot_HaxeError("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			csize = -1;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.dataSize < 0) {
				var bufSize = 65536;
				if(tmp == null) {
					tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
				}
				var out = new haxe_io_BytesBuffer();
				var z = new haxe_zip_InflateImpl(this.i,false,false);
				while(true) {
					var n = z.readBytes(tmp,0,bufSize);
					out.addBytes(tmp,0,n);
					if(n < bufSize) {
						break;
					}
				}
				e.data = out.getBytes();
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
$hxClasses["htmlHelper.tools.DivertTrace"] = htmlHelper_tools_DivertTrace;
htmlHelper_tools_DivertTrace.__name__ = "htmlHelper.tools.DivertTrace";
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
	,__class__: htmlHelper_tools_DivertTrace
};
var hxGeomAlgo_Debug = function() { };
$hxClasses["hxGeomAlgo.Debug"] = hxGeomAlgo_Debug;
hxGeomAlgo_Debug.__name__ = "hxGeomAlgo.Debug";
hxGeomAlgo_Debug.assert = function(cond,message,pos) {
	return;
};
var hxGeomAlgo_HomogCoord = function(x,y,w) {
	if(w == null) {
		w = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.w = w;
};
$hxClasses["hxGeomAlgo.HomogCoord"] = hxGeomAlgo_HomogCoord;
hxGeomAlgo_HomogCoord.__name__ = "hxGeomAlgo.HomogCoord";
hxGeomAlgo_HomogCoord.det = function(p,q,r) {
	return p.w * q.perpdot(r) - q.w * p.perpdot(r) + r.w * p.perpdot(q);
};
hxGeomAlgo_HomogCoord.ccw = function(p,q,r) {
	return hxGeomAlgo_HomogCoord.det(p,q,r) > 0;
};
hxGeomAlgo_HomogCoord.cw = function(p,q,r) {
	return hxGeomAlgo_HomogCoord.det(p,q,r) < 0;
};
hxGeomAlgo_HomogCoord.prototype = {
	add: function(p) {
		this.x += p.x;
		this.y += p.y;
		return this;
	}
	,sub: function(p) {
		this.x -= p.x;
		this.y -= p.y;
		return this;
	}
	,neg: function() {
		this.w = -this.w;
		this.x = -this.x;
		this.y = -this.y;
		return this;
	}
	,mul: function(m) {
		this.w *= m;
		this.x *= m;
		this.y *= m;
		return this;
	}
	,div: function(m) {
		this.w /= m;
		this.x /= m;
		this.y /= m;
		return this;
	}
	,normalize: function() {
		return this.div(this.length());
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.lengthSquared());
	}
	,perp: function() {
		var tmp = -this.y;
		this.y = this.x;
		this.x = tmp;
		return this;
	}
	,dotPoint: function(p) {
		return this.w + this.x * p.x + this.y * p.y;
	}
	,dot: function(p) {
		return this.w * p.w + this.x * p.x + this.y * p.y;
	}
	,perpdot: function(p) {
		return this.x * p.y - this.y * p.x;
	}
	,dotperp: function(p) {
		return -this.x * p.y + this.y * p.x;
	}
	,equals: function(p) {
		if(p.w * this.x == this.w * p.x) {
			return p.w * this.y == this.w * p.y;
		} else {
			return false;
		}
	}
	,left: function(p) {
		return this.dotPoint(p) > 0;
	}
	,right: function(p) {
		return this.dotPoint(p) < 0;
	}
	,toScreen: function() {
		return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(this.x / this.w,-this.y / this.w);
	}
	,toPoint: function() {
		return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(this.x / this.w,this.y / this.w);
	}
	,meet: function(p) {
		return new hxGeomAlgo_HomogCoord(p.w * this.y - this.w * p.y,this.w * p.x - p.w * this.x,this.x * p.y - this.y * p.x);
	}
	,meetPoint: function(p) {
		return new hxGeomAlgo_HomogCoord(this.y - this.w * p.y,this.w * p.x - this.x,this.x * p.y - this.y * p.x);
	}
	,toString: function() {
		return " (w:" + this.w + "; x:" + this.x + ", y:" + this.y + ")  ";
	}
	,__class__: hxGeomAlgo_HomogCoord
};
var hxGeomAlgo_HxPointData = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["hxGeomAlgo.HxPointData"] = hxGeomAlgo_HxPointData;
hxGeomAlgo_HxPointData.__name__ = "hxGeomAlgo.HxPointData";
hxGeomAlgo_HxPointData.prototype = {
	toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxGeomAlgo_HxPointData
};
var hxGeomAlgo__$HxPoint_HxPoint_$Impl_$ = $hx_exports["hxGeomAlgo"]["_HxPoint"]["HxPoint_Impl_"] = {};
$hxClasses["hxGeomAlgo._HxPoint.HxPoint_Impl_"] = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$;
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.__name__ = "hxGeomAlgo._HxPoint.HxPoint_Impl_";
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.get_x = function(this1) {
	return this1.x;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.set_x = function(this1,value) {
	return this1.x = value;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.get_y = function(this1) {
	return this1.y;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.set_y = function(this1,value) {
	return this1.y = value;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new hxGeomAlgo_HxPointData(x,y);
	return this1;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.setTo = function(this1,newX,newY) {
	this1.x = newX;
	this1.y = newY;
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.equals = function(this1,p) {
	if(p != null && this1.x == p.x) {
		return this1.y == p.y;
	} else {
		return false;
	}
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.clone = function(this1) {
	return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(this1.x,this1.y);
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.toString = function(this1) {
	return "(" + this1.x + ", " + this1.y + ")";
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.fromPointStruct = function(p) {
	return hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(p.x,p.y);
};
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.toPointStruct = function(this1) {
	return { x : this1.x, y : this1.y};
};
var hxGeomAlgo_PolyTools = $hx_exports["hxGeomAlgo"]["PolyTools"] = function() { };
$hxClasses["hxGeomAlgo.PolyTools"] = hxGeomAlgo_PolyTools;
hxGeomAlgo_PolyTools.__name__ = "hxGeomAlgo.PolyTools";
hxGeomAlgo_PolyTools.isCCW = function(poly) {
	if(poly.length <= 2) {
		return true;
	}
	var signedArea = 0.;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var idx = i - 1;
		var idx1 = idx;
		var len = poly.length;
		if(idx1 < 0) {
			idx1 += len;
		}
		idx = idx1 % len;
		var idx2 = i - 1;
		var idx3 = idx2;
		var len1 = poly.length;
		if(idx3 < 0) {
			idx3 += len1;
		}
		idx2 = idx3 % len1;
		signedArea += poly[idx].x * poly[i].y - poly[i].x * poly[idx2].y;
	}
	return signedArea < 0;
};
hxGeomAlgo_PolyTools.isCW = function(poly) {
	if(poly.length <= 2) {
		return true;
	}
	var signedArea = 0.;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var idx = i - 1;
		var idx1 = idx;
		var len = poly.length;
		if(idx1 < 0) {
			idx1 += len;
		}
		idx = idx1 % len;
		var idx2 = i - 1;
		var idx3 = idx2;
		var len1 = poly.length;
		if(idx3 < 0) {
			idx3 += len1;
		}
		idx2 = idx3 % len1;
		signedArea += poly[idx].x * poly[i].y - poly[i].x * poly[idx2].y;
	}
	return signedArea > 0;
};
hxGeomAlgo_PolyTools.makeCCW = function(poly) {
	var reversed = false;
	if(!hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.makeCW = function(poly) {
	var reversed = false;
	if(hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.isConvex = function(poly) {
	var isPositive = null;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var lower = i == 0 ? poly.length - 1 : i - 1;
		var middle = i;
		var upper = i == poly.length - 1 ? 0 : i + 1;
		var dx0 = poly[middle].x - poly[lower].x;
		var dy0 = poly[middle].y - poly[lower].y;
		var dx1 = poly[upper].x - poly[middle].x;
		var dy1 = poly[upper].y - poly[middle].y;
		var cross = dx0 * dy1 - dx1 * dy0;
		var newIsPositive = cross > 0;
		if(cross == 0) {
			continue;
		}
		if(isPositive == null) {
			isPositive = newIsPositive;
		} else if(isPositive != newIsPositive) {
			return false;
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.isSimple = function(poly) {
	var len = poly.length;
	if(len <= 3) {
		return true;
	}
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var p0 = i;
		var p1 = i == len - 1 ? 0 : i + 1;
		var _g2 = i + 1;
		var _g11 = len;
		while(_g2 < _g11) {
			var j = _g2++;
			var q0 = j;
			var q1 = j == len - 1 ? 0 : j + 1;
			var intersection = hxGeomAlgo_PolyTools.segmentIntersect(poly[p0],poly[p1],poly[q0],poly[q1]);
			var tmp;
			var tmp1;
			if(intersection != null) {
				var tmp2;
				var w = poly[p0];
				var x = intersection.x - w.x;
				var x1 = intersection.y - w.y;
				if(!(Math.sqrt(x * x + x1 * x1) < hxGeomAlgo_PolyTools.EPSILON)) {
					var w1 = poly[p1];
					var x2 = intersection.x - w1.x;
					var x3 = intersection.y - w1.y;
					tmp2 = Math.sqrt(x2 * x2 + x3 * x3) < hxGeomAlgo_PolyTools.EPSILON;
				} else {
					tmp2 = true;
				}
				tmp1 = !tmp2;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var tmp3;
				var w2 = poly[q0];
				var x4 = intersection.x - w2.x;
				var x5 = intersection.y - w2.y;
				if(!(Math.sqrt(x4 * x4 + x5 * x5) < hxGeomAlgo_PolyTools.EPSILON)) {
					var w3 = poly[q1];
					var x6 = intersection.x - w3.x;
					var x7 = intersection.y - w3.y;
					tmp3 = Math.sqrt(x6 * x6 + x7 * x7) < hxGeomAlgo_PolyTools.EPSILON;
				} else {
					tmp3 = true;
				}
				tmp = !tmp3;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.segmentIntersect = function(p0,p1,q0,q1) {
	var a1 = p1.y - p0.y;
	var b1 = p0.x - p1.x;
	var c1 = p1.x * p0.y - p0.x * p1.y;
	var a2 = q1.y - q0.y;
	var b2 = q0.x - q1.x;
	var c2 = q1.x * q0.y - q0.x * q1.y;
	var denom = a1 * b2 - a2 * b1;
	if(denom == 0) {
		return null;
	}
	var intersectionPoint = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	intersectionPoint.x = (b1 * c2 - b2 * c1) / denom;
	intersectionPoint.y = (a2 * c1 - a1 * c2) / denom;
	var x = p0.x - p1.x;
	var x1 = p0.y - p1.y;
	var p0p1 = x * x + x1 * x1;
	var x2 = q0.x - q1.x;
	var x3 = q0.y - q1.y;
	var q0q1 = x2 * x2 + x3 * x3;
	var x4 = intersectionPoint.x - p1.x;
	var x5 = intersectionPoint.y - p1.y;
	if(x4 * x4 + x5 * x5 > p0p1) {
		return null;
	}
	var x6 = intersectionPoint.x - p0.x;
	var x7 = intersectionPoint.y - p0.y;
	if(x6 * x6 + x7 * x7 > p0p1) {
		return null;
	}
	var x8 = intersectionPoint.x - q1.x;
	var x9 = intersectionPoint.y - q1.y;
	if(x8 * x8 + x9 * x9 > q0q1) {
		return null;
	}
	var x10 = intersectionPoint.x - q0.x;
	var x11 = intersectionPoint.y - q0.y;
	if(x10 * x10 + x11 * x11 > q0q1) {
		return null;
	}
	return intersectionPoint;
};
hxGeomAlgo_PolyTools.findDuplicatePoints = function(poly,consecutiveOnly,wrapAround) {
	if(wrapAround == null) {
		wrapAround = true;
	}
	if(consecutiveOnly == null) {
		consecutiveOnly = true;
	}
	var len = poly.length;
	if(len <= 1) {
		return [];
	}
	var dupIndices = [];
	var _g = 0;
	var _g1 = len - 1;
	while(_g < _g1) {
		var i = _g++;
		var j = i + 1;
		while(j < len) {
			var this1 = poly[i];
			var p = poly[j];
			var foundDup = p != null && this1.x == p.x && this1.y == p.y;
			if(foundDup) {
				dupIndices.push(i);
			}
			if(consecutiveOnly || foundDup && !consecutiveOnly) {
				break;
			}
			++j;
		}
	}
	var tmp;
	if(wrapAround && consecutiveOnly) {
		var this2 = poly[0];
		var p1 = poly[len - 1];
		tmp = p1 != null && this2.x == p1.x && this2.y == p1.y;
	} else {
		tmp = false;
	}
	if(tmp) {
		dupIndices.push(len - 1);
	}
	return dupIndices;
};
hxGeomAlgo_PolyTools.intersection = function(p1,p2,q1,q2) {
	var res = null;
	var a1 = p2.y - p1.y;
	var b1 = p1.x - p2.x;
	var c1 = a1 * p1.x + b1 * p1.y;
	var a2 = q2.y - q1.y;
	var b2 = q1.x - q2.x;
	var c2 = a2 * q1.x + b2 * q1.y;
	var det = a1 * b2 - a2 * b1;
	if(!(Math.abs(det) <= hxGeomAlgo_PolyTools.EPSILON)) {
		res = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
		res.x = (b2 * c1 - b1 * c2) / det;
		res.y = (a1 * c2 - a2 * c1) / det;
	}
	return res;
};
hxGeomAlgo_PolyTools.isReflex = function(poly,idx) {
	var idx1 = idx - 1;
	var idx2 = idx1;
	var len = poly.length;
	if(idx2 < 0) {
		idx2 += len;
	}
	idx1 = idx2 % len;
	var p = poly[idx1];
	var idx3 = idx;
	var idx4 = idx3;
	var len1 = poly.length;
	if(idx4 < 0) {
		idx4 += len1;
	}
	idx3 = idx4 % len1;
	var a = poly[idx3];
	var idx5 = idx + 1;
	var idx6 = idx5;
	var len2 = poly.length;
	if(idx6 < 0) {
		idx6 += len2;
	}
	idx5 = idx6 % len2;
	var b = poly[idx5];
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.at = function(poly,idx) {
	var idx1 = idx;
	var len = poly.length;
	if(idx1 < 0) {
		idx1 += len;
	}
	idx = idx1 % len;
	return poly[idx];
};
hxGeomAlgo_PolyTools.wrappedIdx = function(poly,idx) {
	var len = poly.length;
	if(idx < 0) {
		idx += len;
	}
	return idx % len;
};
hxGeomAlgo_PolyTools.side = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y);
};
hxGeomAlgo_PolyTools.isLeft = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) > 0;
};
hxGeomAlgo_PolyTools.isLeftOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) >= 0;
};
hxGeomAlgo_PolyTools.isRight = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.isRightOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) <= 0;
};
hxGeomAlgo_PolyTools.isCollinear = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) == 0;
};
hxGeomAlgo_PolyTools.distance = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return Math.sqrt(x * x + x1 * x1);
};
hxGeomAlgo_PolyTools.distanceToSegment = function(p,v,w) {
	return Math.sqrt(hxGeomAlgo_PolyTools.distanceToSegmentSquared(p,v,w));
};
hxGeomAlgo_PolyTools.distanceSquared = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return x * x + x1 * x1;
};
hxGeomAlgo_PolyTools.distanceToSegmentSquared = function(p,v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	var l2 = x * x + x1 * x1;
	if(l2 == 0) {
		var x2 = p.x - v.x;
		var x3 = p.y - v.y;
		return x2 * x2 + x3 * x3;
	}
	var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;
	if(t < 0) {
		var x4 = p.x - v.x;
		var x5 = p.y - v.y;
		return x4 * x4 + x5 * x5;
	}
	if(t > 1) {
		var x6 = p.x - w.x;
		var x7 = p.y - w.y;
		return x6 * x6 + x7 * x7;
	}
	hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.setTo(hxGeomAlgo_PolyTools.point,v.x + t * (w.x - v.x),v.y + t * (w.y - v.y));
	var w1 = hxGeomAlgo_PolyTools.point;
	var x8 = p.x - w1.x;
	var x9 = p.y - w1.y;
	return x8 * x8 + x9 * x9;
};
hxGeomAlgo_PolyTools.getCentroid = function(poly) {
	var c = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
	var area = hxGeomAlgo_PolyTools.getArea(poly);
	if(area != 0) {
		var len = poly.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var p0 = poly[i];
			var p1 = poly[(i + 1) % len];
			var m = p0.x * p1.y - p1.x * p0.y;
			c.x += (p0.x + p1.x) * m;
			c.y += (p0.y + p1.y) * m;
		}
		c.x /= 6 * area;
		c.y /= 6 * area;
	} else {
		c = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.EMPTY;
	}
	return c;
};
hxGeomAlgo_PolyTools.getArea = function(poly) {
	var area = 0.0;
	var len = poly.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var p0 = poly[i];
		var p1 = poly[(i + 1) % len];
		area += p0.x * p1.y - p1.x * p0.y;
	}
	area = .5 * area;
	return area;
};
hxGeomAlgo_PolyTools.meet = function(p,q) {
	return new hxGeomAlgo_HomogCoord(p.y - q.y,q.x - p.x,p.x * q.y - p.y * q.x);
};
hxGeomAlgo_PolyTools.dot = function(p,q) {
	return p.x * q.x + p.y * q.y;
};
hxGeomAlgo_PolyTools.sqr = function(x) {
	return x * x;
};
hxGeomAlgo_PolyTools.eq = function(a,b) {
	return Math.abs(a - b) <= hxGeomAlgo_PolyTools.EPSILON;
};
hxGeomAlgo_PolyTools.clear = function(array) {
	array.length = 0;
};
hxGeomAlgo_PolyTools.toFloatArray = function(poly,out) {
	out = out != null ? out : [];
	var _g = 0;
	while(_g < poly.length) {
		var p = poly[_g];
		++_g;
		out.push(p.x);
		out.push(p.y);
	}
	return out;
};
hxGeomAlgo_PolyTools.reverseFloatArray = function(poly,inPlace) {
	if(inPlace == null) {
		inPlace = false;
	}
	var res = inPlace ? poly : [];
	var nPoints = poly.length >> 1;
	var _g = 0;
	var _g1 = nPoints;
	while(_g < _g1) {
		var i = _g++;
		var xPos = (nPoints - i - 1) * 2;
		res[i * 2] = poly[xPos];
		res[i * 2 + 1] = poly[xPos + 1];
	}
	return res;
};
hxGeomAlgo_PolyTools.flatten = function(array,out) {
	var res = out != null ? out : [];
	var _g = 0;
	while(_g < array.length) {
		var arr = array[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var item = arr[_g1];
			++_g1;
			res.push(item);
		}
	}
	return res;
};
hxGeomAlgo_PolyTools.toPointArray = function(poly,out) {
	out = out != null ? out : [];
	var size = poly.length;
	if(poly.length % 2 == 1) {
		--size;
	}
	var _g = 0;
	var _g1 = size >> 1;
	while(_g < _g1) {
		var i = _g++;
		out.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(poly[i * 2],poly[i * 2 + 1]));
	}
	return out;
};
hxGeomAlgo_PolyTools.inflateLine = function(start,end,thickness) {
	var halfWidth = thickness / 2;
	var dx = end.x - start.x;
	var dy = end.y - start.y;
	var len = Math.sqrt(dx * dx + dy * dy);
	var nx = dx / len * halfWidth;
	var ny = dy / len * halfWidth;
	return [hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(start.x - ny,start.y + nx),hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(end.x - ny,end.y + nx),hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(end.x + ny,end.y - nx),hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(start.x + ny,start.y - nx)];
};
hxGeomAlgo_PolyTools.clip = function(subjPoly,clipPoly) {
	var cond = clipPoly.length >= 3 && hxGeomAlgo_PolyTools.isConvex(clipPoly);
	var res = [];
	var output = subjPoly;
	var isInside = hxGeomAlgo_PolyTools.isCCW(clipPoly) ? hxGeomAlgo_PolyTools.isRight : hxGeomAlgo_PolyTools.isLeft;
	var clipEdgeStart;
	var clipEdgeEnd;
	var inputEdgeStart;
	var inputEdgeEnd;
	var clipLen = clipPoly.length;
	var i = 0;
	var _g = 0;
	var _g1 = clipLen;
	while(_g < _g1) {
		var i1 = _g++;
		clipEdgeStart = clipPoly[i1];
		var idx = i1 + 1;
		var len = clipPoly.length;
		if(idx < 0) {
			idx += len;
		}
		clipEdgeEnd = clipPoly[idx % len];
		var input = output;
		output = [];
		inputEdgeStart = input[input.length - 1];
		var _g2 = 0;
		var _g11 = input.length;
		while(_g2 < _g11) {
			var j = _g2++;
			inputEdgeEnd = input[j];
			if(isInside(inputEdgeEnd,clipEdgeStart,clipEdgeEnd)) {
				if(!isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) {
					var intersectionPoint = hxGeomAlgo_PolyTools.intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
					if(intersectionPoint != null) {
						output.push(intersectionPoint);
					}
				}
				output.push(inputEdgeEnd);
			} else if(isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) {
				var intersectionPoint1 = hxGeomAlgo_PolyTools.intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
				if(intersectionPoint1 != null) {
					output.push(intersectionPoint1);
				}
			}
			inputEdgeStart = inputEdgeEnd;
		}
		res.push(output);
	}
	return res;
};
hxGeomAlgo_PolyTools.exposeEnum = function(enumClass,as) {
	var dotPath = (as != null ? as : enumClass.__ename__).split(".");
	var exports = $hx_exports;
	var i = 0;
	while(i < dotPath.length - 1) {
		var currPath = dotPath[i];
		exports[currPath] = exports[currPath] || { };
		exports = exports[currPath];
		++i;
	}
	exports[dotPath[i]] = enumClass;
};
var hxGeomAlgo_WindingRule = $hxEnums["hxGeomAlgo.WindingRule"] = { __ename__ : "hxGeomAlgo.WindingRule", __constructs__ : ["ODD","NON_ZERO","POSITIVE","NEGATIVE","ABS_GEQ_TWO"]
	,ODD: {_hx_index:0,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,NON_ZERO: {_hx_index:1,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,POSITIVE: {_hx_index:2,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,NEGATIVE: {_hx_index:3,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,ABS_GEQ_TWO: {_hx_index:4,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
};
var hxGeomAlgo_ResultType = $hxEnums["hxGeomAlgo.ResultType"] = { __ename__ : "hxGeomAlgo.ResultType", __constructs__ : ["POLYGONS","CONNECTED_POLYGONS","BOUNDARY_CONTOURS","EXPERIMENTAL_DELAUNAY"]
	,POLYGONS: {_hx_index:0,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,CONNECTED_POLYGONS: {_hx_index:1,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,BOUNDARY_CONTOURS: {_hx_index:2,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,EXPERIMENTAL_DELAUNAY: {_hx_index:3,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
};
var hxGeomAlgo_Tess2 = $hx_exports["hxGeomAlgo"]["Tess2"] = function() { };
$hxClasses["hxGeomAlgo.Tess2"] = hxGeomAlgo_Tess2;
hxGeomAlgo_Tess2.__name__ = "hxGeomAlgo.Tess2";
hxGeomAlgo_Tess2.tesselate = function(contours,windingRule,resultType,polySize,vertexDim,normal) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var tess = new hxGeomAlgo_Tesselator();
	var _g = 0;
	var _g1 = contours.length;
	while(_g < _g1) {
		var i = _g++;
		tess.addContour(vertexDim,contours[i]);
	}
	tess.tesselate(windingRule == null ? hxGeomAlgo_WindingRule.ODD : windingRule,resultType == null ? hxGeomAlgo_ResultType.POLYGONS : resultType,polySize,vertexDim,normal == null ? [0,0,1] : normal);
	return { vertices : tess.vertices, vertexIndices : tess.vertexIndices, vertexCount : tess.vertexCount, elements : tess.elements, elementCount : tess.elementCount};
};
hxGeomAlgo_Tess2.union = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var contours = contoursA.concat(contoursB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.NON_ZERO,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.intersection = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var contours = contoursA.concat(contoursB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.ABS_GEQ_TWO,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.difference = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < contoursB.length) {
		var poly = contoursB[_g1];
		++_g1;
		_g.push(hxGeomAlgo_PolyTools.reverseFloatArray(poly));
	}
	var diffB = _g;
	var contours = contoursA.concat(diffB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.POSITIVE,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.convertResult = function(vertices,elements,resultType,polySize,out) {
	out = out != null ? out : [];
	var tmp = resultType._hx_index != 2;
	var i = 0;
	switch(resultType._hx_index) {
	case 0:case 3:
		while(i < elements.length) {
			var poly = [];
			var _g = 0;
			var _g1 = polySize;
			while(_g < _g1) {
				var j = _g++;
				var idx = elements[i + j];
				if(idx == -1) {
					continue;
				}
				poly.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(vertices[idx * 2],vertices[idx * 2 + 1]));
			}
			out.push(poly);
			i += polySize;
		}
		break;
	case 1:
		while(i < elements.length) {
			var poly1 = [];
			var _g2 = 0;
			var _g11 = polySize;
			while(_g2 < _g11) {
				var j1 = _g2++;
				var idx1 = elements[i + j1];
				if(idx1 == -1) {
					continue;
				}
				poly1.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(vertices[idx1 * 2],vertices[idx1 * 2 + 1]));
			}
			out.push(poly1);
			i += polySize * 2;
		}
		break;
	case 2:
		while(i < elements.length) {
			var poly2 = [];
			var start = elements[i];
			var count = elements[i + 1];
			var _g3 = 0;
			var _g12 = count;
			while(_g3 < _g12) {
				var j2 = _g3++;
				var idx2 = start + j2;
				poly2.push(hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(vertices[idx2 * 2],vertices[idx2 * 2 + 1]));
			}
			out.push(poly2);
			i += 2;
		}
		break;
	}
	return out;
};
var hxGeomAlgo__$Tess2_TessVertex = function() {
	this.idx = 0;
	this.n = 0;
	this.pqHandle = 0;
	this.t = 0.0;
	this.s = 0.0;
	this.coords = [0,0,0];
	this.anEdge = null;
	this.prev = null;
	this.next = null;
};
$hxClasses["hxGeomAlgo._Tess2.TessVertex"] = hxGeomAlgo__$Tess2_TessVertex;
hxGeomAlgo__$Tess2_TessVertex.__name__ = "hxGeomAlgo._Tess2.TessVertex";
hxGeomAlgo__$Tess2_TessVertex.prototype = {
	__class__: hxGeomAlgo__$Tess2_TessVertex
};
var hxGeomAlgo__$Tess2_TessFace = function() {
	this.inside = false;
	this.marked = false;
	this.n = 0;
	this.trail = null;
	this.anEdge = null;
	this.prev = null;
	this.next = null;
};
$hxClasses["hxGeomAlgo._Tess2.TessFace"] = hxGeomAlgo__$Tess2_TessFace;
hxGeomAlgo__$Tess2_TessFace.__name__ = "hxGeomAlgo._Tess2.TessFace";
hxGeomAlgo__$Tess2_TessFace.prototype = {
	__class__: hxGeomAlgo__$Tess2_TessFace
};
var hxGeomAlgo__$Tess2_TessHalfEdge = function(side) {
	this.winding = 0;
	this.activeRegion = null;
	this.Lface = null;
	this.Org = null;
	this.Lnext = null;
	this.Onext = null;
	this.Sym = null;
	this.next = null;
	this.side = side;
};
$hxClasses["hxGeomAlgo._Tess2.TessHalfEdge"] = hxGeomAlgo__$Tess2_TessHalfEdge;
hxGeomAlgo__$Tess2_TessHalfEdge.__name__ = "hxGeomAlgo._Tess2.TessHalfEdge";
hxGeomAlgo__$Tess2_TessHalfEdge.prototype = {
	get_Rface: function() {
		return this.Sym.Lface;
	}
	,set_Rface: function(v) {
		return this.Sym.Lface = v;
	}
	,get_Dst: function() {
		return this.Sym.Org;
	}
	,set_Dst: function(v) {
		return this.Sym.Org = v;
	}
	,get_Oprev: function() {
		return this.Sym.Lnext;
	}
	,set_Oprev: function(v) {
		return this.Sym.Lnext = v;
	}
	,get_Lprev: function() {
		return this.Onext.Sym;
	}
	,set_Lprev: function(v) {
		return this.Onext.Sym = v;
	}
	,get_Dprev: function() {
		return this.Lnext.Sym;
	}
	,set_Dprev: function(v) {
		return this.Lnext.Sym = v;
	}
	,get_Rprev: function() {
		return this.Sym.Onext;
	}
	,set_Rprev: function(v) {
		return this.Sym.Onext = v;
	}
	,get_Dnext: function() {
		return this.Sym.Onext.Sym;
	}
	,set_Dnext: function(v) {
		return this.Sym.Onext.Sym = v;
	}
	,get_Rnext: function() {
		return this.Sym.Lnext.Sym;
	}
	,set_Rnext: function(v) {
		return this.Sym.Lnext.Sym = v;
	}
	,__class__: hxGeomAlgo__$Tess2_TessHalfEdge
};
var hxGeomAlgo__$Tess2_TessMesh = function() {
	this.eSym = new hxGeomAlgo__$Tess2_TessHalfEdge(1);
	this.e = new hxGeomAlgo__$Tess2_TessHalfEdge(0);
	this.f = new hxGeomAlgo__$Tess2_TessFace();
	this.v = new hxGeomAlgo__$Tess2_TessVertex();
	this.v.next = this.v.prev = this.v;
	this.v.anEdge = null;
	this.f.next = this.f.prev = this.f;
	this.f.anEdge = null;
	this.f.trail = null;
	this.f.marked = false;
	this.f.inside = false;
	this.e.next = this.e;
	this.e.Sym = this.eSym;
	this.e.Onext = null;
	this.e.Lnext = null;
	this.e.Org = null;
	this.e.Lface = null;
	this.e.winding = 0;
	this.e.activeRegion = null;
	this.e.mark = false;
	this.eSym.next = this.eSym;
	this.eSym.Sym = this.e;
	this.eSym.Onext = null;
	this.eSym.Lnext = null;
	this.eSym.Org = null;
	this.eSym.Lface = null;
	this.eSym.winding = 0;
	this.eSym.activeRegion = null;
	this.e.Sym.mark = false;
	this.vHead = this.v;
	this.fHead = this.f;
	this.eHead = this.e;
	this.eHeadSym = this.eSym;
};
$hxClasses["hxGeomAlgo._Tess2.TessMesh"] = hxGeomAlgo__$Tess2_TessMesh;
hxGeomAlgo__$Tess2_TessMesh.__name__ = "hxGeomAlgo._Tess2.TessMesh";
hxGeomAlgo__$Tess2_TessMesh.flipEdge = function(mesh,edge) {
	var a0 = edge;
	var a1 = a0.Lnext;
	var a2 = a1.Lnext;
	var b0 = edge.Sym;
	var b1 = b0.Lnext;
	var b2 = b1.Lnext;
	var aOrg = a0.Org;
	var aOpp = a2.Org;
	var bOrg = b0.Org;
	var bOpp = b2.Org;
	var fa = a0.Lface;
	var fb = b0.Lface;
	var cond = hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edge);
	a0.Org = bOpp;
	a0.Onext = b1.Sym;
	b0.Org = aOpp;
	b0.Onext = a1.Sym;
	a2.Onext = b0;
	b2.Onext = a0;
	b1.Onext = a2.Sym;
	a1.Onext = b2.Sym;
	a0.Lnext = a2;
	a2.Lnext = b1;
	b1.Lnext = a0;
	b0.Lnext = b2;
	b2.Lnext = a1;
	a1.Lnext = b0;
	a1.Lface = fb;
	b1.Lface = fa;
	fa.anEdge = a0;
	fb.anEdge = b0;
	if(aOrg.anEdge == a0) {
		aOrg.anEdge = b1;
	}
	if(bOrg.anEdge == b0) {
		bOrg.anEdge = a1;
	}
	var cond1 = a0.get_Oprev().Onext.Org == a0.Org;
};
hxGeomAlgo__$Tess2_TessMesh.prototype = {
	makeEdge_: function(eNext) {
		var e = new hxGeomAlgo__$Tess2_TessHalfEdge(0);
		var eSym = new hxGeomAlgo__$Tess2_TessHalfEdge(1);
		if(eNext.Sym.side < eNext.side) {
			eNext = eNext.Sym;
		}
		var ePrev = eNext.Sym.next;
		eSym.next = ePrev;
		ePrev.Sym.next = e;
		e.next = eNext;
		eNext.Sym.next = eSym;
		e.Sym = eSym;
		e.Onext = e;
		e.Lnext = eSym;
		e.Org = null;
		e.Lface = null;
		e.winding = 0;
		e.activeRegion = null;
		eSym.Sym = e;
		eSym.Onext = eSym;
		eSym.Lnext = e;
		eSym.Org = null;
		eSym.Lface = null;
		eSym.winding = 0;
		eSym.activeRegion = null;
		return e;
	}
	,splice_: function(a,b) {
		var aOnext = a.Onext;
		var bOnext = b.Onext;
		aOnext.Sym.Lnext = b;
		bOnext.Sym.Lnext = a;
		a.Onext = bOnext;
		b.Onext = aOnext;
	}
	,makeVertex_: function(newVertex,eOrig,vNext) {
		var vNew = newVertex;
		var vPrev = vNext.prev;
		vNew.prev = vPrev;
		vPrev.next = vNew;
		vNew.next = vNext;
		vNext.prev = vNew;
		vNew.anEdge = eOrig;
		var e = eOrig;
		while(true) {
			e.Org = vNew;
			e = e.Onext;
			if(!(e != eOrig)) {
				break;
			}
		}
	}
	,makeFace_: function(newFace,eOrig,fNext) {
		var fNew = newFace;
		var fPrev = fNext.prev;
		fNew.prev = fPrev;
		fPrev.next = fNew;
		fNew.next = fNext;
		fNext.prev = fNew;
		fNew.anEdge = eOrig;
		fNew.trail = null;
		fNew.marked = false;
		fNew.inside = fNext.inside;
		var e = eOrig;
		while(true) {
			e.Lface = fNew;
			e = e.Lnext;
			if(!(e != eOrig)) {
				break;
			}
		}
	}
	,killEdge_: function(eDel) {
		if(eDel.Sym.side < eDel.side) {
			eDel = eDel.Sym;
		}
		var eNext = eDel.next;
		var ePrev = eDel.Sym.next;
		eNext.Sym.next = ePrev;
		ePrev.Sym.next = eNext;
	}
	,killVertex_: function(vDel,newOrg) {
		var eStart = vDel.anEdge;
		var e = eStart;
		while(true) {
			e.Org = newOrg;
			e = e.Onext;
			if(!(e != eStart)) {
				break;
			}
		}
		var vPrev = vDel.prev;
		var vNext = vDel.next;
		vNext.prev = vPrev;
		vPrev.next = vNext;
	}
	,killFace_: function(fDel,newLface) {
		var eStart = fDel.anEdge;
		var e = eStart;
		while(true) {
			e.Lface = newLface;
			e = e.Lnext;
			if(!(e != eStart)) {
				break;
			}
		}
		var fPrev = fDel.prev;
		var fNext = fDel.next;
		fNext.prev = fPrev;
		fPrev.next = fNext;
	}
	,makeEdge: function() {
		var newVertex1 = new hxGeomAlgo__$Tess2_TessVertex();
		var newVertex2 = new hxGeomAlgo__$Tess2_TessVertex();
		var newFace = new hxGeomAlgo__$Tess2_TessFace();
		var e = this.makeEdge_(this.eHead);
		this.makeVertex_(newVertex1,e,this.vHead);
		this.makeVertex_(newVertex2,e.Sym,this.vHead);
		this.makeFace_(newFace,e,this.fHead);
		return e;
	}
	,splice: function(eOrg,eDst) {
		var joiningLoops = false;
		var joiningVertices = false;
		if(eOrg == eDst) {
			return;
		}
		if(eDst.Org != eOrg.Org) {
			joiningVertices = true;
			this.killVertex_(eDst.Org,eOrg.Org);
		}
		if(eDst.Lface != eOrg.Lface) {
			joiningLoops = true;
			this.killFace_(eDst.Lface,eOrg.Lface);
		}
		this.splice_(eDst,eOrg);
		if(!joiningVertices) {
			var newVertex = new hxGeomAlgo__$Tess2_TessVertex();
			this.makeVertex_(newVertex,eDst,eOrg.Org);
			eOrg.Org.anEdge = eOrg;
		}
		if(!joiningLoops) {
			var newFace = new hxGeomAlgo__$Tess2_TessFace();
			this.makeFace_(newFace,eDst,eOrg.Lface);
			eOrg.Lface.anEdge = eOrg;
		}
	}
	,'delete': function(eDel) {
		var eDelSym = eDel.Sym;
		var joiningLoops = false;
		if(eDel.Lface != eDel.get_Rface()) {
			joiningLoops = true;
			this.killFace_(eDel.Lface,eDel.get_Rface());
		}
		if(eDel.Onext == eDel) {
			this.killVertex_(eDel.Org,null);
		} else {
			eDel.get_Rface().anEdge = eDel.get_Oprev();
			eDel.Org.anEdge = eDel.Onext;
			this.splice_(eDel,eDel.get_Oprev());
			if(!joiningLoops) {
				var newFace = new hxGeomAlgo__$Tess2_TessFace();
				this.makeFace_(newFace,eDel,eDel.Lface);
			}
		}
		if(eDelSym.Onext == eDelSym) {
			this.killVertex_(eDelSym.Org,null);
			this.killFace_(eDelSym.Lface,null);
		} else {
			eDel.Lface.anEdge = eDelSym.get_Oprev();
			eDelSym.Org.anEdge = eDelSym.Onext;
			this.splice_(eDelSym,eDelSym.get_Oprev());
		}
		this.killEdge_(eDel);
	}
	,addEdgeVertex: function(eOrg) {
		var eNew = this.makeEdge_(eOrg);
		var eNewSym = eNew.Sym;
		this.splice_(eNew,eOrg.Lnext);
		eNew.Org = eOrg.get_Dst();
		var newVertex = new hxGeomAlgo__$Tess2_TessVertex();
		this.makeVertex_(newVertex,eNewSym,eNew.Org);
		eNew.Lface = eNewSym.Lface = eOrg.Lface;
		return eNew;
	}
	,splitEdge: function(eOrg) {
		var tempHalfEdge = this.addEdgeVertex(eOrg);
		var eNew = tempHalfEdge.Sym;
		this.splice_(eOrg.Sym,eOrg.Sym.get_Oprev());
		this.splice_(eOrg.Sym,eNew);
		eOrg.set_Dst(eNew.Org);
		eNew.get_Dst().anEdge = eNew.Sym;
		eNew.set_Rface(eOrg.get_Rface());
		eNew.winding = eOrg.winding;
		eNew.Sym.winding = eOrg.Sym.winding;
		return eNew;
	}
	,connect: function(eOrg,eDst) {
		var joiningLoops = false;
		var eNew = this.makeEdge_(eOrg);
		var eNewSym = eNew.Sym;
		if(eDst.Lface != eOrg.Lface) {
			joiningLoops = true;
			this.killFace_(eDst.Lface,eOrg.Lface);
		}
		this.splice_(eNew,eOrg.Lnext);
		this.splice_(eNewSym,eDst);
		eNew.Org = eOrg.get_Dst();
		eNewSym.Org = eDst.Org;
		eNew.Lface = eNewSym.Lface = eOrg.Lface;
		eOrg.Lface.anEdge = eNewSym;
		if(!joiningLoops) {
			var newFace = new hxGeomAlgo__$Tess2_TessFace();
			this.makeFace_(newFace,eNew,eOrg.Lface);
		}
		return eNew;
	}
	,zapFace: function(fZap) {
		var eStart = fZap.anEdge;
		var e;
		var eSym;
		var eNext = eStart.Lnext;
		while(true) {
			e = eNext;
			eNext = e.Lnext;
			e.Lface = null;
			if(e.get_Rface() == null) {
				if(e.Onext == e) {
					this.killVertex_(e.Org,null);
				} else {
					e.Org.anEdge = e.Onext;
					this.splice_(e,e.get_Oprev());
				}
				eSym = e.Sym;
				if(eSym.Onext == eSym) {
					this.killVertex_(eSym.Org,null);
				} else {
					eSym.Org.anEdge = eSym.Onext;
					this.splice_(eSym,eSym.get_Oprev());
				}
				this.killEdge_(e);
			}
			if(!(e != eStart)) {
				break;
			}
		}
		var fPrev = fZap.prev;
		var fNext = fZap.next;
		fNext.prev = fPrev;
		fPrev.next = fNext;
	}
	,countFaceVerts_: function(f) {
		var eCur = f.anEdge;
		var n = 0;
		while(true) {
			++n;
			eCur = eCur.Lnext;
			if(!(eCur != f.anEdge)) {
				break;
			}
		}
		return n;
	}
	,mergeConvexFaces: function(maxVertsPerFace) {
		var eCur;
		var eNext;
		var eSym;
		var vStart;
		var curNv;
		var symNv;
		var f = this.fHead.next;
		while(f != this.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			eCur = f.anEdge;
			vStart = eCur.Org;
			while(true) {
				eNext = eCur.Lnext;
				eSym = eCur.Sym;
				if(eSym != null && eSym.Lface != null && eSym.Lface.inside) {
					curNv = this.countFaceVerts_(f);
					symNv = this.countFaceVerts_(eSym.Lface);
					if(curNv + symNv - 2 <= maxVertsPerFace) {
						if(hxGeomAlgo__$Tess2_Geom.vertCCW(eCur.get_Lprev().Org,eCur.Org,eSym.Lnext.Lnext.Org) && hxGeomAlgo__$Tess2_Geom.vertCCW(eSym.get_Lprev().Org,eSym.Org,eCur.Lnext.Lnext.Org)) {
							eNext = eSym.Lnext;
							this.delete(eSym);
							eCur = null;
							eSym = null;
						}
					}
				}
				if(eCur != null && eCur.Lnext.Org == vStart) {
					break;
				}
				eCur = eNext;
			}
			f = f.next;
		}
		return true;
	}
	,check: function() {
		var fHead = this.fHead;
		var vHead = this.vHead;
		var eHead = this.eHead;
		var f;
		var v;
		var e;
		var fPrev = fHead;
		while(true) {
			f = fPrev.next;
			if(!(f != fHead)) {
				break;
			}
			e = f.anEdge;
			while(true) {
				e = e.Lnext;
				if(!(e != f.anEdge)) {
					break;
				}
			}
			fPrev = f;
		}
		var vPrev = vHead;
		while(true) {
			v = vPrev.next;
			if(!(v != vHead)) {
				break;
			}
			e = v.anEdge;
			while(true) {
				e = e.Onext;
				if(!(e != v.anEdge)) {
					break;
				}
			}
			vPrev = v;
		}
		var ePrev = eHead;
		while(true) {
			e = ePrev.next;
			if(!(e != eHead)) {
				break;
			}
			var cond = e.get_Dst() != null;
			ePrev = e;
		}
		var cond1 = e.Sym.next == ePrev.Sym && e.Sym == this.eHeadSym && e.Sym.Sym == e && e.Org == null && e.get_Dst() == null && e.Lface == null && e.get_Rface() == null;
	}
	,__class__: hxGeomAlgo__$Tess2_TessMesh
};
var hxGeomAlgo__$Tess2_Geom = function() { };
$hxClasses["hxGeomAlgo._Tess2.Geom"] = hxGeomAlgo__$Tess2_Geom;
hxGeomAlgo__$Tess2_Geom.__name__ = "hxGeomAlgo._Tess2.Geom";
hxGeomAlgo__$Tess2_Geom.vertEq = function(u,v) {
	if(u.s == v.s) {
		return u.t == v.t;
	} else {
		return false;
	}
};
hxGeomAlgo__$Tess2_Geom.vertLeq = function(u,v) {
	if(!(u.s < v.s)) {
		if(u.s == v.s) {
			return u.t <= v.t;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxGeomAlgo__$Tess2_Geom.transLeq = function(u,v) {
	if(!(u.t < v.t)) {
		if(u.t == v.t) {
			return u.s <= v.s;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxGeomAlgo__$Tess2_Geom.edgeGoesLeft = function(e) {
	return hxGeomAlgo__$Tess2_Geom.vertLeq(e.get_Dst(),e.Org);
};
hxGeomAlgo__$Tess2_Geom.edgeGoesRight = function(e) {
	return hxGeomAlgo__$Tess2_Geom.vertLeq(e.Org,e.get_Dst());
};
hxGeomAlgo__$Tess2_Geom.edgeIsInternal = function(e) {
	if(e.get_Rface() != null) {
		return e.get_Rface().inside;
	} else {
		return false;
	}
};
hxGeomAlgo__$Tess2_Geom.vertL1dist = function(u,v) {
	return Math.abs(u.s - v.s) + Math.abs(u.t - v.t);
};
hxGeomAlgo__$Tess2_Geom.edgeEval = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(u,v) && hxGeomAlgo__$Tess2_Geom.vertLeq(v,w);
	var gapL = v.s - u.s;
	var gapR = w.s - v.s;
	if(gapL + gapR > 0.0) {
		if(gapL < gapR) {
			return v.t - u.t + (u.t - w.t) * (gapL / (gapL + gapR));
		} else {
			return v.t - w.t + (w.t - u.t) * (gapR / (gapL + gapR));
		}
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.edgeSign = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(u,v) && hxGeomAlgo__$Tess2_Geom.vertLeq(v,w);
	var gapL = v.s - u.s;
	var gapR = w.s - v.s;
	if(gapL + gapR > 0.0) {
		return (v.t - w.t) * gapL + (v.t - u.t) * gapR;
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.transEval = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.transLeq(u,v) && hxGeomAlgo__$Tess2_Geom.transLeq(v,w);
	var gapL = v.t - u.t;
	var gapR = w.t - v.t;
	if(gapL + gapR > 0.0) {
		if(gapL < gapR) {
			return v.s - u.s + (u.s - w.s) * (gapL / (gapL + gapR));
		} else {
			return v.s - w.s + (w.s - u.s) * (gapR / (gapL + gapR));
		}
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.transSign = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.transLeq(u,v) && hxGeomAlgo__$Tess2_Geom.transLeq(v,w);
	var gapL = v.t - u.t;
	var gapR = w.t - v.t;
	if(gapL + gapR > 0.0) {
		return (v.s - w.s) * gapL + (v.s - u.s) * gapR;
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.vertCCW = function(u,v,w) {
	return u.s * (v.t - w.t) + v.s * (w.t - u.t) + w.s * (u.t - v.t) >= 0.0;
};
hxGeomAlgo__$Tess2_Geom.interpolate = function(a,x,b,y) {
	if(a < 0) {
		a = 0;
	}
	if(b < 0) {
		b = 0;
	}
	if(a <= b) {
		if(b == 0) {
			return (x + y) / 2;
		} else {
			return x + (y - x) * (a / (a + b));
		}
	} else {
		return y + (x - y) * (b / (a + b));
	}
};
hxGeomAlgo__$Tess2_Geom.intersect = function(o1,d1,o2,d2,v) {
	var z1;
	var z2;
	var t;
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o1,d1)) {
		t = o1;
		o1 = d1;
		d1 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o2,d2)) {
		t = o2;
		o2 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o1,o2)) {
		t = o1;
		o1 = o2;
		o2 = t;
		t = d1;
		d1 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o2,d1)) {
		v.s = (o2.s + d1.s) / 2;
	} else if(hxGeomAlgo__$Tess2_Geom.vertLeq(d1,d2)) {
		z1 = hxGeomAlgo__$Tess2_Geom.edgeEval(o1,o2,d1);
		z2 = hxGeomAlgo__$Tess2_Geom.edgeEval(o2,d1,d2);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.s = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.s,z2,d1.s);
	} else {
		z1 = hxGeomAlgo__$Tess2_Geom.edgeSign(o1,o2,d1);
		z2 = -hxGeomAlgo__$Tess2_Geom.edgeSign(o1,d2,d1);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.s = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.s,z2,d2.s);
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o1,d1)) {
		t = o1;
		o1 = d1;
		d1 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o2,d2)) {
		t = o2;
		o2 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o1,o2)) {
		t = o1;
		o1 = o2;
		o2 = t;
		t = d1;
		d1 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o2,d1)) {
		v.t = (o2.t + d1.t) / 2;
	} else if(hxGeomAlgo__$Tess2_Geom.transLeq(d1,d2)) {
		z1 = hxGeomAlgo__$Tess2_Geom.transEval(o1,o2,d1);
		z2 = hxGeomAlgo__$Tess2_Geom.transEval(o2,d1,d2);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.t = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.t,z2,d1.t);
	} else {
		z1 = hxGeomAlgo__$Tess2_Geom.transSign(o1,o2,d1);
		z2 = -hxGeomAlgo__$Tess2_Geom.transSign(o1,d2,d1);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.t = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.t,z2,d2.t);
	}
};
hxGeomAlgo__$Tess2_Geom.calcAngle = function(v0,v1,v2) {
	var a_0 = v2.s - v1.s;
	var a_1 = v2.t - v1.t;
	var b_0 = v0.s - v1.s;
	var b_1 = v0.t - v1.t;
	var num = a_0 * b_0 + a_1 * b_1;
	var den = Math.sqrt(a_0 * a_0 + a_1 * a_1) * Math.sqrt(b_0 * b_0 + b_1 * b_1);
	if(den > 0.0) {
		num /= den;
	}
	if(num < -1.0) {
		num = -1.0;
	}
	if(num > 1.0) {
		num = 1.0;
	}
	return Math.acos(num);
};
hxGeomAlgo__$Tess2_Geom.edgeIsLocallyDelaunay = function(e) {
	return hxGeomAlgo__$Tess2_Geom.calcAngle(e.Lnext.Org,e.Lnext.Lnext.Org,e.Org) + hxGeomAlgo__$Tess2_Geom.calcAngle(e.Sym.Lnext.Org,e.Sym.Lnext.Lnext.Org,e.Sym.Org) < Math.PI + 0.01;
};
var hxGeomAlgo__$Tess2_DictNode = function() {
	this.prev = null;
	this.next = null;
	this.key = null;
};
$hxClasses["hxGeomAlgo._Tess2.DictNode"] = hxGeomAlgo__$Tess2_DictNode;
hxGeomAlgo__$Tess2_DictNode.__name__ = "hxGeomAlgo._Tess2.DictNode";
hxGeomAlgo__$Tess2_DictNode.prototype = {
	__class__: hxGeomAlgo__$Tess2_DictNode
};
var hxGeomAlgo__$Tess2_Dict = function(frame,leq) {
	this.head = new hxGeomAlgo__$Tess2_DictNode();
	this.head.next = this.head;
	this.head.prev = this.head;
	this.frame = frame;
	this.leq = leq;
};
$hxClasses["hxGeomAlgo._Tess2.Dict"] = hxGeomAlgo__$Tess2_Dict;
hxGeomAlgo__$Tess2_Dict.__name__ = "hxGeomAlgo._Tess2.Dict";
hxGeomAlgo__$Tess2_Dict.prototype = {
	min: function() {
		return this.head.next;
	}
	,max: function() {
		return this.head.prev;
	}
	,insert: function(k) {
		return this.insertBefore(this.head,k);
	}
	,search: function(key) {
		var node = this.head;
		while(true) {
			node = node.next;
			if(!(node.key != null && !this.leq(this.frame,key,node.key))) {
				break;
			}
		}
		return node;
	}
	,insertBefore: function(node,key) {
		while(true) {
			node = node.prev;
			if(!(node.key != null && !this.leq(this.frame,node.key,key))) {
				break;
			}
		}
		var newNode = new hxGeomAlgo__$Tess2_DictNode();
		newNode.key = key;
		newNode.next = node.next;
		node.next.prev = newNode;
		newNode.prev = node;
		node.next = newNode;
		return newNode;
	}
	,'delete': function(node) {
		node.next.prev = node.prev;
		node.prev.next = node.next;
	}
	,__class__: hxGeomAlgo__$Tess2_Dict
};
var hxGeomAlgo__$Tess2_PQNode = function() {
	this.handle = -1;
};
$hxClasses["hxGeomAlgo._Tess2.PQNode"] = hxGeomAlgo__$Tess2_PQNode;
hxGeomAlgo__$Tess2_PQNode.__name__ = "hxGeomAlgo._Tess2.PQNode";
hxGeomAlgo__$Tess2_PQNode.prototype = {
	__class__: hxGeomAlgo__$Tess2_PQNode
};
var hxGeomAlgo__$Tess2_PQHandleElem = function() {
	this.node = -1;
	this.key = null;
};
$hxClasses["hxGeomAlgo._Tess2.PQHandleElem"] = hxGeomAlgo__$Tess2_PQHandleElem;
hxGeomAlgo__$Tess2_PQHandleElem.__name__ = "hxGeomAlgo._Tess2.PQHandleElem";
hxGeomAlgo__$Tess2_PQHandleElem.prototype = {
	__class__: hxGeomAlgo__$Tess2_PQHandleElem
};
var hxGeomAlgo__$Tess2_PriorityQ = function(size,leq) {
	this.size = 0;
	this.max = size;
	this.nodes = [];
	var _g = 0;
	var _g1 = size + 1;
	while(_g < _g1) {
		var i = _g++;
		this.nodes[i] = new hxGeomAlgo__$Tess2_PQNode();
	}
	this.handles = [];
	var _g2 = 0;
	var _g3 = size + 1;
	while(_g2 < _g3) {
		var i1 = _g2++;
		this.handles[i1] = new hxGeomAlgo__$Tess2_PQHandleElem();
	}
	this.initialized = false;
	this.freeList = 0;
	this.leq = leq;
	this.nodes[1].handle = 1;
	this.handles[1].key = null;
};
$hxClasses["hxGeomAlgo._Tess2.PriorityQ"] = hxGeomAlgo__$Tess2_PriorityQ;
hxGeomAlgo__$Tess2_PriorityQ.__name__ = "hxGeomAlgo._Tess2.PriorityQ";
hxGeomAlgo__$Tess2_PriorityQ.prototype = {
	floatDown_: function(curr) {
		var n = this.nodes;
		var h = this.handles;
		var hChild;
		var child;
		var hCurr = n[curr].handle;
		while(true) {
			child = curr << 1;
			if(child < this.size && this.leq(h[n[child + 1].handle].key,h[n[child].handle].key)) {
				++child;
			}
			hChild = n[child].handle;
			if(child > this.size || this.leq(h[hCurr].key,h[hChild].key)) {
				n[curr].handle = hCurr;
				h[hCurr].node = curr;
				break;
			}
			n[curr].handle = hChild;
			h[hChild].node = curr;
			curr = child;
		}
	}
	,floatUp_: function(curr) {
		var n = this.nodes;
		var h = this.handles;
		var hParent;
		var parent;
		var hCurr = n[curr].handle;
		while(true) {
			parent = curr >> 1;
			hParent = n[parent].handle;
			if(parent == 0 || this.leq(h[hParent].key,h[hCurr].key)) {
				n[curr].handle = hCurr;
				h[hCurr].node = curr;
				break;
			}
			n[curr].handle = hParent;
			h[hParent].node = curr;
			curr = parent;
		}
	}
	,init: function() {
		var i = this.size;
		while(i >= 1) {
			this.floatDown_(i);
			--i;
		}
		this.initialized = true;
	}
	,min: function() {
		return this.handles[this.nodes[1].handle].key;
	}
	,isEmpty: function() {
		return this.size == 0;
	}
	,insert: function(keyNew) {
		var free;
		var curr = ++this.size;
		if(curr * 2 > this.max) {
			this.max *= 2;
			var s = this.nodes.length;
			var _g = s;
			var _g1 = this.max + 1;
			while(_g < _g1) {
				var i = _g++;
				this.nodes[i] = new hxGeomAlgo__$Tess2_PQNode();
			}
			s = this.handles.length;
			var _g2 = this.handles.length;
			var _g3 = this.max + 1;
			while(_g2 < _g3) {
				var i1 = _g2++;
				this.handles[i1] = new hxGeomAlgo__$Tess2_PQHandleElem();
			}
		}
		if(this.freeList == 0) {
			free = curr;
		} else {
			free = this.freeList;
			this.freeList = this.handles[free].node;
		}
		this.nodes[curr].handle = free;
		this.handles[free].node = curr;
		this.handles[free].key = keyNew;
		if(this.initialized) {
			this.floatUp_(curr);
		}
		return free;
	}
	,extractMin: function() {
		var n = this.nodes;
		var h = this.handles;
		var hMin = n[1].handle;
		var min = h[hMin].key;
		if(this.size > 0) {
			n[1].handle = n[this.size].handle;
			h[n[1].handle].node = 1;
			h[hMin].key = null;
			h[hMin].node = this.freeList;
			this.freeList = hMin;
			--this.size;
			if(this.size > 0) {
				this.floatDown_(1);
			}
		}
		return min;
	}
	,'delete': function(hCurr) {
		var n = this.nodes;
		var h = this.handles;
		var curr = h[hCurr].node;
		n[curr].handle = n[this.size].handle;
		h[n[curr].handle].node = curr;
		--this.size;
		if(curr <= this.size) {
			if(curr <= 1 || this.leq(h[n[curr >> 1].handle].key,h[n[curr].handle].key)) {
				this.floatDown_(curr);
			} else {
				this.floatUp_(curr);
			}
		}
		h[hCurr].key = null;
		h[hCurr].node = this.freeList;
		this.freeList = hCurr;
	}
	,__class__: hxGeomAlgo__$Tess2_PriorityQ
};
var hxGeomAlgo__$Tess2_ActiveRegion = function() {
	this.fixUpperEdge = false;
	this.dirty = false;
	this.sentinel = false;
	this.inside = false;
	this.windingNumber = 0;
	this.nodeUp = null;
	this.eUp = null;
};
$hxClasses["hxGeomAlgo._Tess2.ActiveRegion"] = hxGeomAlgo__$Tess2_ActiveRegion;
hxGeomAlgo__$Tess2_ActiveRegion.__name__ = "hxGeomAlgo._Tess2.ActiveRegion";
hxGeomAlgo__$Tess2_ActiveRegion.prototype = {
	__class__: hxGeomAlgo__$Tess2_ActiveRegion
};
var hxGeomAlgo__$Tess2_Sweep = function() { };
$hxClasses["hxGeomAlgo._Tess2.Sweep"] = hxGeomAlgo__$Tess2_Sweep;
hxGeomAlgo__$Tess2_Sweep.__name__ = "hxGeomAlgo._Tess2.Sweep";
hxGeomAlgo__$Tess2_Sweep.regionBelow = function(r) {
	return r.nodeUp.prev.key;
};
hxGeomAlgo__$Tess2_Sweep.regionAbove = function(r) {
	return r.nodeUp.next.key;
};
hxGeomAlgo__$Tess2_Sweep.debugEvent = function(tess) {
};
hxGeomAlgo__$Tess2_Sweep.addWinding = function(eDst,eSrc) {
	eDst.winding += eSrc.winding;
	eDst.Sym.winding += eSrc.Sym.winding;
};
hxGeomAlgo__$Tess2_Sweep.edgeLeq = function(tess,reg1,reg2) {
	var ev = tess.event;
	var t1;
	var t2;
	var e1 = reg1.eUp;
	var e2 = reg2.eUp;
	if(e1.get_Dst() == ev) {
		if(e2.get_Dst() == ev) {
			if(hxGeomAlgo__$Tess2_Geom.vertLeq(e1.Org,e2.Org)) {
				return hxGeomAlgo__$Tess2_Geom.edgeSign(e2.get_Dst(),e1.Org,e2.Org) <= 0;
			}
			return hxGeomAlgo__$Tess2_Geom.edgeSign(e1.get_Dst(),e2.Org,e1.Org) >= 0;
		}
		return hxGeomAlgo__$Tess2_Geom.edgeSign(e2.get_Dst(),ev,e2.Org) <= 0;
	}
	if(e2.get_Dst() == ev) {
		return hxGeomAlgo__$Tess2_Geom.edgeSign(e1.get_Dst(),ev,e1.Org) >= 0;
	}
	var t11 = hxGeomAlgo__$Tess2_Geom.edgeEval(e1.get_Dst(),ev,e1.Org);
	var t21 = hxGeomAlgo__$Tess2_Geom.edgeEval(e2.get_Dst(),ev,e2.Org);
	return t11 >= t21;
};
hxGeomAlgo__$Tess2_Sweep.deleteRegion = function(tess,reg) {
	var reg1 = reg.fixUpperEdge;
	reg.eUp.activeRegion = null;
	tess.dict.delete(reg.nodeUp);
};
hxGeomAlgo__$Tess2_Sweep.fixUpperEdge = function(tess,reg,newEdge) {
	tess.mesh.delete(reg.eUp);
	reg.fixUpperEdge = false;
	reg.eUp = newEdge;
	newEdge.activeRegion = reg;
};
hxGeomAlgo__$Tess2_Sweep.topLeftRegion = function(tess,reg) {
	var org = reg.eUp.Org;
	var e;
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
		if(!(reg.eUp.Org == org)) {
			break;
		}
	}
	if(reg.fixUpperEdge) {
		e = tess.mesh.connect(hxGeomAlgo__$Tess2_Sweep.regionBelow(reg).eUp.Sym,reg.eUp.Lnext);
		if(e == null) {
			return null;
		}
		hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,e);
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
	}
	return reg;
};
hxGeomAlgo__$Tess2_Sweep.topRightRegion = function(reg) {
	var dst = reg.eUp.get_Dst();
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
		if(!(reg.eUp.get_Dst() == dst)) {
			break;
		}
	}
	return reg;
};
hxGeomAlgo__$Tess2_Sweep.addRegionBelow = function(tess,regAbove,eNewUp) {
	var regNew = new hxGeomAlgo__$Tess2_ActiveRegion();
	regNew.eUp = eNewUp;
	regNew.nodeUp = tess.dict.insertBefore(regAbove.nodeUp,regNew);
	regNew.fixUpperEdge = false;
	regNew.sentinel = false;
	regNew.dirty = false;
	eNewUp.activeRegion = regNew;
	return regNew;
};
hxGeomAlgo__$Tess2_Sweep.isWindingInside = function(tess,n) {
	switch(tess.windingRule._hx_index) {
	case 0:
		return (n & 1) != 0;
	case 1:
		return n != 0;
	case 2:
		return n > 0;
	case 3:
		return n < 0;
	case 4:
		if(n < 2) {
			return n <= -2;
		} else {
			return true;
		}
		break;
	}
};
hxGeomAlgo__$Tess2_Sweep.computeWinding = function(tess,reg) {
	reg.windingNumber = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;
	reg.inside = hxGeomAlgo__$Tess2_Sweep.isWindingInside(tess,reg.windingNumber);
};
hxGeomAlgo__$Tess2_Sweep.finishRegion = function(tess,reg) {
	var e = reg.eUp;
	var f = e.Lface;
	f.inside = reg.inside;
	f.anEdge = e;
	hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
};
hxGeomAlgo__$Tess2_Sweep.finishLeftRegions = function(tess,regFirst,regLast) {
	var e;
	var ePrev;
	var reg = null;
	var regPrev = regFirst;
	var ePrev1 = regFirst.eUp;
	while(regPrev != regLast) {
		regPrev.fixUpperEdge = false;
		reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regPrev);
		e = reg.eUp;
		if(e.Org != ePrev1.Org) {
			if(!reg.fixUpperEdge) {
				hxGeomAlgo__$Tess2_Sweep.finishRegion(tess,regPrev);
				break;
			}
			e = tess.mesh.connect(ePrev1.get_Lprev(),e.Sym);
			hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,e);
		}
		if(ePrev1.Onext != e) {
			tess.mesh.splice(e.get_Oprev(),e);
			tess.mesh.splice(ePrev1,e);
		}
		hxGeomAlgo__$Tess2_Sweep.finishRegion(tess,regPrev);
		ePrev1 = reg.eUp;
		regPrev = reg;
	}
	return ePrev1;
};
hxGeomAlgo__$Tess2_Sweep.addRightEdges = function(tess,regUp,eFirst,eLast,eTopLeft,cleanUp) {
	var reg = null;
	var firstTime = true;
	var e = eFirst;
	while(true) {
		var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(e.Org,e.get_Dst());
		hxGeomAlgo__$Tess2_Sweep.addRegionBelow(tess,regUp,e.Sym);
		e = e.Onext;
		if(!(e != eLast)) {
			break;
		}
	}
	if(eTopLeft == null) {
		eTopLeft = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp.get_Rprev();
	}
	var regPrev = regUp;
	var ePrev = eTopLeft;
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regPrev);
		e = reg.eUp.Sym;
		if(e.Org != ePrev.Org) {
			break;
		}
		if(e.Onext != ePrev) {
			tess.mesh.splice(e.get_Oprev(),e);
			tess.mesh.splice(ePrev.get_Oprev(),e);
		}
		reg.windingNumber = regPrev.windingNumber - e.winding;
		reg.inside = hxGeomAlgo__$Tess2_Sweep.isWindingInside(tess,reg.windingNumber);
		regPrev.dirty = true;
		if(!firstTime && hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regPrev)) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(e,ePrev);
			hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regPrev);
			tess.mesh.delete(ePrev);
		}
		firstTime = false;
		regPrev = reg;
		ePrev = e;
	}
	regPrev.dirty = true;
	if(cleanUp) {
		hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions(tess,regPrev);
	}
};
hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices = function(tess,e1,e2) {
	tess.mesh.splice(e1,e2);
};
hxGeomAlgo__$Tess2_Sweep.vertexWeights = function(isect,org,dst) {
	var t1 = hxGeomAlgo__$Tess2_Geom.vertL1dist(org,isect);
	var t2 = hxGeomAlgo__$Tess2_Geom.vertL1dist(dst,isect);
	var w0 = 0.5 * t2 / (t1 + t2);
	var w1 = 0.5 * t1 / (t1 + t2);
	isect.coords[0] += w0 * org.coords[0] + w1 * dst.coords[0];
	isect.coords[1] += w0 * org.coords[1] + w1 * dst.coords[1];
	isect.coords[2] += w0 * org.coords[2] + w1 * dst.coords[2];
};
hxGeomAlgo__$Tess2_Sweep.getIntersectData = function(tess,isect,orgUp,dstUp,orgLo,dstLo) {
	var tmp = isect.coords[1] = isect.coords[2] = 0;
	isect.coords[0] = tmp;
	isect.idx = -1;
	hxGeomAlgo__$Tess2_Sweep.vertexWeights(isect,orgUp,dstUp);
	hxGeomAlgo__$Tess2_Sweep.vertexWeights(isect,orgLo,dstLo);
};
hxGeomAlgo__$Tess2_Sweep.checkForRightSplice = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eUp.Org,eLo.Org)) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eLo.get_Dst(),eUp.Org,eLo.Org) > 0) {
			return false;
		}
		if(!hxGeomAlgo__$Tess2_Geom.vertEq(eUp.Org,eLo.Org)) {
			tess.mesh.splitEdge(eLo.Sym);
			tess.mesh.splice(eUp,eLo.get_Oprev());
			regUp.dirty = regLo.dirty = true;
		} else if(eUp.Org != eLo.Org) {
			tess.pq.delete(eUp.Org.pqHandle);
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,eLo.get_Oprev(),eUp);
		}
	} else {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),eLo.Org,eUp.Org) < 0) {
			return false;
		}
		hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
		tess.mesh.splitEdge(eUp.Sym);
		tess.mesh.splice(eLo.get_Oprev(),eUp);
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.checkForLeftSplice = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var e;
	var cond = !hxGeomAlgo__$Tess2_Geom.vertEq(eUp.get_Dst(),eLo.get_Dst());
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eUp.get_Dst(),eLo.get_Dst())) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),eLo.get_Dst(),eUp.Org) < 0) {
			return false;
		}
		hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
		e = tess.mesh.splitEdge(eUp);
		tess.mesh.splice(eLo.Sym,e);
		e.Lface.inside = regUp.inside;
	} else {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eLo.get_Dst(),eUp.get_Dst(),eLo.Org) > 0) {
			return false;
		}
		regUp.dirty = regLo.dirty = true;
		e = tess.mesh.splitEdge(eLo);
		tess.mesh.splice(eUp.Lnext,eLo.Sym);
		e.get_Rface().inside = regUp.inside;
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.checkForIntersect = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var orgUp = eUp.Org;
	var orgLo = eLo.Org;
	var dstUp = eUp.get_Dst();
	var dstLo = eLo.get_Dst();
	var isect = new hxGeomAlgo__$Tess2_TessVertex();
	var e;
	var cond = !hxGeomAlgo__$Tess2_Geom.vertEq(dstLo,dstUp);
	var cond1 = hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,orgUp) <= 0;
	var cond2 = hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,orgLo) >= 0;
	if(orgUp == orgLo) {
		return false;
	}
	var tMinUp = Math.min(orgUp.t,dstUp.t);
	var tMaxLo = Math.max(orgLo.t,dstLo.t);
	if(tMinUp > tMaxLo) {
		return false;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(orgUp,orgLo)) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,orgUp,orgLo) > 0) {
			return false;
		}
	} else if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,orgLo,orgUp) < 0) {
		return false;
	}
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	hxGeomAlgo__$Tess2_Geom.intersect(dstUp,orgUp,dstLo,orgLo,isect);
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(isect,tess.event)) {
		isect.s = tess.event.s;
		isect.t = tess.event.t;
	}
	var orgMin = hxGeomAlgo__$Tess2_Geom.vertLeq(orgUp,orgLo) ? orgUp : orgLo;
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(orgMin,isect)) {
		isect.s = orgMin.s;
		isect.t = orgMin.t;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(isect,orgUp) || hxGeomAlgo__$Tess2_Geom.vertEq(isect,orgLo)) {
		hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regUp);
		return false;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertEq(dstUp,tess.event) && hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,isect) >= 0 || !hxGeomAlgo__$Tess2_Geom.vertEq(dstLo,tess.event) && hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,isect) <= 0) {
		if(dstLo == tess.event) {
			tess.mesh.splitEdge(eUp.Sym);
			tess.mesh.splice(eLo.Sym,eUp);
			regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,regUp);
			eUp = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp;
			hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp),regLo);
			hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eUp.get_Oprev(),eUp,eUp,true);
			return true;
		}
		if(dstUp == tess.event) {
			tess.mesh.splitEdge(eLo.Sym);
			tess.mesh.splice(eUp.Lnext,eLo.get_Oprev());
			regLo = regUp;
			regUp = hxGeomAlgo__$Tess2_Sweep.topRightRegion(regUp);
			e = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp.get_Rprev();
			regLo.eUp = eLo.get_Oprev();
			eLo = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,regLo,null);
			hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eLo.Onext,eUp.get_Rprev(),e,true);
			return true;
		}
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,isect) >= 0) {
			hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
			tess.mesh.splitEdge(eUp.Sym);
			eUp.Org.s = tess.event.s;
			eUp.Org.t = tess.event.t;
		}
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,isect) <= 0) {
			regUp.dirty = regLo.dirty = true;
			tess.mesh.splitEdge(eLo.Sym);
			eLo.Org.s = tess.event.s;
			eLo.Org.t = tess.event.t;
		}
		return false;
	}
	tess.mesh.splitEdge(eUp.Sym);
	tess.mesh.splitEdge(eLo.Sym);
	tess.mesh.splice(eLo.get_Oprev(),eUp);
	eUp.Org.s = isect.s;
	eUp.Org.t = isect.t;
	eUp.Org.pqHandle = tess.pq.insert(eUp.Org);
	hxGeomAlgo__$Tess2_Sweep.getIntersectData(tess,eUp.Org,orgUp,dstUp,orgLo,dstLo);
	hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;
	return false;
};
hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp;
	var eLo;
	while(true) {
		while(regLo.dirty) {
			regUp = regLo;
			regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regLo);
		}
		if(!regUp.dirty) {
			regLo = regUp;
			regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp);
			if(regUp == null || !regUp.dirty) {
				return;
			}
		}
		regUp.dirty = false;
		eUp = regUp.eUp;
		eLo = regLo.eUp;
		if(eUp.get_Dst() != eLo.get_Dst()) {
			if(hxGeomAlgo__$Tess2_Sweep.checkForLeftSplice(tess,regUp)) {
				if(regLo.fixUpperEdge) {
					hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regLo);
					tess.mesh.delete(eLo);
					regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
					eLo = regLo.eUp;
				} else if(regUp.fixUpperEdge) {
					hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regUp);
					tess.mesh.delete(eUp);
					regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regLo);
					eUp = regUp.eUp;
				}
			}
		}
		if(eUp.Org != eLo.Org) {
			if(eUp.get_Dst() != eLo.get_Dst() && !regUp.fixUpperEdge && !regLo.fixUpperEdge && (eUp.get_Dst() == tess.event || eLo.get_Dst() == tess.event)) {
				if(hxGeomAlgo__$Tess2_Sweep.checkForIntersect(tess,regUp)) {
					return;
				}
			} else {
				hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regUp);
			}
		}
		if(eUp.Org == eLo.Org && eUp.get_Dst() == eLo.get_Dst()) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(eLo,eUp);
			hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regUp);
			tess.mesh.delete(eUp);
			regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regLo);
		}
	}
};
hxGeomAlgo__$Tess2_Sweep.connectRightVertex = function(tess,regUp,eBottomLeft) {
	var eNew;
	var eTopLeft = eBottomLeft.Onext;
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var degenerate = false;
	if(eUp.get_Dst() != eLo.get_Dst()) {
		hxGeomAlgo__$Tess2_Sweep.checkForIntersect(tess,regUp);
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(eUp.Org,tess.event)) {
		tess.mesh.splice(eTopLeft.get_Oprev(),eUp);
		regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,regUp);
		eTopLeft = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp;
		hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp),regLo);
		degenerate = true;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(eLo.Org,tess.event)) {
		tess.mesh.splice(eBottomLeft,eLo.get_Oprev());
		eBottomLeft = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,regLo,null);
		degenerate = true;
	}
	if(degenerate) {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eBottomLeft.Onext,eTopLeft,eTopLeft,true);
		return;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eLo.Org,eUp.Org)) {
		eNew = eLo.get_Oprev();
	} else {
		eNew = eUp;
	}
	eNew = tess.mesh.connect(eBottomLeft.get_Lprev(),eNew);
	hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eNew,eNew.Onext,eNew.Onext,false);
	eNew.Sym.activeRegion.fixUpperEdge = true;
	hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions(tess,regUp);
};
hxGeomAlgo__$Tess2_Sweep.connectLeftDegenerate = function(tess,regUp,vEvent) {
	var e = regUp.eUp;
	if(hxGeomAlgo__$Tess2_Geom.vertEq(e.Org,vEvent)) {
		hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,e,vEvent.anEdge);
		return;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertEq(e.get_Dst(),vEvent)) {
		tess.mesh.splitEdge(e.Sym);
		if(regUp.fixUpperEdge) {
			tess.mesh.delete(e.Onext);
			regUp.fixUpperEdge = false;
		}
		tess.mesh.splice(vEvent.anEdge,e);
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,vEvent);
		return;
	}
	regUp = hxGeomAlgo__$Tess2_Sweep.topRightRegion(regUp);
	var reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eTopRight = reg.eUp.Sym;
	var eLast = eTopRight.Onext;
	var eTopLeft = eLast;
	if(reg.fixUpperEdge) {
		hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
		tess.mesh.delete(eTopRight);
		eTopRight = eTopLeft.get_Oprev();
	}
	tess.mesh.splice(vEvent.anEdge,eTopRight);
	if(!hxGeomAlgo__$Tess2_Geom.edgeGoesLeft(eTopLeft)) {
		eTopLeft = null;
	}
	hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eTopRight.Onext,eLast,eTopLeft,true);
};
hxGeomAlgo__$Tess2_Sweep.connectLeftVertex = function(tess,vEvent) {
	var eNew;
	var tmp = new hxGeomAlgo__$Tess2_ActiveRegion();
	tmp.eUp = vEvent.anEdge.Sym;
	var regUp = tess.dict.search(tmp).key;
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	if(regLo == null) {
		return;
	}
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),vEvent,eUp.Org) == 0.0) {
		hxGeomAlgo__$Tess2_Sweep.connectLeftDegenerate(tess,regUp,vEvent);
		return;
	}
	var reg = hxGeomAlgo__$Tess2_Geom.vertLeq(eLo.get_Dst(),eUp.get_Dst()) ? regUp : regLo;
	if(regUp.inside || reg.fixUpperEdge) {
		if(reg == regUp) {
			eNew = tess.mesh.connect(vEvent.anEdge.Sym,eUp.Lnext);
		} else {
			var tempHalfEdge = tess.mesh.connect(eLo.get_Dnext(),vEvent.anEdge);
			eNew = tempHalfEdge.Sym;
		}
		if(reg.fixUpperEdge) {
			hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,eNew);
		} else {
			hxGeomAlgo__$Tess2_Sweep.computeWinding(tess,hxGeomAlgo__$Tess2_Sweep.addRegionBelow(tess,regUp,eNew));
		}
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,vEvent);
	} else {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,vEvent.anEdge,vEvent.anEdge,null,true);
	}
};
hxGeomAlgo__$Tess2_Sweep.sweepEvent = function(tess,vEvent) {
	tess.event = vEvent;
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	var e = vEvent.anEdge;
	while(e.activeRegion == null) {
		e = e.Onext;
		if(e == vEvent.anEdge) {
			hxGeomAlgo__$Tess2_Sweep.connectLeftVertex(tess,vEvent);
			return;
		}
	}
	var regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,e.activeRegion);
	var reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eTopLeft = reg.eUp;
	var eBottomLeft = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,reg,null);
	if(eBottomLeft.Onext == eTopLeft) {
		hxGeomAlgo__$Tess2_Sweep.connectRightVertex(tess,regUp,eBottomLeft);
	} else {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eBottomLeft.Onext,eTopLeft,eTopLeft,true);
	}
};
hxGeomAlgo__$Tess2_Sweep.addSentinel = function(tess,smin,smax,t) {
	var reg = new hxGeomAlgo__$Tess2_ActiveRegion();
	var e = tess.mesh.makeEdge();
	e.Org.s = smax;
	e.Org.t = t;
	e.get_Dst().s = smin;
	e.get_Dst().t = t;
	tess.event = e.get_Dst();
	reg.eUp = e;
	reg.windingNumber = 0;
	reg.inside = false;
	reg.fixUpperEdge = false;
	reg.sentinel = true;
	reg.dirty = false;
	reg.nodeUp = tess.dict.insert(reg);
};
hxGeomAlgo__$Tess2_Sweep.initEdgeDict = function(tess) {
	tess.dict = new hxGeomAlgo__$Tess2_Dict(tess,hxGeomAlgo__$Tess2_Sweep.edgeLeq);
	var w = tess.bmax[0] - tess.bmin[0];
	var h = tess.bmax[1] - tess.bmin[1];
	var smin = tess.bmin[0] - w;
	var smax = tess.bmax[0] + w;
	var tmin = tess.bmin[1] - h;
	var tmax = tess.bmax[1] + h;
	hxGeomAlgo__$Tess2_Sweep.addSentinel(tess,smin,smax,tmin);
	hxGeomAlgo__$Tess2_Sweep.addSentinel(tess,smin,smax,tmax);
};
hxGeomAlgo__$Tess2_Sweep.doneEdgeDict = function(tess) {
	var reg;
	var fixedEdges = 0;
	while(true) {
		reg = tess.dict.min().key;
		if(!(reg != null)) {
			break;
		}
		if(!reg.sentinel) {
			var cond = ++fixedEdges == 1;
		}
		hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
	}
};
hxGeomAlgo__$Tess2_Sweep.removeDegenerateEdges = function(tess) {
	var eNext;
	var eLnext;
	var eHead = tess.mesh.eHead;
	var e = eHead.next;
	while(e != eHead) {
		eNext = e.next;
		eLnext = e.Lnext;
		if(hxGeomAlgo__$Tess2_Geom.vertEq(e.Org,e.get_Dst()) && e.Lnext.Lnext != e) {
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,eLnext,e);
			tess.mesh.delete(e);
			e = eLnext;
			eLnext = e.Lnext;
		}
		if(eLnext.Lnext == e) {
			if(eLnext != e) {
				if(eLnext == eNext || eLnext == eNext.Sym) {
					eNext = eNext.next;
				}
				tess.mesh.delete(eLnext);
			}
			if(e == eNext || e == eNext.Sym) {
				eNext = eNext.next;
			}
			tess.mesh.delete(e);
		}
		e = eNext;
	}
};
hxGeomAlgo__$Tess2_Sweep.initPriorityQ = function(tess) {
	var vertexCount = 0;
	var vHead = tess.mesh.vHead;
	var v = vHead.next;
	while(v != vHead) {
		++vertexCount;
		v = v.next;
	}
	vertexCount += 8;
	var pq = tess.pq = new hxGeomAlgo__$Tess2_PriorityQ(vertexCount,hxGeomAlgo__$Tess2_Geom.vertLeq);
	vHead = tess.mesh.vHead;
	v = vHead.next;
	while(v != vHead) {
		v.pqHandle = pq.insert(v);
		v = v.next;
	}
	if(v != vHead) {
		return false;
	}
	pq.init();
	return true;
};
hxGeomAlgo__$Tess2_Sweep.donePriorityQ = function(tess) {
	tess.pq = null;
};
hxGeomAlgo__$Tess2_Sweep.removeDegenerateFaces = function(tess,mesh) {
	var fNext;
	var e;
	var f = mesh.fHead.next;
	while(f != mesh.fHead) {
		fNext = f.next;
		e = f.anEdge;
		if(e.Lnext.Lnext == e) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(e.Onext,e);
			tess.mesh.delete(e);
		}
		f = fNext;
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.computeInterior = function(tess) {
	var v;
	var vNext;
	hxGeomAlgo__$Tess2_Sweep.removeDegenerateEdges(tess);
	if(!hxGeomAlgo__$Tess2_Sweep.initPriorityQ(tess)) {
		return false;
	}
	hxGeomAlgo__$Tess2_Sweep.initEdgeDict(tess);
	var pq = tess.pq;
	while(true) {
		v = tess.pq.extractMin();
		if(!(v != null)) {
			break;
		}
		while(true) {
			vNext = tess.pq.min();
			if(vNext == null || !hxGeomAlgo__$Tess2_Geom.vertEq(vNext,v)) {
				break;
			}
			vNext = tess.pq.extractMin();
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,v.anEdge,vNext.anEdge);
		}
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,v);
	}
	tess.event = tess.dict.min().key.eUp.Org;
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	hxGeomAlgo__$Tess2_Sweep.doneEdgeDict(tess);
	hxGeomAlgo__$Tess2_Sweep.donePriorityQ(tess);
	if(!hxGeomAlgo__$Tess2_Sweep.removeDegenerateFaces(tess,tess.mesh)) {
		return false;
	}
	tess.mesh.check();
	return true;
};
var hxGeomAlgo_Tesselator = $hx_exports["hxGeomAlgo"]["Tesselator"] = function() {
	this.elementCount = 0;
	this.elements = [];
	this.vertexCount = 0;
	this.vertexIndices = [];
	this.vertices = [];
	this.vertexIndexCounter = 0;
	this.event = null;
	this.pq = null;
	this.dict = null;
	this.bmax = [0.0,0.0];
	this.bmin = [0.0,0.0];
	this.tUnit = [0.0,0.0,0.0];
	this.sUnit = [0.0,0.0,0.0];
	this.normal = [0.0,0.0,0.0];
	this.mesh = null;
	this.windingRule = hxGeomAlgo_WindingRule.ODD;
};
$hxClasses["hxGeomAlgo.Tesselator"] = hxGeomAlgo_Tesselator;
hxGeomAlgo_Tesselator.__name__ = "hxGeomAlgo.Tesselator";
hxGeomAlgo_Tesselator.prototype = {
	dot_: function(u,v) {
		return u[0] * v[0] + u[1] * v[1] + u[2] * v[2];
	}
	,normalize_: function(v) {
		var len = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
		len = Math.sqrt(len);
		v[0] /= len;
		v[1] /= len;
		v[2] /= len;
	}
	,longAxis_: function(v) {
		var i = 0;
		if(Math.abs(v[1]) > Math.abs(v[0])) {
			i = 1;
		}
		if(Math.abs(v[2]) > Math.abs(v[i])) {
			i = 2;
		}
		return i;
	}
	,computeNormal_: function(norm) {
		var c;
		var tLen2;
		var maxVal = [.0,.0,.0];
		var minVal = [.0,.0,.0];
		var d1 = [.0,.0,.0];
		var d2_0 = .0;
		var d2_1 = .0;
		var d2_2 = .0;
		var tNorm_0 = .0;
		var tNorm_1 = .0;
		var tNorm_2 = .0;
		var maxVert = [null,null,null];
		var minVert = [null,null,null];
		var vHead = this.mesh.vHead;
		var v = vHead.next;
		c = v.coords[0];
		minVal[0] = c;
		minVert[0] = v;
		maxVal[0] = c;
		maxVert[0] = v;
		c = v.coords[1];
		minVal[1] = c;
		minVert[1] = v;
		maxVal[1] = c;
		maxVert[1] = v;
		c = v.coords[2];
		minVal[2] = c;
		minVert[2] = v;
		maxVal[2] = c;
		maxVert[2] = v;
		v = vHead.next;
		while(v != vHead) {
			c = v.coords[0];
			if(c < minVal[0]) {
				minVal[0] = c;
				minVert[0] = v;
			}
			if(c > maxVal[0]) {
				maxVal[0] = c;
				maxVert[0] = v;
			}
			c = v.coords[1];
			if(c < minVal[1]) {
				minVal[1] = c;
				minVert[1] = v;
			}
			if(c > maxVal[1]) {
				maxVal[1] = c;
				maxVert[1] = v;
			}
			c = v.coords[2];
			if(c < minVal[2]) {
				minVal[2] = c;
				minVert[2] = v;
			}
			if(c > maxVal[2]) {
				maxVal[2] = c;
				maxVert[2] = v;
			}
			v = v.next;
		}
		var i = 0;
		if(maxVal[1] - minVal[1] > maxVal[0] - minVal[0]) {
			i = 1;
		}
		if(maxVal[2] - minVal[2] > maxVal[i] - minVal[i]) {
			i = 2;
		}
		if(minVal[i] >= maxVal[i]) {
			norm[0] = 0;
			norm[1] = 0;
			norm[2] = 1;
			return;
		}
		var maxLen2 = .0;
		var v1 = minVert[i];
		var v2 = maxVert[i];
		d1[0] = v1.coords[0] - v2.coords[0];
		d1[1] = v1.coords[1] - v2.coords[1];
		d1[2] = v1.coords[2] - v2.coords[2];
		v = vHead.next;
		while(v != vHead) {
			d2_0 = v.coords[0] - v2.coords[0];
			d2_1 = v.coords[1] - v2.coords[1];
			d2_2 = v.coords[2] - v2.coords[2];
			tNorm_0 = d1[1] * d2_2 - d1[2] * d2_1;
			tNorm_1 = d1[2] * d2_0 - d1[0] * d2_2;
			tNorm_2 = d1[0] * d2_1 - d1[1] * d2_0;
			tLen2 = tNorm_0 * tNorm_0 + tNorm_1 * tNorm_1 + tNorm_2 * tNorm_2;
			if(tLen2 > maxLen2) {
				maxLen2 = tLen2;
				norm[0] = tNorm_0;
				norm[1] = tNorm_1;
				norm[2] = tNorm_2;
			}
			v = v.next;
		}
		if(maxLen2 <= 0) {
			norm[0] = norm[1] = norm[2] = 0;
			norm[this.longAxis_(d1)] = 1;
		}
	}
	,checkOrientation_: function() {
		var fHead = this.mesh.fHead;
		var v;
		var vHead = this.mesh.vHead;
		var e;
		var area = .0;
		var f = fHead.next;
		while(f != fHead) {
			e = f.anEdge;
			if(e.winding <= 0) {
				f = f.next;
				continue;
			}
			while(true) {
				area += (e.Org.s - e.get_Dst().s) * (e.Org.t + e.get_Dst().t);
				e = e.Lnext;
				if(!(e != f.anEdge)) {
					break;
				}
			}
			f = f.next;
		}
		if(area < 0) {
			v = vHead.next;
			while(v != vHead) {
				v.t = -v.t;
				v = v.next;
			}
			this.tUnit[0] = -this.tUnit[0];
			this.tUnit[1] = -this.tUnit[1];
			this.tUnit[2] = -this.tUnit[2];
		}
	}
	,projectPolygon_: function() {
		var vHead = this.mesh.vHead;
		var norm = [.0,.0,.0];
		var computedNormal = false;
		norm[0] = this.normal[0];
		norm[1] = this.normal[1];
		norm[2] = this.normal[2];
		if(norm[0] == 0.0 && norm[1] == 0.0 && norm[2] == 0.0) {
			this.computeNormal_(norm);
			computedNormal = true;
		}
		var sUnit = this.sUnit;
		var tUnit = this.tUnit;
		var i = this.longAxis_(norm);
		sUnit[i] = 0;
		sUnit[(i + 1) % 3] = 1.0;
		sUnit[(i + 2) % 3] = 0.0;
		tUnit[i] = 0;
		tUnit[(i + 1) % 3] = 0.0;
		tUnit[(i + 2) % 3] = norm[i] > 0 ? 1.0 : -1.0;
		var v = vHead.next;
		while(v != vHead) {
			v.s = this.dot_(v.coords,sUnit);
			v.t = this.dot_(v.coords,tUnit);
			v = v.next;
		}
		if(computedNormal) {
			this.checkOrientation_();
		}
		var first = true;
		v = vHead.next;
		while(v != vHead) {
			if(first) {
				var tmp = this.bmax[0] = v.s;
				this.bmin[0] = tmp;
				var tmp1 = this.bmax[1] = v.t;
				this.bmin[1] = tmp1;
				first = false;
			} else {
				if(v.s < this.bmin[0]) {
					this.bmin[0] = v.s;
				}
				if(v.s > this.bmax[0]) {
					this.bmax[0] = v.s;
				}
				if(v.t < this.bmin[1]) {
					this.bmin[1] = v.t;
				}
				if(v.t > this.bmax[1]) {
					this.bmax[1] = v.t;
				}
			}
			v = v.next;
		}
	}
	,addWinding_: function(eDst,eSrc) {
		eDst.winding += eSrc.winding;
		eDst.Sym.winding += eSrc.Sym.winding;
	}
	,tessellateMonoRegion_: function(mesh,face) {
		var up = face.anEdge;
		while(hxGeomAlgo__$Tess2_Geom.vertLeq(up.get_Dst(),up.Org)) up = up.get_Lprev();
		while(hxGeomAlgo__$Tess2_Geom.vertLeq(up.Org,up.get_Dst())) up = up.Lnext;
		var lo = up.get_Lprev();
		while(up.Lnext != lo) if(hxGeomAlgo__$Tess2_Geom.vertLeq(up.get_Dst(),lo.Org)) {
			while(lo.Lnext != up && (hxGeomAlgo__$Tess2_Geom.edgeGoesLeft(lo.Lnext) || hxGeomAlgo__$Tess2_Geom.edgeSign(lo.Org,lo.get_Dst(),lo.Lnext.get_Dst()) <= 0.0)) {
				var tempHalfEdge = mesh.connect(lo.Lnext,lo);
				lo = tempHalfEdge.Sym;
			}
			lo = lo.get_Lprev();
		} else {
			while(lo.Lnext != up && (hxGeomAlgo__$Tess2_Geom.edgeGoesRight(up.get_Lprev()) || hxGeomAlgo__$Tess2_Geom.edgeSign(up.get_Dst(),up.Org,up.get_Lprev().Org) >= 0.0)) {
				var tempHalfEdge1 = mesh.connect(up,up.get_Lprev());
				up = tempHalfEdge1.Sym;
			}
			up = up.Lnext;
		}
		while(lo.Lnext.Lnext != up) {
			var tempHalfEdge2 = mesh.connect(lo.Lnext,lo);
			lo = tempHalfEdge2.Sym;
		}
		return true;
	}
	,tessellateInterior_: function(mesh) {
		var next;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			next = f.next;
			if(f.inside) {
				if(!this.tessellateMonoRegion_(mesh,f)) {
					return false;
				}
			}
			f = next;
		}
		return true;
	}
	,refineDelaunay_: function(mesh) {
		var stack = [];
		var e;
		var edges_0 = null;
		var edges_1 = null;
		var edges_2 = null;
		var edges_3 = null;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(f.inside) {
				e = f.anEdge;
				while(true) {
					e.mark = hxGeomAlgo__$Tess2_Geom.edgeIsInternal(e);
					if(e.mark && !e.Sym.mark) {
						stack.push(e);
					}
					e = e.Lnext;
					if(!(e != f.anEdge)) {
						break;
					}
				}
			}
			f = f.next;
		}
		while(stack.length > 0) {
			e = stack.pop();
			e.mark = e.Sym.mark = false;
			if(!hxGeomAlgo__$Tess2_Geom.edgeIsLocallyDelaunay(e)) {
				hxGeomAlgo__$Tess2_TessMesh.flipEdge(mesh,e);
				edges_0 = e.Lnext;
				edges_1 = e.get_Lprev();
				edges_2 = e.Sym.Lnext;
				edges_3 = e.Sym.get_Lprev();
				if(!edges_0.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_0)) {
					edges_0.mark = edges_0.Sym.mark = true;
					stack.push(edges_0);
				}
				if(!edges_1.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_1)) {
					edges_1.mark = edges_1.Sym.mark = true;
					stack.push(edges_1);
				}
				if(!edges_2.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_2)) {
					edges_2.mark = edges_2.Sym.mark = true;
					stack.push(edges_2);
				}
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var e1 = stack[_g];
			++_g;
			stack.pop();
		}
		stack = null;
	}
	,discardExterior_: function(mesh) {
		var next;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			next = f.next;
			if(!f.inside) {
				mesh.zapFace(f);
			}
			f = next;
		}
	}
	,setWindingNumber_: function(mesh,value,keepOnlyBoundary) {
		var eNext;
		var e = mesh.eHead.next;
		while(e != mesh.eHead) {
			eNext = e.next;
			if(e.get_Rface().inside != e.Lface.inside) {
				e.winding = e.Lface.inside ? value : -value;
			} else if(!keepOnlyBoundary) {
				e.winding = 0;
			} else {
				mesh.delete(e);
			}
			e = eNext;
		}
	}
	,getNeighbourFace_: function(edge) {
		if(edge.get_Rface() == null) {
			return -1;
		}
		if(!edge.get_Rface().inside) {
			return -1;
		}
		return edge.get_Rface().n;
	}
	,outputPolymesh_: function(mesh,resultsType,polySize,vertexDim) {
		var edge;
		var maxFaceCount = 0;
		var maxVertexCount = 0;
		var faceVerts;
		var i;
		var elements = 0;
		var vert;
		if(polySize > 3) {
			mesh.mergeConvexFaces(polySize);
		}
		var v = mesh.vHead.next;
		while(v != mesh.vHead) {
			v.n = -1;
			v = v.next;
		}
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			f.n = -1;
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			faceVerts = 0;
			while(true) {
				v = edge.Org;
				if(v.n == -1) {
					v.n = maxVertexCount;
					++maxVertexCount;
				}
				++faceVerts;
				edge = edge.Lnext;
				if(!(edge != f.anEdge)) {
					break;
				}
			}
			f.n = maxFaceCount;
			++maxFaceCount;
			f = f.next;
		}
		this.elementCount = maxFaceCount;
		if(resultsType == hxGeomAlgo_ResultType.CONNECTED_POLYGONS) {
			maxFaceCount *= 2;
		}
		this.elements = [];
		this.vertexCount = maxVertexCount;
		this.vertices = [];
		this.vertexIndices = [];
		v = mesh.vHead.next;
		while(v != mesh.vHead) {
			if(v.n != -1) {
				var idx = v.n * vertexDim;
				this.vertices[idx] = v.coords[0];
				this.vertices[idx + 1] = v.coords[1];
				if(vertexDim > 2) {
					this.vertices[idx + 2] = v.coords[2];
				}
				this.vertexIndices[v.n] = v.idx;
			}
			v = v.next;
		}
		var nel = 0;
		f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			faceVerts = 0;
			while(true) {
				v = edge.Org;
				this.elements[nel++] = v.n;
				++faceVerts;
				edge = edge.Lnext;
				if(!(edge != f.anEdge)) {
					break;
				}
			}
			var _g = faceVerts;
			var _g1 = polySize;
			while(_g < _g1) {
				var i1 = _g++;
				this.elements[nel++] = -1;
			}
			if(resultsType == hxGeomAlgo_ResultType.CONNECTED_POLYGONS) {
				edge = f.anEdge;
				while(true) {
					this.elements[nel++] = this.getNeighbourFace_(edge);
					edge = edge.Lnext;
					if(!(edge != f.anEdge)) {
						break;
					}
				}
				var _g2 = faceVerts;
				var _g3 = polySize;
				while(_g2 < _g3) {
					var i2 = _g2++;
					this.elements[nel++] = -1;
				}
			}
			f = f.next;
		}
	}
	,outputContours_: function(mesh,vertexDim) {
		var edge;
		var start;
		var verts;
		var elements;
		var vertInds;
		var startVert = 0;
		var vertCount = 0;
		this.vertexCount = 0;
		this.elementCount = 0;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			start = edge;
			while(true) {
				this.vertexCount++;
				edge = edge.Lnext;
				if(!(edge != start)) {
					break;
				}
			}
			this.elementCount++;
			f = f.next;
		}
		this.elements = [];
		this.vertices = [];
		this.vertexIndices = [];
		var nv = 0;
		var nvi = 0;
		var nel = 0;
		startVert = 0;
		f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			vertCount = 0;
			edge = f.anEdge;
			start = edge;
			while(true) {
				this.vertices[nv++] = edge.Org.coords[0];
				this.vertices[nv++] = edge.Org.coords[1];
				if(vertexDim > 2) {
					this.vertices[nv++] = edge.Org.coords[2];
				}
				this.vertexIndices[nvi++] = edge.Org.idx;
				++vertCount;
				edge = edge.Lnext;
				if(!(edge != start)) {
					break;
				}
			}
			this.elements[nel++] = startVert;
			this.elements[nel++] = vertCount;
			startVert += vertCount;
			f = f.next;
		}
	}
	,addContour: function(vertexDim,vertices) {
		if(this.mesh == null) {
			this.mesh = new hxGeomAlgo__$Tess2_TessMesh();
		}
		if(vertexDim < 2) {
			vertexDim = 2;
		}
		if(vertexDim > 3) {
			vertexDim = 3;
		}
		var e = null;
		var i = 0;
		while(i < vertices.length) {
			if(e == null) {
				e = this.mesh.makeEdge();
				this.mesh.splice(e,e.Sym);
			} else {
				this.mesh.splitEdge(e);
				e = e.Lnext;
			}
			e.Org.coords[0] = vertices[i];
			e.Org.coords[1] = vertices[i + 1];
			if(vertexDim > 2) {
				e.Org.coords[2] = vertices[i + 2];
			} else {
				e.Org.coords[2] = 0.0;
			}
			e.Org.idx = this.vertexIndexCounter++;
			e.winding = 1;
			e.Sym.winding = -1;
			i += vertexDim;
		}
	}
	,tesselate: function(windingRule,resultType,polySize,vertexDim,normal) {
		this.vertices = [];
		this.elements = [];
		this.vertexIndices = [];
		this.vertexIndexCounter = 0;
		if(normal != null) {
			this.normal[0] = normal[0];
			this.normal[1] = normal[1];
			this.normal[2] = normal[2];
		}
		this.windingRule = windingRule;
		if(vertexDim < 2) {
			vertexDim = 2;
		}
		if(vertexDim > 3) {
			vertexDim = 3;
		}
		if(this.mesh == null) {
			return false;
		}
		this.projectPolygon_();
		hxGeomAlgo__$Tess2_Sweep.computeInterior(this);
		var mesh = this.mesh;
		if(resultType == hxGeomAlgo_ResultType.BOUNDARY_CONTOURS) {
			this.setWindingNumber_(mesh,1,true);
		} else {
			this.tessellateInterior_(mesh);
			if(resultType == hxGeomAlgo_ResultType.EXPERIMENTAL_DELAUNAY) {
				this.refineDelaunay_(mesh);
				polySize = 3;
			}
		}
		mesh.check();
		if(resultType == hxGeomAlgo_ResultType.BOUNDARY_CONTOURS) {
			this.outputContours_(mesh,vertexDim);
		} else {
			this.outputPolymesh_(mesh,resultType,polySize,vertexDim);
		}
		return true;
	}
	,__class__: hxGeomAlgo_Tesselator
};
var hxPolyK__$PolyK_ArrayPairs_$Impl_$ = {};
$hxClasses["hxPolyK._PolyK.ArrayPairs_Impl_"] = hxPolyK__$PolyK_ArrayPairs_$Impl_$;
hxPolyK__$PolyK_ArrayPairs_$Impl_$.__name__ = "hxPolyK._PolyK.ArrayPairs_Impl_";
hxPolyK__$PolyK_ArrayPairs_$Impl_$._new = function(arr) {
	var this1 = arr;
	return this1;
};
hxPolyK__$PolyK_ArrayPairs_$Impl_$.get_length = function(this1) {
	return this1.length / 2 | 0;
};
hxPolyK__$PolyK_ArrayPairs_$Impl_$.access = function(this1,key) {
	var i = key * 2 | 0;
	return { x : this1[i], y : this1[i + 1]};
};
hxPolyK__$PolyK_ArrayPairs_$Impl_$.reverse = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = hxPolyK__$PolyK_ArrayPairs_$Impl_$._new(this1);
	while(_g < (_g1.length / 2 | 0)) {
		var i = _g * 2 | 0;
		var i_x = _g1[i];
		var i_y = _g1[i + 1];
		++_g;
		arr.unshift(i_y);
		arr.unshift(i_x);
	}
	this1 = arr;
	return arr;
};
var hxPolyK__$PolyK_ArrayTriple_$Impl_$ = {};
$hxClasses["hxPolyK._PolyK.ArrayTriple_Impl_"] = hxPolyK__$PolyK_ArrayTriple_$Impl_$;
hxPolyK__$PolyK_ArrayTriple_$Impl_$.__name__ = "hxPolyK._PolyK.ArrayTriple_Impl_";
hxPolyK__$PolyK_ArrayTriple_$Impl_$._new = function(arr) {
	var this1 = arr;
	return this1;
};
hxPolyK__$PolyK_ArrayTriple_$Impl_$.get_length = function(this1) {
	return this1.length / 3 | 0;
};
hxPolyK__$PolyK_ArrayTriple_$Impl_$.access = function(this1,key) {
	var i = key * 3 | 0;
	return { a : this1[i], b : this1[i + 1], c : this1[i + 2]};
};
hxPolyK__$PolyK_ArrayTriple_$Impl_$.reverse = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = hxPolyK__$PolyK_ArrayTriple_$Impl_$._new(this1);
	while(_g < (_g1.length / 3 | 0)) {
		var i = _g * 3 | 0;
		var i_a = _g1[i];
		var i_b = _g1[i + 1];
		var i_c = _g1[i + 2];
		++_g;
		arr.unshift(i_c);
		arr.unshift(i_b);
		arr.unshift(i_a);
	}
	this1 = arr;
	return arr;
};
var hxPolyK_PolyK = function() {
};
$hxClasses["hxPolyK.PolyK"] = hxPolyK_PolyK;
hxPolyK_PolyK.__name__ = "hxPolyK.PolyK";
hxPolyK_PolyK.isSimple = function(p) {
	var n = p.length >> 1;
	if(n < 4) {
		return true;
	}
	var a1_x = 0.;
	var a1_y = 0.;
	var a1_flag = false;
	var a2_x = 0.;
	var a2_y = 0.;
	var a2_flag = false;
	var b1_x = 0.;
	var b1_y = 0.;
	var b1_flag = false;
	var b2_x = 0.;
	var b2_y = 0.;
	var b2_flag = false;
	var c_x = 0.;
	var c_y = 0.;
	var c_flag = false;
	var ind;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		ind = 2 * i | 0;
		a1_x = p[ind];
		a1_y = p[ind + 1];
		if(i == n - 1) {
			a2_x = p[0];
			a2_y = p[1];
		} else {
			a2_x = p[ind + 2];
			a2_y = p[ind + 3];
		}
		var _g2 = 0;
		var _g11 = n;
		while(_g2 < _g11) {
			var j = _g2++;
			if(Math.abs(i - j) < 2) {
				continue;
			}
			if(j == n - 1 && i == 0) {
				continue;
			}
			if(i == n - 1 && j == 0) {
				continue;
			}
			ind = 2 * j;
			b1_x = p[ind];
			b1_y = p[ind + 1];
			if(j == n - 1) {
				b2_x = p[0];
				b2_y = p[1];
			} else {
				b2_x = p[ind + 2];
				b2_y = p[ind + 3];
			}
			var dax = a1_x - a2_x;
			var dbx = b1_x - b2_x;
			var day = a1_y - a2_y;
			var dby = b1_y - b2_y;
			var Den = dax * dby - day * dbx;
			var c;
			if(Den == 0) {
				c = null;
			} else {
				var A = a1_x * a2_y - a1_y * a2_x;
				var B = b1_x * b2_y - b1_y * b2_x;
				var I = { x : (A * dbx - dax * B) / Den, y : (A * dby - day * B) / Den, flag : false};
				var c1;
				var minx = Math.min(a1_x,a2_x);
				var maxx = Math.max(a1_x,a2_x);
				var miny = Math.min(a1_y,a2_y);
				var maxy = Math.max(a1_y,a2_y);
				if(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy) {
					var minx1 = Math.min(b1_x,b2_x);
					var maxx1 = Math.max(b1_x,b2_x);
					var miny1 = Math.min(b1_y,b2_y);
					var maxy1 = Math.max(b1_y,b2_y);
					c1 = minx1 == maxx1 ? miny1 <= I.y && I.y <= maxy1 : miny1 == maxy1 ? minx1 <= I.x && I.x <= maxx1 : minx1 <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx1 && miny1 <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy1;
				} else {
					c1 = false;
				}
				c = c1 ? I : null;
			}
			if(c != null) {
				return false;
			}
		}
	}
	return true;
};
hxPolyK_PolyK.isConvex = function(p) {
	if(p.length < 6) {
		return true;
	}
	var l = p.length - 4;
	var l2 = l / 2 | 0;
	var i;
	var _g = 0;
	var _g1 = l2;
	while(_g < _g1) {
		var k = _g++;
		i = k * 2;
		var bx = p[i + 2];
		var by = p[i + 3];
		if(!((p[i + 1] - by) * (p[i + 4] - bx) + (bx - p[i]) * (p[i + 5] - by) >= 0)) {
			return false;
		}
	}
	var bx1 = p[l + 2];
	var by1 = p[l + 3];
	if(!((p[l + 1] - by1) * (p[0] - bx1) + (bx1 - p[l]) * (p[1] - by1) >= 0)) {
		return false;
	}
	var bx2 = p[0];
	var by2 = p[1];
	if(!((p[l + 3] - by2) * (p[2] - bx2) + (bx2 - p[l + 2]) * (p[3] - by2) >= 0)) {
		return false;
	}
	return true;
};
hxPolyK_PolyK.getArea = function(p) {
	if(p.length < 6) {
		return 0;
	}
	var l = p.length - 2;
	var sum = 0.;
	var l2 = l / 2 | 0;
	var i;
	var _g = 0;
	var _g1 = l2;
	while(_g < _g1) {
		var k = _g++;
		i = k * 2;
		sum += (p[i + 2] - p[i]) * (p[i + 1] + p[i + 3]);
	}
	sum += (p[0] - p[l]) * (p[l + 1] + p[1]);
	return -sum * 0.5;
};
hxPolyK_PolyK.getAABB = function(p) {
	var minx = Infinity;
	var miny = Infinity;
	var maxx = -Infinity;
	var maxy = -Infinity;
	var _g = 0;
	var _g1 = hxPolyK__$PolyK_ArrayPairs_$Impl_$._new(p);
	while(_g < (_g1.length / 2 | 0)) {
		var i = _g * 2 | 0;
		var i_x = _g1[i];
		var i_y = _g1[i + 1];
		++_g;
		minx = Math.min(minx,i_x);
		maxx = Math.max(maxx,i_x);
		miny = Math.min(miny,i_y);
		maxy = Math.max(maxy,i_y);
	}
	return { x : minx, y : miny, width : maxx - minx, height : maxy - miny};
};
hxPolyK_PolyK.reverse = function(p) {
	var ap = hxPolyK__$PolyK_ArrayPairs_$Impl_$._new(p);
	var arr = [];
	var _g = 0;
	var _g1 = hxPolyK__$PolyK_ArrayPairs_$Impl_$._new(ap);
	while(_g < (_g1.length / 2 | 0)) {
		var i = _g * 2 | 0;
		var i_x = _g1[i];
		var i_y = _g1[i + 1];
		++_g;
		arr.unshift(i_y);
		arr.unshift(i_x);
	}
	ap = arr;
	return arr;
};
hxPolyK_PolyK.triangulate = function(p) {
	var n = p.length >> 1;
	if(n < 3) {
		return [];
	}
	var tgs = [];
	var avl = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		avl.push(i);
	}
	var i1 = 0;
	var al = n;
	var i0;
	var i11;
	var i2;
	var vi;
	var ax;
	var ay;
	var bx;
	var by;
	var cx;
	var cy;
	var earFound;
	while(al > 3) {
		i0 = avl[i1 % al];
		i11 = avl[(i1 + 1) % al];
		i2 = avl[(i1 + 2) % al];
		ax = p[2 * i0];
		ay = p[2 * i0 + 1];
		bx = p[2 * i11];
		by = p[2 * i11 + 1];
		cx = p[2 * i2];
		cy = p[2 * i2 + 1];
		earFound = false;
		if((ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0) {
			earFound = true;
			var _g2 = 0;
			var _g3 = al;
			while(_g2 < _g3) {
				var j = _g2++;
				var vi1 = avl[j];
				if(vi1 == i0 || vi1 == i11 || vi1 == i2) {
					continue;
				}
				var v0x = cx - ax;
				var v0y = cy - ay;
				var v1x = bx - ax;
				var v1y = by - ay;
				var v2x = p[2 * vi1] - ax;
				var v2y = p[2 * vi1 + 1] - ay;
				var dot00 = v0x * v0x + v0y * v0y;
				var dot01 = v0x * v1x + v0y * v1y;
				var dot02 = v0x * v2x + v0y * v2y;
				var dot11 = v1x * v1x + v1y * v1y;
				var dot12 = v1x * v2x + v1y * v2y;
				var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
				var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
				var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
				if(u >= 0 && v >= 0 && u + v < 1) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i1 + 1) % al,1);
			--al;
			i1 = 0;
		} else if(i1++ > 3 * al) {
			break;
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
hxPolyK_PolyK.containsPoint = function(p,px,py) {
	var n = p.length >> 1;
	var ax;
	var ay = p[2 * n - 3] - py;
	var bx = p[2 * n - 2] - px;
	var by = p[2 * n - 1] - py;
	var twoi;
	var lup = by > ay;
	var lx;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		ax = bx;
		ay = by;
		twoi = 2 * i;
		bx = p[twoi] - px;
		by = p[twoi + 1] - py;
		if(ay == by) {
			continue;
		}
		lup = by > ay;
	}
	var depth = 0;
	var _g2 = 0;
	var _g3 = n;
	while(_g2 < _g3) {
		var i1 = _g2++;
		ax = bx;
		ay = by;
		twoi = 2 * i1;
		bx = p[twoi] - px;
		by = p[twoi + 1] - py;
		if(ay < 0 && by < 0) {
			continue;
		}
		if(ay > 0 && by > 0) {
			continue;
		}
		if(ax < 0 && bx < 0) {
			continue;
		}
		if(ay == by && Math.min(ax,bx) <= 0) {
			return true;
		}
		if(ay == by) {
			continue;
		}
		lx = ax + (bx - ax) * -ay / (by - ay);
		if(lx == 0) {
			return true;
		}
		if(lx > 0) {
			++depth;
		}
		if(ay == 0 && lup && by > ay) {
			--depth;
		}
		if(ay == 0 && !lup && by < ay) {
			--depth;
		}
		lup = by > ay;
	}
	return (depth & 1) == 1;
};
hxPolyK_PolyK.slice = function(p,ax,ay,bx,by) {
	if(hxPolyK_PolyK.containsPoint(p,ax,ay) || hxPolyK_PolyK.containsPoint(p,bx,by)) {
		return [p.slice(0)];
	}
	var a_y;
	var a_x = ax;
	a_y = ay;
	var a_flag = false;
	var b_x = ax;
	var b_y = ay;
	var b_flag = false;
	var iscs = [];
	var ps = [];
	var _g = 0;
	var _g1 = hxPolyK__$PolyK_ArrayPairs_$Impl_$._new(p);
	while(_g < (_g1.length / 2 | 0)) {
		var i = _g * 2 | 0;
		var i_x = _g1[i];
		var i_y = _g1[i + 1];
		++_g;
		ps.push({ x : i_x, y : i_y, flag : false});
	}
	var l = ps.length;
	var isc;
	var skip = false;
	var _g2 = 0;
	var _g3 = l;
	while(_g2 < _g3) {
		var i1 = _g2++;
		if(skip) {
			skip = false;
			continue;
		}
		var b1 = ps[i1];
		var b2 = ps[(i1 + 1) % ps.length];
		var dax = a_x - b_x;
		var dbx = b1.x - b2.x;
		var day = a_y - b_y;
		var dby = b1.y - b2.y;
		var Den = dax * dby - day * dbx;
		if(Den == 0) {
			isc = null;
		} else {
			var A = a_x * b_y - a_y * b_x;
			var B = b1.x * b2.y - b1.y * b2.x;
			var I = { x : (A * dbx - dax * B) / Den, y : (A * dby - day * B) / Den, flag : false};
			var isc1;
			var minx = Math.min(a_x,b_x);
			var maxx = Math.max(a_x,b_x);
			var miny = Math.min(a_y,b_y);
			var maxy = Math.max(a_y,b_y);
			if(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy) {
				var minx1 = Math.min(b1.x,b2.x);
				var maxx1 = Math.max(b1.x,b2.x);
				var miny1 = Math.min(b1.y,b2.y);
				var maxy1 = Math.max(b1.y,b2.y);
				isc1 = minx1 == maxx1 ? miny1 <= I.y && I.y <= maxy1 : miny1 == maxy1 ? minx1 <= I.x && I.x <= maxx1 : minx1 <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx1 && miny1 <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy1;
			} else {
				isc1 = false;
			}
			isc = isc1 ? I : null;
		}
		var fisc = iscs[0];
		var lisc = iscs[iscs.length - 1];
		var tmp;
		var tmp1;
		if(isc != null) {
			if(fisc != null) {
				var dx = fisc.x - isc.x;
				var dy = fisc.y - isc.y;
				tmp1 = Math.sqrt(dx * dx + dy * dy) > 0.0000000001;
			} else {
				tmp1 = true;
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			if(lisc != null) {
				var dx1 = lisc.x - isc.x;
				var dy1 = lisc.y - isc.y;
				tmp = Math.sqrt(dx1 * dx1 + dy1 * dy1) > 0.0000000001;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			isc.flag = true;
			iscs.push(isc);
			ps.splice(i1 + 1,0);
			ps.splice(i1 + 1,0,isc);
			skip = true;
		}
	}
	if(iscs.length < 2) {
		return [p.slice(0)];
	}
	var comp = function(u,v) {
		var dx2 = u.x - a_x;
		var dy2 = u.y - a_y;
		var dx3 = v.x - a_x;
		var dy3 = v.y - a_y;
		var val = Math.sqrt(dx2 * dx2 + dy2 * dy2) - Math.sqrt(dx3 * dx3 + dy3 * dy3);
		if(val > 0) {
			return 1;
		}
		if(val < 0) {
			return -1;
		}
		return 0;
	};
	iscs.sort(comp);
	var pgs = [];
	var dir = 0;
	while(iscs.length > 0) {
		var n = ps.length;
		var i0 = iscs[0];
		var i11 = iscs[1];
		var ind0 = ps.indexOf(i0);
		var ind1 = ps.indexOf(i11);
		var solved = false;
		if(hxPolyK_PolyK.firstWithFlag(ps,ind0) == ind1) {
			solved = true;
		} else {
			i0 = iscs[1];
			i11 = iscs[0];
			ind0 = ps.indexOf(i0);
			ind1 = ps.indexOf(i11);
			if(hxPolyK_PolyK.firstWithFlag(ps,ind0) == ind1) {
				solved = true;
			}
		}
		if(solved) {
			--dir;
			var ind11 = ind1;
			var n1 = ps.length;
			var nps = [];
			if(ind11 < ind0) {
				ind11 += n1;
			}
			var l1 = ind11 + 1;
			var _g4 = ind0;
			var _g11 = l1;
			while(_g4 < _g11) {
				var i2 = _g4++;
				nps.push(ps[i2 % n1]);
			}
			var pgn = nps;
			pgs.push(pgn);
			var ind12 = ind0;
			var n2 = ps.length;
			var nps1 = [];
			if(ind12 < ind1) {
				ind12 += n2;
			}
			var l2 = ind12 + 1;
			var _g5 = ind1;
			var _g12 = l2;
			while(_g5 < _g12) {
				var i3 = _g5++;
				nps1.push(ps[i3 % n2]);
			}
			ps = nps1;
			i0.flag = i11.flag = false;
			iscs.splice(0,2);
			if(iscs.length == 0) {
				pgs.push(ps);
			}
		} else {
			++dir;
			iscs.reverse();
		}
		if(dir > 1) {
			break;
		}
	}
	var result = [];
	var l3 = pgs.length;
	var l21;
	var _g41 = 0;
	var _g51 = l3;
	while(_g41 < _g51) {
		var i4 = _g41++;
		var pg = pgs[i4];
		var npg = [];
		l21 = pg.length;
		var _g42 = 0;
		var _g52 = l21;
		while(_g42 < _g52) {
			var j = _g42++;
			npg.push(pg[j].x);
			npg.push(pg[j].y);
		}
		result.push(npg);
	}
	return result;
};
hxPolyK_PolyK.raycast = function(p,x,y,dx,dy,isc) {
	var l = p.length - 2;
	var tp = [];
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	var a1 = tp[0];
	var a2 = tp[1];
	var b1 = tp[2];
	var b2 = tp[3];
	var c = tp[4];
	a1.x = x;
	a1.y = y;
	a2.x = x + dx;
	a2.y = y + dy;
	if(isc == null) {
		isc = { dist : 0, edge : 0, norm : { x : 0, y : 0}, refl : { x : 0, y : 0}};
	}
	isc.dist = Infinity;
	var l2 = l / 2 | 0;
	var i;
	var _g = 0;
	var _g1 = l2;
	while(_g < _g1) {
		var k = _g++;
		i = k * 2;
		b1.x = p[i];
		b1.y = p[i + 1];
		b2.x = p[i + 2];
		b2.y = p[i + 3];
		var dax = a1.x - a2.x;
		var dbx = b1.x - b2.x;
		var day = a1.y - a2.y;
		var dby = b1.y - b2.y;
		var Den = dax * dby - day * dbx;
		var nisc;
		if(Den == 0) {
			nisc = null;
		} else {
			var A = a1.x * a2.y - a1.y * a2.x;
			var B = b1.x * b2.y - b1.y * b2.x;
			var I = c;
			var iDen = 1 / Den;
			I.x = (A * dbx - dax * B) * iDen;
			I.y = (A * dby - day * B) * iDen;
			var minx = Math.min(b1.x,b2.x);
			var maxx = Math.max(b1.x,b2.x);
			var miny = Math.min(b1.y,b2.y);
			var maxy = Math.max(b1.y,b2.y);
			nisc = !(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy) ? null : day > 0 && I.y > a1.y || day < 0 && I.y < a1.y ? null : dax > 0 && I.x > a1.x || dax < 0 && I.x < a1.x ? null : I;
		}
		if(nisc != null) {
			var dx1 = c.x - a1.x;
			var dy1 = c.y - a1.y;
			var nrl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			if(nrl < isc.dist) {
				var dx2 = b2.x - b1.x;
				var dy2 = b2.y - b1.y;
				var ibl = 1 / Math.sqrt(dx2 * dx2 + dy2 * dy2);
				var nx = -(b2.y - b1.y) * ibl;
				var ny = (b2.x - b1.x) * ibl;
				var ddot = 2 * (dx * nx + dy * ny);
				isc.dist = nrl;
				isc.norm.x = nx;
				isc.norm.y = ny;
				isc.refl.x = -ddot * nx + dx;
				isc.refl.y = -ddot * ny + dy;
				isc.edge = i / 2;
			}
		}
	}
	b1.x = b2.x;
	b1.y = b2.y;
	b2.x = p[0];
	b2.y = p[1];
	var dax1 = a1.x - a2.x;
	var dbx1 = b1.x - b2.x;
	var day1 = a1.y - a2.y;
	var dby1 = b1.y - b2.y;
	var Den1 = dax1 * dby1 - day1 * dbx1;
	var nisc1;
	if(Den1 == 0) {
		nisc1 = null;
	} else {
		var A1 = a1.x * a2.y - a1.y * a2.x;
		var B1 = b1.x * b2.y - b1.y * b2.x;
		var I1 = c;
		var iDen1 = 1 / Den1;
		I1.x = (A1 * dbx1 - dax1 * B1) * iDen1;
		I1.y = (A1 * dby1 - day1 * B1) * iDen1;
		var minx1 = Math.min(b1.x,b2.x);
		var maxx1 = Math.max(b1.x,b2.x);
		var miny1 = Math.min(b1.y,b2.y);
		var maxy1 = Math.max(b1.y,b2.y);
		nisc1 = !(minx1 == maxx1 ? miny1 <= I1.y && I1.y <= maxy1 : miny1 == maxy1 ? minx1 <= I1.x && I1.x <= maxx1 : minx1 <= I1.x + 0.0000000001 && I1.x - 0.0000000001 <= maxx1 && miny1 <= I1.y + 0.0000000001 && I1.y - 0.0000000001 <= maxy1) ? null : day1 > 0 && I1.y > a1.y || day1 < 0 && I1.y < a1.y ? null : dax1 > 0 && I1.x > a1.x || dax1 < 0 && I1.x < a1.x ? null : I1;
	}
	if(nisc1 != null) {
		var dx3 = c.x - a1.x;
		var dy3 = c.y - a1.y;
		var nrl1 = Math.sqrt(dx3 * dx3 + dy3 * dy3);
		if(nrl1 < isc.dist) {
			var dx4 = b2.x - b1.x;
			var dy4 = b2.y - b1.y;
			var ibl1 = 1 / Math.sqrt(dx4 * dx4 + dy4 * dy4);
			var nx1 = -(b2.y - b1.y) * ibl1;
			var ny1 = (b2.x - b1.x) * ibl1;
			var ddot1 = 2 * (dx * nx1 + dy * ny1);
			isc.dist = nrl1;
			isc.norm.x = nx1;
			isc.norm.y = ny1;
			isc.refl.x = -ddot1 * nx1 + dx;
			isc.refl.y = -ddot1 * ny1 + dy;
			isc.edge = p.length / 2 - 1;
		}
	}
	if(isc.dist != Infinity) {
		return isc;
	} else {
		return null;
	}
};
hxPolyK_PolyK.closestEdge = function(p,x,y,isc) {
	var l = p.length - 2;
	var tp = [];
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	var a1 = tp[0];
	var b1 = tp[2];
	var b2 = tp[3];
	var c = tp[4];
	a1.x = x;
	a1.y = y;
	if(isc == null) {
		isc = { dist : 0, edge : 0, point : { x : 0, y : 0}, norm : { x : 0, y : 0}};
	}
	isc.dist = Infinity;
	var l2 = l / 2 | 0;
	var i;
	var _g = 0;
	var _g1 = l2;
	while(_g < _g1) {
		var k = _g++;
		i = k * 2;
		b1.x = p[i];
		b1.y = p[i + 1];
		b2.x = p[i + 2];
		b2.y = p[i + 3];
		var x1 = a1.x;
		var y1 = a1.y;
		var x11 = b1.x;
		var y11 = b1.y;
		var x2 = b2.x;
		var y2 = b2.y;
		var A = x1 - x11;
		var B = y1 - y11;
		var C = x2 - x11;
		var D = y2 - y11;
		var dot = A * C + B * D;
		var len_sq = C * C + D * D;
		var param = dot / len_sq;
		var xx;
		var yy;
		if(param < 0 || x11 == x2 && y11 == y2) {
			xx = x11;
			yy = y11;
		} else if(param > 1) {
			xx = x2;
			yy = y2;
		} else {
			xx = x11 + param * C;
			yy = y11 + param * D;
		}
		var dx = x1 - xx;
		var dy = y1 - yy;
		var dst = Math.sqrt(dx * dx + dy * dy);
		if(dst < isc.dist) {
			isc.dist = dst;
			isc.edge = i >> 1;
			isc.point.x = xx;
			isc.point.y = yy;
		}
	}
	b1.x = b2.x;
	b1.y = b2.y;
	b2.x = p[0];
	b2.y = p[1];
	var x3 = a1.x;
	var y3 = a1.y;
	var x12 = b1.x;
	var y12 = b1.y;
	var x21 = b2.x;
	var y21 = b2.y;
	var A1 = x3 - x12;
	var B1 = y3 - y12;
	var C1 = x21 - x12;
	var D1 = y21 - y12;
	var dot1 = A1 * C1 + B1 * D1;
	var len_sq1 = C1 * C1 + D1 * D1;
	var param1 = dot1 / len_sq1;
	var xx1;
	var yy1;
	if(param1 < 0 || x12 == x21 && y12 == y21) {
		xx1 = x12;
		yy1 = y12;
	} else if(param1 > 1) {
		xx1 = x21;
		yy1 = y21;
	} else {
		xx1 = x12 + param1 * C1;
		yy1 = y12 + param1 * D1;
	}
	var dx1 = x3 - xx1;
	var dy1 = y3 - yy1;
	var dst1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
	if(dst1 < isc.dist) {
		isc.dist = dst1;
		isc.edge = l >> 1;
		isc.point.x = xx1;
		isc.point.y = yy1;
	}
	var idst = 1 / isc.dist;
	isc.norm.x = (x - isc.point.x) * idst;
	isc.norm.y = (y - isc.point.y) * idst;
	return isc;
};
hxPolyK_PolyK.pointLineDist = function(p,a,b,edge,isc) {
	var x = p.x;
	var y = p.y;
	var x1 = a.x;
	var y1 = a.y;
	var x2 = b.x;
	var y2 = b.y;
	var A = x - x1;
	var B = y - y1;
	var C = x2 - x1;
	var D = y2 - y1;
	var dot = A * C + B * D;
	var len_sq = C * C + D * D;
	var param = dot / len_sq;
	var xx;
	var yy;
	if(param < 0 || x1 == x2 && y1 == y2) {
		xx = x1;
		yy = y1;
	} else if(param > 1) {
		xx = x2;
		yy = y2;
	} else {
		xx = x1 + param * C;
		yy = y1 + param * D;
	}
	var dx = x - xx;
	var dy = y - yy;
	var dst = Math.sqrt(dx * dx + dy * dy);
	if(dst < isc.dist) {
		isc.dist = dst;
		isc.edge = edge;
		isc.point.x = xx;
		isc.point.y = yy;
	}
};
hxPolyK_PolyK.updateISC = function(dx,dy,a1,b1,b2,c,edge,isc) {
	var dx1 = c.x - a1.x;
	var dy1 = c.y - a1.y;
	var nrl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
	if(nrl < isc.dist) {
		var dx2 = b2.x - b1.x;
		var dy2 = b2.y - b1.y;
		var ibl = 1 / Math.sqrt(dx2 * dx2 + dy2 * dy2);
		var nx = -(b2.y - b1.y) * ibl;
		var ny = (b2.x - b1.x) * ibl;
		var ddot = 2 * (dx * nx + dy * ny);
		isc.dist = nrl;
		isc.norm.x = nx;
		isc.norm.y = ny;
		isc.refl.x = -ddot * nx + dx;
		isc.refl.y = -ddot * ny + dy;
		isc.edge = edge;
	}
};
hxPolyK_PolyK.getPoints = function(ps,ind0,ind1) {
	var n = ps.length;
	var nps = [];
	if(ind1 < ind0) {
		ind1 += n;
	}
	var l = ind1 + 1;
	var _g = ind0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		nps.push(ps[i % n]);
	}
	return nps;
};
hxPolyK_PolyK.firstWithFlag = function(ps,ind) {
	var n = ps.length;
	while(true) {
		ind = (ind + 1) % n;
		if(ps[ind].flag) {
			return ind;
		}
	}
};
hxPolyK_PolyK.pointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax;
	var v0y = cy - ay;
	var v1x = bx - ax;
	var v1y = by - ay;
	var v2x = px - ax;
	var v2y = py - ay;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	if(u >= 0 && v >= 0) {
		return u + v < 1;
	} else {
		return false;
	}
};
hxPolyK_PolyK.rayLineIntersection = function(a1,a2,b1,b2,c) {
	var dax = a1.x - a2.x;
	var dbx = b1.x - b2.x;
	var day = a1.y - a2.y;
	var dby = b1.y - b2.y;
	var Den = dax * dby - day * dbx;
	if(Den == 0) {
		return null;
	}
	var A = a1.x * a2.y - a1.y * a2.x;
	var B = b1.x * b2.y - b1.y * b2.x;
	var I = c;
	var iDen = 1 / Den;
	I.x = (A * dbx - dax * B) * iDen;
	I.y = (A * dby - day * B) * iDen;
	var minx = Math.min(b1.x,b2.x);
	var maxx = Math.max(b1.x,b2.x);
	var miny = Math.min(b1.y,b2.y);
	var maxy = Math.max(b1.y,b2.y);
	if(!(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy)) {
		return null;
	}
	if(day > 0 && I.y > a1.y || day < 0 && I.y < a1.y) {
		return null;
	}
	if(dax > 0 && I.x > a1.x || dax < 0 && I.x < a1.x) {
		return null;
	}
	return I;
};
hxPolyK_PolyK.getLineIntersection = function(a1,a2,b1,b2) {
	var dax = a1.x - a2.x;
	var dbx = b1.x - b2.x;
	var day = a1.y - a2.y;
	var dby = b1.y - b2.y;
	var Den = dax * dby - day * dbx;
	if(Den == 0) {
		return null;
	}
	var A = a1.x * a2.y - a1.y * a2.x;
	var B = b1.x * b2.y - b1.y * b2.x;
	var I = { x : (A * dbx - dax * B) / Den, y : (A * dby - day * B) / Den, flag : false};
	var tmp;
	var minx = Math.min(a1.x,a2.x);
	var maxx = Math.max(a1.x,a2.x);
	var miny = Math.min(a1.y,a2.y);
	var maxy = Math.max(a1.y,a2.y);
	if(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy) {
		var minx1 = Math.min(b1.x,b2.x);
		var maxx1 = Math.max(b1.x,b2.x);
		var miny1 = Math.min(b1.y,b2.y);
		var maxy1 = Math.max(b1.y,b2.y);
		tmp = minx1 == maxx1 ? miny1 <= I.y && I.y <= maxy1 : miny1 == maxy1 ? minx1 <= I.x && I.x <= maxx1 : minx1 <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx1 && miny1 <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy1;
	} else {
		tmp = false;
	}
	if(tmp) {
		return I;
	}
	return null;
};
hxPolyK_PolyK.inRect = function(a,b,c) {
	var minx = Math.min(b.x,c.x);
	var maxx = Math.max(b.x,c.x);
	var miny = Math.min(b.y,c.y);
	var maxy = Math.max(b.y,c.y);
	if(minx == maxx) {
		if(miny <= a.y) {
			return a.y <= maxy;
		} else {
			return false;
		}
	}
	if(miny == maxy) {
		if(minx <= a.x) {
			return a.x <= maxx;
		} else {
			return false;
		}
	}
	if(minx <= a.x + 0.0000000001 && a.x - 0.0000000001 <= maxx && miny <= a.y + 0.0000000001) {
		return a.y - 0.0000000001 <= maxy;
	} else {
		return false;
	}
};
hxPolyK_PolyK.convex = function(ax,ay,bx,by,cx,cy) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0;
};
hxPolyK_PolyK.dist = function(a,b) {
	var dx = b.x - a.x;
	var dy = b.y - a.y;
	return Math.sqrt(dx * dx + dy * dy);
};
hxPolyK_PolyK.prototype = {
	__class__: hxPolyK_PolyK
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var justPath_IPathContext = function() { };
$hxClasses["justPath.IPathContext"] = justPath_IPathContext;
justPath_IPathContext.__name__ = "justPath.IPathContext";
justPath_IPathContext.__isInterface__ = true;
justPath_IPathContext.prototype = {
	__class__: justPath_IPathContext
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = "lime._internal.backend.html5.GameDeviceData";
lime__$internal_backend_html5_GameDeviceData.prototype = {
	__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,0);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 0});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes = function(bytes,type) {
	var uri = URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
	if(uri != null) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,1);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 1});
		}
		return promise.future;
	} else {
		return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + lime__$internal_format_Base64.encode(bytes));
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise,queueItem.options);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__createBlobURIFromBytes = function(bytes,type) {
	return URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI = function(uri) {
	if(!StringTools.startsWith(uri,"data:")) {
		return StringTools.startsWith(uri,"blob:");
	} else {
		return true;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(path == null || path == "") {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(path)) {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(window.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(window.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(window.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise,options) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(uri)) {
		image.addEventListener("load",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event1) {
			promise.progress(event1.loaded,event1.total);
		},false);
		image.addEventListener("error",function(event2) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event2.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img1) {
				promise.complete(img1);
			});
		};
		request.onerror = function(event3) {
			promise.error(event3.message);
		};
		request.onprogress = function(event4) {
			if(event4.lengthComputable) {
				promise.progress(event4.loaded,event4.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI = function(uri,options) {
	if((options & 1) != 0) {
		URL.revokeObjectURL(uri);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = this.parent.formData.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var _this = this.parent.formData;
				var value = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
				if(key1.indexOf("[]") > -1 && ((value) instanceof Array)) {
					var _g = [];
					var x = $getIterator(value);
					while(x.hasNext()) {
						var x1 = x.next();
						_g.push(encodeURIComponent(x1));
					}
					var arrayValue = _g.join("&amp;" + key1 + "=");
					query += encodeURIComponent(key1) + "=" + arrayValue;
				} else {
					var query1 = encodeURIComponent(key1) + "=";
					var s = Std.string(value);
					query += query1 + encodeURIComponent(s);
				}
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g1 = 0;
		var _g11 = this.parent.headers;
		while(_g1 < _g11.length) {
			var header = _g11[_g1];
			++_g1;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY", options : 0});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT", options : 0});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new haxe_ds_List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(((element) instanceof HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style1 = this.div.style;
		style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style1.setProperty("transform","translate3D(0,0,0)",null);
		style1.position = "relative";
		style1.overflow = "hidden";
		style1.setProperty("-webkit-user-select","none",null);
		style1.setProperty("-moz-user-select","none",null);
		style1.setProperty("-ms-user-select","none",null);
		style1.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("dragstart",$bind(this,this.handleDragEvent),true);
		element.addEventListener("dragover",$bind(this,this.handleDragEvent),true);
		element.addEventListener("drop",$bind(this,this.handleDragEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = "lime._internal.backend.html5.HTML5Window";
lime__$internal_backend_html5_HTML5Window.prototype = {
	alert: function(message,title) {
		if(message != null) {
			window.alert(Std.string(message));
		}
	}
	,close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing") && contextAttributes.antialiasing > 0;
				var options1 = Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true;
				var options2 = Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil;
				var options3 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false, failIfMajorPerformanceCaveat : true};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options3);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,focus: function() {
	}
	,getCursor: function() {
		return this.cursor;
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,getMouseLock: function() {
		return false;
	}
	,getTextInputEnabled: function() {
		return this.textInputEnabled;
	}
	,handleContextEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleDragEvent: function(event) {
		switch(event.type) {
		case "dragover":
			event.preventDefault();
			return false;
		case "dragstart":
			if((js_Boot.__cast(event.target , HTMLElement)).nodeName.toLowerCase() == "img" && event.cancelable) {
				event.preventDefault();
				return false;
			}
			break;
		case "drop":
			if(event.dataTransfer != null && event.dataTransfer.files.length > 0) {
				this.parent.onDropFile.dispatch(event.dataTransfer.files);
				event.preventDefault();
				return false;
			}
			break;
		}
		return true;
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			this.parent.onRestore.dispatch();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g = 0;
			var _g1 = changeEvents.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			switch(event.type) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			switch(event.deltaMode) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,move: function(x,y) {
	}
	,readPixels: function(rect) {
		if(this.canvas != null) {
			var stageRect = new lime_math_Rectangle(0,0,this.canvas.width,this.canvas.height);
			if(rect == null) {
				rect = stageRect;
			} else {
				rect.intersection(stageRect,rect);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas2 = window.document.createElement("canvas");
				canvas2.width = rect.width | 0;
				canvas2.height = rect.height | 0;
				var context = canvas2.getContext("2d");
				context.drawImage(this.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas2);
			}
		}
		return null;
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		if(lime__$internal_backend_html5_HTML5Window.textArea == null) {
			lime__$internal_backend_html5_HTML5Window.textArea = window.document.createElement("textarea");
			lime__$internal_backend_html5_HTML5Window.textArea.style.height = "0px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.left = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.opacity = "0";
			lime__$internal_backend_html5_HTML5Window.textArea.style.position = "fixed";
			lime__$internal_backend_html5_HTML5Window.textArea.style.top = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.width = "0px";
			window.document.body.appendChild(lime__$internal_backend_html5_HTML5Window.textArea);
		}
		lime__$internal_backend_html5_HTML5Window.textArea.value = value;
		lime__$internal_backend_html5_HTML5Window.textArea.focus();
		lime__$internal_backend_html5_HTML5Window.textArea.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = "none";
			} else {
				var tmp;
				switch(value._hx_index) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,setFrameRate: function(value) {
		if(this.parent.application != null) {
			if(value >= 60) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = -1;
				}
			} else if(value > 0) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = 1000 / value;
				}
			} else if(this.parent == this.parent.application.__window) {
				this.parent.application.__backend.framePeriod = 1000;
			}
		}
		return value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.parent.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.requestFullscreen();
				} else if(this.parent.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.mozRequestFullScreen();
				} else if(this.parent.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.webkitRequestFullscreen();
				} else if(this.parent.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setIcon: function(image) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) {
			link = window.document.createElement("link");
		}
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setMouseLock: function(value) {
	}
	,setResizable: function(value) {
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,setTitle: function(value) {
		if(value != null) {
			window.document.title = value;
		}
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,warpMouse: function(x,y) {
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_backend_native_NativeCFFI = function() { };
$hxClasses["lime._internal.backend.native.NativeCFFI"] = lime__$internal_backend_native_NativeCFFI;
lime__$internal_backend_native_NativeCFFI.__name__ = "lime._internal.backend.native.NativeCFFI";
var lime__$internal_format_BMP = function() { };
$hxClasses["lime._internal.format.BMP"] = lime__$internal_format_BMP;
lime__$internal_format_BMP.__name__ = "lime._internal.format.BMP";
lime__$internal_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime__$internal_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			pixelValuesLength = (image.width * 3 + image.width * 3 % 4) * image.height;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime__$internal_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime__$internal_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime__$internal_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime__$internal_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			var _g1 = 0;
			var _g11 = image.height;
			while(_g1 < _g11) {
				var y = _g1++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g12 = image.width;
				while(_g2 < _g12) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g21 = 0;
				var _g3 = image.width * 3 % 4;
				while(_g21 < _g3) {
					var i1 = _g21++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g4 = 0;
			var _g13 = image.height;
			while(_g4 < _g13) {
				var y1 = _g4++;
				readPosition = (image.height - 1 - y1) * 4 * image.width;
				var _g5 = 0;
				var _g14 = image.width;
				while(_g5 < _g14) {
					var x1 = _g5++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g6 = 0;
			var _g15 = image.height;
			while(_g6 < _g15) {
				var y2 = _g6++;
				readPosition = (image.height - 1 - y2) * 4 * image.width;
				var _g7 = 0;
				var _g16 = image.width;
				while(_g7 < _g16) {
					var x2 = _g7++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime__$internal_format_BMPType = $hxEnums["lime._internal.format.BMPType"] = { __ename__ : "lime._internal.format.BMPType", __constructs__ : ["RGB","BITFIELD","ICO"]
	,RGB: {_hx_index:0,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,BITFIELD: {_hx_index:1,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,ICO: {_hx_index:2,__enum__:"lime._internal.format.BMPType",toString:$estr}
};
var lime__$internal_format_Base64 = function() { };
$hxClasses["lime._internal.format.Base64"] = lime__$internal_format_Base64;
lime__$internal_format_Base64.__name__ = "lime._internal.format.Base64";
lime__$internal_format_Base64.decode = function(source) {
	return haxe_crypto_Base64.decode(source);
};
lime__$internal_format_Base64.encode = function(source) {
	var result = [];
	var dictionary = lime__$internal_format_Base64.DICTIONARY;
	var extendedDictionary = lime__$internal_format_Base64.EXTENDED_DICTIONARY;
	var numBytes = source.length;
	var numInputTriplets = Math.floor(numBytes / 3);
	var numChunksToWrite = numInputTriplets * 2;
	result.length = Math.ceil(numBytes / 3) * 2;
	var numBytesRead = 0;
	var numChunksWritten = 0;
	var inputTriplet;
	while(numChunksWritten < numChunksToWrite) {
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8 | source.b[numBytesRead + 2];
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = extendedDictionary[inputTriplet & 4095];
		numBytesRead += 3;
		numChunksWritten += 2;
	}
	switch(numBytes - numInputTriplets * 3) {
	case 1:
		inputTriplet = source.b[numBytesRead] << 16;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = "==";
		break;
	case 2:
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = dictionary[inputTriplet >> 6 & 63] + "=";
		break;
	default:
	}
	return result.join("");
};
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = "lime._internal.format.Deflate";
lime__$internal_format_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = "lime._internal.format.GZip";
lime__$internal_format_GZip.compress = function(bytes) {
	var data = pako.gzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = pako.ungzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_JPEG = function() { };
$hxClasses["lime._internal.format.JPEG"] = lime__$internal_format_JPEG;
lime__$internal_format_JPEG.__name__ = "lime._internal.format.JPEG";
lime__$internal_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = "lime._internal.format.LZMA";
lime__$internal_format_LZMA.compress = function(bytes) {
	return null;
};
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_PNG = function() { };
$hxClasses["lime._internal.format.PNG"] = lime__$internal_format_PNG;
lime__$internal_format_PNG.__name__ = "lime._internal.format.PNG";
lime__$internal_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = "lime._internal.format.Zlib";
lime__$internal_format_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = "lime._internal.graphics.ImageCanvasUtil";
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var array = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = sourceImage.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(sourceRect.x + alphaPoint.x,sourceRect.y + alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var array = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer1,0);
			} else {
				this1 = new Uint8Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.get_transparent() ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.get_transparent() ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel32(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixels(image,rect,format);
};
lime__$internal_graphics_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime__$internal_graphics_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = "lime._internal.graphics.ImageDataUtil";
lime__$internal_graphics_ImageDataUtil.displaceMap = function(target,source,map,mapPoint,componentX,componentY,smooth) {
	var targetData = target.buffer.data;
	var sourceData = source.buffer.data;
	var mapData = map.buffer.data;
	var targetFormat = target.buffer.format;
	var sourceFormat = source.buffer.format;
	var mapFormat = map.buffer.format;
	var targetPremultiplied = target.get_premultiplied();
	var sourcePremultiplied = source.get_premultiplied();
	var mapPremultiplied = map.get_premultiplied();
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(source);
	var mapView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(map);
	var row;
	var sourceOffset;
	var sourcePixel;
	var mapPixel;
	var targetPixel;
	var mapPixelX;
	var mapPixelY;
	var mapPixelA;
	var s1;
	var s2;
	var s3;
	var s4;
	var mPointXFloor;
	var mPointYFloor;
	var disOffsetXFloor;
	var disOffsetYFloor;
	var disX;
	var disY;
	var _g = 0;
	var _g1 = sourceView.height;
	while(_g < _g1) {
		var y = _g++;
		row = sourceView.byteOffset + sourceView.stride * y;
		var _g2 = 0;
		var _g11 = sourceView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			sourceOffset = row + x * 4;
			mPointXFloor = mapPoint.x | 0;
			mPointYFloor = mapPoint.y | 0;
			if(smooth) {
				var offset = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor) * 4;
				var format = mapFormat;
				var premultiplied = mapPremultiplied;
				if(premultiplied == null) {
					premultiplied = false;
				}
				if(format == null) {
					format = 0;
				}
				switch(format) {
				case 0:
					s1 = (mapData[offset] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset + 2] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				case 1:
					s1 = (mapData[offset + 1] & 255) << 24 | (mapData[offset + 2] & 255) << 16 | (mapData[offset + 3] & 255) << 8 | mapData[offset] & 255;
					break;
				case 2:
					s1 = (mapData[offset + 2] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				}
				if(premultiplied) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset1 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor + 1) * 4;
				var format1 = mapFormat;
				var premultiplied1 = mapPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				switch(format1) {
				case 0:
					s2 = (mapData[offset1] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1 + 2] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				case 1:
					s2 = (mapData[offset1 + 1] & 255) << 24 | (mapData[offset1 + 2] & 255) << 16 | (mapData[offset1 + 3] & 255) << 8 | mapData[offset1] & 255;
					break;
				case 2:
					s2 = (mapData[offset1 + 2] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				}
				if(premultiplied1) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset2 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor + 1) * 4;
				var format2 = mapFormat;
				var premultiplied2 = mapPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				switch(format2) {
				case 0:
					s3 = (mapData[offset2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2 + 2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				case 1:
					s3 = (mapData[offset2 + 1] & 255) << 24 | (mapData[offset2 + 2] & 255) << 16 | (mapData[offset2 + 3] & 255) << 8 | mapData[offset2] & 255;
					break;
				case 2:
					s3 = (mapData[offset2 + 2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				}
				if(premultiplied2) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset3 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format3 = mapFormat;
				var premultiplied3 = mapPremultiplied;
				if(premultiplied3 == null) {
					premultiplied3 = false;
				}
				if(format3 == null) {
					format3 = 0;
				}
				switch(format3) {
				case 0:
					s4 = (mapData[offset3] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3 + 2] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				case 1:
					s4 = (mapData[offset3 + 1] & 255) << 24 | (mapData[offset3 + 2] & 255) << 16 | (mapData[offset3 + 3] & 255) << 8 | mapData[offset3] & 255;
					break;
				case 2:
					s4 = (mapData[offset3 + 2] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				}
				if(premultiplied3) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				mapPixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,mapPoint.x - mPointXFloor,mapPoint.y - mPointYFloor);
			} else {
				var offset4 = mapView.byteOffset + mapView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format4 = mapFormat;
				var premultiplied4 = mapPremultiplied;
				if(premultiplied4 == null) {
					premultiplied4 = false;
				}
				if(format4 == null) {
					format4 = 0;
				}
				switch(format4) {
				case 0:
					mapPixel = (mapData[offset4] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4 + 2] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				case 1:
					mapPixel = (mapData[offset4 + 1] & 255) << 24 | (mapData[offset4 + 2] & 255) << 16 | (mapData[offset4 + 3] & 255) << 8 | mapData[offset4] & 255;
					break;
				case 2:
					mapPixel = (mapData[offset4 + 2] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				}
				if(premultiplied4) {
					if((mapPixel & 255) != 0 && (mapPixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (mapPixel & 255);
						mapPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((mapPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((mapPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((mapPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | mapPixel & 255 & 255;
					}
				}
			}
			mapPixelA = (mapPixel & 255) / 255.0;
			mapPixelX = ((mapPixel >>> 24 & 255) - 128) / 255.0 * mapPixelA;
			mapPixelY = ((mapPixel >>> 16 & 255) - 128) / 255.0 * mapPixelA;
			disX = mapPixelX * componentX.x + mapPixelY * componentY.x;
			disY = mapPixelX * componentX.y + mapPixelY * componentY.y;
			disOffsetXFloor = Math.floor(disX * sourceView.width);
			disOffsetYFloor = Math.floor(disY * sourceView.height);
			if(smooth) {
				var offset5 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor) * 4;
				var format5 = sourceFormat;
				var premultiplied5 = sourcePremultiplied;
				if(premultiplied5 == null) {
					premultiplied5 = false;
				}
				if(format5 == null) {
					format5 = 0;
				}
				switch(format5) {
				case 0:
					s1 = (sourceData[offset5] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5 + 2] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				case 1:
					s1 = (sourceData[offset5 + 1] & 255) << 24 | (sourceData[offset5 + 2] & 255) << 16 | (sourceData[offset5 + 3] & 255) << 8 | sourceData[offset5] & 255;
					break;
				case 2:
					s1 = (sourceData[offset5 + 2] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				}
				if(premultiplied5) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset6 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor + 1) * 4;
				var format6 = sourceFormat;
				var premultiplied6 = sourcePremultiplied;
				if(premultiplied6 == null) {
					premultiplied6 = false;
				}
				if(format6 == null) {
					format6 = 0;
				}
				switch(format6) {
				case 0:
					s2 = (sourceData[offset6] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6 + 2] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				case 1:
					s2 = (sourceData[offset6 + 1] & 255) << 24 | (sourceData[offset6 + 2] & 255) << 16 | (sourceData[offset6 + 3] & 255) << 8 | sourceData[offset6] & 255;
					break;
				case 2:
					s2 = (sourceData[offset6 + 2] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				}
				if(premultiplied6) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset7 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor + 1) * 4;
				var format7 = sourceFormat;
				var premultiplied7 = sourcePremultiplied;
				if(premultiplied7 == null) {
					premultiplied7 = false;
				}
				if(format7 == null) {
					format7 = 0;
				}
				switch(format7) {
				case 0:
					s3 = (sourceData[offset7] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7 + 2] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				case 1:
					s3 = (sourceData[offset7 + 1] & 255) << 24 | (sourceData[offset7 + 2] & 255) << 16 | (sourceData[offset7 + 3] & 255) << 8 | sourceData[offset7] & 255;
					break;
				case 2:
					s3 = (sourceData[offset7 + 2] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				}
				if(premultiplied7) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset8 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format8 = sourceFormat;
				var premultiplied8 = sourcePremultiplied;
				if(premultiplied8 == null) {
					premultiplied8 = false;
				}
				if(format8 == null) {
					format8 = 0;
				}
				switch(format8) {
				case 0:
					s4 = (sourceData[offset8] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8 + 2] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				case 1:
					s4 = (sourceData[offset8 + 1] & 255) << 24 | (sourceData[offset8 + 2] & 255) << 16 | (sourceData[offset8 + 3] & 255) << 8 | sourceData[offset8] & 255;
					break;
				case 2:
					s4 = (sourceData[offset8 + 2] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				}
				if(premultiplied8) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				sourcePixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,disX * sourceView.width - disOffsetXFloor,disY * sourceView.height - disOffsetYFloor);
			} else {
				var offset9 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format9 = sourceFormat;
				var premultiplied9 = sourcePremultiplied;
				if(premultiplied9 == null) {
					premultiplied9 = false;
				}
				if(format9 == null) {
					format9 = 0;
				}
				switch(format9) {
				case 0:
					sourcePixel = (sourceData[offset9] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9 + 2] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[offset9 + 1] & 255) << 24 | (sourceData[offset9 + 2] & 255) << 16 | (sourceData[offset9 + 3] & 255) << 8 | sourceData[offset9] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[offset9 + 2] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				}
				if(premultiplied9) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
			}
			var format10 = targetFormat;
			var premultiplied10 = targetPremultiplied;
			if(premultiplied10 == null) {
				premultiplied10 = false;
			}
			if(format10 == null) {
				format10 = 0;
			}
			if(premultiplied10) {
				if((sourcePixel & 255) == 0) {
					if(sourcePixel != 0) {
						sourcePixel = 0;
					}
				} else if((sourcePixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
					sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(format10) {
			case 0:
				targetData[sourceOffset] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			case 1:
				targetData[sourceOffset] = sourcePixel & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 3] = sourcePixel >>> 8 & 255;
				break;
			case 2:
				targetData[sourceOffset] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			}
		}
	}
	target.dirty = true;
	target.version++;
};
lime__$internal_graphics_ImageDataUtil.bilinear = function(s1,s2,s3,s4,su,sv) {
	return lime__$internal_graphics_ImageDataUtil.lerpRGBA(lime__$internal_graphics_ImageDataUtil.lerpRGBA(s4,s2,su),lime__$internal_graphics_ImageDataUtil.lerpRGBA(s1,s3,su),sv);
};
lime__$internal_graphics_ImageDataUtil.lerpRGBA = function(v0,v1,x) {
	var this1 = 0;
	var result = this1;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 24 & 255,v1 >>> 24 & 255,x));
	result = (value & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value1 = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 16 & 255,v1 >>> 16 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value2 = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 8 & 255,v1 >>> 8 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | result & 255 & 255;
	var value3 = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 & 255,v1 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | value3 & 255;
	return result;
};
lime__$internal_graphics_ImageDataUtil.lerp4f = function(v0,v1,x) {
	return new lime_math_Vector4(lime__$internal_graphics_ImageDataUtil.lerp(v0.x,v1.x,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.y,v1.y,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.z,v1.z,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.w,v1.w,x));
};
lime__$internal_graphics_ImageDataUtil.lerp = function(v0,v1,x) {
	return (1.0 - x) * v0 + x * v1;
};
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			offset = row + x * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			var format2 = format;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel._hx_index) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel._hx_index) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g11 = destView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent() || !mergeAlpha && !image.get_transparent() && sourceImage.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g11 = destView.width;
					while(_g2 < _g11) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g3 = 0;
				var _g12 = destView.height;
				while(_g3 < _g12) {
					var y1 = _g3++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y1;
					destPosition = destView.byteOffset + destView.stride * y1;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g4 = 0;
				var _g13 = destView.height;
				while(_g4 < _g13) {
					var y2 = _g4++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y2;
					destPosition = destView.byteOffset + destView.stride * y2;
					var _g5 = 0;
					var _g14 = destView.width;
					while(_g5 < _g14) {
						var x1 = _g5++;
						var format3 = sourceFormat;
						var premultiplied3 = sourcePremultiplied;
						if(premultiplied3 == null) {
							premultiplied3 = false;
						}
						if(format3 == null) {
							format3 = 0;
						}
						switch(format3) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied3) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format4 = destFormat;
						var premultiplied4 = destPremultiplied;
						if(premultiplied4 == null) {
							premultiplied4 = false;
						}
						if(format4 == null) {
							format4 = 0;
						}
						if(premultiplied4) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format4) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(sourceView.x + (alphaPoint == null ? 0 : alphaPoint.x),sourceView.y + (alphaPoint == null ? 0 : alphaPoint.y),sourceView.width,sourceView.height));
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g6 = 0;
				var _g15 = destView.height;
				while(_g6 < _g15) {
					var y3 = _g6++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y3;
					destPosition = destView.byteOffset + destView.stride * y3;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y3;
					var _g7 = 0;
					var _g16 = destView.width;
					while(_g7 < _g16) {
						var x2 = _g7++;
						var format5 = sourceFormat;
						var premultiplied5 = sourcePremultiplied;
						if(premultiplied5 == null) {
							premultiplied5 = false;
						}
						if(format5 == null) {
							format5 = 0;
						}
						switch(format5) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied5) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format6 = destFormat;
						var premultiplied6 = destPremultiplied;
						if(premultiplied6 == null) {
							premultiplied6 = false;
						}
						if(format6 == null) {
							format6 = 0;
						}
						switch(format6) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied6) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						var format7 = alphaFormat;
						var premultiplied7 = false;
						if(premultiplied7 == null) {
							premultiplied7 = false;
						}
						if(format7 == null) {
							format7 = 0;
						}
						switch(format7) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied7) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value4 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value4 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value5 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value6 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
							var value7 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value7 & 255;
							var format8 = destFormat;
							var premultiplied8 = destPremultiplied;
							if(premultiplied8 == null) {
								premultiplied8 = false;
							}
							if(format8 == null) {
								format8 = 0;
							}
							if(premultiplied8) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(format8) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g8 = 0;
				var _g17 = destView.height;
				while(_g8 < _g17) {
					var y4 = _g8++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y4;
					destPosition = destView.byteOffset + destView.stride * y4;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y4;
					var _g9 = 0;
					var _g18 = destView.width;
					while(_g9 < _g18) {
						var x3 = _g9++;
						var format9 = sourceFormat;
						var premultiplied9 = sourcePremultiplied;
						if(premultiplied9 == null) {
							premultiplied9 = false;
						}
						if(format9 == null) {
							format9 = 0;
						}
						switch(format9) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied9) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format10 = alphaFormat;
						var premultiplied10 = false;
						if(premultiplied10 == null) {
							premultiplied10 = false;
						}
						if(format10 == null) {
							format10 = 0;
						}
						switch(format10) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied10) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						var value8 = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value8 & 255;
						var format11 = destFormat;
						var premultiplied11 = destPremultiplied;
						if(premultiplied11 == null) {
							premultiplied11 = false;
						}
						if(format11 == null) {
							format11 = 0;
						}
						if(premultiplied11) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format11) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var offset = row + x * 4;
			var format2 = format1;
			var premultiplied1 = false;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied1) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var format2 = format1;
	var premultiplied1 = premultiplied;
	if(premultiplied1 == null) {
		premultiplied1 = false;
	}
	if(format2 == null) {
		format2 = 0;
	}
	switch(format2) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied1) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			var format3 = format1;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format3 == null) {
				format3 = 0;
			}
			switch(format3) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied2) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				var format4 = format1;
				var premultiplied3 = false;
				if(premultiplied3 == null) {
					premultiplied3 = false;
				}
				if(format4 == null) {
					format4 = 0;
				}
				if(premultiplied3) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) {
							fillColor = 0;
						}
					} else if((fillColor & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format4) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength,color) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	lime__$internal_graphics_StackBlur.blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
	image.dirty = true;
	image.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	return image;
};
lime__$internal_graphics_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		break;
	case 2:
		var bgra = color;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba2;
		var bgra1 = mask;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba3;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		hit = false;
		var _g2 = 0;
		var _g11 = image.height;
		while(_g2 < _g11) {
			var y = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g21 = 0;
	var _g3 = image.width;
	while(_g21 < _g3) {
		var x1 = _g21++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g22 = 0;
		var _g31 = image.height;
		while(_g22 < _g31) {
			var y1 = _g22++;
			pixel = image.getPixel32(ix,y1,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g4 = 0;
	var _g5 = image.height;
	while(_g4 < _g5) {
		var y2 = _g4++;
		hit = false;
		var _g41 = 0;
		var _g51 = image.width;
		while(_g41 < _g51) {
			var x2 = _g41++;
			pixel = image.getPixel32(x2,y2,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) {
					top = y2;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g6 = 0;
	var _g7 = image.height;
	while(_g6 < _g7) {
		var y3 = _g6++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g61 = 0;
		var _g71 = image.width;
		while(_g61 < _g71) {
			var x3 = _g61++;
			pixel = image.getPixel32(x3,iy,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime__$internal_graphics_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime__$internal_graphics_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g11 = destView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var format = sourceFormat;
			var premultiplied = sourcePremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = false;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = true;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var array = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	var _g1 = newHeight;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g11 = newWidth;
		while(_g2 < _g11) {
			var x = _g2++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			sourceIndexX = sourceX < imageWidth - 1 ? sourceIndex + 4 : sourceIndex;
			sourceIndexY = sourceY < imageHeight - 1 ? sourceIndex + imageWidth * 4 : sourceIndex;
			sourceIndexXY = sourceIndexX != sourceIndex ? sourceIndexY + 4 : sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var array = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g = 0;
	var _g1 = buffer.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g11 = buffer.width;
		while(_g2 < _g11) {
			var x = _g2++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	var _g2 = length;
	while(_g1 < _g2) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	var this3 = 0;
	var source = this3;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			source = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format2 = image.buffer.format;
	var premultiplied1 = image.buffer.premultiplied;
	if(premultiplied1 == null) {
		premultiplied1 = false;
	}
	if(format2 == null) {
		format2 = 0;
	}
	if(premultiplied1) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format2) {
	case 0:
		data1[offset1] = pixel >>> 24 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >>> 24 & 255;
		data1[offset1 + 2] = pixel >>> 16 & 255;
		data1[offset1 + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data1[offset1] = pixel >>> 8 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format1) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied1) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (argb2 >>> 16 & 255 & 255) << 24 | (argb2 >>> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >>> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var this5 = 0;
		var rgba4 = this5;
		rgba4 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var this6 = 0;
		var rgba5 = this6;
		rgba5 = (bgra2 >>> 8 & 255 & 255) << 24 | (bgra2 >>> 16 & 255 & 255) << 16 | (bgra2 >>> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g11 = destView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var format1 = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1 = pixelMask >>> 24 & 255;
			var tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				value = _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1;
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					value = _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1;
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						value = _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1;
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						value = tmp1 != tmp2 ? _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1 : 0;
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				var format2 = destFormat;
				var premultiplied1 = destPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied1) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				var format3 = destFormat;
				var premultiplied2 = destPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format3 == null) {
					format3 = 0;
				}
				if(premultiplied2) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(format3) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = true;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = false;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.__boxBlur = function(imgA,imgB,w,h,bx,by) {
	imgB.set(imgA);
	var bx1 = bx | 0;
	var by1 = by | 0;
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,0);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,1);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,2);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,3);
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g11 = by1;
		while(_g2 < _g11) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g21 = 0;
		var _g3 = by1 + 1;
		while(_g21 < _g3) {
			var j1 = _g21++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g4 = by1 + 1;
		var _g5 = h - by1;
		while(_g4 < _g5) {
			var j2 = _g4++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g6 = h - by1;
		var _g7 = h;
		while(_g6 < _g7) {
			var j3 = _g6++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr1 = 1 / (by1 + by1 + 1);
	var ws1 = w * 4;
	var ti1;
	var li1;
	var ri1;
	var fv1;
	var lv1;
	var val1;
	var _g8 = 0;
	var _g12 = w;
	while(_g8 < _g12) {
		var i1 = _g8++;
		ti1 = i1 * 4 + 1;
		li1 = ti1;
		ri1 = ti1 + by1 * ws1;
		fv1 = imgA[ti1];
		lv1 = imgA[ti1 + ws1 * (h - 1)];
		val1 = (by1 + 1) * fv1;
		var _g9 = 0;
		var _g13 = by1;
		while(_g9 < _g13) {
			var j4 = _g9++;
			val1 = val1 + imgA[ti1 + j4 * ws1];
		}
		var _g22 = 0;
		var _g31 = by1 + 1;
		while(_g22 < _g31) {
			var j5 = _g22++;
			val1 = val1 + (imgA[ri1] - fv1);
			imgB[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
			ri1 += ws1;
			ti1 += ws1;
		}
		var _g41 = by1 + 1;
		var _g51 = h - by1;
		while(_g41 < _g51) {
			var j6 = _g41++;
			val1 = val1 + (imgA[ri1] - imgA[li1]);
			imgB[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
			li1 += ws1;
			ri1 += ws1;
			ti1 += ws1;
		}
		var _g61 = h - by1;
		var _g71 = h;
		while(_g61 < _g71) {
			var j7 = _g61++;
			val1 = val1 + (lv1 - imgA[li1]);
			imgB[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
			li1 += ws1;
			ti1 += ws1;
		}
	}
	var iarr2 = 1 / (by1 + by1 + 1);
	var ws2 = w * 4;
	var ti2;
	var li2;
	var ri2;
	var fv2;
	var lv2;
	var val2;
	var _g10 = 0;
	var _g14 = w;
	while(_g10 < _g14) {
		var i2 = _g10++;
		ti2 = i2 * 4 + 2;
		li2 = ti2;
		ri2 = ti2 + by1 * ws2;
		fv2 = imgA[ti2];
		lv2 = imgA[ti2 + ws2 * (h - 1)];
		val2 = (by1 + 1) * fv2;
		var _g15 = 0;
		var _g16 = by1;
		while(_g15 < _g16) {
			var j8 = _g15++;
			val2 = val2 + imgA[ti2 + j8 * ws2];
		}
		var _g23 = 0;
		var _g32 = by1 + 1;
		while(_g23 < _g32) {
			var j9 = _g23++;
			val2 = val2 + (imgA[ri2] - fv2);
			imgB[ti2] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val2) * iarr2);
			ri2 += ws2;
			ti2 += ws2;
		}
		var _g42 = by1 + 1;
		var _g52 = h - by1;
		while(_g42 < _g52) {
			var j10 = _g42++;
			val2 = val2 + (imgA[ri2] - imgA[li2]);
			imgB[ti2] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val2) * iarr2);
			li2 += ws2;
			ri2 += ws2;
			ti2 += ws2;
		}
		var _g62 = h - by1;
		var _g72 = h;
		while(_g62 < _g72) {
			var j11 = _g62++;
			val2 = val2 + (lv2 - imgA[li2]);
			imgB[ti2] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val2) * iarr2);
			li2 += ws2;
			ti2 += ws2;
		}
	}
	var iarr3 = 1 / (by1 + by1 + 1);
	var ws3 = w * 4;
	var ti3;
	var li3;
	var ri3;
	var fv3;
	var lv3;
	var val3;
	var _g17 = 0;
	var _g18 = w;
	while(_g17 < _g18) {
		var i3 = _g17++;
		ti3 = i3 * 4 + 3;
		li3 = ti3;
		ri3 = ti3 + by1 * ws3;
		fv3 = imgA[ti3];
		lv3 = imgA[ti3 + ws3 * (h - 1)];
		val3 = (by1 + 1) * fv3;
		var _g19 = 0;
		var _g110 = by1;
		while(_g19 < _g110) {
			var j12 = _g19++;
			val3 = val3 + imgA[ti3 + j12 * ws3];
		}
		var _g24 = 0;
		var _g33 = by1 + 1;
		while(_g24 < _g33) {
			var j13 = _g24++;
			val3 = val3 + (imgA[ri3] - fv3);
			imgB[ti3] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val3) * iarr3);
			ri3 += ws3;
			ti3 += ws3;
		}
		var _g43 = by1 + 1;
		var _g53 = h - by1;
		while(_g43 < _g53) {
			var j14 = _g43++;
			val3 = val3 + (imgA[ri3] - imgA[li3]);
			imgB[ti3] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val3) * iarr3);
			li3 += ws3;
			ri3 += ws3;
			ti3 += ws3;
		}
		var _g63 = h - by1;
		var _g73 = h;
		while(_g63 < _g73) {
			var j15 = _g63++;
			val3 = val3 + (lv3 - imgA[li3]);
			imgB[ti3] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val3) * iarr3);
			li3 += ws3;
			ti3 += ws3;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurH = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var i = _g++;
		ti = i * w;
		li = ti;
		ri = ti + r;
		fv = imgA[ti * 4 + off];
		lv = imgA[(ti + w - 1) * 4 + off];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g11 = r;
		while(_g2 < _g11) {
			var j = _g2++;
			val = val + imgA[(ti + j) * 4 + off];
		}
		var _g21 = 0;
		var _g3 = r + 1;
		while(_g21 < _g3) {
			var j1 = _g21++;
			val = val + (imgA[ri * 4 + off] - fv);
			imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			++ri;
			++ti;
		}
		var _g4 = r + 1;
		var _g5 = w - r;
		while(_g4 < _g5) {
			var j2 = _g4++;
			val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			++ri;
			++li;
			++ti;
		}
		var _g6 = w - r;
		var _g7 = w;
		while(_g6 < _g7) {
			var j3 = _g6++;
			val = val + (lv - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			++li;
			++ti;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurT = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + off;
		li = ti;
		ri = ti + r * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g11 = r;
		while(_g2 < _g11) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g21 = 0;
		var _g3 = r + 1;
		while(_g21 < _g3) {
			var j1 = _g21++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g4 = r + 1;
		var _g5 = h - r;
		while(_g4 < _g5) {
			var j2 = _g4++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g6 = h - r;
		var _g7 = h;
		while(_g6 < _g7) {
			var j3 = _g6++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	var offset = 0;
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		offset = -1;
	} else {
		offset = 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	}
	return offset;
};
lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur = function(sigma,n) {
	var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
	var wl = Math.floor(wIdeal);
	if(wl % 2 == 0) {
		--wl;
	}
	var wu = wl + 2;
	var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
	var m = Math.round(mIdeal);
	var sizes = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		sizes.push(i < m ? wl : wu);
	}
	return sizes;
};
lime__$internal_graphics_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1 = n1 >>> 24 & 255;
	var tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * (destRect.width | 0) + destX);
	var s = lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset(sourceRect,destPoint,destX,destY);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = _$UInt_UInt_$Impl_$.toFloat(imgB[s + 3]) * strength | 0;
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,hasRow: function(y) {
		if(y >= 0) {
			return y < this.height;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_graphics_StackBlur = function() { };
$hxClasses["lime._internal.graphics.StackBlur"] = lime__$internal_graphics_StackBlur;
lime__$internal_graphics_StackBlur.__name__ = "lime._internal.graphics.StackBlur";
lime__$internal_graphics_StackBlur.blur = function(dest,source,sourceRect,destPoint,blurX,blurY,quality) {
	dest.copyPixels(source,sourceRect,destPoint);
	lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA(dest,sourceRect.width | 0,sourceRect.height | 0,blurX,blurY,quality);
};
lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA = function(image,width,height,blurX,blurY,quality) {
	var radiusX = Math.round(blurX) >> 1;
	var radiusY = Math.round(blurY) >> 1;
	if(lime__$internal_graphics_StackBlur.MUL_TABLE == null) {
		return;
	}
	if(radiusX >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusX = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusY >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusY = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusX < 0 || radiusY < 0) {
		return;
	}
	var iterations = quality;
	if(iterations < 1) {
		iterations = 1;
	}
	if(iterations > 3) {
		iterations = 3;
	}
	var px = image.get_data();
	var x;
	var y;
	var i;
	var p;
	var yp;
	var yi;
	var yw;
	var r;
	var g;
	var b;
	var a;
	var pr;
	var pg;
	var pb;
	var pa;
	var f;
	var divx = radiusX + radiusX + 1;
	var divy = radiusY + radiusY + 1;
	var w = width;
	var h = height;
	var w1 = w - 1;
	var h1 = h - 1;
	var rxp1 = radiusX + 1;
	var ryp1 = radiusY + 1;
	var ssx = new lime__$internal_graphics_BlurStack();
	var sx = ssx;
	var _g = 1;
	var _g1 = divx;
	while(_g < _g1) {
		var i1 = _g++;
		sx = sx.n = new lime__$internal_graphics_BlurStack();
	}
	sx.n = ssx;
	var ssy = new lime__$internal_graphics_BlurStack();
	var sy = ssy;
	var _g2 = 1;
	var _g3 = divy;
	while(_g2 < _g3) {
		var i2 = _g2++;
		sy = sy.n = new lime__$internal_graphics_BlurStack();
	}
	sy.n = ssy;
	var si = null;
	var mtx = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusX];
	var stx = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusX];
	var mty = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusY];
	var sty = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusY];
	while(iterations > 0) {
		--iterations;
		yi = 0;
		yw = yi;
		var ms = mtx;
		var ss = stx;
		y = h;
		while(true) {
			pr = px[yi];
			r = rxp1 * pr;
			pg = px[yi + 1];
			g = rxp1 * pg;
			pb = px[yi + 2];
			b = rxp1 * pb;
			pa = px[yi + 3];
			a = rxp1 * pa;
			sx = ssx;
			i = rxp1;
			while(true) {
				sx.r = pr;
				sx.g = pg;
				sx.b = pb;
				sx.a = pa;
				sx = sx.n;
				if(!(--i > -1)) {
					break;
				}
			}
			var _g4 = 1;
			var _g5 = rxp1;
			while(_g4 < _g5) {
				var i3 = _g4++;
				p = yi + ((w1 < i3 ? w1 : i3) << 2);
				r += sx.r = px[p];
				g += sx.g = px[p + 1];
				b += sx.b = px[p + 2];
				a += sx.a = px[p + 3];
				sx = sx.n;
			}
			si = ssx;
			var _g6 = 0;
			var _g7 = w;
			while(_g6 < _g7) {
				var x1 = _g6++;
				px[yi++] = r * ms >>> ss;
				px[yi++] = g * ms >>> ss;
				px[yi++] = b * ms >>> ss;
				px[yi++] = a * ms >>> ss;
				p = x1 + radiusX + 1;
				p = yw + (p < w1 ? p : w1) << 2;
				r -= si.r - (si.r = px[p]);
				g -= si.g - (si.g = px[p + 1]);
				b -= si.b - (si.b = px[p + 2]);
				a -= si.a - (si.a = px[p + 3]);
				si = si.n;
			}
			yw += w;
			if(!(--y > 0)) {
				break;
			}
		}
		ms = mty;
		ss = sty;
		var _g41 = 0;
		var _g51 = w;
		while(_g41 < _g51) {
			var x2 = _g41++;
			yi = x2 << 2;
			pr = px[yi];
			r = ryp1 * pr;
			pg = px[yi + 1];
			g = ryp1 * pg;
			pb = px[yi + 2];
			b = ryp1 * pb;
			pa = px[yi + 3];
			a = ryp1 * pa;
			sy = ssy;
			var _g42 = 0;
			var _g52 = ryp1;
			while(_g42 < _g52) {
				var i4 = _g42++;
				sy.r = pr;
				sy.g = pg;
				sy.b = pb;
				sy.a = pa;
				sy = sy.n;
			}
			yp = w;
			var _g61 = 1;
			var _g71 = radiusY + 1;
			while(_g61 < _g71) {
				var i5 = _g61++;
				yi = yp + x2 << 2;
				r += sy.r = px[yi];
				g += sy.g = px[yi + 1];
				b += sy.b = px[yi + 2];
				a += sy.a = px[yi + 3];
				sy = sy.n;
				if(i5 < h1) {
					yp += w;
				}
			}
			yi = x2;
			si = ssy;
			if(iterations > 0) {
				var _g8 = 0;
				var _g9 = h;
				while(_g8 < _g9) {
					var y1 = _g8++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						px[p] = r * ms >>> ss;
						px[p + 1] = g * ms >>> ss;
						px[p + 2] = b * ms >>> ss;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y1 + ryp1;
					p = x2 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			} else {
				var _g81 = 0;
				var _g91 = h;
				while(_g81 < _g91) {
					var y2 = _g81++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						f = 255 / pa;
						pr = (r * ms >>> ss) * f | 0;
						pg = (g * ms >>> ss) * f | 0;
						pb = (b * ms >>> ss) * f | 0;
						px[p] = pr > 255 ? 255 : pr;
						px[p + 1] = pg > 255 ? 255 : pg;
						px[p + 2] = pb > 255 ? 255 : pb;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y2 + ryp1;
					p = x2 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			}
		}
	}
};
var lime__$internal_graphics_BlurStack = function() {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	this.a = 0;
	this.n = null;
};
$hxClasses["lime._internal.graphics.BlurStack"] = lime__$internal_graphics_BlurStack;
lime__$internal_graphics_BlurStack.__name__ = "lime._internal.graphics.BlurStack";
lime__$internal_graphics_BlurStack.prototype = {
	__class__: lime__$internal_graphics_BlurStack
};
var lime__$internal_macros_AssetsMacro = function() { };
$hxClasses["lime._internal.macros.AssetsMacro"] = lime__$internal_macros_AssetsMacro;
lime__$internal_macros_AssetsMacro.__name__ = "lime._internal.macros.AssetsMacro";
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = "lime.app.Event";
lime_app_Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				this.error = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = "lime.app.Future";
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "lime/app/Future.hx", lineNumber : 209, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = "lime.app._Future.FutureWork";
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : ((e) instanceof js__$Boot_HaxeError) ? e.val : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = "lime.app.Promise";
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = "lime.app._Event_Dynamic_Void";
lime_app__$Event_$Dynamic_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = "lime.app._Event_Float_Float_Int_Void";
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Float_Void";
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Void";
lime_app__$Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = "lime.app._Event_Int_Int_Void";
lime_app__$Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = "lime.app._Event_Int_Void";
lime_app__$Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = "lime.app._Event_String_Int_Int_Void";
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = "lime.app._Event_String_Void";
lime_app__$Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = "lime.app._Event_Void_Void";
lime_app__$Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = "lime.app._Event_lime_ui_Touch_Void";
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = "lime.app._Event_lime_ui_Window_Void";
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = "lime.app._Event_ofEvents_T_Void";
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._CairoRenderContext.CairoRenderContext_Impl_"] = lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$;
lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$.__name__ = "lime.graphics._CairoRenderContext.CairoRenderContext_Impl_";
lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.cairo;
};
var lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._Canvas2DRenderContext.Canvas2DRenderContext_Impl_"] = lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$;
lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$.__name__ = "lime.graphics._Canvas2DRenderContext.Canvas2DRenderContext_Impl_";
lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.canvas2D;
};
var lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._DOMRenderContext.DOMRenderContext_Impl_"] = lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$;
lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$.__name__ = "lime.graphics._DOMRenderContext.DOMRenderContext_Impl_";
lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.dom;
};
var lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._FlashRenderContext.FlashRenderContext_Impl_"] = lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$;
lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$.__name__ = "lime.graphics._FlashRenderContext.FlashRenderContext_Impl_";
lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type._hx_index) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var array = null;
				var view = null;
				var buffer1 = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer1 != null) {
					if(len == null) {
						this1 = new Uint8Array(buffer1,0);
					} else {
						this1 = new Uint8Array(buffer1,0,len);
					}
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = "lime.graphics.Image";
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromBytes(bytes)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes(bytes,type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel._hx_index) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel._hx_index) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		if(alphaImage == sourceImage && (alphaPoint == null || alphaPoint.x == 0 && alphaPoint.y == 0)) {
			alphaImage = null;
			alphaPoint = null;
		}
		switch(this.type._hx_index) {
		case 0:
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			return lime__$internal_format_PNG.encode(this);
		} else {
			switch(format._hx_index) {
			case 0:
				return lime__$internal_format_BMP.encode(this);
			case 1:
				return lime__$internal_format_JPEG.encode(this,quality);
			case 2:
				return lime__$internal_format_PNG.encode(this);
			}
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			lime__$internal_graphics_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime__$internal_graphics_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		if(endian == null) {
			endian = lime_system_Endian.BIG_ENDIAN;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			return lime__$internal_graphics_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb1 = this2;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb2 = this3;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var this4 = 0;
				var argb3 = this4;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >>> 24 & 255 & 255) << 16 | (rgba2 >>> 16 & 255 & 255) << 8 | rgba2 >>> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var this5 = 0;
					var argb4 = this5;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >>> 8 & 255 & 255) << 16 | (bgra1 >>> 16 & 255 & 255) << 8 | bgra1 >>> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var this6 = 0;
					var argb5 = this6;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >>> 24 & 255 & 255) << 16 | (rgba3 >>> 16 & 255 & 255) << 8 | rgba3 >>> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime__$internal_format_Base64.encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			if(newWidth == this.buffer.width && newHeight == this.buffer.height) {
				return value;
			}
			switch(this.type._hx_index) {
			case 0:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 1:
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type._hx_index) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = "lime.graphics.ImageBuffer";
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var array = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var elements1 = null;
			var array1 = null;
			var view1 = this.data;
			var buffer2 = null;
			var len1 = null;
			var this2;
			if(elements1 != null) {
				this2 = new Uint8Array(elements1);
			} else if(array1 != null) {
				this2 = new Uint8Array(array1);
			} else if(view1 != null) {
				this2 = new Uint8Array(view1);
			} else if(buffer2 != null) {
				if(len1 == null) {
					this2 = new Uint8Array(buffer2,0);
				} else {
					this2 = new Uint8Array(buffer2,0,len1);
				}
			} else {
				this2 = null;
			}
			var copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(((value) instanceof Image)) {
			this.__srcImage = value;
		} else if(((value) instanceof HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * (this.bitsPerPixel / 8 | 0);
	}
	,__class__: lime_graphics_ImageBuffer
};
var lime_graphics_ImageChannel = $hxEnums["lime.graphics.ImageChannel"] = { __ename__ : "lime.graphics.ImageChannel", __constructs__ : ["RED","GREEN","BLUE","ALPHA"]
	,RED: {_hx_index:0,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,GREEN: {_hx_index:1,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,BLUE: {_hx_index:2,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,ALPHA: {_hx_index:3,__enum__:"lime.graphics.ImageChannel",toString:$estr}
};
var lime_graphics_ImageFileFormat = $hxEnums["lime.graphics.ImageFileFormat"] = { __ename__ : "lime.graphics.ImageFileFormat", __constructs__ : ["BMP","JPEG","PNG"]
	,BMP: {_hx_index:0,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,JPEG: {_hx_index:1,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,PNG: {_hx_index:2,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
};
var lime_graphics_ImageType = $hxEnums["lime.graphics.ImageType"] = { __ename__ : "lime.graphics.ImageType", __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"]
	,CANVAS: {_hx_index:0,__enum__:"lime.graphics.ImageType",toString:$estr}
	,DATA: {_hx_index:1,__enum__:"lime.graphics.ImageType",toString:$estr}
	,FLASH: {_hx_index:2,__enum__:"lime.graphics.ImageType",toString:$estr}
	,CUSTOM: {_hx_index:3,__enum__:"lime.graphics.ImageType",toString:$estr}
};
var lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._OpenGLES2RenderContext.OpenGLES2RenderContext_Impl_"] = lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$;
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.__name__ = "lime.graphics._OpenGLES2RenderContext.OpenGLES2RenderContext_Impl_";
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromGL = function(gl) {
	return null;
};
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromOpenGLES3RenderContext = function(gl) {
	return null;
};
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromWebGLRenderContext = function(gl) {
	return null;
};
var lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._OpenGLES3RenderContext.OpenGLES3RenderContext_Impl_"] = lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$;
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.__name__ = "lime.graphics._OpenGLES3RenderContext.OpenGLES3RenderContext_Impl_";
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromGL = function(gl) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromOpenGLES2RenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromWebGLRenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromWebGL2RenderContext = function(context) {
	return null;
};
var lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._OpenGLRenderContext.OpenGLRenderContext_Impl_"] = lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$;
lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$.__name__ = "lime.graphics._OpenGLRenderContext.OpenGLRenderContext_Impl_";
lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = "lime.graphics.RenderContext";
lime_graphics_RenderContext.prototype = {
	__class__: lime_graphics_RenderContext
};
var lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._WebGL2RenderContext.WebGL2RenderContext_Impl_"] = lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$;
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.__name__ = "lime.graphics._WebGL2RenderContext.WebGL2RenderContext_Impl_";
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.bufferSubData = function(this1,target,dstByteOffset,srcData,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform1fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform1iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform3fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform3iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform4fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform4iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.fromGL = function(gl) {
	return null;
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.webgl2;
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.toWebGLRenderContext = function(gl) {
	return gl;
};
var lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._WebGLRenderContext.WebGLRenderContext_Impl_"] = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$;
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.__name__ = "lime.graphics._WebGLRenderContext.WebGLRenderContext_Impl_";
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData = function(this1,target,srcData,usage) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,null);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferSubData = function(this1,target,offset,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferSubData(target,offset,srcData,srcOffset,null);
	} else {
		this1.bufferSubData(target,offset,srcData);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,null);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,null);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	var dstOffset = null;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext = function(gl) {
	return gl;
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.webgl;
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = "lime.graphics.cairo.Cairo";
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,getOperator: function() {
		return 0;
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,rotate: function(amount) {
	}
	,save: function() {
	}
	,scale: function(x,y) {
	}
	,setFontSize: function(size) {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = "lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_";
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = "lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_";
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = "lime.graphics.cairo.CairoGlyph";
lime_graphics_cairo_CairoGlyph.prototype = {
	__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = "lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_";
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = "lime.graphics.cairo._CairoPattern.CairoPattern_Impl_";
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = "lime.graphics.cairo._CairoSurface.CairoSurface_Impl_";
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = "lime.graphics.opengl.GL";
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.bindBufferRange(target,index,buffer,offset,lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.drawRangeElements(mode,start,end,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2fv(lime_graphics_opengl_GL.context,location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribIPointer(index,size,type,stride,offset);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(index,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) {
		return 0;
	} else {
		return object.id;
	}
};
var lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLProgram.GLProgram_Impl_"] = lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$;
lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$.__name__ = "lime.graphics.opengl._GLProgram.GLProgram_Impl_";
lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$.fromSources = function(gl,vertexSource,fragmentSource) {
	var vertexShader = lime_graphics_opengl__$GLShader_GLShader_$Impl_$.fromSource(gl,vertexSource,gl.VERTEX_SHADER);
	var fragmentShader = lime_graphics_opengl__$GLShader_GLShader_$Impl_$.fromSource(gl,fragmentSource,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	gl.attachShader(program,vertexShader);
	gl.attachShader(program,fragmentShader);
	gl.linkProgram(program);
	if(gl.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLProgram.hx", lineNumber : 39, className : "lime.graphics.opengl._GLProgram.GLProgram_Impl_", methodName : "fromSources"});
	}
	return program;
};
var lime_graphics_opengl__$GLShader_GLShader_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLShader.GLShader_Impl_"] = lime_graphics_opengl__$GLShader_GLShader_$Impl_$;
lime_graphics_opengl__$GLShader_GLShader_$Impl_$.__name__ = "lime.graphics.opengl._GLShader.GLShader_Impl_";
lime_graphics_opengl__$GLShader_GLShader_$Impl_$.fromSource = function(gl,source,type) {
	var shader = gl.createShader(type);
	gl.shaderSource(shader,source);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		var message;
		if(type == gl.VERTEX_SHADER) {
			message = "Error compiling vertex shader";
		} else if(type == gl.FRAGMENT_SHADER) {
			message = "Error compiling fragment shader";
		} else {
			message = "Error compiling unknown shader type";
		}
		message += "\n" + gl.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLShader.hx", lineNumber : 40, className : "lime.graphics.opengl._GLShader.GLShader_Impl_", methodName : "fromSource"});
	}
	return shader;
};
var lime_math__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math._ARGB.ARGB_Impl_"] = lime_math__$ARGB_ARGB_$Impl_$;
lime_math__$ARGB_ARGB_$Impl_$.__name__ = "lime.math._ARGB.ARGB_Impl_";
lime_math__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
lime_math__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math__$ARGB_ARGB_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255;
		}
	}
};
lime_math__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255;
	}
};
lime_math__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math__$ARGB_ARGB_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math._BGRA.BGRA_Impl_"] = lime_math__$BGRA_BGRA_$Impl_$;
lime_math__$BGRA_BGRA_$Impl_$.__name__ = "lime.math._BGRA.BGRA_Impl_";
lime_math__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
lime_math__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math__$BGRA_BGRA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math__$BGRA_BGRA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = "lime.math._ColorMatrix.ColorMatrix_Impl_";
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	var elements = null;
	var array = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(this1 != null) {
		this2 = new Float32Array(this1);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(this2);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	this1[0] += second[0];
	this1[6] += second[6];
	this1[12] += second[12];
	this1[18] += second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2;
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = "lime.math._Matrix4.Matrix4_Impl_";
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	var elements = null;
	var array = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(this1 != null) {
		this2 = new Float32Array(this1);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this2);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 187, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 225, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 272, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 310, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(this1,a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	this1[0] = a;
	this1[1] = b;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = c;
	this1[5] = d;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = tx;
	this1[13] = ty;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(this1,left,right,bottom,top,zNear,zFar) {
	var sx = 1.0 / (right - left);
	var sy = 1.0 / (top - bottom);
	var sz = 1.0 / (zFar - zNear);
	this1[0] = 2 * sx;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 2 * sy;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = -2 * sz;
	this1[11] = 0;
	this1[12] = -(left + right) * sx;
	this1[13] = -(bottom + top) * sy;
	this1[14] = -(zNear + zFar) * sz;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[3];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[7];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[11];
	return result;
};
lime_math__$Matrix4_Matrix4_$Impl_$.fromMatrix3 = function(matrix3) {
	var mat = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.create2D(mat,matrix3.a,matrix3.b,matrix3.c,matrix3.d,matrix3.tx,matrix3.ty);
	return mat;
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent,result) {
	if(result == null) {
		result = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	}
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(result,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return result;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,1,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = pos.x - at.x;
	result.y = pos.y - at.y;
	result.z = pos.z - at.z;
	var dir = result;
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l1 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l1 != 0) {
		vup.x /= l1;
		vup.y /= l1;
		vup.z /= l1;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	var result1 = null;
	if(result1 == null) {
		result1 = new lime_math_Vector4();
	}
	result1.x = vup.x - dir2.x;
	result1.y = vup.y - dir2.y;
	result1.z = vup.z - dir2.z;
	vup = result1;
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l2 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l2 != 0) {
			vup.x /= l2;
			vup.y /= l2;
			vup.z /= l2;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	var result2 = null;
	if(result2 == null) {
		result2 = new lime_math_Vector4();
	}
	var ya = vup.z * dir.x - vup.x * dir.z;
	var za = vup.x * dir.y - vup.y * dir.x;
	result2.x = vup.y * dir.z - vup.z * dir.y;
	result2.y = ya;
	result2.z = za;
	result2.w = 1;
	var right = result2;
	var l3 = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l3 != 0) {
		right.x /= l3;
		right.y /= l3;
		right.z /= l3;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
	result.w = x * this1[3] + y * this1[7] + z * this1[11] + this1[15];
	return result;
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp1 = this1[2];
	this1[2] = this1[8];
	this1[8] = temp1;
	var temp2 = this1[3];
	this1[3] = this1[12];
	this1[12] = temp2;
	var temp3 = this1[6];
	this1[6] = this1[9];
	this1[9] = temp3;
	var temp4 = this1[7];
	this1[7] = this1[13];
	this1[13] = temp4;
	var temp5 = this1[11];
	this1[11] = this1[14];
	this1[14] = temp5;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math._RGBA.RGBA_Impl_"] = lime_math__$RGBA_RGBA_$Impl_$;
lime_math__$RGBA_RGBA_$Impl_$.__name__ = "lime.math._RGBA.RGBA_Impl_";
lime_math__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
lime_math__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = "lime.math.Rectangle";
lime_math_Rectangle.prototype = {
	clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.containsVector(point);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,containsVector: function(vector) {
		return this.contains(vector.x,vector.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflateVector: function(vector) {
		this.inflate(vector.x,vector.y);
	}
	,intersection: function(toIntersect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			result.setEmpty();
			return result;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			result.setEmpty();
			return result;
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetVector: function(vector) {
		this.x += vector.x;
		this.y += vector.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,union: function(toUnion,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		if(this.width == 0 || this.height == 0) {
			result.copyFrom(toUnion);
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			result.copyFrom(this);
		} else {
			var x0 = this.x > toUnion.x ? toUnion.x : this.x;
			var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
			var y0 = this.y > toUnion.y ? toUnion.y : this.y;
			var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
			result.setTo(x0,y0,x1 - x0,y1 - y0);
		}
		return result;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = "lime.math.Vector4";
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l1 = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l1 != 0) {
		b0.x /= l1;
		b0.y /= l1;
		b0.z /= l1;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.distanceSquared = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return x * x + y * y + z * z;
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	add: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x + a.x;
		result.y = this.y + a.y;
		result.z = this.z + a.z;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		var ya = this.z * a.x - this.x * a.z;
		var za = this.x * a.y - this.y * a.x;
		result.x = this.y * a.z - this.z * a.y;
		result.y = ya;
		result.z = za;
		result.w = 1;
		return result;
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x - a.x;
		result.y = this.y - a.y;
		result.z = this.z - a.z;
		return result;
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = "lime.media.AudioBuffer";
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(lime__$internal_format_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + lime__$internal_format_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			switch(bytes.b[0]) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g2 = bytes.b[2];
		var _g11 = bytes.b[1];
		switch(bytes.b[0]) {
		case 73:
			if(_g11 == 68) {
				if(_g2 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g11) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "lime/media/AudioBuffer.hx", lineNumber : 362, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = "lime.media.AudioContext";
lime_media_AudioContext.prototype = {
	__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = "lime.media.AudioManager";
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
lime_media_AudioManager.resume = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.resumeDevice(device);
			alc.processContext(currentContext);
		}
	}
};
lime_media_AudioManager.shutdown = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.makeContextCurrent(null);
			alc.destroyContext(currentContext);
			if(device != null) {
				alc.closeDevice(device);
			}
		}
	}
	lime_media_AudioManager.context = null;
};
lime_media_AudioManager.suspend = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			alc.suspendContext(currentContext);
			var device = alc.getContextsDevice(currentContext);
			if(device != null) {
				alc.pauseDevice(device);
			}
		}
	}
};
var lime_media_FlashAudioContext = function() {
};
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = "lime.media.FlashAudioContext";
lime_media_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_media_FlashAudioContext
};
var lime_media_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = "lime.media.HTML5AudioContext";
lime_media_HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_media_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = "lime.media.OpenALAudioContext";
lime_media_OpenALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime_media_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_media_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_media_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_media_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_media_openal_AL.bufferiv(buffer,param,values);
	}
	,closeDevice: function(device) {
		return lime_media_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,createBuffer: function() {
		return lime_media_openal_AL.createBuffer();
	}
	,createSource: function() {
		return lime_media_openal_AL.createSource();
	}
	,deleteBuffer: function(buffer) {
		lime_media_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_media_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_media_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_media_openal_AL.deleteSources(sources);
	}
	,destroyContext: function(context) {
		if(context == null) {
			return;
		}
		lime_media_openal_ALC.destroyContext(context);
	}
	,disable: function(capability) {
		lime_media_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_media_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_media_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_media_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_media_openal_AL.enable(capability);
	}
	,genSource: function() {
		return this.createSource();
	}
	,genSources: function(n) {
		return lime_media_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return this.createBuffer();
	}
	,genBuffers: function(n) {
		return lime_media_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_media_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_media_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_media_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferiv(buffer,param,count);
	}
	,getContextsDevice: function(context) {
		if(context == null) {
			return null;
		}
		return lime_media_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_media_openal_ALC.getCurrentContext();
	}
	,getDouble: function(param) {
		return lime_media_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_media_openal_AL.getEnumValue(ename);
	}
	,getError: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getError();
		} else {
			return lime_media_openal_ALC.getError(device);
		}
	}
	,getErrorString: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getErrorString();
		} else {
			return lime_media_openal_ALC.getErrorString(device);
		}
	}
	,getFloat: function(param) {
		return lime_media_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_media_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count,device) {
		if(count == null) {
			count = 1;
		}
		if(device == null) {
			return lime_media_openal_AL.getIntegerv(param,count);
		} else {
			return lime_media_openal_ALC.getIntegerv(device,param,count);
		}
	}
	,getListener3f: function(param) {
		return lime_media_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_media_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_media_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_media_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_media_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_media_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_media_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_media_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_media_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param,device) {
		if(device == null) {
			return lime_media_openal_AL.getString(param);
		} else {
			return lime_media_openal_ALC.getString(device,param);
		}
	}
	,isBuffer: function(buffer) {
		return lime_media_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_media_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_media_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_media_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_media_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_media_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_media_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_media_openal_AL.listeneriv(param,values);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_media_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_media_openal_ALC.resumeDevice(device);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_media_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_media_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_media_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_media_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_media_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_media_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_media_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_media_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_media_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_media_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_media_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_media_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_media_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_media_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_media_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_media_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_media_openal_AL.speedOfSound(value);
	}
	,suspendContext: function(context) {
		lime_media_openal_ALC.suspendContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_AL = function() { };
$hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
lime_media_openal_AL.__name__ = "lime.media.openal.AL";
lime_media_openal_AL.removeDirectFilter = function(source) {
};
lime_media_openal_AL.removeSend = function(source,index) {
};
lime_media_openal_AL.auxf = function(aux,param,value) {
};
lime_media_openal_AL.auxfv = function(aux,param,values) {
};
lime_media_openal_AL.auxi = function(aux,param,value) {
};
lime_media_openal_AL.auxiv = function(aux,param,values) {
};
lime_media_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_media_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.bufferf = function(buffer,param,value) {
};
lime_media_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_media_openal_AL.bufferi = function(buffer,param,value) {
};
lime_media_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_media_openal_AL.createAux = function() {
	return null;
};
lime_media_openal_AL.createBuffer = function() {
	return null;
};
lime_media_openal_AL.createEffect = function() {
	return null;
};
lime_media_openal_AL.createFilter = function() {
	return null;
};
lime_media_openal_AL.createSource = function() {
	return null;
};
lime_media_openal_AL.deleteBuffer = function(buffer) {
};
lime_media_openal_AL.deleteBuffers = function(buffers) {
};
lime_media_openal_AL.deleteSource = function(source) {
};
lime_media_openal_AL.deleteSources = function(sources) {
};
lime_media_openal_AL.disable = function(capability) {
};
lime_media_openal_AL.distanceModel = function(distanceModel) {
};
lime_media_openal_AL.dopplerFactor = function(value) {
};
lime_media_openal_AL.dopplerVelocity = function(value) {
};
lime_media_openal_AL.effectf = function(effect,param,value) {
};
lime_media_openal_AL.effectfv = function(effect,param,values) {
};
lime_media_openal_AL.effecti = function(effect,param,value) {
};
lime_media_openal_AL.effectiv = function(effect,param,values) {
};
lime_media_openal_AL.enable = function(capability) {
};
lime_media_openal_AL.genSource = function() {
	return null;
};
lime_media_openal_AL.genSources = function(n) {
	return null;
};
lime_media_openal_AL.genBuffer = function() {
	return null;
};
lime_media_openal_AL.genBuffers = function(n) {
	return null;
};
lime_media_openal_AL.getBoolean = function(param) {
	return false;
};
lime_media_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getDouble = function(param) {
	return 0;
};
lime_media_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_media_openal_AL.getError = function() {
	return 0;
};
lime_media_openal_AL.getErrorString = function() {
	switch(lime_media_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_AL.getFilteri = function(filter,param) {
	return 0;
};
lime_media_openal_AL.getFloat = function(param) {
	return 0;
};
lime_media_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getInteger = function(param) {
	return 0;
};
lime_media_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListener3f = function(param) {
	return null;
};
lime_media_openal_AL.getListener3i = function(param) {
	return null;
};
lime_media_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_media_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_media_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getParameter = function(param) {
	return null;
};
lime_media_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_media_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getString = function(param) {
	return null;
};
lime_media_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_media_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_media_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_media_openal_AL.isAux = function(aux) {
	return false;
};
lime_media_openal_AL.isEffect = function(effect) {
	return false;
};
lime_media_openal_AL.isFilter = function(filter) {
	return false;
};
lime_media_openal_AL.isSource = function(source) {
	return false;
};
lime_media_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listenerf = function(param,value) {
};
lime_media_openal_AL.listenerfv = function(param,values) {
};
lime_media_openal_AL.listeneri = function(param,value) {
};
lime_media_openal_AL.listeneriv = function(param,values) {
};
lime_media_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.sourcef = function(source,param,value) {
};
lime_media_openal_AL.sourcefv = function(source,param,values) {
};
lime_media_openal_AL.sourcei = function(source,param,value) {
};
lime_media_openal_AL.filteri = function(filter,param,value) {
};
lime_media_openal_AL.filterf = function(filter,param,value) {
};
lime_media_openal_AL.sourceiv = function(source,param,values) {
};
lime_media_openal_AL.sourcePlay = function(source) {
};
lime_media_openal_AL.sourcePlayv = function(sources) {
};
lime_media_openal_AL.sourceStop = function(source) {
};
lime_media_openal_AL.sourceStopv = function(sources) {
};
lime_media_openal_AL.sourceRewind = function(source) {
};
lime_media_openal_AL.sourceRewindv = function(sources) {
};
lime_media_openal_AL.sourcePause = function(source) {
};
lime_media_openal_AL.sourcePausev = function(sources) {
};
lime_media_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_media_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_media_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_media_openal_AL.speedOfSound = function(value) {
};
var lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$ = {};
$hxClasses["lime.media.openal._ALAuxiliaryEffectSlot.ALAuxiliaryEffectSlot_Impl_"] = lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$;
lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$.__name__ = "lime.media.openal._ALAuxiliaryEffectSlot.ALAuxiliaryEffectSlot_Impl_";
lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
$hxClasses["lime.media.openal._ALBuffer.ALBuffer_Impl_"] = lime_media_openal__$ALBuffer_ALBuffer_$Impl_$;
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = "lime.media.openal._ALBuffer.ALBuffer_Impl_";
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = "lime.media.openal.ALC";
lime_media_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.destroyContext = function(context) {
};
lime_media_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_media_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_media_openal_ALC.getError = function(device) {
	return 0;
};
lime_media_openal_ALC.getErrorString = function(device) {
	switch(lime_media_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_media_openal_ALC.getString = function(device,param) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.pauseDevice = function(device) {
};
lime_media_openal_ALC.processContext = function(context) {
};
lime_media_openal_ALC.resumeDevice = function(device) {
};
lime_media_openal_ALC.suspendContext = function(context) {
};
var lime_media_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.media.openal._ALContext.ALContext_Impl_"] = lime_media_openal__$ALContext_ALContext_$Impl_$;
lime_media_openal__$ALContext_ALContext_$Impl_$.__name__ = "lime.media.openal._ALContext.ALContext_Impl_";
lime_media_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.media.openal._ALDevice.ALDevice_Impl_"] = lime_media_openal__$ALDevice_ALDevice_$Impl_$;
lime_media_openal__$ALDevice_ALDevice_$Impl_$.__name__ = "lime.media.openal._ALDevice.ALDevice_Impl_";
lime_media_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALEffect_ALEffect_$Impl_$ = {};
$hxClasses["lime.media.openal._ALEffect.ALEffect_Impl_"] = lime_media_openal__$ALEffect_ALEffect_$Impl_$;
lime_media_openal__$ALEffect_ALEffect_$Impl_$.__name__ = "lime.media.openal._ALEffect.ALEffect_Impl_";
lime_media_openal__$ALEffect_ALEffect_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALFilter_ALFilter_$Impl_$ = {};
$hxClasses["lime.media.openal._ALFilter.ALFilter_Impl_"] = lime_media_openal__$ALFilter_ALFilter_$Impl_$;
lime_media_openal__$ALFilter_ALFilter_$Impl_$.__name__ = "lime.media.openal._ALFilter.ALFilter_Impl_";
lime_media_openal__$ALFilter_ALFilter_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALSource_ALSource_$Impl_$ = {};
$hxClasses["lime.media.openal._ALSource.ALSource_Impl_"] = lime_media_openal__$ALSource_ALSource_$Impl_$;
lime_media_openal__$ALSource_ALSource_$Impl_$.__name__ = "lime.media.openal._ALSource.ALSource_Impl_";
lime_media_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_vorbis_VorbisComment = function() {
};
$hxClasses["lime.media.vorbis.VorbisComment"] = lime_media_vorbis_VorbisComment;
lime_media_vorbis_VorbisComment.__name__ = "lime.media.vorbis.VorbisComment";
lime_media_vorbis_VorbisComment.prototype = {
	__class__: lime_media_vorbis_VorbisComment
};
var lime_media_vorbis_VorbisFile = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.media.vorbis.VorbisFile"] = lime_media_vorbis_VorbisFile;
lime_media_vorbis_VorbisFile.__name__ = "lime.media.vorbis.VorbisFile";
lime_media_vorbis_VorbisFile.fromBytes = function(bytes) {
	return null;
};
lime_media_vorbis_VorbisFile.fromFile = function(path) {
	return null;
};
lime_media_vorbis_VorbisFile.prototype = {
	bitrate: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,bitrateInstant: function() {
		return 0;
	}
	,clear: function() {
	}
	,comment: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,crosslap: function(other) {
		return 0;
	}
	,info: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,pcmSeek: function(pos) {
		return 0;
	}
	,pcmSeekLap: function(pos) {
		return 0;
	}
	,pcmSeekPage: function(pos) {
		return 0;
	}
	,pcmSeekPageLap: function(pos) {
		return 0;
	}
	,pcmTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,pcmTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawSeek: function(pos) {
		return 0;
	}
	,rawSeekLap: function(pos) {
		return 0;
	}
	,rawTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,read: function(buffer,position,length,bigEndianPacking,wordSize,signed) {
		if(signed == null) {
			signed = true;
		}
		if(wordSize == null) {
			wordSize = 2;
		}
		if(bigEndianPacking == null) {
			bigEndianPacking = false;
		}
		if(length == null) {
			length = 4096;
		}
		return 0;
	}
	,readFloat: function(pcmChannels,samples) {
		return 0;
	}
	,seekable: function() {
		return false;
	}
	,serialNumber: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,streams: function() {
		return 0;
	}
	,timeSeek: function(s) {
		return 0;
	}
	,timeSeekLap: function(s) {
		return 0;
	}
	,timeSeekPage: function(s) {
		return 0;
	}
	,timeSeekPageLap: function(s) {
		return 0;
	}
	,timeTell: function() {
		return 0;
	}
	,timeTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,__class__: lime_media_vorbis_VorbisFile
};
var lime_media_vorbis_VorbisInfo = function() {
};
$hxClasses["lime.media.vorbis.VorbisInfo"] = lime_media_vorbis_VorbisInfo;
lime_media_vorbis_VorbisInfo.__name__ = "lime.media.vorbis.VorbisInfo";
lime_media_vorbis_VorbisInfo.prototype = {
	__class__: lime_media_vorbis_VorbisInfo
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = "lime.net._IHTTPRequest";
lime_net__$IHTTPRequest.__isInterface__ = true;
lime_net__$IHTTPRequest.prototype = {
	__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	cancel: function() {
		this.__backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = "lime.net.HTTPRequest";
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = "lime.net._HTTPRequest_Bytes";
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = "lime.net._HTTPRequest_String";
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = "lime.net.HTTPRequestHeader";
lime_net_HTTPRequestHeader.prototype = {
	__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = "lime.net._HTTPRequest_lime_text_Font";
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_text_Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = "lime.system.CFFI";
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = "lime.system._CFFIPointer.CFFIPointer_Impl_";
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	var tmp = this1 != null;
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = "lime.system.Clipboard";
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = null;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	lime_system_Clipboard.__update();
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__window;
	if($window != null) {
		$window.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = "lime.system.Display";
lime_system_Display.prototype = {
	__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = "lime.system.DisplayMode";
lime_system_DisplayMode.prototype = {
	__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxEnums["lime.system.Endian"] = { __ename__ : "lime.system.Endian", __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"]
	,LITTLE_ENDIAN: {_hx_index:0,__enum__:"lime.system.Endian",toString:$estr}
	,BIG_ENDIAN: {_hx_index:1,__enum__:"lime.system.Endian",toString:$estr}
};
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = "lime.system.Sensor";
lime_system_Sensor.getSensors = function(type) {
	if(type == null) {
		return lime_system_Sensor.sensors.slice();
	} else {
		var result = [];
		var _g = 0;
		var _g1 = lime_system_Sensor.sensors;
		while(_g < _g1.length) {
			var sensor = _g1[_g];
			++_g;
			if(sensor.type == type) {
				result.push(sensor);
			}
		}
		return result;
	}
};
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxEnums["lime.system.SensorType"] = { __ename__ : "lime.system.SensorType", __constructs__ : ["ACCELEROMETER"]
	,ACCELEROMETER: {_hx_index:0,__enum__:"lime.system.SensorType",toString:$estr}
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = "lime.system.System";
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null ? _this.existsReserved(projectName) : _this.h.hasOwnProperty(projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		var _this1 = lime_system_System.__applicationEntryPoint;
		(__map_reserved[projectName] != null ? _this1.getReserved(projectName) : _this1.h[projectName])(config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96 * window.devicePixelRatio;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.__parseBool = function(value) {
	return value == "true";
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null) {
		_this.setReserved(projectName,entryPoint);
	} else {
		_this.h[projectName] = entryPoint;
	}
};
lime_system_System.__runProcess = function(command,args) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	if(lime_system_System.__applicationDirectory == null) {
		lime_system_System.__applicationDirectory = lime_system_System.__getDirectory(0);
	}
	return lime_system_System.__applicationDirectory;
};
lime_system_System.get_applicationStorageDirectory = function() {
	if(lime_system_System.__applicationStorageDirectory == null) {
		lime_system_System.__applicationStorageDirectory = lime_system_System.__getDirectory(1);
	}
	return lime_system_System.__applicationStorageDirectory;
};
lime_system_System.get_deviceModel = function() {
	var tmp = lime_system_System.__deviceModel == null;
	return lime_system_System.__deviceModel;
};
lime_system_System.get_deviceVendor = function() {
	var tmp = lime_system_System.__deviceVendor == null;
	return lime_system_System.__deviceVendor;
};
lime_system_System.get_desktopDirectory = function() {
	if(lime_system_System.__desktopDirectory == null) {
		lime_system_System.__desktopDirectory = lime_system_System.__getDirectory(2);
	}
	return lime_system_System.__desktopDirectory;
};
lime_system_System.get_documentsDirectory = function() {
	if(lime_system_System.__documentsDirectory == null) {
		lime_system_System.__documentsDirectory = lime_system_System.__getDirectory(3);
	}
	return lime_system_System.__documentsDirectory;
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var elements = null;
		var array = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint8Array(arrayBuffer,0);
			} else {
				this1 = new Uint8Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var elements1 = null;
		var array1 = null;
		var view1 = null;
		var len1 = null;
		var this2;
		if(elements1 != null) {
			this2 = new Uint16Array(elements1);
		} else if(array1 != null) {
			this2 = new Uint16Array(array1);
		} else if(view1 != null) {
			this2 = new Uint16Array(view1);
		} else if(arrayBuffer != null) {
			if(len1 == null) {
				this2 = new Uint16Array(arrayBuffer,0);
			} else {
				this2 = new Uint16Array(arrayBuffer,0,len1);
			}
		} else {
			this2 = null;
		}
		var uint16array = this2;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
lime_system_System.get_fontsDirectory = function() {
	if(lime_system_System.__fontsDirectory == null) {
		lime_system_System.__fontsDirectory = lime_system_System.__getDirectory(4);
	}
	return lime_system_System.__fontsDirectory;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_platformLabel = function() {
	if(lime_system_System.__platformLabel == null) {
		var name = lime_system_System.get_platformName();
		var version = lime_system_System.get_platformVersion();
		if(name != null && version != null) {
			lime_system_System.__platformLabel = name + " " + version;
		} else if(name != null) {
			lime_system_System.__platformLabel = name;
		}
	}
	return lime_system_System.__platformLabel;
};
lime_system_System.get_platformName = function() {
	if(lime_system_System.__platformName == null) {
		lime_system_System.__platformName = "HTML5";
	}
	return lime_system_System.__platformName;
};
lime_system_System.get_platformVersion = function() {
	var tmp = lime_system_System.__platformVersion == null;
	return lime_system_System.__platformVersion;
};
lime_system_System.get_userDirectory = function() {
	if(lime_system_System.__userDirectory == null) {
		lime_system_System.__userDirectory = lime_system_System.__getDirectory(5);
	}
	return lime_system_System.__userDirectory;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$Dynamic_$Void();
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = "lime.system.ThreadPool";
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxEnums["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : "lime.system._ThreadPool.ThreadPoolMessageType", __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"]
	,COMPLETE: {_hx_index:0,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,ERROR: {_hx_index:1,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,EXIT: {_hx_index:2,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,PROGRESS: {_hx_index:3,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,WORK: {_hx_index:4,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
};
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = "lime.system._ThreadPool.ThreadPoolMessage";
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = window.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_1) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = "lime.text._Glyph.Glyph_Impl_";
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	var this1 = i;
	return this1;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = "lime.text.GlyphMetrics";
lime_text_GlyphMetrics.prototype = {
	__class__: lime_text_GlyphMetrics
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = "lime.ui.Gamepad";
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = "lime.ui._GamepadAxis.GamepadAxis_Impl_";
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = "lime.ui._GamepadButton.GamepadButton_Impl_";
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = "lime.ui.Joystick";
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = "lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_";
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435455 - 4;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435455 - 8;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435455 - 2;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435455 - 1;
	}
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = "lime.ui._KeyCode.KeyCode_Impl_";
lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode = function(scanCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode = function(keyCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = "lime.ui._KeyModifier.KeyModifier_Impl_";
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var lime_ui_MouseCursor = $hxEnums["lime.ui.MouseCursor"] = { __ename__ : "lime.ui.MouseCursor", __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"]
	,ARROW: {_hx_index:0,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CROSSHAIR: {_hx_index:1,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,DEFAULT: {_hx_index:2,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,MOVE: {_hx_index:3,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,POINTER: {_hx_index:4,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NESW: {_hx_index:5,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NS: {_hx_index:6,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NWSE: {_hx_index:7,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_WE: {_hx_index:8,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,TEXT: {_hx_index:9,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT: {_hx_index:10,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT_ARROW: {_hx_index:11,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CUSTOM: {_hx_index:12,__enum__:"lime.ui.MouseCursor",toString:$estr}
};
var lime_ui_MouseWheelMode = $hxEnums["lime.ui.MouseWheelMode"] = { __ename__ : "lime.ui.MouseWheelMode", __constructs__ : ["PIXELS","LINES","PAGES","UNKNOWN"]
	,PIXELS: {_hx_index:0,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,LINES: {_hx_index:1,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,PAGES: {_hx_index:2,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,UNKNOWN: {_hx_index:3,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
};
var lime_ui__$ScanCode_ScanCode_$Impl_$ = {};
$hxClasses["lime.ui._ScanCode.ScanCode_Impl_"] = lime_ui__$ScanCode_ScanCode_$Impl_$;
lime_ui__$ScanCode_ScanCode_$Impl_$.__name__ = "lime.ui._ScanCode.ScanCode_Impl_";
lime_ui__$ScanCode_ScanCode_$Impl_$.fromKeyCode = function(keyCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode(keyCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.toKeyCode = function(scanCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode(scanCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = "lime.ui.Touch";
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onMaximize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = "lime.ui.Window";
lime_ui_Window.prototype = {
	alert: function(message,title) {
		this.__backend.alert(message,title);
	}
	,close: function() {
		this.__backend.close();
	}
	,focus: function() {
		this.__backend.focus();
	}
	,move: function(x,y) {
		this.__backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,readPixels: function(rect) {
		return this.__backend.readPixels(rect);
	}
	,resize: function(width,height) {
		this.__backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.__backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,warpMouse: function(x,y) {
		this.__backend.warpMouse(x,y);
	}
	,get_cursor: function() {
		return this.__backend.getCursor();
	}
	,set_cursor: function(value) {
		return this.__backend.setCursor(value);
	}
	,get_display: function() {
		return this.__backend.getDisplay();
	}
	,get_displayMode: function() {
		return this.__backend.getDisplayMode();
	}
	,set_displayMode: function(value) {
		return this.__backend.setDisplayMode(value);
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.__backend.setBorderless(value);
	}
	,get_frameRate: function() {
		return this.__backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.__backend.setFrameRate(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.__backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_hidden: function() {
		return this.__hidden;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.__backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.__backend.setMinimized(value);
	}
	,get_mouseLock: function() {
		return this.__backend.getMouseLock();
	}
	,set_mouseLock: function(value) {
		this.__backend.setMouseLock(value);
		return value;
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.__backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_textInputEnabled: function() {
		return this.__backend.getTextInputEnabled();
	}
	,set_textInputEnabled: function(value) {
		return this.__backend.setTextInputEnabled(value);
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.__backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
};
var lime_utils_TAError = $hxEnums["lime.utils.TAError"] = { __ename__ : "lime.utils.TAError", __constructs__ : ["RangeError"]
	,RangeError: {_hx_index:0,__enum__:"lime.utils.TAError",toString:$estr}
};
var lime_utils_AssetBundle = function() {
	this.data = new haxe_ds_StringMap();
	this.paths = [];
};
$hxClasses["lime.utils.AssetBundle"] = lime_utils_AssetBundle;
lime_utils_AssetBundle.__name__ = "lime.utils.AssetBundle";
lime_utils_AssetBundle.fromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	return lime_utils_AssetBundle.__extractBundle(input);
};
lime_utils_AssetBundle.fromFile = function(path) {
	return null;
};
lime_utils_AssetBundle.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetBundle.fromBytes(bytes));
};
lime_utils_AssetBundle.loadFromFile = function(path) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(lime_utils_AssetBundle.loadFromBytes);
};
lime_utils_AssetBundle.__extractBundle = function(input) {
	var entries = haxe_zip_Reader.readZip(input);
	var bundle = new lime_utils_AssetBundle();
	var _g_head = entries.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var entry = val;
		if(entry.compressed) {
			var bytes = entry.data;
			var this1 = bundle.data;
			var key = entry.fileName;
			var value = lime_utils__$Bytes_Bytes_$Impl_$.decompress(bytes,lime_utils_CompressionAlgorithm.DEFLATE);
			var _this = this1;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		} else {
			var key1 = entry.fileName;
			var value1 = entry.data;
			var _this1 = bundle.data;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value1);
			} else {
				_this1.h[key1] = value1;
			}
		}
		bundle.paths.push(entry.fileName);
	}
	return bundle;
};
lime_utils_AssetBundle.prototype = {
	__class__: lime_utils_AssetBundle
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 130400;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = "lime.utils.AssetCache";
lime_utils_AssetCache.prototype = {
	exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			var _this = this.image;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = this.font;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = this.audio;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			var _this = this.font;
			var value = asset;
			if(__map_reserved[id] != null) {
				_this.setReserved(id,value);
			} else {
				_this.h[id] = value;
			}
			break;
		case "IMAGE":
			if(!((asset) instanceof lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			var _this1 = this.image;
			var value1 = asset;
			if(__map_reserved[id] != null) {
				_this1.setReserved(id,value1);
			} else {
				_this1.h[id] = value1;
			}
			break;
		case "MUSIC":case "SOUND":
			if(!((asset) instanceof lime_media_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			var _this2 = this.audio;
			var value2 = asset;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,value2);
			} else {
				_this2.h[id] = value2;
			}
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.audio.remove(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if(StringTools.startsWith(key3,prefix)) {
					this.font.remove(key3);
				}
			}
			var keys2 = this.image.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if(StringTools.startsWith(key5,prefix)) {
					this.image.remove(key5);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = "lime.utils.AssetLibrary";
lime_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
lime_utils_AssetLibrary.fromBundle = function(bundle) {
	var _this = bundle.data;
	if(__map_reserved["library.json"] != null ? _this.existsReserved("library.json") : _this.h.hasOwnProperty("library.json")) {
		var _this1 = bundle.data;
		var manifest = lime_utils_AssetManifest.fromBytes(__map_reserved["library.json"] != null ? _this1.getReserved("library.json") : _this1.h["library.json"]);
		if(manifest != null) {
			var library = null;
			if(manifest.libraryType == null) {
				library = new lime_utils_AssetLibrary();
			} else {
				var name = manifest.libraryType;
				var libraryClass = $hxClasses[name];
				if(libraryClass != null) {
					library = Type.createInstance(libraryClass,manifest.libraryArgs);
				} else {
					lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 122, className : "lime.utils.AssetLibrary", methodName : "fromBundle"});
					return null;
				}
			}
			library.__fromBundle(bundle,manifest);
			return library;
		}
	} else {
		var library1 = new lime_utils_AssetLibrary();
		library1.__fromBundle(bundle);
		return library1;
	}
	return null;
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var name = manifest.libraryType;
		var libraryClass = $hxClasses[name];
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 160, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(bytes,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load();
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
lime_utils_AssetLibrary.prototype = {
	exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var _this = this.types;
		var assetType = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , haxe_io_Bytes));
			} else {
				var _this4 = this.paths;
				return lime_media_AudioBuffer.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.cachedText;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.cachedText;
				var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id]);
				var _this4 = this.cachedBytes;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,bytes);
				} else {
					_this4.h[id] = bytes;
				}
				return bytes;
			} else {
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null ? _this5.existsReserved(id) : _this5.h.hasOwnProperty(id)) {
					var _this6 = this.classTypes;
					return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id],[]) , haxe_io_Bytes);
				} else {
					var _this7 = this.paths;
					return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(__map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]);
				}
			}
		}
	}
	,getFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_text_Font);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_graphics_Image);
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getPath: function(id) {
		var _this = this.paths;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.paths;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.pathGroups;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.pathGroups;
				return (__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id])[0];
			} else {
				return null;
			}
		}
	}
	,getText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		var _this = this.classTypes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		if(requestedType == null) {
			var _this1 = this.cachedBytes;
			if(!(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id))) {
				var _this2 = this.cachedText;
				if(__map_reserved[id] != null) {
					return _this2.existsReserved(id);
				} else {
					return _this2.h.hasOwnProperty(id);
				}
			} else {
				return true;
			}
		} else {
			switch(requestedType) {
			case "FONT":
				var _this3 = this.cachedFonts;
				if(__map_reserved[id] != null) {
					return _this3.existsReserved(id);
				} else {
					return _this3.h.hasOwnProperty(id);
				}
				break;
			case "IMAGE":
				var _this4 = this.cachedImages;
				if(__map_reserved[id] != null) {
					return _this4.existsReserved(id);
				} else {
					return _this4.h.hasOwnProperty(id);
				}
				break;
			case "MUSIC":case "SOUND":
				var _this5 = this.cachedAudioBuffers;
				if(__map_reserved[id] != null) {
					return _this5.existsReserved(id);
				} else {
					return _this5.h.hasOwnProperty(id);
				}
				break;
			default:
				var _this6 = this.cachedBytes;
				if(!(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id))) {
					var _this7 = this.cachedText;
					if(__map_reserved[id] != null) {
						return _this7.existsReserved(id);
					} else {
						return _this7.h.hasOwnProperty(id);
					}
				} else {
					return true;
				}
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var id = this.types.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			if(requestedType == null || this.exists(id1,type)) {
				items.push(id1);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
		case "TEXT":
			return this.loadText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = this.preload.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this = this.preload;
				if(!(__map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1])) {
					continue;
				}
				var _this1 = this.types;
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + (__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]) + "]",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 405, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _this2 = this.types;
				var _g = __map_reserved[id1] != null ? _this2.getReserved(id1) : _this2.h[id1];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id2,f) {
							return function(bytesLoaded,bytesTotal) {
								f[0](id2[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id3,f1) {
							return function(message) {
								f1[0](id3[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id4,f2) {
							return function(bytes) {
								f2[0](id4[0],bytes);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id5,f3) {
							return function(bytesLoaded1,bytesTotal1) {
								f3[0](id5[0],bytesLoaded1,bytesTotal1);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id6,f4) {
							return function(message1) {
								f4[0](id6[0],message1);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id7,f5) {
							return function(font) {
								f5[0](id7[0],font);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id8,f6) {
							return function(bytesLoaded2,bytesTotal2) {
								f6[0](id8[0],bytesLoaded2,bytesTotal2);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id9,f7) {
							return function(message2) {
								f7[0](id9[0],message2);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id10,f8) {
							return function(image) {
								f8[0](id10[0],image);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id11,f9) {
							return function(bytesLoaded3,bytesTotal3) {
								f9[0](id11[0],bytesLoaded3,bytesTotal3);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id12,f10) {
							return function(message3) {
								f10[0](id12[0],message3);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id13,f11) {
							return function(audioBuffer) {
								f11[0](id13[0],audioBuffer);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id14,f12) {
							return function(bytesLoaded4,bytesTotal4) {
								f12[0](id14[0],bytesLoaded4,bytesTotal4);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id15,f13) {
							return function(message4) {
								f13[0](id15[0],message4);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id16,f14) {
							return function(text) {
								f14[0](id16[0],text);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.pathGroups;
				if(__map_reserved[id] != null ? _this4.existsReserved(id) : _this4.h.hasOwnProperty(id)) {
					var _this5 = this.pathGroups;
					return lime_media_AudioBuffer.loadFromFiles(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
				} else {
					var _this6 = this.paths;
					return lime_media_AudioBuffer.loadFromFile(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id]);
				}
			}
		}
	}
	,loadBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				var font = Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]);
				return font.__loadFromName(font.name);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.loadFromName(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadImage: function(id) {
		var _gthis = this;
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.cachedBytes;
				if(__map_reserved[id] != null ? _this4.existsReserved(id) : _this4.h.hasOwnProperty(id)) {
					var _this5 = this.cachedBytes;
					return lime_graphics_Image.loadFromBytes(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]).then(function(image) {
						_gthis.cachedBytes.remove(id);
						var _this6 = _gthis.cachedImages;
						if(__map_reserved[id] != null) {
							_this6.setReserved(id,image);
						} else {
							_this6.h[id] = image;
						}
						return lime_app_Future.withValue(image);
					});
				} else {
					var _this7 = this.paths;
					return lime_graphics_Image.loadFromFile(__map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]);
				}
			}
		}
	}
	,loadText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var tmp;
			var _this2 = this.cachedBytes;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				var _this3 = this.classTypes;
				tmp = __map_reserved[id] != null ? _this3.existsReserved(id) : _this3.h.hasOwnProperty(id);
			} else {
				tmp = true;
			}
			if(tmp) {
				var bytes = this.getBytes(id);
				if(bytes == null) {
					return lime_app_Future.withValue(null);
				} else {
					var text = bytes.getString(0,bytes.length);
					var _this4 = this.cachedText;
					if(__map_reserved[id] != null) {
						_this4.setReserved(id,text);
					} else {
						_this4.h[id] = text;
					}
					return lime_app_Future.withValue(text);
				}
			} else {
				var request = new lime_net__$HTTPRequest_$String();
				var _this5 = this.paths;
				return request.load(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
			}
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			var _this = this.types;
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + (__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]) + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 619, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var size;
			var _this1 = this.sizes;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				var _this2 = this.sizes;
				size = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			} else {
				size = 0;
			}
			var _this3 = this.bytesLoadedCache;
			if(!(__map_reserved[id] != null ? _this3.existsReserved(id) : _this3.h.hasOwnProperty(id))) {
				this.bytesLoaded += size;
			} else {
				var _this4 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			var _this5 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this5.setReserved(id,size);
			} else {
				_this5.h[id] = size;
			}
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		return lime_utils_Assets.__cacheBreak(path);
	}
	,__fromBundle: function(bundle,manifest) {
		if(manifest != null) {
			var id;
			var data;
			var type;
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
				var key = asset.path;
				var _this = bundle.data;
				data = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(Object.prototype.hasOwnProperty.call(asset,"type")) {
					type = asset.type;
					if(type == "TEXT") {
						var value = data != null ? Std.string(data) : null;
						var _this1 = this.cachedText;
						if(__map_reserved[id] != null) {
							_this1.setReserved(id,value);
						} else {
							_this1.h[id] = value;
						}
					} else {
						var _this2 = this.cachedBytes;
						if(__map_reserved[id] != null) {
							_this2.setReserved(id,data);
						} else {
							_this2.h[id] = data;
						}
					}
					var value1 = asset.type;
					var _this3 = this.types;
					if(__map_reserved[id] != null) {
						_this3.setReserved(id,value1);
					} else {
						_this3.h[id] = value1;
					}
				} else {
					var _this4 = this.cachedBytes;
					if(__map_reserved[id] != null) {
						_this4.setReserved(id,data);
					} else {
						_this4.h[id] = data;
					}
					var _this5 = this.types;
					var value2 = "BINARY";
					if(__map_reserved[id] != null) {
						_this5.setReserved(id,value2);
					} else {
						_this5.h[id] = value2;
					}
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = bundle.paths;
			while(_g2 < _g11.length) {
				var path = _g11[_g2];
				++_g2;
				var this1 = this.cachedBytes;
				var _this6 = bundle.data;
				var value3 = __map_reserved[path] != null ? _this6.getReserved(path) : _this6.h[path];
				var _this7 = this1;
				if(__map_reserved[path] != null) {
					_this7.setReserved(path,value3);
				} else {
					_this7.h[path] = value3;
				}
				var _this8 = this.types;
				var value4 = "BINARY";
				if(__map_reserved[path] != null) {
					_this8.setReserved(path,value4);
				} else {
					_this8.h[path] = value4;
				}
			}
		}
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			size = hasSize && Object.prototype.hasOwnProperty.call(asset,"size") ? asset.size : 100;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(this.__resolvePath(basePath + Std.string(Reflect.field(asset,"path"))));
				var _this = this1;
				if(__map_reserved[id] != null) {
					_this.setReserved(id,value);
				} else {
					_this.h[id] = value;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g2 = 0;
				var _g11 = pathGroup.length;
				while(_g2 < _g11) {
					var i = _g2++;
					pathGroup[i] = this.__cacheBreak(this.__resolvePath(basePath + pathGroup[i]));
				}
				var _this1 = this.pathGroups;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,pathGroup);
				} else {
					_this1.h[id] = pathGroup;
				}
			}
			var _this2 = this.sizes;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,size);
			} else {
				_this2.h[id] = size;
			}
			var value1 = asset.type;
			var _this3 = this.types;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,value1);
			} else {
				_this3.h[id] = value1;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				var value2 = Reflect.field(asset,"preload");
				var _this4 = this.preload;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,value2);
				} else {
					_this4.h[id] = value2;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				var name = Reflect.field(asset,"className");
				classRef = $hxClasses[name];
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,classRef);
				} else {
					_this5.h[id] = classRef;
				}
			}
		}
		this.bytesTotal = 0;
		var _g21 = 0;
		var _g3 = manifest.assets;
		while(_g21 < _g3.length) {
			var asset1 = _g3[_g21];
			++_g21;
			id = Object.prototype.hasOwnProperty.call(asset1,"id") ? asset1.id : asset1.path;
			var tmp;
			var tmp1;
			var _this6 = this.preload;
			if(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id)) {
				var _this7 = this.preload;
				tmp1 = __map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id];
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var _this8 = this.sizes;
				tmp = __map_reserved[id] != null ? _this8.existsReserved(id) : _this8.h.hasOwnProperty(id);
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this9 = this.sizes;
				this.bytesTotal += __map_reserved[id] != null ? _this9.getReserved(id) : _this9.h[id];
			}
		}
	}
	,__resolvePath: function(path) {
		path = StringTools.replace(path,"\\","/");
		var colonIdx = path.indexOf(":");
		if(StringTools.startsWith(path,"http") && colonIdx > 0) {
			var lastSlashIdx = colonIdx + 3;
			var httpSection = HxOverrides.substr(path,0,lastSlashIdx);
			path = httpSection + StringTools.replace(HxOverrides.substr(path,lastSlashIdx,null),"//","/");
		} else {
			path = StringTools.replace(path,"//","/");
		}
		if(path.indexOf("./") > -1) {
			var split = path.split("/");
			var newPath = [];
			var _g = 0;
			var _g1 = split.length;
			while(_g < _g1) {
				var i = _g++;
				if(split[i] == "..") {
					if(i == 0 || newPath[i - 1] == "..") {
						newPath.push("..");
					} else {
						newPath.pop();
					}
				} else if(split[i] == ".") {
					if(i == 0) {
						newPath.push(".");
					}
				} else {
					newPath.push(split[i]);
				}
			}
			path = newPath.join("/");
		}
		return path;
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,audioBuffer);
		} else {
			_this.h[id] = audioBuffer;
		}
		var _this1 = this.pathGroups;
		if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
			var _this2 = this.pathGroups;
			var pathGroup = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			var otherID = this.pathGroups.keys();
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					var _this3 = this.pathGroups;
					if((__map_reserved[otherID1] != null ? _this3.getReserved(otherID1) : _this3.h[otherID1]).indexOf(path) > -1) {
						var _this4 = this.cachedAudioBuffers;
						if(__map_reserved[otherID1] != null) {
							_this4.setReserved(otherID1,audioBuffer);
						} else {
							_this4.h[otherID1] = audioBuffer;
						}
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 865, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 869, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bytes);
		} else {
			_this.h[id] = bytes;
		}
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,image);
		} else {
			_this.h[id] = image;
		}
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,text);
		} else {
			_this.h[id] = text;
		}
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var _this = this.sizes;
			var size = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			var _this1 = this.bytesLoadedCache;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				var _this2 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			var _this3 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,bytesLoaded);
			} else {
				_this3.h[id] = bytesLoaded;
			}
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = "lime.utils.AssetManifest";
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(Object.prototype.hasOwnProperty.call(manifestData,"name")) {
		manifest.name = manifestData.name;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryType")) {
		manifest.libraryType = manifestData.libraryType;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryArgs")) {
		manifest.libraryArgs = manifestData.libraryArgs;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"assets")) {
		var assets = manifestData.assets;
		if(Object.prototype.hasOwnProperty.call(manifestData,"version") && manifestData.version <= 2) {
			manifest.assets = haxe_Unserializer.run(assets);
		} else {
			manifest.assets = assets;
		}
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	basePath = StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	rootPath = StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		manifestData.rootPath = this.rootPath;
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = "lime.utils.Assets";
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var _this = lime_utils_Assets.cache.font;
			var font = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var _this1 = lime_utils_Assets.cache.image;
			var image = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = lime_utils_Assets.cache.audio;
			var audio = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "lime/utils/Assets.hx", lineNumber : 133, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 138, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 143, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
lime_utils_Assets.getPath = function(id) {
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.error("There is no asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 224, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 229, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.hasLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.existsReserved(name);
	} else {
		return _this.h.hasOwnProperty(name);
	}
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var _this = lime_utils_Assets.libraries;
	var library = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(library.hasNext()) {
		var library1 = library.next();
		var libraryItems = library1.list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var _this = lime_utils_Assets.cache.font;
			var font = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var _this1 = lime_utils_Assets.cache.image;
			var image = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var _this2 = lime_utils_Assets.cache.audio;
			var audio = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	var _this = lime_utils_Assets.bundlePaths;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = lime_utils_Assets.bundlePaths;
		lime_utils_AssetBundle.loadFromFile(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]).onComplete(function(bundle) {
			if(bundle == null) {
				promise.error("Cannot load bundle for library \"" + id + "\"");
				return;
			}
			var library1 = lime_utils_AssetLibrary.fromBundle(bundle);
			if(library1 == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				var _this2 = lime_utils_Assets.libraries;
				if(__map_reserved[id] != null) {
					_this2.setReserved(id,library1);
				} else {
					_this2.h[id] = library1;
				}
				library1.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				var tmp = library1.load();
				promise.completeWith(tmp);
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	} else {
		var _this3 = lime_utils_Assets.libraryPaths;
		if(__map_reserved[id] != null ? _this3.existsReserved(id) : _this3.h.hasOwnProperty(id)) {
			var _this4 = lime_utils_Assets.libraryPaths;
			path = __map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id];
			rootPath = haxe_io_Path.directory(path);
		} else {
			if(StringTools.endsWith(path,".bundle")) {
				rootPath = path;
				path += "/library.json";
			} else {
				rootPath = haxe_io_Path.directory(path);
			}
			path = lime_utils_Assets.__cacheBreak(path);
		}
		lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
			if(manifest == null) {
				promise.error("Cannot parse asset manifest for library \"" + id + "\"");
				return;
			}
			var library2 = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library2 == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				var _this5 = lime_utils_Assets.libraries;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,library2);
				} else {
					_this5.h[id] = library2;
				}
				library2.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				var tmp1 = library2.load();
				promise.completeWith(tmp1);
			}
		}).onError(function(_1) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	}
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	return lime_utils_Assets.loadAsset(id,"TEXT",false);
};
lime_utils_Assets.registerLibrary = function(name,library) {
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = lime_utils_Assets.libraries;
		if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	var _this2 = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_utils_Assets.unloadLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	var library = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.__cacheBreak = function(path) {
	if(lime_utils_Assets.cache.version > 0) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
	}
	return path;
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = "lime.utils._Assets.LibrarySymbol";
lime_utils__$Assets_LibrarySymbol.prototype = {
	isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils__$BytePointer_BytePointer_$Impl_$ = {};
$hxClasses["lime.utils._BytePointer.BytePointer_Impl_"] = lime_utils__$BytePointer_BytePointer_$Impl_$;
lime_utils__$BytePointer_BytePointer_$Impl_$.__name__ = "lime.utils._BytePointer.BytePointer_Impl_";
lime_utils__$BytePointer_BytePointer_$Impl_$._new = function(bytes,offset) {
	if(offset == null) {
		offset = 0;
	}
	var this1 = new lime_utils_BytePointerData(bytes,offset);
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) {
		bytes = haxe_io_Bytes.ofData(buffer);
	}
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		this1.offset = offset != null ? offset : 0;
	} else {
		this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
		this1.offset = offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arrayGet = function(this1,index) {
	if(this1.bytes != null) {
		return this1.bytes.b[index + this1.offset];
	} else {
		return 0;
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) {
		this1.bytes.b[index + this1.offset] = value & 255;
	}
	return value;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return new lime_utils_BytePointerData(null,0);
	} else {
		return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData),0);
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromFile = function(path) {
	return new lime_utils_BytePointerData(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8Array = function(bytePointer) {
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer,byteoffset);
		} else {
			this1 = new Uint8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8ClampedArray(elements);
	} else if(array != null) {
		this1 = new Uint8ClampedArray(array);
	} else if(view != null) {
		this1 = new Uint8ClampedArray(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8ClampedArray(buffer,byteoffset);
		} else {
			this1 = new Uint8ClampedArray(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int8Array(elements);
	} else if(array != null) {
		this1 = new Int8Array(array);
	} else if(view != null) {
		this1 = new Int8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int8Array(buffer,byteoffset);
		} else {
			this1 = new Int8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,byteoffset);
		} else {
			this1 = new Uint16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int16Array(elements);
	} else if(array != null) {
		this1 = new Int16Array(array);
	} else if(view != null) {
		this1 = new Int16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int16Array(buffer,byteoffset);
		} else {
			this1 = new Int16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint32Array(elements);
	} else if(array != null) {
		this1 = new Uint32Array(array);
	} else if(view != null) {
		this1 = new Uint32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint32Array(buffer,byteoffset);
		} else {
			this1 = new Uint32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int32Array(elements);
	} else if(array != null) {
		this1 = new Int32Array(array);
	} else if(view != null) {
		this1 = new Int32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int32Array(buffer,byteoffset);
		} else {
			this1 = new Int32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,byteoffset);
		} else {
			this1 = new Float32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 64 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float64Array(elements);
	} else if(array != null) {
		this1 = new Float64Array(array);
	} else if(view != null) {
		this1 = new Float64Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float64Array(buffer,byteoffset);
		} else {
			this1 = new Float64Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = "lime.utils.BytePointerData";
lime_utils_BytePointerData.prototype = {
	__class__: lime_utils_BytePointerData
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = "lime.utils._Bytes.Bytes_Impl_";
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils__$Bytes_Bytes_$Impl_$.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
lime_utils__$Bytes_Bytes_$Impl_$.compress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.compress(this1);
	case 1:
		return lime__$internal_format_GZip.compress(this1);
	case 2:
		return lime__$internal_format_LZMA.compress(this1);
	case 3:
		return lime__$internal_format_Zlib.compress(this1);
	}
};
lime_utils__$Bytes_Bytes_$Impl_$.decompress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.decompress(this1);
	case 1:
		return lime__$internal_format_GZip.decompress(this1);
	case 2:
		return lime__$internal_format_LZMA.decompress(this1);
	case 3:
		return lime__$internal_format_Zlib.decompress(this1);
	}
};
lime_utils__$Bytes_Bytes_$Impl_$.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes));
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_CompressionAlgorithm = $hxEnums["lime.utils.CompressionAlgorithm"] = { __ename__ : "lime.utils.CompressionAlgorithm", __constructs__ : ["DEFLATE","GZIP","LZMA","ZLIB"]
	,DEFLATE: {_hx_index:0,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,GZIP: {_hx_index:1,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,LZMA: {_hx_index:2,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,ZLIB: {_hx_index:3,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
};
var lime_utils__$DataPointer_DataPointer_$Impl_$ = {};
$hxClasses["lime.utils._DataPointer.DataPointer_Impl_"] = lime_utils__$DataPointer_DataPointer_$Impl_$;
lime_utils__$DataPointer_DataPointer_$Impl_$.__name__ = "lime.utils._DataPointer.DataPointer_Impl_";
lime_utils__$DataPointer_DataPointer_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat = function(value) {
	return value;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesPointer = function(pointer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer = function(buffer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesData = function(bytesData) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromLimeBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes(bytes);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromCFFIPointer = function(pointer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFile = function(path) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset = function(data,offset) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat(0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equals = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equalsPointer = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThan = function(a,b) {
	return a > b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThan = function(a,b) {
	return a < b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return a <= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEquals = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b | 0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-(b | 0));
};
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = "lime.utils._Float32Array.Float32Array_Impl_";
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Float64Array_Float64Array_$Impl_$ = {};
$hxClasses["lime.utils._Float64Array.Float64Array_Impl_"] = lime_utils__$Float64Array_Float64Array_$Impl_$;
lime_utils__$Float64Array_Float64Array_$Impl_$.__name__ = "lime.utils._Float64Array.Float64Array_Impl_";
lime_utils__$Float64Array_Float64Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float64Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float64Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float64Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = "lime.utils._Int16Array.Int16Array_Impl_";
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = "lime.utils._Int32Array.Int32Array_Impl_";
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int8Array_Int8Array_$Impl_$ = {};
$hxClasses["lime.utils._Int8Array.Int8Array_Impl_"] = lime_utils__$Int8Array_Int8Array_$Impl_$;
lime_utils__$Int8Array_Int8Array_$Impl_$.__name__ = "lime.utils._Int8Array.Int8Array_Impl_";
lime_utils__$Int8Array_Int8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	return new Int8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = "lime.utils.Log";
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.debug("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw new js__$Boot_HaxeError(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		console.log("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils__$LogLevel_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._LogLevel.LogLevel_Impl_"] = lime_utils__$LogLevel_LogLevel_$Impl_$;
lime_utils__$LogLevel_LogLevel_$Impl_$.__name__ = "lime.utils._LogLevel.LogLevel_Impl_";
lime_utils__$LogLevel_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$LogLevel_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$LogLevel_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$LogLevel_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = "lime.utils.Preloader";
lime_utils_Preloader.prototype = {
	addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g2 = 0;
		var _g3 = this.libraries;
		while(_g2 < _g3.length) {
			var library1 = [_g3[_g2]];
			++_g2;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "lime/utils/Preloader.hx", lineNumber : 132, className : "lime.utils.Preloader", methodName : "load"});
			library1[0].load().onProgress((function(library2) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library2[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library2[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library2[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library1)).onComplete((function(library3) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library3[0].__id__] == null) {
						_gthis.bytesLoaded += library3[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library3[0].bytesTotal - _gthis.bytesLoadedCache.h[library3[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library1)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 168, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g4 = 0;
		var _g5 = this.libraryNames;
		while(_g4 < _g5.length) {
			var name = _g5[_g4];
			++_g4;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 195, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 199, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "lime/utils/Preloader.hx", lineNumber : 236, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name1) {
					return function(loaded,total) {
						if(total > 0) {
							var _this = _gthis.bytesTotalCache;
							if(!(__map_reserved[name1[0]] != null ? _this.existsReserved(name1[0]) : _this.h.hasOwnProperty(name1[0]))) {
								var _this1 = _gthis.bytesTotalCache;
								if(__map_reserved[name1[0]] != null) {
									_this1.setReserved(name1[0],total);
								} else {
									_this1.h[name1[0]] = total;
								}
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							var _this2 = _gthis.bytesLoadedCache2;
							if(!(__map_reserved[name1[0]] != null ? _this2.existsReserved(name1[0]) : _this2.h.hasOwnProperty(name1[0]))) {
								_gthis.bytesLoaded += loaded;
							} else {
								var _this3 = _gthis.bytesLoadedCache2;
								_gthis.bytesLoaded += loaded - (__map_reserved[name1[0]] != null ? _this3.getReserved(name1[0]) : _this3.h[name1[0]]);
							}
							var _this4 = _gthis.bytesLoadedCache2;
							if(__map_reserved[name1[0]] != null) {
								_this4.setReserved(name1[0],loaded);
							} else {
								_this4.h[name1[0]] = loaded;
							}
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name2) {
					return function(library) {
						var total1 = 200;
						var _this5 = _gthis.bytesTotalCache;
						if(__map_reserved[name2[0]] != null ? _this5.existsReserved(name2[0]) : _this5.h.hasOwnProperty(name2[0])) {
							var _this6 = _gthis.bytesTotalCache;
							total1 = __map_reserved[name2[0]] != null ? _this6.getReserved(name2[0]) : _this6.h[name2[0]];
						}
						var _this7 = _gthis.bytesLoadedCache2;
						if(!(__map_reserved[name2[0]] != null ? _this7.existsReserved(name2[0]) : _this7.h.hasOwnProperty(name2[0]))) {
							_gthis.bytesLoaded += total1;
						} else {
							var _this8 = _gthis.bytesLoadedCache2;
							_gthis.bytesLoaded += total1 - (__map_reserved[name2[0]] != null ? _this8.getReserved(name2[0]) : _this8.h[name2[0]]);
						}
						_gthis.loadedAssetLibrary(name2[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 290, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "lime/utils/Preloader.hx", lineNumber : 301, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = "lime.utils._UInt16Array.UInt16Array_Impl_";
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = "lime.utils._UInt32Array.UInt32Array_Impl_";
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = "lime.utils._UInt8Array.UInt8Array_Impl_";
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$ = {};
$hxClasses["lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_"] = lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$;
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.__name__ = "lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_";
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$._clamp = function(_in) {
	var _out = _in | 0;
	_out = _out > 255 ? 255 : _out;
	if(_out < 0) {
		return 0;
	} else {
		return _out;
	}
};
var org_poly2tri_AdvancingFront = function(head,tail) {
	this.search_node = this.head = head;
	this.tail = tail;
};
$hxClasses["org.poly2tri.AdvancingFront"] = org_poly2tri_AdvancingFront;
org_poly2tri_AdvancingFront.__name__ = "org.poly2tri.AdvancingFront";
org_poly2tri_AdvancingFront.prototype = {
	locateNode: function(x) {
		var node = this.search_node;
		if(x < node.value) {
			while(true) {
				node = node.prev;
				if(!(node != null)) {
					break;
				}
				if(x >= node.value) {
					this.search_node = node;
					return node;
				}
			}
		} else {
			while(true) {
				node = node.next;
				if(!(node != null)) {
					break;
				}
				if(x < node.value) {
					this.search_node = node.prev;
					return node.prev;
				}
			}
		}
		return null;
	}
	,locatePoint: function(point) {
		var px = point.x;
		var node = this.search_node;
		var nx = node.point.x;
		if(px == nx) {
			if(!point.equals(node.point)) {
				if(point.equals(node.prev.point)) {
					node = node.prev;
				} else if(point.equals(node.next.point)) {
					node = node.next;
				} else {
					throw new js__$Boot_HaxeError("Invalid AdvancingFront.locatePoint call!");
				}
			}
		} else if(px < nx) {
			while(true) {
				node = node.prev;
				if(!(node != null)) {
					break;
				}
				if(point.equals(node.point)) {
					break;
				}
			}
		} else {
			while(true) {
				node = node.next;
				if(!(node != null)) {
					break;
				}
				if(point.equals(node.point)) {
					break;
				}
			}
		}
		if(node != null) {
			this.search_node = node;
		}
		return node;
	}
	,__class__: org_poly2tri_AdvancingFront
};
var org_poly2tri_Basin = function() {
	this.width = 0;
};
$hxClasses["org.poly2tri.Basin"] = org_poly2tri_Basin;
org_poly2tri_Basin.__name__ = "org.poly2tri.Basin";
org_poly2tri_Basin.prototype = {
	clear: function() {
		this.left_node = null;
		this.bottom_node = null;
		this.right_node = null;
		this.width = 0.0;
		this.left_highest = false;
	}
	,__class__: org_poly2tri_Basin
};
var org_poly2tri_Constants = function() { };
$hxClasses["org.poly2tri.Constants"] = org_poly2tri_Constants;
org_poly2tri_Constants.__name__ = "org.poly2tri.Constants";
var org_poly2tri_Edge = function(p1,p2) {
	if(p1 == null || p2 == null) {
		throw new js__$Boot_HaxeError("Edge::new p1 or p2 is null");
	}
	var swap = false;
	if(p1.y > p2.y) {
		swap = true;
	} else if(p1.y == p2.y) {
		if(p1.x == p2.x) {
			throw new js__$Boot_HaxeError("Edge::repeat points " + Std.string(p1));
		}
		swap = p1.x > p2.x;
	}
	if(swap) {
		this.q = p1;
		this.p = p2;
	} else {
		this.p = p1;
		this.q = p2;
	}
	this.q.get_edge_list().push(this);
};
$hxClasses["org.poly2tri.Edge"] = org_poly2tri_Edge;
org_poly2tri_Edge.__name__ = "org.poly2tri.Edge";
org_poly2tri_Edge.prototype = {
	toString: function() {
		return "Edge(" + Std.string(this.p) + ", " + Std.string(this.q) + ")";
	}
	,__class__: org_poly2tri_Edge
};
var org_poly2tri_EdgeEvent = function() {
};
$hxClasses["org.poly2tri.EdgeEvent"] = org_poly2tri_EdgeEvent;
org_poly2tri_EdgeEvent.__name__ = "org.poly2tri.EdgeEvent";
org_poly2tri_EdgeEvent.prototype = {
	__class__: org_poly2tri_EdgeEvent
};
var org_poly2tri_Node = function(point,triangle) {
	this.point = point;
	this.triangle = triangle;
	this.value = this.point.x;
};
$hxClasses["org.poly2tri.Node"] = org_poly2tri_Node;
org_poly2tri_Node.__name__ = "org.poly2tri.Node";
org_poly2tri_Node.prototype = {
	getHoleAngle: function() {
		var ax = this.next.point.x - this.point.x;
		var ay = this.next.point.y - this.point.y;
		var bx = this.prev.point.x - this.point.x;
		var by = this.prev.point.y - this.point.y;
		return Math.atan2(ax * by - ay * bx,ax * bx + ay * by);
	}
	,getBasinAngle: function() {
		return Math.atan2(this.point.y - this.next.next.point.y,this.point.x - this.next.next.point.x);
	}
	,__class__: org_poly2tri_Node
};
var org_poly2tri_Orientation = function() { };
$hxClasses["org.poly2tri.Orientation"] = org_poly2tri_Orientation;
org_poly2tri_Orientation.__name__ = "org.poly2tri.Orientation";
org_poly2tri_Orientation.orient2d = function(pa,pb,pc) {
	var detleft = (pa.x - pc.x) * (pb.y - pc.y);
	var detright = (pa.y - pc.y) * (pb.x - pc.x);
	var val = detleft - detright;
	if(val > -org_poly2tri_Constants.EPSILON && val < org_poly2tri_Constants.EPSILON) {
		return 0;
	}
	if(val > 0) {
		return -1;
	}
	return 1;
};
var org_poly2tri_Point = function(x,y) {
	this.x = x;
	this.y = y;
	this.id = org_poly2tri_Point.C_ID;
	org_poly2tri_Point.C_ID++;
};
$hxClasses["org.poly2tri.Point"] = org_poly2tri_Point;
org_poly2tri_Point.__name__ = "org.poly2tri.Point";
org_poly2tri_Point.sortPoints = function(points) {
	points.sort(org_poly2tri_Point.cmpPoints);
};
org_poly2tri_Point.cmpPoints = function(l,r) {
	var ret = l.y - r.y;
	if(ret == 0) {
		ret = l.x - r.x;
	}
	if(ret < 0) {
		return -1;
	}
	if(ret > 0) {
		return 1;
	}
	return 0;
};
org_poly2tri_Point.prototype = {
	get_edge_list: function() {
		if(this.edge_list == null) {
			this.edge_list = [];
		}
		return this.edge_list;
	}
	,equals: function(that) {
		if(this.x == that.x) {
			return this.y == that.y;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Point(" + this.x + ", " + this.y + ")";
	}
	,__class__: org_poly2tri_Point
};
var org_poly2tri_Sweep = function(context) {
	this.context = context;
};
$hxClasses["org.poly2tri.Sweep"] = org_poly2tri_Sweep;
org_poly2tri_Sweep.__name__ = "org.poly2tri.Sweep";
org_poly2tri_Sweep.nextFlipPoint = function(ep,eq,ot,op) {
	var o2d = org_poly2tri_Orientation.orient2d(eq,op,ep);
	if(o2d == 1) {
		return ot.pointCCW(op);
	} else if(o2d == -1) {
		return ot.pointCW(op);
	} else {
		throw new js__$Boot_HaxeError("Sweep:: [Unsupported] Sweep.NextFlipPoint: opposing point on constrained edge!");
	}
};
org_poly2tri_Sweep.prototype = {
	triangulate: function() {
		this.context.initTriangulation();
		this.context.createAdvancingFront();
		this.sweepPoints();
		this.finalizationPolygon();
	}
	,sweepPoints: function() {
		var _g = 1;
		var _g1 = this.context.points.length;
		while(_g < _g1) {
			var i = _g++;
			var point = this.context.points[i];
			var node = this.pointEvent(point);
			var _g2 = 0;
			var _g11 = point.get_edge_list().length;
			while(_g2 < _g11) {
				var j = _g2++;
				this.edgeEventByEdge(point.get_edge_list()[j],node);
			}
		}
	}
	,finalizationPolygon: function() {
		var t = this.context.front.head.next.triangle;
		var p = this.context.front.head.next.point;
		while(!t.getConstrainedEdgeCW(p)) t = t.neighborCCW(p);
		this.context.meshClean(t);
	}
	,pointEvent: function(point) {
		var node = this.context.locateNode(point);
		var new_node = this.newFrontTriangle(point,node);
		if(point.x <= node.point.x + org_poly2tri_Constants.EPSILON) {
			this.fill(node);
		}
		this.fillAdvancingFront(new_node);
		return new_node;
	}
	,edgeEventByEdge: function(edge,node) {
		this.context.edge_event.constrained_edge = edge;
		this.context.edge_event.right = edge.p.x > edge.q.x;
		if(node.triangle.isEdgeSide(edge.p,edge.q)) {
			return;
		}
		this.fillEdgeEvent(edge,node);
		this.edgeEventByPoints(edge.p,edge.q,node.triangle,edge.q);
	}
	,edgeEventByPoints: function(ep,eq,triangle,point) {
		if(triangle.isEdgeSide(ep,eq)) {
			return;
		}
		var p1 = triangle.pointCCW(point);
		var o1 = org_poly2tri_Orientation.orient2d(eq,p1,ep);
		if(o1 == 0) {
			throw new js__$Boot_HaxeError("Sweep.edgeEvent: Collinear not supported!");
		}
		var p2 = triangle.pointCW(point);
		var o2 = org_poly2tri_Orientation.orient2d(eq,p2,ep);
		if(o2 == 0) {
			throw new js__$Boot_HaxeError("Sweep.edgeEvent: Collinear not supported!");
		}
		if(o1 == o2) {
			triangle = o1 == 1 ? triangle.neighborCCW(point) : triangle.neighborCW(point);
			this.edgeEventByPoints(ep,eq,triangle,point);
		} else {
			this.flipEdgeEvent(ep,eq,triangle,point);
		}
	}
	,newFrontTriangle: function(point,node) {
		var triangle = new org_poly2tri_Triangle(point,node.point,node.next.point);
		triangle.markNeighborTriangle(node.triangle);
		this.context.addToMap(triangle);
		var new_node = new org_poly2tri_Node(point);
		new_node.next = node.next;
		new_node.prev = node;
		node.next.prev = new_node;
		node.next = new_node;
		if(!this.legalize(triangle)) {
			this.context.mapTriangleToNodes(triangle);
		}
		return new_node;
	}
	,fill: function(node) {
		var triangle = new org_poly2tri_Triangle(node.prev.point,node.point,node.next.point);
		triangle.markNeighborTriangle(node.prev.triangle);
		triangle.markNeighborTriangle(node.triangle);
		this.context.addToMap(triangle);
		node.prev.next = node.next;
		node.next.prev = node.prev;
		if(!this.legalize(triangle)) {
			this.context.mapTriangleToNodes(triangle);
		}
		this.context.removeNode(node);
	}
	,fillAdvancingFront: function(n) {
		var angle;
		var node = n.next;
		while(node.next != null) {
			angle = node.getHoleAngle();
			if(angle > org_poly2tri_Constants.PI_2 || angle < -org_poly2tri_Constants.PI_2) {
				break;
			}
			this.fill(node);
			node = node.next;
		}
		node = n.prev;
		while(node.prev != null) {
			angle = node.getHoleAngle();
			if(angle > org_poly2tri_Constants.PI_2 || angle < -org_poly2tri_Constants.PI_2) {
				break;
			}
			this.fill(node);
			node = node.prev;
		}
		if(n.next != null && n.next.next != null) {
			angle = n.getBasinAngle();
			if(angle < org_poly2tri_Constants.PI_3div4) {
				this.fillBasin(n);
			}
		}
	}
	,legalize: function(t) {
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			if(t.delaunay_edge[i]) {
				continue;
			}
			var ot = t.neighbors[i];
			if(ot != null) {
				var p = t.points[i];
				var op = ot.oppositePoint(t,p);
				var oi = ot.index(op);
				if(ot.constrained_edge[oi] || ot.delaunay_edge[oi]) {
					t.constrained_edge[i] = ot.constrained_edge[oi];
					continue;
				}
				if(org_poly2tri_Utils.insideIncircle(p,t.pointCCW(p),t.pointCW(p),op)) {
					t.delaunay_edge[i] = true;
					ot.delaunay_edge[oi] = true;
					org_poly2tri_Triangle.rotateTrianglePair(t,p,ot,op);
					var not_legalized = !this.legalize(t);
					if(not_legalized) {
						this.context.mapTriangleToNodes(t);
					}
					not_legalized = !this.legalize(ot);
					if(not_legalized) {
						this.context.mapTriangleToNodes(ot);
					}
					t.delaunay_edge[i] = false;
					ot.delaunay_edge[oi] = false;
					return true;
				}
			}
		}
		return false;
	}
	,fillBasin: function(node) {
		var tmp = org_poly2tri_Orientation.orient2d(node.point,node.next.point,node.next.next.point) == -1 ? node.next.next : node.next;
		this.context.basin.left_node = tmp;
		this.context.basin.bottom_node = this.context.basin.left_node;
		while(this.context.basin.bottom_node.next != null && this.context.basin.bottom_node.point.y >= this.context.basin.bottom_node.next.point.y) this.context.basin.bottom_node = this.context.basin.bottom_node.next;
		if(this.context.basin.bottom_node == this.context.basin.left_node) {
			return;
		}
		this.context.basin.right_node = this.context.basin.bottom_node;
		while(this.context.basin.right_node.next != null && this.context.basin.right_node.point.y < this.context.basin.right_node.next.point.y) this.context.basin.right_node = this.context.basin.right_node.next;
		if(this.context.basin.right_node == this.context.basin.bottom_node) {
			return;
		}
		this.context.basin.width = this.context.basin.right_node.point.x - this.context.basin.left_node.point.x;
		this.context.basin.left_highest = this.context.basin.left_node.point.y > this.context.basin.right_node.point.y;
		this.fillBasinReq(this.context.basin.bottom_node);
	}
	,fillBasinReq: function(node) {
		if(this.isShallow(node)) {
			return;
		}
		this.fill(node);
		if(node.prev == this.context.basin.left_node && node.next == this.context.basin.right_node) {
			return;
		} else if(node.prev == this.context.basin.left_node) {
			if(org_poly2tri_Orientation.orient2d(node.point,node.next.point,node.next.next.point) == 1) {
				return;
			}
			node = node.next;
		} else if(node.next == this.context.basin.right_node) {
			if(org_poly2tri_Orientation.orient2d(node.point,node.prev.point,node.prev.prev.point) == -1) {
				return;
			}
			node = node.prev;
		} else {
			node = node.prev.point.y < node.next.point.y ? node.prev : node.next;
		}
		this.fillBasinReq(node);
	}
	,isShallow: function(node) {
		var height = this.context.basin.left_highest ? this.context.basin.left_node.point.y - node.point.y : this.context.basin.right_node.point.y - node.point.y;
		return this.context.basin.width > height;
	}
	,fillEdgeEvent: function(edge,node) {
		if(this.context.edge_event.right) {
			this.fillRightAboveEdgeEvent(edge,node);
		} else {
			this.fillLeftAboveEdgeEvent(edge,node);
		}
	}
	,fillRightAboveEdgeEvent: function(edge,node) {
		while(node.next.point.x < edge.p.x) if(org_poly2tri_Orientation.orient2d(edge.q,node.next.point,edge.p) == -1) {
			this.fillRightBelowEdgeEvent(edge,node);
		} else {
			node = node.next;
		}
	}
	,fillRightBelowEdgeEvent: function(edge,node) {
		if(node.point.x >= edge.p.x) {
			return;
		}
		if(org_poly2tri_Orientation.orient2d(node.point,node.next.point,node.next.next.point) == -1) {
			this.fillRightConcaveEdgeEvent(edge,node);
		} else {
			this.fillRightConvexEdgeEvent(edge,node);
			this.fillRightBelowEdgeEvent(edge,node);
		}
	}
	,fillRightConcaveEdgeEvent: function(edge,node) {
		this.fill(node.next);
		if(node.next.point != edge.p) {
			if(org_poly2tri_Orientation.orient2d(edge.q,node.next.point,edge.p) == -1) {
				if(org_poly2tri_Orientation.orient2d(node.point,node.next.point,node.next.next.point) == -1) {
					this.fillRightConcaveEdgeEvent(edge,node);
				}
			}
		}
	}
	,fillRightConvexEdgeEvent: function(edge,node) {
		if(org_poly2tri_Orientation.orient2d(node.next.point,node.next.next.point,node.next.next.next.point) == -1) {
			this.fillRightConcaveEdgeEvent(edge,node.next);
		} else if(org_poly2tri_Orientation.orient2d(edge.q,node.next.next.point,edge.p) == -1) {
			this.fillRightConvexEdgeEvent(edge,node.next);
		}
	}
	,fillLeftAboveEdgeEvent: function(edge,node) {
		while(node.prev.point.x > edge.p.x) if(org_poly2tri_Orientation.orient2d(edge.q,node.prev.point,edge.p) == 1) {
			this.fillLeftBelowEdgeEvent(edge,node);
		} else {
			node = node.prev;
		}
	}
	,fillLeftBelowEdgeEvent: function(edge,node) {
		if(node.point.x > edge.p.x) {
			if(org_poly2tri_Orientation.orient2d(node.point,node.prev.point,node.prev.prev.point) == 1) {
				this.fillLeftConcaveEdgeEvent(edge,node);
			} else {
				this.fillLeftConvexEdgeEvent(edge,node);
				this.fillLeftBelowEdgeEvent(edge,node);
			}
		}
	}
	,fillLeftConvexEdgeEvent: function(edge,node) {
		if(org_poly2tri_Orientation.orient2d(node.prev.point,node.prev.prev.point,node.prev.prev.prev.point) == 1) {
			this.fillLeftConcaveEdgeEvent(edge,node.prev);
		} else if(org_poly2tri_Orientation.orient2d(edge.q,node.prev.prev.point,edge.p) == 1) {
			this.fillLeftConvexEdgeEvent(edge,node.prev);
		}
	}
	,fillLeftConcaveEdgeEvent: function(edge,node) {
		this.fill(node.prev);
		if(node.prev.point != edge.p) {
			if(org_poly2tri_Orientation.orient2d(edge.q,node.prev.point,edge.p) == 1) {
				if(org_poly2tri_Orientation.orient2d(node.point,node.prev.point,node.prev.prev.point) == 1) {
					this.fillLeftConcaveEdgeEvent(edge,node);
				}
			}
		}
	}
	,flipEdgeEvent: function(ep,eq,t,p) {
		var ot = t.neighborAcross(p);
		if(ot == null) {
			throw new js__$Boot_HaxeError("Sweep::[BUG:FIXME] FLIP failed due to missing triangle!");
		}
		var op = ot.oppositePoint(t,p);
		if(org_poly2tri_Utils.inScanArea(p,t.pointCCW(p),t.pointCW(p),op)) {
			org_poly2tri_Triangle.rotateTrianglePair(t,p,ot,op);
			this.context.mapTriangleToNodes(t);
			this.context.mapTriangleToNodes(ot);
			if(p == eq && op == ep) {
				if(eq == this.context.edge_event.constrained_edge.q && ep == this.context.edge_event.constrained_edge.p) {
					t.markConstrainedEdgeByPoints(ep,eq);
					ot.markConstrainedEdgeByPoints(ep,eq);
					this.legalize(t);
					this.legalize(ot);
				}
			} else {
				var o = org_poly2tri_Orientation.orient2d(eq,op,ep);
				t = this.nextFlipTriangle(o,t,ot,p,op);
				this.flipEdgeEvent(ep,eq,t,p);
			}
		} else {
			var newP = org_poly2tri_Sweep.nextFlipPoint(ep,eq,ot,op);
			this.flipScanEdgeEvent(ep,eq,t,ot,newP);
			this.edgeEventByPoints(ep,eq,t,p);
		}
	}
	,nextFlipTriangle: function(o,t,ot,p,op) {
		var edge_index;
		if(o == -1) {
			edge_index = ot.edgeIndex(p,op);
			ot.delaunay_edge[edge_index] = true;
			this.legalize(ot);
			ot.clearDelunayEdges();
			return t;
		}
		edge_index = t.edgeIndex(p,op);
		t.delaunay_edge[edge_index] = true;
		this.legalize(t);
		t.clearDelunayEdges();
		return ot;
	}
	,flipScanEdgeEvent: function(ep,eq,flip_triangle,t,p) {
		var ot = t.neighborAcross(p);
		if(ot == null) {
			throw new js__$Boot_HaxeError("Sweep::[BUG:FIXME] FLIP failed due to missing triangle");
		}
		var op = ot.oppositePoint(t,p);
		if(org_poly2tri_Utils.inScanArea(eq,flip_triangle.pointCCW(eq),flip_triangle.pointCW(eq),op)) {
			this.flipEdgeEvent(eq,op,ot,op);
		} else {
			var newP = org_poly2tri_Sweep.nextFlipPoint(ep,eq,ot,op);
			this.flipScanEdgeEvent(ep,eq,flip_triangle,ot,newP);
		}
	}
	,__class__: org_poly2tri_Sweep
};
var org_poly2tri_SweepContext = function() {
	this.triangles = [];
	this.points = [];
	this.edge_list = [];
	this.map = new haxe_ds_StringMap();
	this.basin = new org_poly2tri_Basin();
	this.edge_event = new org_poly2tri_EdgeEvent();
};
$hxClasses["org.poly2tri.SweepContext"] = org_poly2tri_SweepContext;
org_poly2tri_SweepContext.__name__ = "org.poly2tri.SweepContext";
org_poly2tri_SweepContext.prototype = {
	addPoints: function(points) {
		var _g = 0;
		while(_g < points.length) {
			var point = points[_g];
			++_g;
			this.points.push(point);
		}
	}
	,addPolyline: function(polyline) {
		this.initEdges(polyline);
		this.addPoints(polyline);
	}
	,initEdges: function(polyline) {
		var _g = 0;
		var _g1 = polyline.length;
		while(_g < _g1) {
			var n = _g++;
			var nx = polyline[(n + 1) % polyline.length];
			this.edge_list.push(new org_poly2tri_Edge(polyline[n],nx));
		}
	}
	,addToMap: function(triangle) {
		var this1 = this.map;
		var key = triangle.toString();
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,triangle);
		} else {
			_this.h[key] = triangle;
		}
	}
	,initTriangulation: function() {
		var xmin = this.points[0].x;
		var xmax = this.points[0].x;
		var ymin = this.points[0].y;
		var ymax = this.points[0].y;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.x > xmax) {
				xmax = p.x;
			}
			if(p.x < xmin) {
				xmin = p.x;
			}
			if(p.y > ymax) {
				ymax = p.y;
			}
			if(p.y < ymin) {
				ymin = p.y;
			}
		}
		var dx = org_poly2tri_Constants.kAlpha * (xmax - xmin);
		var dy = org_poly2tri_Constants.kAlpha * (ymax - ymin);
		this.head = new org_poly2tri_Point(xmax + dx,ymin - dy);
		this.tail = new org_poly2tri_Point(xmin - dy,ymin - dy);
		org_poly2tri_Point.sortPoints(this.points);
	}
	,locateNode: function(point) {
		return this.front.locateNode(point.x);
	}
	,createAdvancingFront: function() {
		var triangle = new org_poly2tri_Triangle(this.points[0],this.tail,this.head);
		this.addToMap(triangle);
		var head = new org_poly2tri_Node(triangle.points[1],triangle);
		var middle = new org_poly2tri_Node(triangle.points[0],triangle);
		var tail = new org_poly2tri_Node(triangle.points[2]);
		this.front = new org_poly2tri_AdvancingFront(head,tail);
		head.next = middle;
		middle.next = tail;
		middle.prev = head;
		tail.prev = middle;
	}
	,removeNode: function(node) {
	}
	,mapTriangleToNodes: function(triangle) {
		if(triangle.neighbors[0] == null) {
			var neighbor = this.front.locatePoint(triangle.pointCW(triangle.points[0]));
			if(neighbor != null) {
				neighbor.triangle = triangle;
			}
		}
		if(triangle.neighbors[1] == null) {
			var neighbor1 = this.front.locatePoint(triangle.pointCW(triangle.points[1]));
			if(neighbor1 != null) {
				neighbor1.triangle = triangle;
			}
		}
		if(triangle.neighbors[2] == null) {
			var neighbor2 = this.front.locatePoint(triangle.pointCW(triangle.points[2]));
			if(neighbor2 != null) {
				neighbor2.triangle = triangle;
			}
		}
	}
	,meshClean: function(t) {
		var tmp = [t];
		while(true) {
			var t1 = tmp.pop();
			if(t1 == null) {
				break;
			}
			if(t1.interior) {
				continue;
			}
			t1.interior = true;
			this.triangles.push(t1);
			if(!t1.constrained_edge[0]) {
				tmp.push(t1.neighbors[0]);
			}
			if(!t1.constrained_edge[1]) {
				tmp.push(t1.neighbors[1]);
			}
			if(!t1.constrained_edge[2]) {
				tmp.push(t1.neighbors[2]);
			}
		}
	}
	,__class__: org_poly2tri_SweepContext
};
var org_poly2tri_Triangle = function(p1,p2,p3,fixOrientation,checkOrientation) {
	if(checkOrientation == null) {
		checkOrientation = true;
	}
	if(fixOrientation == null) {
		fixOrientation = false;
	}
	if(fixOrientation) {
		if(org_poly2tri_Orientation.orient2d(p1,p2,p3) == 1) {
			var pt = p3;
			p3 = p2;
			p2 = pt;
		}
	}
	if(checkOrientation && org_poly2tri_Orientation.orient2d(p3,p2,p1) != 1) {
		throw new js__$Boot_HaxeError("Triangle::Triangle must defined with Orientation.CW");
	}
	this.points = [p1,p2,p3];
	this.neighbors = [null,null,null];
	this.constrained_edge = [false,false,false];
	this.delaunay_edge = [false,false,false];
};
$hxClasses["org.poly2tri.Triangle"] = org_poly2tri_Triangle;
org_poly2tri_Triangle.__name__ = "org.poly2tri.Triangle";
org_poly2tri_Triangle.rotateTrianglePair = function(t,p,ot,op) {
	var n1 = t.neighborCCW(p);
	var n2 = t.neighborCW(p);
	var n3 = ot.neighborCCW(op);
	var n4 = ot.neighborCW(op);
	var ce1 = t.getConstrainedEdgeCCW(p);
	var ce2 = t.getConstrainedEdgeCW(p);
	var ce3 = ot.getConstrainedEdgeCCW(op);
	var ce4 = ot.getConstrainedEdgeCW(op);
	var de1 = t.getDelaunayEdgeCCW(p);
	var de2 = t.getDelaunayEdgeCW(p);
	var de3 = ot.getDelaunayEdgeCCW(op);
	var de4 = ot.getDelaunayEdgeCW(op);
	t.legalize(p,op);
	ot.legalize(op,p);
	ot.setDelaunayEdgeCCW(p,de1);
	t.setDelaunayEdgeCW(p,de2);
	t.setDelaunayEdgeCCW(op,de3);
	ot.setDelaunayEdgeCW(op,de4);
	ot.setConstrainedEdgeCCW(p,ce1);
	t.setConstrainedEdgeCW(p,ce2);
	t.setConstrainedEdgeCCW(op,ce3);
	ot.setConstrainedEdgeCW(op,ce4);
	t.clearNeigbors();
	ot.clearNeigbors();
	if(n1 != null) {
		ot.markNeighborTriangle(n1);
	}
	if(n2 != null) {
		t.markNeighborTriangle(n2);
	}
	if(n3 != null) {
		t.markNeighborTriangle(n3);
	}
	if(n4 != null) {
		ot.markNeighborTriangle(n4);
	}
	t.markNeighborTriangle(ot);
};
org_poly2tri_Triangle.prototype = {
	containsPoint: function(point) {
		if(!(point.equals(this.points[0]) || point.equals(this.points[1]))) {
			return point.equals(this.points[2]);
		} else {
			return true;
		}
	}
	,containsEdgePoints: function(p1,p2) {
		if(this.containsPoint(p1)) {
			return this.containsPoint(p2);
		} else {
			return false;
		}
	}
	,markNeighbor: function(t,p1,p2) {
		if(p1.equals(this.points[2]) && p2.equals(this.points[1]) || p1.equals(this.points[1]) && p2.equals(this.points[2])) {
			this.neighbors[0] = t;
			return;
		}
		if(p1.equals(this.points[0]) && p2.equals(this.points[2]) || p1.equals(this.points[2]) && p2.equals(this.points[0])) {
			this.neighbors[1] = t;
			return;
		}
		if(p1.equals(this.points[0]) && p2.equals(this.points[1]) || p1.equals(this.points[1]) && p2.equals(this.points[0])) {
			this.neighbors[2] = t;
			return;
		}
		throw new js__$Boot_HaxeError("Invalid markNeighbor call (1)!");
	}
	,markNeighborTriangle: function(that) {
		if(that.containsEdgePoints(this.points[1],this.points[2])) {
			this.neighbors[0] = that;
			that.markNeighbor(this,this.points[1],this.points[2]);
			return;
		}
		if(that.containsEdgePoints(this.points[0],this.points[2])) {
			this.neighbors[1] = that;
			that.markNeighbor(this,this.points[0],this.points[2]);
			return;
		}
		if(that.containsEdgePoints(this.points[0],this.points[1])) {
			this.neighbors[2] = that;
			that.markNeighbor(this,this.points[0],this.points[1]);
			return;
		}
	}
	,getPointIndexOffset: function(p,offset) {
		if(offset == null) {
			offset = 0;
		}
		var no = offset;
		while(no < 0) no += 3;
		while(no > 2) no -= 3;
		if(p.equals(this.points[0])) {
			return no;
		}
		++no;
		while(no < 0) no += 3;
		while(no > 2) no -= 3;
		if(p.equals(this.points[1])) {
			return no;
		}
		++no;
		while(no < 0) no += 3;
		while(no > 2) no -= 3;
		if(p.equals(this.points[2])) {
			return no;
		}
		++no;
		throw new js__$Boot_HaxeError("Triangle::Point not in triangle");
	}
	,pointCW: function(p) {
		return this.points[this.getPointIndexOffset(p,-1)];
	}
	,pointCCW: function(p) {
		return this.points[this.getPointIndexOffset(p,1)];
	}
	,neighborCW: function(p) {
		return this.neighbors[this.getPointIndexOffset(p,1)];
	}
	,neighborCCW: function(p) {
		return this.neighbors[this.getPointIndexOffset(p,-1)];
	}
	,getConstrainedEdgeCW: function(p) {
		return this.constrained_edge[this.getPointIndexOffset(p,1)];
	}
	,setConstrainedEdgeCW: function(p,ce) {
		return this.constrained_edge[this.getPointIndexOffset(p,1)] = ce;
	}
	,getConstrainedEdgeCCW: function(p) {
		return this.constrained_edge[this.getPointIndexOffset(p,-1)];
	}
	,setConstrainedEdgeCCW: function(p,ce) {
		return this.constrained_edge[this.getPointIndexOffset(p,-1)] = ce;
	}
	,getDelaunayEdgeCW: function(p) {
		return this.delaunay_edge[this.getPointIndexOffset(p,1)];
	}
	,setDelaunayEdgeCW: function(p,e) {
		return this.delaunay_edge[this.getPointIndexOffset(p,1)] = e;
	}
	,getDelaunayEdgeCCW: function(p) {
		return this.delaunay_edge[this.getPointIndexOffset(p,-1)];
	}
	,setDelaunayEdgeCCW: function(p,e) {
		return this.delaunay_edge[this.getPointIndexOffset(p,-1)] = e;
	}
	,neighborAcross: function(p) {
		return this.neighbors[this.getPointIndexOffset(p,0)];
	}
	,oppositePoint: function(t,p) {
		return this.pointCW(t.pointCW(p));
	}
	,legalize: function(opoint,npoint) {
		if(npoint == null) {
			this.legalize(this.points[0],opoint);
			return;
		}
		if(opoint.equals(this.points[0])) {
			this.points[1] = this.points[0];
			this.points[0] = this.points[2];
			this.points[2] = npoint;
		} else if(opoint.equals(this.points[1])) {
			this.points[2] = this.points[1];
			this.points[1] = this.points[0];
			this.points[0] = npoint;
		} else if(opoint.equals(this.points[2])) {
			this.points[0] = this.points[2];
			this.points[2] = this.points[1];
			this.points[1] = npoint;
		} else {
			throw new js__$Boot_HaxeError("Invalid js.poly2tri.Triangle.Legalize call!");
		}
	}
	,index: function(p) {
		try {
			return this.getPointIndexOffset(p,0);
		} catch( msg ) {
			var msg1 = ((msg) instanceof js__$Boot_HaxeError) ? msg.val : msg;
			if(typeof(msg1) == "string") {
				haxe_Log.trace(msg1,{ fileName : "org/poly2tri/Triangle.hx", lineNumber : 235, className : "org.poly2tri.Triangle", methodName : "index"});
			} else {
				throw msg;
			}
		}
		return -1;
	}
	,edgeIndex: function(p1,p2) {
		if(p1.equals(this.points[0])) {
			if(p2.equals(this.points[1])) {
				return 2;
			}
			if(p2.equals(this.points[2])) {
				return 1;
			}
		} else if(p1.equals(this.points[1])) {
			if(p2.equals(this.points[2])) {
				return 0;
			}
			if(p2.equals(this.points[0])) {
				return 2;
			}
		} else if(p1.equals(this.points[2])) {
			if(p2.equals(this.points[0])) {
				return 1;
			}
			if(p2.equals(this.points[1])) {
				return 0;
			}
		}
		return -1;
	}
	,markConstrainedEdgeByIndex: function(index) {
		this.constrained_edge[index] = true;
	}
	,markConstrainedEdgeByEdge: function(edge) {
		this.markConstrainedEdgeByPoints(edge.p,edge.q);
	}
	,markConstrainedEdgeByPoints: function(p,q) {
		if(q.equals(this.points[0]) && p.equals(this.points[1]) || q.equals(this.points[1]) && p.equals(this.points[0])) {
			this.constrained_edge[2] = true;
			return;
		}
		if(q.equals(this.points[0]) && p.equals(this.points[2]) || q.equals(this.points[2]) && p.equals(this.points[0])) {
			this.constrained_edge[1] = true;
			return;
		}
		if(q.equals(this.points[1]) && p.equals(this.points[2]) || q.equals(this.points[2]) && p.equals(this.points[1])) {
			this.constrained_edge[0] = true;
			return;
		}
	}
	,isEdgeSide: function(ep,eq) {
		var index = this.edgeIndex(ep,eq);
		if(index == -1) {
			return false;
		}
		this.markConstrainedEdgeByIndex(index);
		var that = this.neighbors[index];
		if(that != null) {
			that.markConstrainedEdgeByPoints(ep,eq);
		}
		return true;
	}
	,clearNeigbors: function() {
		this.neighbors[0] = null;
		this.neighbors[1] = null;
		this.neighbors[2] = null;
	}
	,clearDelunayEdges: function() {
		this.delaunay_edge[0] = false;
		this.delaunay_edge[1] = false;
		this.delaunay_edge[2] = false;
	}
	,toString: function() {
		return "Triangle(" + Std.string(this.points[0]) + ", " + Std.string(this.points[1]) + ", " + Std.string(this.points[2]) + ")";
	}
	,__class__: org_poly2tri_Triangle
};
var org_poly2tri_Utils = function() { };
$hxClasses["org.poly2tri.Utils"] = org_poly2tri_Utils;
org_poly2tri_Utils.__name__ = "org.poly2tri.Utils";
org_poly2tri_Utils.insideIncircle = function(pa,pb,pc,pd) {
	var adx = pa.x - pd.x;
	var ady = pa.y - pd.y;
	var bdx = pb.x - pd.x;
	var bdy = pb.y - pd.y;
	var adxbdy = adx * bdy;
	var bdxady = bdx * ady;
	var oabd = adxbdy - bdxady;
	if(oabd <= 0) {
		return false;
	}
	var cdx = pc.x - pd.x;
	var cdy = pc.y - pd.y;
	var cdxady = cdx * ady;
	var adxcdy = adx * cdy;
	var ocad = cdxady - adxcdy;
	if(ocad <= 0) {
		return false;
	}
	var bdxcdy = bdx * cdy;
	var cdxbdy = cdx * bdy;
	var alift = adx * adx + ady * ady;
	var blift = bdx * bdx + bdy * bdy;
	var clift = cdx * cdx + cdy * cdy;
	var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;
	return det > 0;
};
org_poly2tri_Utils.inScanArea = function(pa,pb,pc,pd) {
	var pdx = pd.x;
	var pdy = pd.y;
	var adx = pa.x - pdx;
	var ady = pa.y - pdy;
	var bdx = pb.x - pdx;
	var bdy = pb.y - pdy;
	var adxbdy = adx * bdy;
	var bdxady = bdx * ady;
	var oabd = adxbdy - bdxady;
	if(oabd <= org_poly2tri_Constants.EPSILON) {
		return false;
	}
	var cdx = pc.x - pdx;
	var cdy = pc.y - pdy;
	var cdxady = cdx * ady;
	var adxcdy = adx * cdy;
	var ocad = cdxady - adxcdy;
	if(ocad <= org_poly2tri_Constants.EPSILON) {
		return false;
	}
	return true;
};
var org_poly2tri_VisiblePolygon = function() {
	this.reset();
};
$hxClasses["org.poly2tri.VisiblePolygon"] = org_poly2tri_VisiblePolygon;
org_poly2tri_VisiblePolygon.__name__ = "org.poly2tri.VisiblePolygon";
org_poly2tri_VisiblePolygon.prototype = {
	addPolyline: function(polyline) {
		this.sweepContext.addPolyline(polyline);
	}
	,addPolylineFromFloats: function(pos) {
		var a = [];
		var _g = 0;
		var _g1 = pos.length;
		while(_g < _g1) {
			var i = _g++;
			if(i % 2 == 1) {
				continue;
			}
			a.push(new org_poly2tri_Point(pos[i],pos[i + 1]));
		}
		this.addPolyline(a);
	}
	,reset: function() {
		this.sweepContext = new org_poly2tri_SweepContext();
		this.sweep = new org_poly2tri_Sweep(this.sweepContext);
		this.triangulated = false;
	}
	,performTriangulationOnce: function() {
		if(this.triangulated) {
			return;
		}
		this.triangulated = true;
		this.sweep.triangulate();
	}
	,getVerticesAndTriangles: function() {
		if(!this.triangulated) {
			return null;
		}
		var vertices = [];
		var ids = [];
		var _g = 0;
		var _g1 = this.sweepContext.points.length;
		while(_g < _g1) {
			var i = _g++;
			var p = this.sweepContext.points[i];
			vertices.push(p.x);
			vertices.push(p.y);
			vertices.push(0);
			ids[p.id] = i;
		}
		var tris = [];
		var _g2 = 0;
		var _g3 = this.sweepContext.triangles;
		while(_g2 < _g3.length) {
			var t = _g3[_g2];
			++_g2;
			tris.push(ids[t.points[0].id]);
			tris.push(ids[t.points[1].id]);
			tris.push(ids[t.points[2].id]);
		}
		return { vertices : vertices, triangles : tris};
	}
	,getNumTriangles: function() {
		return this.sweepContext.triangles.length;
	}
	,__class__: org_poly2tri_VisiblePolygon
};
var pallette_ColorWheel24 = function() { };
$hxClasses["pallette.ColorWheel24"] = pallette_ColorWheel24;
pallette_ColorWheel24.__name__ = "pallette.ColorWheel24";
pallette_ColorWheel24.getWheel = function() {
	return [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
};
pallette_ColorWheel24.random = function() {
	var wheel = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var rnd = Math.round(Math.random() * 23);
	return wheel[rnd];
};
pallette_ColorWheel24.getName = function(w) {
	switch(w) {
	case -13354819:
		return "earlySpringNight";
	case -12953665:
		return "freeSpeechBlue";
	case -12617788:
		return "celestialPlum";
	case -12217654:
		return "blueTourmaline";
	case -11851843:
		return "blueDepression";
	case -11686193:
		return "maximumBlue";
	case -11352449:
		return "parisGreen";
	case -11288539:
		return "fieldGreen";
	case -9230154:
		return "nebulaFuschsia";
	case -8796379:
		return "appleGreen";
	case -5778134:
		return "peraRocha";
	case -4904763:
		return "fushsiaFlair";
	case -3986796:
		return "royalFuchsia";
	case -2280591:
		return "fuchsiaPurple";
	case -2100183:
		return "spoiledEgg";
	case -1098686:
		return "redRadish";
	case -893376:
		return "orangeSoda";
	case -884166:
		return "gokuOrange";
	case -742865:
		return "carona";
	case -617161:
		return "highlighterOrange";
	case -605897:
		return "solarPower";
	case -338891:
		return "flirtaious";
	case -134353:
		return "yellowBellied";
	case -211:
		return "daffodil";
	}
};
pallette_ColorWheel24.next = function(w) {
	var wheel = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var i = wheel.indexOf(w);
	var v = i < 24 ? i + 1 : 0;
	return wheel[v];
};
var trilateral2_Algebra = function() { };
$hxClasses["trilateral2.Algebra"] = trilateral2_Algebra;
trilateral2_Algebra.__name__ = "trilateral2.Algebra";
trilateral2_Algebra.adjustWinding = function(A_,B_,C_) {
	var this1 = new geom_structure_Mat1x2(B_.x - A_.x,B_.y - A_.y);
	var ba = this1;
	var this2 = new geom_structure_Mat1x2(C_.x - A_.x,C_.y - A_.y);
	var ca = this2;
	var val = !(ba.x * ca.y - ba.y * ca.x < 0);
	return val;
};
trilateral2_Algebra.sign = function(n) {
	return Math.abs(n) / n | 0;
};
trilateral2_Algebra.quadCurve = function(p,ax,ay,bx,by,cx,cy) {
	var x = ax - bx;
	var y = ay - by;
	var x1 = bx - cx;
	var y1 = by - cy;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1);
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.quadStep);
	var l = p.length;
	p[l++] = ax;
	p[l++] = ay;
	var t = step;
	while(t < 1.) {
		var u = 1 - t;
		p[l++] = Math.pow(u,2) * ax + 2 * u * t * bx + Math.pow(t,2) * cx;
		var u1 = 1 - t;
		p[l++] = Math.pow(u1,2) * ay + 2 * u1 * t * by + Math.pow(t,2) * cy;
		t += step;
	}
	p[l++] = cx;
	p[l++] = cy;
	return p;
};
trilateral2_Algebra.cubicCurve = function(p,ax,ay,bx,by,cx,cy,dx,dy) {
	var x = ax - bx;
	var y = ay - by;
	var x1 = bx - cx;
	var y1 = by - cy;
	var x2 = cx - dx;
	var y2 = cy - dy;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2);
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.cubicStep);
	var l = p.length;
	p[l++] = ax;
	p[l++] = ay;
	var t = step;
	while(t < 1.) {
		var u = 1 - t;
		p[l++] = Math.pow(u,3) * ax + 3 * Math.pow(u,2) * t * bx + 3 * u * Math.pow(t,2) * cx + Math.pow(t,3) * dx;
		var u1 = 1 - t;
		p[l++] = Math.pow(u1,3) * ay + 3 * Math.pow(u1,2) * t * by + 3 * u1 * Math.pow(t,2) * cy + Math.pow(t,3) * dy;
		t += step;
	}
	p[l++] = dx;
	p[l++] = dy;
	return p;
};
trilateral2_Algebra.calculateQuadStep = function(ax,ay,bx,by,cx,cy) {
	var x = ax - bx;
	var y = ay - by;
	var x1 = bx - cx;
	var y1 = by - cy;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1);
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	return Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.quadStep);
};
trilateral2_Algebra.calculateCubicStep = function(ax,ay,bx,by,cx,cy,dx,dy) {
	var x = ax - bx;
	var y = ay - by;
	var x1 = bx - cx;
	var y1 = by - cy;
	var x2 = cx - dx;
	var y2 = cy - dy;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2);
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	return Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.cubicStep);
};
trilateral2_Algebra.lineAB = function(A,B,width) {
	var dx = A.x - B.x;
	var dy = A.y - B.y;
	var P = new geom_structure_Mat1x2(A.x - width / 2,A.y);
	var omega = Math.atan2(dy,dx);
	var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
	var pivotX = A.x + width / 2;
	var pivotY = A.y;
	var px = P.x;
	var py = P.y;
	var dx1 = dim.x;
	var dy1 = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx1,py);
	var C_ = new geom_structure_Mat1x2(px + dx1,py + dy1);
	var D_ = new geom_structure_Mat1x2(px,py + dy1);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px1 = A_.x - pivotX;
		var py1 = A_.y - pivotY;
		var px2 = px1 * cos - py1 * sin;
		py1 = py1 * cos + px1 * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py1 + pivotY);
		var px3 = B_.x - pivotX;
		var py2 = B_.y - pivotY;
		var px21 = px3 * cos - py2 * sin;
		py2 = py2 * cos + px3 * sin;
		B_ = new geom_structure_Mat1x2(px21 + pivotX,py2 + pivotY);
		var px4 = C_.x - pivotX;
		var py3 = C_.y - pivotY;
		var px22 = px4 * cos - py3 * sin;
		py3 = py3 * cos + px4 * sin;
		C_ = new geom_structure_Mat1x2(px22 + pivotX,py3 + pivotY);
		var px5 = D_.x - pivotX;
		var py4 = D_.y - pivotY;
		var px23 = px5 * cos - py4 * sin;
		py4 = py4 * cos + px5 * sin;
		D_ = new geom_structure_Mat1x2(px23 + pivotX,py4 + pivotY);
	}
	return new geom_obj_Quad2D(A_,B_,C_,D_);
};
trilateral2_Algebra.lineABCoord = function(ax,ay,bx,by,width) {
	var dx = ax - bx;
	var dy = ay - by;
	var P = new geom_structure_Mat1x2(ax - width / 2,ay);
	var omega = Math.atan2(dy,dx);
	var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
	var pivotX = ax + width / 2;
	var px = P.x;
	var py = P.y;
	var dx1 = dim.x;
	var dy1 = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx1,py);
	var C_ = new geom_structure_Mat1x2(px + dx1,py + dy1);
	var D_ = new geom_structure_Mat1x2(px,py + dy1);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px1 = A_.x - pivotX;
		var py1 = A_.y - ay;
		var px2 = px1 * cos - py1 * sin;
		py1 = py1 * cos + px1 * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py1 + ay);
		var px3 = B_.x - pivotX;
		var py2 = B_.y - ay;
		var px21 = px3 * cos - py2 * sin;
		py2 = py2 * cos + px3 * sin;
		B_ = new geom_structure_Mat1x2(px21 + pivotX,py2 + ay);
		var px4 = C_.x - pivotX;
		var py3 = C_.y - ay;
		var px22 = px4 * cos - py3 * sin;
		py3 = py3 * cos + px4 * sin;
		C_ = new geom_structure_Mat1x2(px22 + pivotX,py3 + ay);
		var px5 = D_.x - pivotX;
		var py4 = D_.y - ay;
		var px23 = px5 * cos - py4 * sin;
		py4 = py4 * cos + px5 * sin;
		D_ = new geom_structure_Mat1x2(px23 + pivotX,py4 + ay);
	}
	return new geom_obj_Quad2D(A_,B_,C_,D_);
};
trilateral2_Algebra.rotateVectorLine = function(pos,dim,omega,pivotX,pivotY) {
	var px = pos.x;
	var py = pos.y;
	var dx = dim.x;
	var dy = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx,py);
	var C_ = new geom_structure_Mat1x2(px + dx,py + dy);
	var D_ = new geom_structure_Mat1x2(px,py + dy);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px1 = A_.x - pivotX;
		var py1 = A_.y - pivotY;
		var px2 = px1 * cos - py1 * sin;
		py1 = py1 * cos + px1 * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py1 + pivotY);
		var px3 = B_.x - pivotX;
		var py2 = B_.y - pivotY;
		var px21 = px3 * cos - py2 * sin;
		py2 = py2 * cos + px3 * sin;
		B_ = new geom_structure_Mat1x2(px21 + pivotX,py2 + pivotY);
		var px4 = C_.x - pivotX;
		var py3 = C_.y - pivotY;
		var px22 = px4 * cos - py3 * sin;
		py3 = py3 * cos + px4 * sin;
		C_ = new geom_structure_Mat1x2(px22 + pivotX,py3 + pivotY);
		var px5 = D_.x - pivotX;
		var py4 = D_.y - pivotY;
		var px23 = px5 * cos - py4 * sin;
		py4 = py4 * cos + px5 * sin;
		D_ = new geom_structure_Mat1x2(px23 + pivotX,py4 + pivotY);
	}
	return new geom_obj_Quad2D(A_,B_,C_,D_);
};
trilateral2_Algebra.pivotCheap = function(p,sin,cos,pivotX,pivotY) {
	var px = p.x - pivotX;
	var py = p.y - pivotY;
	var px2 = px * cos - py * sin;
	py = py * cos + px * sin;
	return new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
};
trilateral2_Algebra.pivot = function(p,omega,pivotX,pivotY) {
	var px = p.x - pivotX;
	var py = p.y - pivotY;
	var px2 = px * Math.cos(omega) - py * Math.sin(omega);
	py = py * Math.cos(omega) + px * Math.sin(omega);
	return new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
};
trilateral2_Algebra.thetaCheap = function(dx,dy) {
	return Math.atan2(dy,dx);
};
trilateral2_Algebra.distCheap = function(dx,dy) {
	return dx * dx + dy * dy;
};
trilateral2_Algebra.distance = function(px,py,qx,qy) {
	var x = px - qx;
	var y = py - qy;
	return Math.sqrt(x * x + y * y);
};
var trilateral2__$ArrayTriple_ArrayTriple_$Impl_$ = {};
$hxClasses["trilateral2._ArrayTriple.ArrayTriple_Impl_"] = trilateral2__$ArrayTriple_ArrayTriple_$Impl_$;
trilateral2__$ArrayTriple_ArrayTriple_$Impl_$.__name__ = "trilateral2._ArrayTriple.ArrayTriple_Impl_";
trilateral2__$ArrayTriple_ArrayTriple_$Impl_$._new = function(arr) {
	var this1 = arr;
	return this1;
};
trilateral2__$ArrayTriple_ArrayTriple_$Impl_$.get_length = function(this1) {
	return this1.length / 3 | 0;
};
trilateral2__$ArrayTriple_ArrayTriple_$Impl_$.access = function(this1,key) {
	var i = key * 3 | 0;
	return { a : this1[i], b : this1[i + 1], c : this1[i + 2]};
};
trilateral2__$ArrayTriple_ArrayTriple_$Impl_$.reverse = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = trilateral2__$ArrayTriple_ArrayTriple_$Impl_$._new(this1);
	while(_g < (_g1.length / 3 | 0)) {
		var i = _g * 3 | 0;
		var i_a = _g1[i];
		var i_b = _g1[i + 1];
		var i_c = _g1[i + 2];
		++_g;
		arr.unshift(i_c);
		arr.unshift(i_b);
		arr.unshift(i_a);
	}
	this1 = arr;
	return arr;
};
var trilateral2__$ColorAbstract_ColorAbstract_$Impl_$ = {};
$hxClasses["trilateral2._ColorAbstract.ColorAbstract_Impl_"] = trilateral2__$ColorAbstract_ColorAbstract_$Impl_$;
trilateral2__$ColorAbstract_ColorAbstract_$Impl_$.__name__ = "trilateral2._ColorAbstract.ColorAbstract_Impl_";
trilateral2__$ColorAbstract_ColorAbstract_$Impl_$._new = function(colorType) {
	var this1 = colorType;
	return this1;
};
trilateral2__$ColorAbstract_ColorAbstract_$Impl_$.get_pos = function(this1) {
	return this1.get_pos();
};
trilateral2__$ColorAbstract_ColorAbstract_$Impl_$.set_pos = function(this1,v) {
	this1.set_pos(v);
	return v;
};
trilateral2__$ColorAbstract_ColorAbstract_$Impl_$.set_size = function(this1,v) {
	this1.set_size(v);
	return v;
};
trilateral2__$ColorAbstract_ColorAbstract_$Impl_$.get_size = function(this1) {
	return this1.get_size();
};
var trilateral2_Contour = function(pen_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.counter = 0;
	this.count = 0;
	this.pointsAnti = [];
	this.pointsClock = [];
	this.debugCol12 = -893376;
	this.debugCol11 = -3986796;
	this.debugCol10 = -9230154;
	this.debugCol9 = -13354819;
	this.debugCol8 = -12617788;
	this.debugCol7 = -11686193;
	this.debugCol6 = -11288539;
	this.debugCol5 = -5778134;
	this.debugCol4 = -211;
	this.debugCol3 = -338891;
	this.debugCol2 = -742865;
	this.debugCol1 = -884166;
	this.debugCol0 = -1098686;
	this.pen = pen_;
	this.endLine = endLine_;
};
$hxClasses["trilateral2.Contour"] = trilateral2_Contour;
trilateral2_Contour.__name__ = "trilateral2.Contour";
trilateral2_Contour.thetaCompute = function(px,py,qx,qy) {
	return Math.atan2(py - qy,px - qx);
};
trilateral2_Contour.dist = function(px,py,qx,qy) {
	var x = px - qx;
	var y = py - qy;
	return x * x + y * y;
};
trilateral2_Contour.prototype = {
	reset: function() {
		this.angleA = 0;
		this.count = 0;
		this.kax = 0;
		this.kay = 0;
		this.kbx = 0;
		this.kby = 0;
		this.kcx = 0;
		this.kcy = 0;
		this.ncx = 0;
		this.ncy = 0;
		this.ax = 0;
		this.ay = 0;
		this.bx = 0;
		this.by = 0;
		this.cx = 0;
		this.cy = 0;
		this.dx = null;
		this.dy = null;
		this.ex = null;
		this.ey = null;
		this.pointsClock.length = 0;
		this.pointsAnti.length = 0;
	}
	,computeDE: function() {
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
	}
	,anglesCompute: function() {
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
	}
	,thetaComputeAdj: function(qx,qy) {
		return -Math.atan2(this.ay - qy,this.ax - qx) - Math.PI / 2;
	}
	,triangleJoin: function(ax_,ay_,bx_,by_,width_,curveEnds,overlap) {
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = this.dx != null ? this.angle1 : null;
		this.halfA = Math.PI / 2;
		this.ax = bx_;
		this.ay = by_;
		this.bx = ax_;
		this.by = ay_;
		this.beta = Math.PI / 2 - this.halfA;
		this.r = width_ / 2 * Math.cos(this.beta);
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
		this.ax = ax_;
		this.ay = ay_;
		this.bx = bx_;
		this.by = by_;
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
		var x = this.dxOld - bx_;
		var y = this.dyOld - by_;
		var x1 = this.exOld - bx_;
		var y1 = this.eyOld - by_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(this.ay - this.dyOld,this.ax - this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(this.ay - this.eyPrev,this.ax - this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(this.ay - this.eyOld,this.ax - this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(this.ay - this.dyPrev,this.ax - this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(!overlap && this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			this.jx = this.ax + h * Math.sin(delta);
			this.jy = this.ay + h * Math.cos(delta);
		}
		if(this.count == 0 && (this.endLine == 1 || this.endLine == 3)) {
			var ax = this.ax;
			var ay = this.ay;
			var radius = width_ / 2;
			var beta = -this.angle1 - Math.PI / 2;
			var gamma1 = -this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this = this.pen;
			var color = -1;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.colorType.colorTriangles(color,len);
			var pA = this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(overlap) {
			var _this1 = this.pen;
			var color1 = -1;
			if(color1 == -1) {
				color1 = _this1.currentColor;
			}
			_this1.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color1,color1,color1);
			var _this2 = this.pen;
			var color2 = -1;
			if(color2 == -1) {
				color2 = _this2.currentColor;
			}
			_this2.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color2,color2,color2);
		} else {
			if(this.count != 0) {
				this.addQuads(clockWise,width_);
			}
			this.quadIndex = this.pen.drawType.get_pos();
			if(this.count == 0) {
				this.penultimateAX = this.dxPrev;
				this.penultimateAY = this.dyPrev;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				this.penultimateCX = this.dx;
				this.penultimateCY = this.dy;
				this.lastClockX = this.exPrev;
				this.lastClockY = this.eyPrev;
				var _this3 = this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this3.currentColor;
				}
				_this3.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this3.transformMatrix != null) {
					_this3.drawType.transform(_this3.transformMatrix);
				}
				_this3.drawType.next();
				_this3.colorType.cornerColors(color3,color3,color3);
				var _this4 = this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this4.currentColor;
				}
				_this4.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color4,color4,color4);
			} else {
				if(clockWise && !this.lastClock) {
					this.penultimateAX = this.jx;
					this.penultimateAY = this.jy;
					this.lastAntiX = this.ex;
					this.lastAntiY = this.ey;
					this.penultimateCX = this.dx;
					this.penultimateCY = this.dy;
					this.lastClockX = this.exPrev;
					this.lastClockY = this.eyPrev;
					var _this5 = this.pen;
					var color5 = -1;
					if(color5 == null) {
						color5 = -1;
					}
					if(color5 == -1) {
						color5 = _this5.currentColor;
					}
					_this5.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
					if(_this5.transformMatrix != null) {
						_this5.drawType.transform(_this5.transformMatrix);
					}
					_this5.drawType.next();
					_this5.colorType.cornerColors(color5,color5,color5);
					var _this6 = this.pen;
					var color6 = -1;
					if(color6 == null) {
						color6 = -1;
					}
					if(color6 == -1) {
						color6 = _this6.currentColor;
					}
					_this6.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
					if(_this6.transformMatrix != null) {
						_this6.drawType.transform(_this6.transformMatrix);
					}
					_this6.drawType.next();
					_this6.colorType.cornerColors(color6,color6,color6);
				}
				if(clockWise && this.lastClock) {
					this.penultimateAX = this.jx;
					this.penultimateAY = this.jy;
					this.lastAntiX = this.ex;
					this.lastAntiY = this.ey;
					this.penultimateCX = this.dx;
					this.penultimateCY = this.dy;
					this.lastClockX = this.exPrev;
					this.lastClockY = this.eyPrev;
					var _this7 = this.pen;
					var color7 = -1;
					if(color7 == null) {
						color7 = -1;
					}
					if(color7 == -1) {
						color7 = _this7.currentColor;
					}
					_this7.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
					if(_this7.transformMatrix != null) {
						_this7.drawType.transform(_this7.transformMatrix);
					}
					_this7.drawType.next();
					_this7.colorType.cornerColors(color7,color7,color7);
					var _this8 = this.pen;
					var color8 = -1;
					if(color8 == null) {
						color8 = -1;
					}
					if(color8 == -1) {
						color8 = _this8.currentColor;
					}
					_this8.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
					if(_this8.transformMatrix != null) {
						_this8.drawType.transform(_this8.transformMatrix);
					}
					_this8.drawType.next();
					_this8.colorType.cornerColors(color8,color8,color8);
				}
				if(!clockWise && !this.lastClock) {
					this.penultimateCX = this.dx;
					this.penultimateCY = this.dy;
					this.lastClockX = this.jx;
					this.lastClockY = this.jy;
					this.penultimateAX = this.dxPrev;
					this.penultimateAY = this.dyPrev;
					this.lastAntiX = this.ex;
					this.lastAntiY = this.ey;
					var _this9 = this.pen;
					var color9 = -1;
					if(color9 == null) {
						color9 = -1;
					}
					if(color9 == -1) {
						color9 = _this9.currentColor;
					}
					_this9.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.jx,this.jy,0);
					if(_this9.transformMatrix != null) {
						_this9.drawType.transform(_this9.transformMatrix);
					}
					_this9.drawType.next();
					_this9.colorType.cornerColors(color9,color9,color9);
					var _this10 = this.pen;
					var color10 = -1;
					if(color10 == null) {
						color10 = -1;
					}
					if(color10 == -1) {
						color10 = _this10.currentColor;
					}
					_this10.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
					if(_this10.transformMatrix != null) {
						_this10.drawType.transform(_this10.transformMatrix);
					}
					_this10.drawType.next();
					_this10.colorType.cornerColors(color10,color10,color10);
				}
				if(!clockWise && this.lastClock) {
					this.penultimateAX = this.dxPrev;
					this.penultimateAY = this.dyPrev;
					this.lastAntiX = this.ex;
					this.lastAntiY = this.ey;
					this.penultimateCX = this.jx;
					this.penultimateCY = this.jy;
					this.lastClockX = this.dx;
					this.lastClockY = this.dy;
					var _this11 = this.pen;
					var color11 = -1;
					if(color11 == null) {
						color11 = -1;
					}
					if(color11 == -1) {
						color11 = _this11.currentColor;
					}
					_this11.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
					if(_this11.transformMatrix != null) {
						_this11.drawType.transform(_this11.transformMatrix);
					}
					_this11.drawType.next();
					_this11.colorType.cornerColors(color11,color11,color11);
					var _this12 = this.pen;
					var color12 = -1;
					if(color12 == null) {
						color12 = -1;
					}
					if(color12 == -1) {
						color12 = _this12.currentColor;
					}
					_this12.drawType.triangle(this.dxPrev,this.dyPrev,0,this.jx,this.jy,0,this.ex,this.ey,0);
					if(_this12.transformMatrix != null) {
						_this12.drawType.transform(_this12.transformMatrix);
					}
					_this12.drawType.next();
					_this12.colorType.cornerColors(color12,color12,color12);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this13 = this.pen;
				var color13 = -1;
				if(color13 == -1) {
					color13 = _this13.currentColor;
				}
				_this13.colorType.colorTriangles(color13,len2);
			} else {
				var drawType2 = this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this14 = this.pen;
				var color14 = -1;
				if(color14 == -1) {
					color14 = _this14.currentColor;
				}
				_this14.colorType.colorTriangles(color14,len3);
			}
		} else if(this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this15 = this.pen;
					var color15 = -1;
					if(color15 == null) {
						color15 = -1;
					}
					if(color15 == -1) {
						color15 = _this15.currentColor;
					}
					_this15.drawType.triangle(this.dxOld,this.dyOld,0,this.exPrev,this.eyPrev,0,this.ax,this.ay,0);
					if(_this15.transformMatrix != null) {
						_this15.drawType.transform(_this15.transformMatrix);
					}
					_this15.drawType.next();
					_this15.colorType.cornerColors(color15,color15,color15);
				} else {
					var _this16 = this.pen;
					var color16 = -1;
					if(color16 == null) {
						color16 = -1;
					}
					if(color16 == -1) {
						color16 = _this16.currentColor;
					}
					_this16.drawType.triangle(this.exOld,this.eyOld,0,this.dxPrev,this.dyPrev,0,this.ax,this.ay,0);
					if(_this16.transformMatrix != null) {
						_this16.drawType.transform(_this16.transformMatrix);
					}
					_this16.drawType.next();
					_this16.colorType.cornerColors(color16,color16,color16);
				}
			} else if(clockWise) {
				var _this17 = this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this17.currentColor;
				}
				_this17.drawType.triangle(this.dxOld,this.dyOld,0,this.exPrev,this.eyPrev,0,this.jx,this.jy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color17,color17,color17);
			} else {
				var _this18 = this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this18.currentColor;
				}
				_this18.drawType.triangle(this.exOld,this.eyOld,0,this.dxPrev,this.dyPrev,0,this.jx,this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color18,color18,color18);
			}
		}
		this.kax = this.dxPrev;
		this.kay = this.dyPrev;
		this.kbx = this.dx;
		this.kby = this.dy;
		this.ncx = this.exPrev;
		this.ncy = this.eyPrev;
		this.kcx = this.ex;
		this.kcy = this.ey;
		if(curveEnds && !overlap && this.count != 0) {
			if(clockWise) {
				var _this19 = this.pen;
				var color19 = -1;
				if(color19 == null) {
					color19 = -1;
				}
				if(color19 == -1) {
					color19 = _this19.currentColor;
				}
				_this19.drawType.triangle(this.ax,this.ay,0,this.dxOld,this.dyOld,0,this.jx,this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color19,color19,color19);
				var _this20 = this.pen;
				var color20 = -1;
				if(color20 == null) {
					color20 = -1;
				}
				if(color20 == -1) {
					color20 = _this20.currentColor;
				}
				_this20.drawType.triangle(this.ax,this.ay,0,this.exPrev,this.eyPrev,0,this.jx,this.jy,0);
				if(_this20.transformMatrix != null) {
					_this20.drawType.transform(_this20.transformMatrix);
				}
				_this20.drawType.next();
				_this20.colorType.cornerColors(color20,color20,color20);
			} else {
				var _this21 = this.pen;
				var color21 = -1;
				if(color21 == null) {
					color21 = -1;
				}
				if(color21 == -1) {
					color21 = _this21.currentColor;
				}
				_this21.drawType.triangle(this.ax,this.ay,0,this.exOld,this.eyOld,0,this.jx,this.jy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color21,color21,color21);
				var _this22 = this.pen;
				var color22 = -1;
				if(color22 == null) {
					color22 = -1;
				}
				if(color22 == -1) {
					color22 = _this22.currentColor;
				}
				_this22.drawType.triangle(this.ax,this.ay,0,this.dxPrev,this.dyPrev,0,this.jx,this.jy,0);
				if(_this22.transformMatrix != null) {
					_this22.drawType.transform(_this22.transformMatrix);
				}
				_this22.drawType.next();
				_this22.colorType.cornerColors(color22,color22,color22);
			}
		}
		this.jxOld = this.jx;
		this.jyOld = this.jy;
		this.lastClock = clockWise;
		this.count++;
		return;
	}
	,overlapQuad: function() {
		var _this = this.pen;
		var color = -1;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
		if(_this.transformMatrix != null) {
			_this.drawType.transform(_this.transformMatrix);
		}
		_this.drawType.next();
		_this.colorType.cornerColors(color,color,color);
		var _this1 = this.pen;
		var color1 = -1;
		if(color1 == -1) {
			color1 = _this1.currentColor;
		}
		_this1.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color1,color1,color1);
	}
	,end: function(width_) {
		this.endEdges();
		if(this.count != 0) {
			var ax = this.bx;
			var ay = this.by;
			var radius = width_ / 2;
			var beta = -this.angle1 - Math.PI / 2;
			var gamma = -this.angle1 - Math.PI / 2 - Math.PI;
			var temp = [];
			var drawType = this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f1;
				if(gamma >= 0 && gamma > Math.PI) {
					f1 = gamma;
				} else {
					var a1 = gamma % (2 * Math.PI);
					f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
				}
				var this2 = f1;
				var zb = this2;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f2;
				if(beta >= 0 && beta > Math.PI) {
					f2 = beta;
				} else {
					var a2 = beta % (2 * Math.PI);
					f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
				}
				var this3 = f2;
				var za1 = this3;
				var f3;
				if(gamma >= 0 && gamma > Math.PI) {
					f3 = gamma;
				} else {
					var a3 = gamma % (2 * Math.PI);
					f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
				}
				var this4 = f3;
				var zb1 = this4;
				var fa1 = za1;
				var fb1 = zb1;
				var theta1 = Math.abs(fa1 - fb1);
				var clockwise1 = fa1 < fb1;
				var dif2 = clockwise1 ? theta1 : -theta1;
				dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f4;
				if(beta >= 0 && beta > Math.PI) {
					f4 = beta;
				} else {
					var a4 = beta % (2 * Math.PI);
					f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
				}
				var this5 = f4;
				var za2 = this5;
				var f5;
				if(gamma >= 0 && gamma > Math.PI) {
					f5 = gamma;
				} else {
					var a5 = gamma % (2 * Math.PI);
					f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
				}
				var this6 = f5;
				var zb2 = this6;
				var fa2 = za2;
				var fb2 = zb2;
				var theta2 = Math.abs(fa2 - fb2);
				var smallest = theta2 <= Math.PI;
				var clockwise2 = fa2 < fb2;
				var dif3 = clockwise2 ? theta2 : -theta2;
				dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
				break;
			case 3:
				var f6;
				if(beta >= 0 && beta > Math.PI) {
					f6 = beta;
				} else {
					var a6 = beta % (2 * Math.PI);
					f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
				}
				var this7 = f6;
				var za3 = this7;
				var f7;
				if(gamma >= 0 && gamma > Math.PI) {
					f7 = gamma;
				} else {
					var a7 = gamma % (2 * Math.PI);
					f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
				}
				var this8 = f7;
				var zb3 = this8;
				var fa3 = za3;
				var fb3 = zb3;
				var theta3 = Math.abs(fa3 - fb3);
				var largest = theta3 > Math.PI;
				var clockwise3 = fa3 < fb3;
				var dif4 = clockwise3 ? theta3 : -theta3;
				dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step1 = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this = this.pen;
			var color = 0;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.colorType.colorTriangles(color,len);
			var pA = this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var _g2 = 0;
			var _g11 = len1 + 2;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.pointsAnti[pA++] = temp[i1];
			}
			var pC = this.pointsClock.length;
			var _g21 = 1;
			var _g3 = len1 / 2 + 1 | 0;
			while(_g21 < _g3) {
				var i2 = _g21++;
				this.pointsClock[pC++] = temp[temp.length - 2 * i2];
				this.pointsClock[pC++] = temp[temp.length - 2 * i2 - 1];
			}
		}
	}
	,triangle2DFill: function(ax_,ay_,bx_,by_,cx_,cy_,color_) {
		if(color_ == null) {
			color_ = -1;
		}
		var _this = this.pen;
		var color = color_;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.drawType.triangle(ax_,ay_,0,bx_,by_,0,cx_,cy_,0);
		if(_this.transformMatrix != null) {
			_this.drawType.transform(_this.transformMatrix);
		}
		_this.drawType.next();
		_this.colorType.cornerColors(color,color,color);
	}
	,addPieXstart: function(ax,ay,radius,beta,gamma,prefer,mark,sides) {
		if(sides == null) {
			sides = 36;
		}
		if(mark == null) {
			mark = -1;
		}
		var temp = [];
		var drawType = this.pen.drawType;
		var sides1 = sides;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var step = pi * 2 / sides1;
		var dif;
		switch(prefer._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta1 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta1 : -theta1;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta2 = Math.abs(fa2 - fb2);
			var smallest = theta2 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta2 : -theta2;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta3 = Math.abs(fa3 - fb3);
			var largest = theta3 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta3 : -theta3;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var p2 = temp.length;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx = ax + radius * Math.sin(angle);
			cy = ay + radius * Math.cos(angle);
			temp[p2++] = cx;
			temp[p2++] = cy;
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step1;
			bx = cx;
			by = cy;
		}
		var len = totalSteps;
		var _this = this.pen;
		var color = mark;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var pA = this.pointsAnti.length;
		var len1 = temp.length / 2 | 0;
		var p4 = temp.length / 4 | 0;
		var _g2 = 0;
		var _g11 = p4;
		while(_g2 < _g11) {
			var i1 = _g2++;
			this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
			this.pointsAnti[pA++] = temp[len1 - 2 * i1];
		}
		var pC = this.pointsClock.length;
		var _g21 = 0;
		var _g3 = p4;
		while(_g21 < _g3) {
			var i2 = _g21++;
			this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
			this.pointsClock[pC++] = temp[i2 * 2 + len1];
		}
	}
	,addPieX: function(ax,ay,radius,beta,gamma,prefer,mark,sides) {
		if(sides == null) {
			sides = 36;
		}
		if(mark == null) {
			mark = 0;
		}
		var temp = [];
		var drawType = this.pen.drawType;
		var sides1 = sides;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var step = pi * 2 / sides1;
		var dif;
		switch(prefer._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta1 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta1 : -theta1;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta2 = Math.abs(fa2 - fb2);
			var smallest = theta2 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta2 : -theta2;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta3 = Math.abs(fa3 - fb3);
			var largest = theta3 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta3 : -theta3;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var p2 = temp.length;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx = ax + radius * Math.sin(angle);
			cy = ay + radius * Math.cos(angle);
			temp[p2++] = cx;
			temp[p2++] = cy;
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step1;
			bx = cx;
			by = cy;
		}
		var len = totalSteps;
		var _this = this.pen;
		var color = mark;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var pA = this.pointsAnti.length;
		var len1 = temp.length / 2 | 0;
		var _g2 = 0;
		var _g11 = len1 + 2;
		while(_g2 < _g11) {
			var i1 = _g2++;
			this.pointsAnti[pA++] = temp[i1];
		}
		var pC = this.pointsClock.length;
		var _g21 = 1;
		var _g3 = len1 / 2 + 1 | 0;
		while(_g21 < _g3) {
			var i2 = _g21++;
			this.pointsClock[pC++] = temp[temp.length - 2 * i2];
			this.pointsClock[pC++] = temp[temp.length - 2 * i2 - 1];
		}
	}
	,addPie: function(ax,ay,radius,beta,gamma,prefer,mark,sides) {
		if(sides == null) {
			sides = 36;
		}
		if(mark == null) {
			mark = 0;
		}
		var drawType = this.pen.drawType;
		var sides1 = sides;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var step = pi * 2 / sides1;
		var dif;
		switch(prefer._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta1 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta1 : -theta1;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta2 = Math.abs(fa2 - fb2);
			var smallest = theta2 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta2 : -theta2;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta3 = Math.abs(fa3 - fb3);
			var largest = theta3 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta3 : -theta3;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx = ax + radius * Math.sin(angle);
			cy = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step1;
			bx = cx;
			by = cy;
		}
		var len = totalSteps;
		var _this = this.pen;
		var color = mark;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,computeJ: function(width_,theta0,dif) {
		var gamma = Math.abs(dif) / 2;
		var h = width_ / 2 / Math.cos(gamma);
		var f;
		if(theta0 <= Math.PI && theta0 > -Math.PI) {
			f = theta0;
		} else {
			var a = (theta0 + Math.PI) % (2 * Math.PI);
			f = a >= 0 ? a - Math.PI : a + Math.PI;
		}
		var this1 = f;
		var start = this1;
		var start2 = start;
		var delta = start2 + dif / 2 + Math.PI;
		this.jx = this.ax + h * Math.sin(delta);
		this.jy = this.ay + h * Math.cos(delta);
	}
	,addDot: function(x,y,color,width_) {
		var w = width_ * 0.07;
		var drawType = this.pen.drawType;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = x + w * Math.sin(theta);
			by = y + w * Math.cos(theta);
			theta += step;
			cx = x + w * Math.sin(theta);
			cy = y + w * Math.cos(theta);
			drawType.triangle(x,y,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		var len = 36;
		var _this = this.pen;
		var color1 = color;
		if(color1 == -1) {
			color1 = _this.currentColor;
		}
		_this.colorType.colorTriangles(color1,len);
	}
	,addSmallTriangles: function(clockWise,width_) {
		if(clockWise) {
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.ax,this.ay,0,this.dxOld,this.dyOld,0,this.jx,this.jy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
			var _this1 = this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this1.currentColor;
			}
			_this1.drawType.triangle(this.ax,this.ay,0,this.exPrev,this.eyPrev,0,this.jx,this.jy,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color1,color1,color1);
		} else {
			var _this2 = this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this2.currentColor;
			}
			_this2.drawType.triangle(this.ax,this.ay,0,this.exOld,this.eyOld,0,this.jx,this.jy,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color2,color2,color2);
			var _this3 = this.pen;
			var color3 = -1;
			if(color3 == null) {
				color3 = -1;
			}
			if(color3 == -1) {
				color3 = _this3.currentColor;
			}
			_this3.drawType.triangle(this.ax,this.ay,0,this.dxPrev,this.dyPrev,0,this.jx,this.jy,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color3,color3,color3);
		}
	}
	,triangle2DFillangleCorners: function(oldx_,oldy_,prevx_,prevy_,width_) {
		var w = width_ * 0.07;
		var drawType = this.pen.drawType;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = oldx_ + w * Math.sin(theta);
			by = oldy_ + w * Math.cos(theta);
			theta += step;
			cx = oldx_ + w * Math.sin(theta);
			cy = oldy_ + w * Math.cos(theta);
			drawType.triangle(oldx_,oldy_,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		var len = 36;
		var _this = this.pen;
		var color = this.debugCol4;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var drawType1 = this.pen.drawType;
		var pi1 = Math.PI;
		var theta1 = pi1 / 2;
		var step1 = pi1 * 2 / 36;
		var bx1;
		var by1;
		var cx1;
		var cy1;
		var _g2 = 0;
		var _g11 = 36;
		while(_g2 < _g11) {
			var i1 = _g2++;
			bx1 = prevx_ + w * Math.sin(theta1);
			by1 = prevy_ + w * Math.cos(theta1);
			theta1 += step1;
			cx1 = prevx_ + w * Math.sin(theta1);
			cy1 = prevy_ + w * Math.cos(theta1);
			drawType1.triangle(prevx_,prevy_,0,bx1,by1,0,cx1,cy1,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType1.transform(m1);
			}
			drawType1.next();
		}
		len = 36;
		var _this1 = this.pen;
		var color1 = this.debugCol3;
		if(color1 == -1) {
			color1 = _this1.currentColor;
		}
		_this1.colorType.colorTriangles(color1,len);
		var drawType2 = this.pen.drawType;
		var ax = this.ax;
		var ay = this.ay;
		var pi2 = Math.PI;
		var theta2 = pi2 / 2;
		var step2 = pi2 * 2 / 36;
		var bx2;
		var by2;
		var cx2;
		var cy2;
		var _g3 = 0;
		var _g12 = 36;
		while(_g3 < _g12) {
			var i2 = _g3++;
			bx2 = ax + w * Math.sin(theta2);
			by2 = ay + w * Math.cos(theta2);
			theta2 += step2;
			cx2 = ax + w * Math.sin(theta2);
			cy2 = ay + w * Math.cos(theta2);
			drawType2.triangle(ax,ay,0,bx2,by2,0,cx2,cy2,0);
			var m2 = trilateral2_Shaper.transformMatrix;
			if(m2 != null) {
				drawType2.transform(m2);
			}
			drawType2.next();
		}
		len = 36;
		var _this2 = this.pen;
		var color2 = this.debugCol10;
		if(color2 == -1) {
			color2 = _this2.currentColor;
		}
		_this2.colorType.colorTriangles(color2,len);
		var drawType3 = this.pen.drawType;
		var ax1 = this.jx;
		var ay1 = this.jy;
		var pi3 = Math.PI;
		var theta3 = pi3 / 2;
		var step3 = pi3 * 2 / 36;
		var bx3;
		var by3;
		var cx3;
		var cy3;
		var _g4 = 0;
		var _g13 = 36;
		while(_g4 < _g13) {
			var i3 = _g4++;
			bx3 = ax1 + w * Math.sin(theta3);
			by3 = ay1 + w * Math.cos(theta3);
			theta3 += step3;
			cx3 = ax1 + w * Math.sin(theta3);
			cy3 = ay1 + w * Math.cos(theta3);
			drawType3.triangle(ax1,ay1,0,bx3,by3,0,cx3,cy3,0);
			var m3 = trilateral2_Shaper.transformMatrix;
			if(m3 != null) {
				drawType3.transform(m3);
			}
			drawType3.next();
		}
		len = 36;
		var _this3 = this.pen;
		var color3 = this.debugCol5;
		if(color3 == -1) {
			color3 = _this3.currentColor;
		}
		_this3.colorType.colorTriangles(color3,len);
	}
	,triangle2DFillangleCornersLess: function(oldx_,oldy_,prevx_,prevy_,width_) {
		var w = width_ * 0.07;
		var drawType = this.pen.drawType;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = oldx_ + w * Math.sin(theta);
			by = oldy_ + w * Math.cos(theta);
			theta += step;
			cx = oldx_ + w * Math.sin(theta);
			cy = oldy_ + w * Math.cos(theta);
			drawType.triangle(oldx_,oldy_,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		var len = 36;
		var _this = this.pen;
		var color = this.debugCol4;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var drawType1 = this.pen.drawType;
		var pi1 = Math.PI;
		var theta1 = pi1 / 2;
		var step1 = pi1 * 2 / 36;
		var bx1;
		var by1;
		var cx1;
		var cy1;
		var _g2 = 0;
		var _g11 = 36;
		while(_g2 < _g11) {
			var i1 = _g2++;
			bx1 = prevx_ + w * Math.sin(theta1);
			by1 = prevy_ + w * Math.cos(theta1);
			theta1 += step1;
			cx1 = prevx_ + w * Math.sin(theta1);
			cy1 = prevy_ + w * Math.cos(theta1);
			drawType1.triangle(prevx_,prevy_,0,bx1,by1,0,cx1,cy1,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType1.transform(m1);
			}
			drawType1.next();
		}
		len = 36;
		var _this1 = this.pen;
		var color1 = this.debugCol3;
		if(color1 == -1) {
			color1 = _this1.currentColor;
		}
		_this1.colorType.colorTriangles(color1,len);
		var drawType2 = this.pen.drawType;
		var ax = this.jx;
		var ay = this.jy;
		var pi2 = Math.PI;
		var theta2 = pi2 / 2;
		var step2 = pi2 * 2 / 36;
		var bx2;
		var by2;
		var cx2;
		var cy2;
		var _g3 = 0;
		var _g12 = 36;
		while(_g3 < _g12) {
			var i2 = _g3++;
			bx2 = ax + w * Math.sin(theta2);
			by2 = ay + w * Math.cos(theta2);
			theta2 += step2;
			cx2 = ax + w * Math.sin(theta2);
			cy2 = ay + w * Math.cos(theta2);
			drawType2.triangle(ax,ay,0,bx2,by2,0,cx2,cy2,0);
			var m2 = trilateral2_Shaper.transformMatrix;
			if(m2 != null) {
				drawType2.transform(m2);
			}
			drawType2.next();
		}
		len = 36;
		var _this2 = this.pen;
		var color2 = this.debugCol5;
		if(color2 == -1) {
			color2 = _this2.currentColor;
		}
		_this2.colorType.colorTriangles(color2,len);
	}
	,connectQuadsWhenQuadsOverlay: function(clockWise,width_) {
		if(clockWise) {
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.dxOld,this.dyOld,0,this.exPrev,this.eyPrev,0,this.ax,this.ay,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		} else {
			var _this1 = this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this1.currentColor;
			}
			_this1.drawType.triangle(this.exOld,this.eyOld,0,this.dxPrev,this.dyPrev,0,this.ax,this.ay,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color1,color1,color1);
		}
	}
	,connectQuads: function(clockWise,width_) {
		if(clockWise) {
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.dxOld,this.dyOld,0,this.exPrev,this.eyPrev,0,this.jx,this.jy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		} else {
			var _this1 = this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this1.currentColor;
			}
			_this1.drawType.triangle(this.exOld,this.eyOld,0,this.dxPrev,this.dyPrev,0,this.jx,this.jy,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color1,color1,color1);
		}
	}
	,addInitialQuads: function(clockWise,width_) {
		this.quadIndex = this.pen.drawType.get_pos();
		if(this.count == 0) {
			this.penultimateAX = this.dxPrev;
			this.penultimateAY = this.dyPrev;
			this.lastAntiX = this.ex;
			this.lastAntiY = this.ey;
			this.penultimateCX = this.dx;
			this.penultimateCY = this.dy;
			this.lastClockX = this.exPrev;
			this.lastClockY = this.eyPrev;
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
			var _this1 = this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this1.currentColor;
			}
			_this1.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color1,color1,color1);
		} else {
			if(clockWise && !this.lastClock) {
				this.penultimateAX = this.jx;
				this.penultimateAY = this.jy;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				this.penultimateCX = this.dx;
				this.penultimateCY = this.dy;
				this.lastClockX = this.exPrev;
				this.lastClockY = this.eyPrev;
				var _this2 = this.pen;
				var color2 = -1;
				if(color2 == null) {
					color2 = -1;
				}
				if(color2 == -1) {
					color2 = _this2.currentColor;
				}
				_this2.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this2.transformMatrix != null) {
					_this2.drawType.transform(_this2.transformMatrix);
				}
				_this2.drawType.next();
				_this2.colorType.cornerColors(color2,color2,color2);
				var _this3 = this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this3.currentColor;
				}
				_this3.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
				if(_this3.transformMatrix != null) {
					_this3.drawType.transform(_this3.transformMatrix);
				}
				_this3.drawType.next();
				_this3.colorType.cornerColors(color3,color3,color3);
			}
			if(clockWise && this.lastClock) {
				this.penultimateAX = this.jx;
				this.penultimateAY = this.jy;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				this.penultimateCX = this.dx;
				this.penultimateCY = this.dy;
				this.lastClockX = this.exPrev;
				this.lastClockY = this.eyPrev;
				var _this4 = this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this4.currentColor;
				}
				_this4.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color4,color4,color4);
				var _this5 = this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this5.currentColor;
				}
				_this5.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color5,color5,color5);
			}
			if(!clockWise && !this.lastClock) {
				this.penultimateCX = this.dx;
				this.penultimateCY = this.dy;
				this.lastClockX = this.jx;
				this.lastClockY = this.jy;
				this.penultimateAX = this.dxPrev;
				this.penultimateAY = this.dyPrev;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				var _this6 = this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this6.currentColor;
				}
				_this6.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.jx,this.jy,0);
				if(_this6.transformMatrix != null) {
					_this6.drawType.transform(_this6.transformMatrix);
				}
				_this6.drawType.next();
				_this6.colorType.cornerColors(color6,color6,color6);
				var _this7 = this.pen;
				var color7 = -1;
				if(color7 == null) {
					color7 = -1;
				}
				if(color7 == -1) {
					color7 = _this7.currentColor;
				}
				_this7.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color7,color7,color7);
			}
			if(!clockWise && this.lastClock) {
				this.penultimateAX = this.dxPrev;
				this.penultimateAY = this.dyPrev;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				this.penultimateCX = this.jx;
				this.penultimateCY = this.jy;
				this.lastClockX = this.dx;
				this.lastClockY = this.dy;
				var _this8 = this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this8.currentColor;
				}
				_this8.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this8.transformMatrix != null) {
					_this8.drawType.transform(_this8.transformMatrix);
				}
				_this8.drawType.next();
				_this8.colorType.cornerColors(color8,color8,color8);
				var _this9 = this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this9.currentColor;
				}
				_this9.drawType.triangle(this.dxPrev,this.dyPrev,0,this.jx,this.jy,0,this.ex,this.ey,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color9,color9,color9);
			}
		}
	}
	,endEdges: function() {
		var pC = this.pointsClock.length;
		var pA = this.pointsAnti.length;
		this.pointsClock[pC++] = this.penultimateCX;
		this.pointsClock[pC++] = this.penultimateCY;
		this.pointsClock[pC++] = this.lastClockX;
		this.pointsClock[pC++] = this.lastClockY;
		this.pointsAnti[pA++] = this.penultimateAX;
		this.pointsAnti[pA++] = this.penultimateAY;
		this.pointsAnti[pA++] = this.lastAntiX;
		this.pointsAnti[pA++] = this.lastAntiY;
	}
	,addQuads: function(clockWise,width_) {
		var currQuadIndex = this.pen.drawType.get_pos();
		var pC = 0;
		var pA = 0;
		if(clockWise && !this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this1 = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jxOld;
				this.pointsClock[pC++] = this.jyOld;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this2 = this.pen;
				var v1 = this.quadIndex + 1;
				_this2.drawType.set_pos(v1);
				_this2.colorType.set_pos(v1);
				var _this3 = this.pen;
				var color1 = -1;
				if(color1 == null) {
					color1 = -1;
				}
				if(color1 == -1) {
					color1 = _this3.currentColor;
				}
				_this3.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jxOld,this.jyOld,0);
				if(_this3.transformMatrix != null) {
					_this3.drawType.transform(_this3.transformMatrix);
				}
				_this3.drawType.next();
				_this3.colorType.cornerColors(color1,color1,color1);
			}
			var _this4 = this.pen;
			var v2 = this.quadIndex;
			_this4.drawType.set_pos(v2);
			_this4.colorType.set_pos(v2);
			var _this5 = this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this5.currentColor;
			}
			_this5.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jx,this.jy,0);
			if(_this5.transformMatrix != null) {
				_this5.drawType.transform(_this5.transformMatrix);
			}
			_this5.drawType.next();
			_this5.colorType.cornerColors(color2,color2,color2);
		}
		if(clockWise && this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				this.pointsAnti[pA++] = this.kbx;
				this.pointsAnti[pA++] = this.kby;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.kax;
				this.pointsClock[pC++] = this.kay;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this6 = this.pen;
				var v3 = this.quadIndex;
				_this6.drawType.set_pos(v3);
				_this6.colorType.set_pos(v3);
				var _this7 = this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this7.currentColor;
				}
				_this7.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jx,this.jy,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color3,color3,color3);
				var _this8 = this.pen;
				var v4 = this.quadIndex + 1;
				_this8.drawType.set_pos(v4);
				_this8.colorType.set_pos(v4);
				var _this9 = this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this9.currentColor;
				}
				_this9.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color4,color4,color4);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jxOld;
				this.pointsAnti[pA++] = this.jyOld;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this10 = this.pen;
				var v5 = this.quadIndex;
				_this10.drawType.set_pos(v5);
				_this10.colorType.set_pos(v5);
				var _this11 = this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this11.currentColor;
				}
				_this11.drawType.triangle(this.jxOld,this.jyOld,0,this.kbx,this.kby,0,this.jx,this.jy,0);
				if(_this11.transformMatrix != null) {
					_this11.drawType.transform(_this11.transformMatrix);
				}
				_this11.drawType.next();
				_this11.colorType.cornerColors(color5,color5,color5);
				var _this12 = this.pen;
				var v6 = this.quadIndex + 1;
				_this12.drawType.set_pos(v6);
				_this12.colorType.set_pos(v6);
				var _this13 = this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this13.currentColor;
				}
				_this13.drawType.triangle(this.jxOld,this.jyOld,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this13.transformMatrix != null) {
					_this13.drawType.transform(_this13.transformMatrix);
				}
				_this13.drawType.next();
				_this13.colorType.cornerColors(color6,color6,color6);
			}
		}
		if(!clockWise && !this.lastClock) {
			var _this14 = this.pen;
			var v7 = this.quadIndex;
			_this14.drawType.set_pos(v7);
			_this14.colorType.set_pos(v7);
			var _this15 = this.pen;
			var color7 = -1;
			if(color7 == null) {
				color7 = -1;
			}
			if(color7 == -1) {
				color7 = _this15.currentColor;
			}
			_this15.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
			if(_this15.transformMatrix != null) {
				_this15.drawType.transform(_this15.transformMatrix);
			}
			_this15.drawType.next();
			_this15.colorType.cornerColors(color7,color7,color7);
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				var _this16 = this.pen;
				var v8 = this.quadIndex + 1;
				_this16.drawType.set_pos(v8);
				_this16.colorType.set_pos(v8);
				var _this17 = this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this17.currentColor;
				}
				_this17.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color8,color8,color8);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jxOld;
				this.pointsClock[pC++] = this.jyOld;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				var _this18 = this.pen;
				var v9 = this.quadIndex + 1;
				_this18.drawType.set_pos(v9);
				_this18.colorType.set_pos(v9);
				var _this19 = this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this19.currentColor;
				}
				_this19.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.jxOld,this.jyOld,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color9,color9,color9);
			}
		}
		if(!clockWise && this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this20 = this.pen;
				var v10 = this.quadIndex;
				_this20.drawType.set_pos(v10);
				_this20.colorType.set_pos(v10);
				var _this21 = this.pen;
				var color10 = -1;
				if(color10 == null) {
					color10 = -1;
				}
				if(color10 == -1) {
					color10 = _this21.currentColor;
				}
				_this21.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color10,color10,color10);
				var _this22 = this.pen;
				var v11 = this.quadIndex + 1;
				_this22.drawType.set_pos(v11);
				_this22.colorType.set_pos(v11);
				var _this23 = this.pen;
				var color11 = -1;
				if(color11 == null) {
					color11 = -1;
				}
				if(color11 == -1) {
					color11 = _this23.currentColor;
				}
				_this23.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this23.transformMatrix != null) {
					_this23.drawType.transform(_this23.transformMatrix);
				}
				_this23.drawType.next();
				_this23.colorType.cornerColors(color11,color11,color11);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jxOld;
				this.pointsAnti[pA++] = this.jyOld;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this24 = this.pen;
				var v12 = this.quadIndex;
				_this24.drawType.set_pos(v12);
				_this24.colorType.set_pos(v12);
				var _this25 = this.pen;
				var color12 = -1;
				if(color12 == null) {
					color12 = -1;
				}
				if(color12 == -1) {
					color12 = _this25.currentColor;
				}
				_this25.drawType.triangle(this.jxOld,this.jyOld,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
				if(_this25.transformMatrix != null) {
					_this25.drawType.transform(_this25.transformMatrix);
				}
				_this25.drawType.next();
				_this25.colorType.cornerColors(color12,color12,color12);
				var _this26 = this.pen;
				var v13 = this.quadIndex + 1;
				_this26.drawType.set_pos(v13);
				_this26.colorType.set_pos(v13);
				var _this27 = this.pen;
				var color13 = -1;
				if(color13 == null) {
					color13 = -1;
				}
				if(color13 == -1) {
					color13 = _this27.currentColor;
				}
				_this27.drawType.triangle(this.jxOld,this.jyOld,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this27.transformMatrix != null) {
					_this27.drawType.transform(_this27.transformMatrix);
				}
				_this27.drawType.next();
				_this27.colorType.cornerColors(color13,color13,color13);
			}
		}
		var _this28 = this.pen;
		_this28.drawType.set_pos(currQuadIndex);
		_this28.colorType.set_pos(currQuadIndex);
	}
	,storeLastQuads: function() {
		this.kax = this.dxPrev;
		this.kay = this.dyPrev;
		this.kbx = this.dx;
		this.kby = this.dy;
		this.ncx = this.exPrev;
		this.ncy = this.eyPrev;
		this.kcx = this.ex;
		this.kcy = this.ey;
	}
	,isClockwise: function(x,y) {
		var x1 = this.dxOld - x;
		var y1 = this.dyOld - y;
		var x2 = this.exOld - x;
		var y2 = this.eyOld - y;
		return x1 * x1 + y1 * y1 > x2 * x2 + y2 * y2;
	}
	,line: function(ax_,ay_,bx_,by_,width_,endLineCurve) {
		if(endLineCurve == null) {
			endLineCurve = 0;
		}
		this.ax = bx_;
		this.ay = by_;
		this.bx = ax_;
		this.by = ay_;
		this.halfA = Math.PI / 2;
		this.beta = Math.PI / 2 - this.halfA;
		this.r = width_ / 2 * Math.cos(this.beta);
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
		var dxPrev_ = this.dx;
		var dyPrev_ = this.dy;
		var exPrev_ = this.ex;
		var eyPrev_ = this.ey;
		this.ax = ax_;
		this.ay = ay_;
		this.bx = bx_;
		this.by = by_;
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
		switch(endLineCurve) {
		case 0:
			break;
		case 1:
			var radius = width_ / 2;
			var beta = -this.angle1 - Math.PI / 2;
			var gamma = -this.angle1 - Math.PI / 2 + Math.PI;
			var drawType = this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f1;
				if(gamma >= 0 && gamma > Math.PI) {
					f1 = gamma;
				} else {
					var a1 = gamma % (2 * Math.PI);
					f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
				}
				var this2 = f1;
				var zb = this2;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f2;
				if(beta >= 0 && beta > Math.PI) {
					f2 = beta;
				} else {
					var a2 = beta % (2 * Math.PI);
					f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
				}
				var this3 = f2;
				var za1 = this3;
				var f3;
				if(gamma >= 0 && gamma > Math.PI) {
					f3 = gamma;
				} else {
					var a3 = gamma % (2 * Math.PI);
					f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
				}
				var this4 = f3;
				var zb1 = this4;
				var fa1 = za1;
				var fb1 = zb1;
				var theta1 = Math.abs(fa1 - fb1);
				var clockwise1 = fa1 < fb1;
				var dif2 = clockwise1 ? theta1 : -theta1;
				dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f4;
				if(beta >= 0 && beta > Math.PI) {
					f4 = beta;
				} else {
					var a4 = beta % (2 * Math.PI);
					f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
				}
				var this5 = f4;
				var za2 = this5;
				var f5;
				if(gamma >= 0 && gamma > Math.PI) {
					f5 = gamma;
				} else {
					var a5 = gamma % (2 * Math.PI);
					f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
				}
				var this6 = f5;
				var zb2 = this6;
				var fa2 = za2;
				var fb2 = zb2;
				var theta2 = Math.abs(fa2 - fb2);
				var smallest = theta2 <= Math.PI;
				var clockwise2 = fa2 < fb2;
				var dif3 = clockwise2 ? theta2 : -theta2;
				dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
				break;
			case 3:
				var f6;
				if(beta >= 0 && beta > Math.PI) {
					f6 = beta;
				} else {
					var a6 = beta % (2 * Math.PI);
					f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
				}
				var this7 = f6;
				var za3 = this7;
				var f7;
				if(gamma >= 0 && gamma > Math.PI) {
					f7 = gamma;
				} else {
					var a7 = gamma % (2 * Math.PI);
					f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
				}
				var this8 = f7;
				var zb3 = this8;
				var fa3 = za3;
				var fb3 = zb3;
				var theta3 = Math.abs(fa3 - fb3);
				var largest = theta3 > Math.PI;
				var clockwise3 = fa3 < fb3;
				var dif4 = clockwise3 ? theta3 : -theta3;
				dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step1 = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax_ + radius * Math.sin(angle);
				cy = ay_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this = this.pen;
			var color = 0;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.colorType.colorTriangles(color,len);
			break;
		case 2:
			var radius1 = width_ / 2;
			var beta1 = -this.angle1 - Math.PI / 2;
			var gamma1 = -this.angle1 - Math.PI / 2 - Math.PI;
			var drawType1 = this.pen.drawType;
			var sides1 = 36;
			if(sides1 == null) {
				sides1 = 36;
			}
			var pi1 = Math.PI;
			var step2 = pi1 * 2 / sides1;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f8;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f8 = beta1;
				} else {
					var a8 = beta1 % (2 * Math.PI);
					f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
				}
				var this9 = f8;
				var za4 = this9;
				var f9;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f9 = gamma1;
				} else {
					var a9 = gamma1 % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var zb4 = this10;
				var fa4 = za4;
				var fb4 = zb4;
				var theta4 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta4 : -theta4;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f10;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f10 = beta1;
				} else {
					var a10 = beta1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var za5 = this11;
				var f11;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f11 = gamma1;
				} else {
					var a11 = gamma1 % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var zb5 = this12;
				var fa5 = za5;
				var fb5 = zb5;
				var theta5 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta5 : -theta5;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f12;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f12 = beta1;
				} else {
					var a12 = beta1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var za6 = this13;
				var f13;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f13 = gamma1;
				} else {
					var a13 = gamma1 % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var zb6 = this14;
				var fa6 = za6;
				var fb6 = zb6;
				var theta6 = Math.abs(fa6 - fb6);
				var smallest1 = theta6 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta6 : -theta6;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
				break;
			case 3:
				var f14;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f14 = beta1;
				} else {
					var a14 = beta1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var za7 = this15;
				var f15;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f15 = gamma1;
				} else {
					var a15 = gamma1 % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var zb7 = this16;
				var fa7 = za7;
				var fb7 = zb7;
				var theta7 = Math.abs(fa7 - fb7);
				var largest1 = theta7 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta7 : -theta7;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			}
			var positive1 = dif5 >= 0;
			var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
			var step3 = dif5 / totalSteps1;
			var angle1 = beta1;
			var cx1;
			var cy1;
			var bx1 = 0;
			var by1 = 0;
			var _g2 = 0;
			var _g11 = totalSteps1 + 1;
			while(_g2 < _g11) {
				var i1 = _g2++;
				cx1 = bx_ + radius1 * Math.sin(angle1);
				cy1 = by_ + radius1 * Math.cos(angle1);
				if(i1 != 0) {
					drawType1.triangle(bx_,by_,0,bx1,by1,0,cx1,cy1,0);
					var m1 = trilateral2_Shaper.transformMatrix;
					if(m1 != null) {
						drawType1.transform(m1);
					}
					drawType1.next();
				}
				angle1 += step3;
				bx1 = cx1;
				by1 = cy1;
			}
			var len1 = totalSteps1;
			var _this1 = this.pen;
			var color1 = 0;
			if(color1 == -1) {
				color1 = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color1,len1);
			break;
		case 3:
			var radius2 = width_ / 2;
			var beta2 = -this.angle1 - Math.PI / 2;
			var gamma2 = -this.angle1 - Math.PI / 2 + Math.PI;
			var drawType2 = this.pen.drawType;
			var sides2 = 36;
			if(sides2 == null) {
				sides2 = 36;
			}
			var pi2 = Math.PI;
			var step4 = pi2 * 2 / sides2;
			var dif10;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f16;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f16 = beta2;
				} else {
					var a16 = beta2 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var za8 = this17;
				var f17;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f17 = gamma2;
				} else {
					var a17 = gamma2 % (2 * Math.PI);
					f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
				}
				var this18 = f17;
				var zb8 = this18;
				var fa8 = za8;
				var fb8 = zb8;
				var theta8 = Math.abs(fa8 - fb8);
				var clockwise8 = fa8 < fb8;
				var dif11 = clockwise8 ? theta8 : -theta8;
				dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
				break;
			case 1:
				var f18;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f18 = beta2;
				} else {
					var a18 = beta2 % (2 * Math.PI);
					f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
				}
				var this19 = f18;
				var za9 = this19;
				var f19;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f19 = gamma2;
				} else {
					var a19 = gamma2 % (2 * Math.PI);
					f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
				}
				var this20 = f19;
				var zb9 = this20;
				var fa9 = za9;
				var fb9 = zb9;
				var theta9 = Math.abs(fa9 - fb9);
				var clockwise9 = fa9 < fb9;
				var dif12 = clockwise9 ? theta9 : -theta9;
				dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
				break;
			case 2:
				var f20;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f20 = beta2;
				} else {
					var a20 = beta2 % (2 * Math.PI);
					f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
				}
				var this21 = f20;
				var za10 = this21;
				var f21;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f21 = gamma2;
				} else {
					var a21 = gamma2 % (2 * Math.PI);
					f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
				}
				var this22 = f21;
				var zb10 = this22;
				var fa10 = za10;
				var fb10 = zb10;
				var theta10 = Math.abs(fa10 - fb10);
				var smallest2 = theta10 <= Math.PI;
				var clockwise10 = fa10 < fb10;
				var dif13 = clockwise10 ? theta10 : -theta10;
				dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
				break;
			case 3:
				var f22;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f22 = beta2;
				} else {
					var a22 = beta2 % (2 * Math.PI);
					f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
				}
				var this23 = f22;
				var za11 = this23;
				var f23;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f23 = gamma2;
				} else {
					var a23 = gamma2 % (2 * Math.PI);
					f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
				}
				var this24 = f23;
				var zb11 = this24;
				var fa11 = za11;
				var fb11 = zb11;
				var theta11 = Math.abs(fa11 - fb11);
				var largest2 = theta11 > Math.PI;
				var clockwise11 = fa11 < fb11;
				var dif14 = clockwise11 ? theta11 : -theta11;
				dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
				break;
			}
			var positive2 = dif10 >= 0;
			var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
			var step5 = dif10 / totalSteps2;
			var angle2 = beta2;
			var cx2;
			var cy2;
			var bx2 = 0;
			var by2 = 0;
			var _g3 = 0;
			var _g12 = totalSteps2 + 1;
			while(_g3 < _g12) {
				var i2 = _g3++;
				cx2 = ax_ + radius2 * Math.sin(angle2);
				cy2 = ay_ + radius2 * Math.cos(angle2);
				if(i2 != 0) {
					drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
					var m2 = trilateral2_Shaper.transformMatrix;
					if(m2 != null) {
						drawType2.transform(m2);
					}
					drawType2.next();
				}
				angle2 += step5;
				bx2 = cx2;
				by2 = cy2;
			}
			var len2 = totalSteps2;
			var _this2 = this.pen;
			var color2 = 0;
			if(color2 == -1) {
				color2 = _this2.currentColor;
			}
			_this2.colorType.colorTriangles(color2,len2);
			var radius3 = width_ / 2;
			var beta3 = -this.angle1 - Math.PI / 2;
			var gamma3 = -this.angle1 - Math.PI / 2 - Math.PI;
			var drawType3 = this.pen.drawType;
			var sides3 = 36;
			if(sides3 == null) {
				sides3 = 36;
			}
			var pi3 = Math.PI;
			var step6 = pi3 * 2 / sides3;
			var dif15;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f24;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f24 = beta3;
				} else {
					var a24 = beta3 % (2 * Math.PI);
					f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
				}
				var this25 = f24;
				var za12 = this25;
				var f25;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f25 = gamma3;
				} else {
					var a25 = gamma3 % (2 * Math.PI);
					f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
				}
				var this26 = f25;
				var zb12 = this26;
				var fa12 = za12;
				var fb12 = zb12;
				var theta12 = Math.abs(fa12 - fb12);
				var clockwise12 = fa12 < fb12;
				var dif16 = clockwise12 ? theta12 : -theta12;
				dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
				break;
			case 1:
				var f26;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f26 = beta3;
				} else {
					var a26 = beta3 % (2 * Math.PI);
					f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
				}
				var this27 = f26;
				var za13 = this27;
				var f27;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f27 = gamma3;
				} else {
					var a27 = gamma3 % (2 * Math.PI);
					f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
				}
				var this28 = f27;
				var zb13 = this28;
				var fa13 = za13;
				var fb13 = zb13;
				var theta13 = Math.abs(fa13 - fb13);
				var clockwise13 = fa13 < fb13;
				var dif17 = clockwise13 ? theta13 : -theta13;
				dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
				break;
			case 2:
				var f28;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f28 = beta3;
				} else {
					var a28 = beta3 % (2 * Math.PI);
					f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
				}
				var this29 = f28;
				var za14 = this29;
				var f29;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f29 = gamma3;
				} else {
					var a29 = gamma3 % (2 * Math.PI);
					f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
				}
				var this30 = f29;
				var zb14 = this30;
				var fa14 = za14;
				var fb14 = zb14;
				var theta14 = Math.abs(fa14 - fb14);
				var smallest3 = theta14 <= Math.PI;
				var clockwise14 = fa14 < fb14;
				var dif18 = clockwise14 ? theta14 : -theta14;
				dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
				break;
			case 3:
				var f30;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f30 = beta3;
				} else {
					var a30 = beta3 % (2 * Math.PI);
					f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
				}
				var this31 = f30;
				var za15 = this31;
				var f31;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f31 = gamma3;
				} else {
					var a31 = gamma3 % (2 * Math.PI);
					f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
				}
				var this32 = f31;
				var zb15 = this32;
				var fa15 = za15;
				var fb15 = zb15;
				var theta15 = Math.abs(fa15 - fb15);
				var largest3 = theta15 > Math.PI;
				var clockwise15 = fa15 < fb15;
				var dif19 = clockwise15 ? theta15 : -theta15;
				dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
				break;
			}
			var positive3 = dif15 >= 0;
			var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
			var step7 = dif15 / totalSteps3;
			var angle3 = beta3;
			var cx3;
			var cy3;
			var bx3 = 0;
			var by3 = 0;
			var _g4 = 0;
			var _g13 = totalSteps3 + 1;
			while(_g4 < _g13) {
				var i3 = _g4++;
				cx3 = bx_ + radius3 * Math.sin(angle3);
				cy3 = by_ + radius3 * Math.cos(angle3);
				if(i3 != 0) {
					drawType3.triangle(bx_,by_,0,bx3,by3,0,cx3,cy3,0);
					var m3 = trilateral2_Shaper.transformMatrix;
					if(m3 != null) {
						drawType3.transform(m3);
					}
					drawType3.next();
				}
				angle3 += step7;
				bx3 = cx3;
				by3 = cy3;
			}
			var len3 = totalSteps3;
			var _this3 = this.pen;
			var color3 = 0;
			if(color3 == -1) {
				color3 = _this3.currentColor;
			}
			_this3.colorType.colorTriangles(color3,len3);
			break;
		}
		var _this4 = this.pen;
		var color4 = -1;
		if(color4 == null) {
			color4 = -1;
		}
		if(color4 == -1) {
			color4 = _this4.currentColor;
		}
		_this4.drawType.triangle(dxPrev_,dyPrev_,0,this.dx,this.dy,0,exPrev_,eyPrev_,0);
		if(_this4.transformMatrix != null) {
			_this4.drawType.transform(_this4.transformMatrix);
		}
		_this4.drawType.next();
		_this4.colorType.cornerColors(color4,color4,color4);
		var _this5 = this.pen;
		var color5 = -1;
		if(color5 == null) {
			color5 = -1;
		}
		if(color5 == -1) {
			color5 = _this5.currentColor;
		}
		_this5.drawType.triangle(dxPrev_,dyPrev_,0,this.dx,this.dy,0,this.ex,this.ey,0);
		if(_this5.transformMatrix != null) {
			_this5.drawType.transform(_this5.transformMatrix);
		}
		_this5.drawType.next();
		_this5.colorType.cornerColors(color5,color5,color5);
	}
	,__class__: trilateral2_Contour
};
var trilateral2__$DieSpots_DieSpots_$Impl_$ = {};
$hxClasses["trilateral2._DieSpots.DieSpots_Impl_"] = trilateral2__$DieSpots_DieSpots_$Impl_$;
trilateral2__$DieSpots_DieSpots_$Impl_$.__name__ = "trilateral2._DieSpots.DieSpots_Impl_";
trilateral2__$DieSpots_DieSpots_$Impl_$._new = function(regular) {
	var this1 = regular;
	return this1;
};
trilateral2__$DieSpots_DieSpots_$Impl_$.six2 = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 35;
	}
	if(dx == null) {
		dx = 25;
	}
	var s0 = rs.clone();
	s0.x -= dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s0.x;
	var ay1 = s0.y;
	var radius1 = s0.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s0.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	var c0 = new trilateral2_IndexRange(se0.start,se1.end);
	var s11 = rs.clone();
	s11.x += dx;
	s11.y -= dy;
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var ax2 = s11.x;
	var ay2 = s11.y;
	var radius2 = s11.radius;
	var sides2 = 36;
	if(sides2 == null) {
		sides2 = 36;
	}
	var pi2 = Math.PI;
	var theta3 = pi2 / 2;
	var step2 = pi2 * 2 / sides2;
	var bx2;
	var by2;
	var cx2;
	var cy2;
	var _g3 = 0;
	var _g12 = sides2;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx2 = ax2 + radius2 * Math.sin(theta3);
		by2 = ay2 + radius2 * Math.cos(theta3);
		theta3 += step2;
		cx2 = ax2 + radius2 * Math.sin(theta3);
		cy2 = ay2 + radius2 * Math.cos(theta3);
		drawType2.triangle(ax2,ay2,0,bx2,by2,0,cx2,cy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType2.transform(m2);
		}
		drawType2.next();
	}
	var len2 = sides2;
	var color2 = s11.color;
	if(color2 == -1) {
		color2 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color2,len2);
	var end2 = start2 + len2 - 1;
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var se01 = startEnd2;
	var start3 = this1.drawType.get_size();
	var drawType3 = this1.drawType;
	var ax3 = s11.x;
	var ay3 = s11.y;
	var radius3 = s11.radius;
	var sides3 = 36;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi3 = Math.PI;
	var theta4 = pi3 / 2;
	var step3 = pi3 * 2 / sides3;
	var bx3;
	var by3;
	var cx3;
	var cy3;
	var _g4 = 0;
	var _g13 = sides3;
	while(_g4 < _g13) {
		var i3 = _g4++;
		bx3 = ax3 + radius3 * Math.sin(theta4);
		by3 = ay3 + radius3 * Math.cos(theta4);
		theta4 += step3;
		cx3 = ax3 + radius3 * Math.sin(theta4);
		cy3 = ay3 + radius3 * Math.cos(theta4);
		drawType3.triangle(ax3,ay3,0,bx3,by3,0,cx3,cy3,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType3.transform(m3);
		}
		drawType3.next();
	}
	var len3 = sides3;
	var color3 = s11.color;
	if(color3 == -1) {
		color3 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color3,len3);
	var end3 = start3 + len3 - 1;
	var startEnd3 = new trilateral2_IndexRange(start3,end3);
	var se11 = startEnd3;
	var this11 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this12 = this11;
	var theta5 = Math.PI;
	var c1 = Math.cos(theta5);
	var s4 = Math.sin(theta5);
	var this13 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c1,-s4,0.,0.,s4,c1,0.);
	var s5 = this13;
	var this14 = new geom_structure_Mat4x3(this12.a * s5.a + this12.b * s5.e + this12.c * s5.i,this12.a * s5.b + this12.b * s5.f + this12.c * s5.j,this12.a * s5.c + this12.b * s5.g + this12.c * s5.k,this12.a * s5.d + this12.b * s5.h + this12.c * s5.l + this12.d,this12.e * s5.a + this12.f * s5.e + this12.g * s5.i,this12.e * s5.b + this12.f * s5.f + this12.g * s5.j,this12.e * s5.c + this12.f * s5.g + this12.g * s5.k,this12.e * s5.d + this12.f * s5.h + this12.g * s5.l + this12.h,this12.i * s5.a + this12.j * s5.e + this12.k * s5.i,this12.i * s5.b + this12.j * s5.f + this12.k * s5.j,this12.i * s5.c + this12.j * s5.g + this12.k * s5.k,this12.i * s5.d + this12.j * s5.h + this12.k * s5.l + this12.l);
	var r1 = this14;
	var this15 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this16 = this15;
	var this17 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s6 = this17;
	var this18 = new geom_structure_Mat4x3(this16.a * s6.a + this16.b * s6.e + this16.c * s6.i,this16.a * s6.b + this16.b * s6.f + this16.c * s6.j,this16.a * s6.c + this16.b * s6.g + this16.c * s6.k,this16.a * s6.d + this16.b * s6.h + this16.c * s6.l + this16.d,this16.e * s6.a + this16.f * s6.e + this16.g * s6.i,this16.e * s6.b + this16.f * s6.f + this16.g * s6.j,this16.e * s6.c + this16.f * s6.g + this16.g * s6.k,this16.e * s6.d + this16.f * s6.h + this16.g * s6.l + this16.h,this16.i * s6.a + this16.j * s6.e + this16.k * s6.i,this16.i * s6.b + this16.j * s6.f + this16.k * s6.j,this16.i * s6.c + this16.j * s6.g + this16.k * s6.k,this16.i * s6.d + this16.j * s6.h + this16.k * s6.l + this16.l);
	var s7 = this18;
	var this19 = new geom_structure_Mat4x3(r1.a * s7.a + r1.b * s7.e + r1.c * s7.i,r1.a * s7.b + r1.b * s7.f + r1.c * s7.j,r1.a * s7.c + r1.b * s7.g + r1.c * s7.k,r1.a * s7.d + r1.b * s7.h + r1.c * s7.l + r1.d,r1.e * s7.a + r1.f * s7.e + r1.g * s7.i,r1.e * s7.b + r1.f * s7.f + r1.g * s7.j,r1.e * s7.c + r1.f * s7.g + r1.g * s7.k,r1.e * s7.d + r1.f * s7.h + r1.g * s7.l + r1.h,r1.i * s7.a + r1.j * s7.e + r1.k * s7.i,r1.i * s7.b + r1.j * s7.f + r1.k * s7.j,r1.i * s7.c + r1.j * s7.g + r1.k * s7.k,r1.i * s7.d + r1.j * s7.h + r1.k * s7.l + r1.l);
	this1.drawType.transformRange(this19,se11.start,se11.end);
	var c11 = new trilateral2_IndexRange(se01.start,se11.end);
	var s21 = rs.clone();
	s21.x -= dx;
	s21.y += dy;
	var start4 = this1.drawType.get_size();
	var drawType4 = this1.drawType;
	var ax4 = s21.x;
	var ay4 = s21.y;
	var radius4 = s21.radius;
	var sides4 = 36;
	if(sides4 == null) {
		sides4 = 36;
	}
	var pi4 = Math.PI;
	var theta6 = pi4 / 2;
	var step4 = pi4 * 2 / sides4;
	var bx4;
	var by4;
	var cx4;
	var cy4;
	var _g5 = 0;
	var _g14 = sides4;
	while(_g5 < _g14) {
		var i4 = _g5++;
		bx4 = ax4 + radius4 * Math.sin(theta6);
		by4 = ay4 + radius4 * Math.cos(theta6);
		theta6 += step4;
		cx4 = ax4 + radius4 * Math.sin(theta6);
		cy4 = ay4 + radius4 * Math.cos(theta6);
		drawType4.triangle(ax4,ay4,0,bx4,by4,0,cx4,cy4,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType4.transform(m4);
		}
		drawType4.next();
	}
	var len4 = sides4;
	var color4 = s21.color;
	if(color4 == -1) {
		color4 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color4,len4);
	var end4 = start4 + len4 - 1;
	var startEnd4 = new trilateral2_IndexRange(start4,end4);
	var se02 = startEnd4;
	var start5 = this1.drawType.get_size();
	var drawType5 = this1.drawType;
	var ax5 = s21.x;
	var ay5 = s21.y;
	var radius5 = s21.radius;
	var sides5 = 36;
	if(sides5 == null) {
		sides5 = 36;
	}
	var pi5 = Math.PI;
	var theta7 = pi5 / 2;
	var step5 = pi5 * 2 / sides5;
	var bx5;
	var by5;
	var cx5;
	var cy5;
	var _g6 = 0;
	var _g15 = sides5;
	while(_g6 < _g15) {
		var i5 = _g6++;
		bx5 = ax5 + radius5 * Math.sin(theta7);
		by5 = ay5 + radius5 * Math.cos(theta7);
		theta7 += step5;
		cx5 = ax5 + radius5 * Math.sin(theta7);
		cy5 = ay5 + radius5 * Math.cos(theta7);
		drawType5.triangle(ax5,ay5,0,bx5,by5,0,cx5,cy5,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType5.transform(m5);
		}
		drawType5.next();
	}
	var len5 = sides5;
	var color5 = s21.color;
	if(color5 == -1) {
		color5 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color5,len5);
	var end5 = start5 + len5 - 1;
	var startEnd5 = new trilateral2_IndexRange(start5,end5);
	var se12 = startEnd5;
	var this20 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this21 = this20;
	var theta8 = Math.PI;
	var c2 = Math.cos(theta8);
	var s8 = Math.sin(theta8);
	var this22 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c2,-s8,0.,0.,s8,c2,0.);
	var s9 = this22;
	var this23 = new geom_structure_Mat4x3(this21.a * s9.a + this21.b * s9.e + this21.c * s9.i,this21.a * s9.b + this21.b * s9.f + this21.c * s9.j,this21.a * s9.c + this21.b * s9.g + this21.c * s9.k,this21.a * s9.d + this21.b * s9.h + this21.c * s9.l + this21.d,this21.e * s9.a + this21.f * s9.e + this21.g * s9.i,this21.e * s9.b + this21.f * s9.f + this21.g * s9.j,this21.e * s9.c + this21.f * s9.g + this21.g * s9.k,this21.e * s9.d + this21.f * s9.h + this21.g * s9.l + this21.h,this21.i * s9.a + this21.j * s9.e + this21.k * s9.i,this21.i * s9.b + this21.j * s9.f + this21.k * s9.j,this21.i * s9.c + this21.j * s9.g + this21.k * s9.k,this21.i * s9.d + this21.j * s9.h + this21.k * s9.l + this21.l);
	var r2 = this23;
	var this24 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this25 = this24;
	var this26 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s10 = this26;
	var this27 = new geom_structure_Mat4x3(this25.a * s10.a + this25.b * s10.e + this25.c * s10.i,this25.a * s10.b + this25.b * s10.f + this25.c * s10.j,this25.a * s10.c + this25.b * s10.g + this25.c * s10.k,this25.a * s10.d + this25.b * s10.h + this25.c * s10.l + this25.d,this25.e * s10.a + this25.f * s10.e + this25.g * s10.i,this25.e * s10.b + this25.f * s10.f + this25.g * s10.j,this25.e * s10.c + this25.f * s10.g + this25.g * s10.k,this25.e * s10.d + this25.f * s10.h + this25.g * s10.l + this25.h,this25.i * s10.a + this25.j * s10.e + this25.k * s10.i,this25.i * s10.b + this25.j * s10.f + this25.k * s10.j,this25.i * s10.c + this25.j * s10.g + this25.k * s10.k,this25.i * s10.d + this25.j * s10.h + this25.k * s10.l + this25.l);
	var s12 = this27;
	var this28 = new geom_structure_Mat4x3(r2.a * s12.a + r2.b * s12.e + r2.c * s12.i,r2.a * s12.b + r2.b * s12.f + r2.c * s12.j,r2.a * s12.c + r2.b * s12.g + r2.c * s12.k,r2.a * s12.d + r2.b * s12.h + r2.c * s12.l + r2.d,r2.e * s12.a + r2.f * s12.e + r2.g * s12.i,r2.e * s12.b + r2.f * s12.f + r2.g * s12.j,r2.e * s12.c + r2.f * s12.g + r2.g * s12.k,r2.e * s12.d + r2.f * s12.h + r2.g * s12.l + r2.h,r2.i * s12.a + r2.j * s12.e + r2.k * s12.i,r2.i * s12.b + r2.j * s12.f + r2.k * s12.j,r2.i * s12.c + r2.j * s12.g + r2.k * s12.k,r2.i * s12.d + r2.j * s12.h + r2.k * s12.l + r2.l);
	this1.drawType.transformRange(this28,se12.start,se12.end);
	var c21 = new trilateral2_IndexRange(se02.start,se12.end);
	var s31 = rs.clone();
	s31.x += dx;
	s31.y += dy;
	var start6 = this1.drawType.get_size();
	var drawType6 = this1.drawType;
	var ax6 = s31.x;
	var ay6 = s31.y;
	var radius6 = s31.radius;
	var sides6 = 36;
	if(sides6 == null) {
		sides6 = 36;
	}
	var pi6 = Math.PI;
	var theta9 = pi6 / 2;
	var step6 = pi6 * 2 / sides6;
	var bx6;
	var by6;
	var cx6;
	var cy6;
	var _g7 = 0;
	var _g16 = sides6;
	while(_g7 < _g16) {
		var i6 = _g7++;
		bx6 = ax6 + radius6 * Math.sin(theta9);
		by6 = ay6 + radius6 * Math.cos(theta9);
		theta9 += step6;
		cx6 = ax6 + radius6 * Math.sin(theta9);
		cy6 = ay6 + radius6 * Math.cos(theta9);
		drawType6.triangle(ax6,ay6,0,bx6,by6,0,cx6,cy6,0);
		var m6 = trilateral2_Shaper.transformMatrix;
		if(m6 != null) {
			drawType6.transform(m6);
		}
		drawType6.next();
	}
	var len6 = sides6;
	var color6 = s31.color;
	if(color6 == -1) {
		color6 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color6,len6);
	var end6 = start6 + len6 - 1;
	var startEnd6 = new trilateral2_IndexRange(start6,end6);
	var se03 = startEnd6;
	var start7 = this1.drawType.get_size();
	var drawType7 = this1.drawType;
	var ax7 = s31.x;
	var ay7 = s31.y;
	var radius7 = s31.radius;
	var sides7 = 36;
	if(sides7 == null) {
		sides7 = 36;
	}
	var pi7 = Math.PI;
	var theta10 = pi7 / 2;
	var step7 = pi7 * 2 / sides7;
	var bx7;
	var by7;
	var cx7;
	var cy7;
	var _g8 = 0;
	var _g17 = sides7;
	while(_g8 < _g17) {
		var i7 = _g8++;
		bx7 = ax7 + radius7 * Math.sin(theta10);
		by7 = ay7 + radius7 * Math.cos(theta10);
		theta10 += step7;
		cx7 = ax7 + radius7 * Math.sin(theta10);
		cy7 = ay7 + radius7 * Math.cos(theta10);
		drawType7.triangle(ax7,ay7,0,bx7,by7,0,cx7,cy7,0);
		var m7 = trilateral2_Shaper.transformMatrix;
		if(m7 != null) {
			drawType7.transform(m7);
		}
		drawType7.next();
	}
	var len7 = sides7;
	var color7 = s31.color;
	if(color7 == -1) {
		color7 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color7,len7);
	var end7 = start7 + len7 - 1;
	var startEnd7 = new trilateral2_IndexRange(start7,end7);
	var se13 = startEnd7;
	var this29 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this30 = this29;
	var theta11 = Math.PI;
	var c3 = Math.cos(theta11);
	var s13 = Math.sin(theta11);
	var this31 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c3,-s13,0.,0.,s13,c3,0.);
	var s14 = this31;
	var this32 = new geom_structure_Mat4x3(this30.a * s14.a + this30.b * s14.e + this30.c * s14.i,this30.a * s14.b + this30.b * s14.f + this30.c * s14.j,this30.a * s14.c + this30.b * s14.g + this30.c * s14.k,this30.a * s14.d + this30.b * s14.h + this30.c * s14.l + this30.d,this30.e * s14.a + this30.f * s14.e + this30.g * s14.i,this30.e * s14.b + this30.f * s14.f + this30.g * s14.j,this30.e * s14.c + this30.f * s14.g + this30.g * s14.k,this30.e * s14.d + this30.f * s14.h + this30.g * s14.l + this30.h,this30.i * s14.a + this30.j * s14.e + this30.k * s14.i,this30.i * s14.b + this30.j * s14.f + this30.k * s14.j,this30.i * s14.c + this30.j * s14.g + this30.k * s14.k,this30.i * s14.d + this30.j * s14.h + this30.k * s14.l + this30.l);
	var r3 = this32;
	var this33 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this34 = this33;
	var this35 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s15 = this35;
	var this36 = new geom_structure_Mat4x3(this34.a * s15.a + this34.b * s15.e + this34.c * s15.i,this34.a * s15.b + this34.b * s15.f + this34.c * s15.j,this34.a * s15.c + this34.b * s15.g + this34.c * s15.k,this34.a * s15.d + this34.b * s15.h + this34.c * s15.l + this34.d,this34.e * s15.a + this34.f * s15.e + this34.g * s15.i,this34.e * s15.b + this34.f * s15.f + this34.g * s15.j,this34.e * s15.c + this34.f * s15.g + this34.g * s15.k,this34.e * s15.d + this34.f * s15.h + this34.g * s15.l + this34.h,this34.i * s15.a + this34.j * s15.e + this34.k * s15.i,this34.i * s15.b + this34.j * s15.f + this34.k * s15.j,this34.i * s15.c + this34.j * s15.g + this34.k * s15.k,this34.i * s15.d + this34.j * s15.h + this34.k * s15.l + this34.l);
	var s16 = this36;
	var this37 = new geom_structure_Mat4x3(r3.a * s16.a + r3.b * s16.e + r3.c * s16.i,r3.a * s16.b + r3.b * s16.f + r3.c * s16.j,r3.a * s16.c + r3.b * s16.g + r3.c * s16.k,r3.a * s16.d + r3.b * s16.h + r3.c * s16.l + r3.d,r3.e * s16.a + r3.f * s16.e + r3.g * s16.i,r3.e * s16.b + r3.f * s16.f + r3.g * s16.j,r3.e * s16.c + r3.f * s16.g + r3.g * s16.k,r3.e * s16.d + r3.f * s16.h + r3.g * s16.l + r3.h,r3.i * s16.a + r3.j * s16.e + r3.k * s16.i,r3.i * s16.b + r3.j * s16.f + r3.k * s16.j,r3.i * s16.c + r3.j * s16.g + r3.k * s16.k,r3.i * s16.d + r3.j * s16.h + r3.k * s16.l + r3.l);
	this1.drawType.transformRange(this37,se13.start,se13.end);
	var c31 = new trilateral2_IndexRange(se03.start,se13.end);
	var s41 = rs.clone();
	s41.x -= dx;
	var start8 = this1.drawType.get_size();
	var drawType8 = this1.drawType;
	var ax8 = s41.x;
	var ay8 = s41.y;
	var radius8 = s41.radius;
	var sides8 = 36;
	if(sides8 == null) {
		sides8 = 36;
	}
	var pi8 = Math.PI;
	var theta12 = pi8 / 2;
	var step8 = pi8 * 2 / sides8;
	var bx8;
	var by8;
	var cx8;
	var cy8;
	var _g9 = 0;
	var _g18 = sides8;
	while(_g9 < _g18) {
		var i8 = _g9++;
		bx8 = ax8 + radius8 * Math.sin(theta12);
		by8 = ay8 + radius8 * Math.cos(theta12);
		theta12 += step8;
		cx8 = ax8 + radius8 * Math.sin(theta12);
		cy8 = ay8 + radius8 * Math.cos(theta12);
		drawType8.triangle(ax8,ay8,0,bx8,by8,0,cx8,cy8,0);
		var m8 = trilateral2_Shaper.transformMatrix;
		if(m8 != null) {
			drawType8.transform(m8);
		}
		drawType8.next();
	}
	var len8 = sides8;
	var color8 = s41.color;
	if(color8 == -1) {
		color8 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color8,len8);
	var end8 = start8 + len8 - 1;
	var startEnd8 = new trilateral2_IndexRange(start8,end8);
	var se04 = startEnd8;
	var start9 = this1.drawType.get_size();
	var drawType9 = this1.drawType;
	var ax9 = s41.x;
	var ay9 = s41.y;
	var radius9 = s41.radius;
	var sides9 = 36;
	if(sides9 == null) {
		sides9 = 36;
	}
	var pi9 = Math.PI;
	var theta13 = pi9 / 2;
	var step9 = pi9 * 2 / sides9;
	var bx9;
	var by9;
	var cx9;
	var cy9;
	var _g10 = 0;
	var _g19 = sides9;
	while(_g10 < _g19) {
		var i9 = _g10++;
		bx9 = ax9 + radius9 * Math.sin(theta13);
		by9 = ay9 + radius9 * Math.cos(theta13);
		theta13 += step9;
		cx9 = ax9 + radius9 * Math.sin(theta13);
		cy9 = ay9 + radius9 * Math.cos(theta13);
		drawType9.triangle(ax9,ay9,0,bx9,by9,0,cx9,cy9,0);
		var m9 = trilateral2_Shaper.transformMatrix;
		if(m9 != null) {
			drawType9.transform(m9);
		}
		drawType9.next();
	}
	var len9 = sides9;
	var color9 = s41.color;
	if(color9 == -1) {
		color9 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color9,len9);
	var end9 = start9 + len9 - 1;
	var startEnd9 = new trilateral2_IndexRange(start9,end9);
	var se14 = startEnd9;
	var this38 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this39 = this38;
	var theta14 = Math.PI;
	var c4 = Math.cos(theta14);
	var s17 = Math.sin(theta14);
	var this40 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c4,-s17,0.,0.,s17,c4,0.);
	var s18 = this40;
	var this41 = new geom_structure_Mat4x3(this39.a * s18.a + this39.b * s18.e + this39.c * s18.i,this39.a * s18.b + this39.b * s18.f + this39.c * s18.j,this39.a * s18.c + this39.b * s18.g + this39.c * s18.k,this39.a * s18.d + this39.b * s18.h + this39.c * s18.l + this39.d,this39.e * s18.a + this39.f * s18.e + this39.g * s18.i,this39.e * s18.b + this39.f * s18.f + this39.g * s18.j,this39.e * s18.c + this39.f * s18.g + this39.g * s18.k,this39.e * s18.d + this39.f * s18.h + this39.g * s18.l + this39.h,this39.i * s18.a + this39.j * s18.e + this39.k * s18.i,this39.i * s18.b + this39.j * s18.f + this39.k * s18.j,this39.i * s18.c + this39.j * s18.g + this39.k * s18.k,this39.i * s18.d + this39.j * s18.h + this39.k * s18.l + this39.l);
	var r4 = this41;
	var this42 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this43 = this42;
	var this44 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s19 = this44;
	var this45 = new geom_structure_Mat4x3(this43.a * s19.a + this43.b * s19.e + this43.c * s19.i,this43.a * s19.b + this43.b * s19.f + this43.c * s19.j,this43.a * s19.c + this43.b * s19.g + this43.c * s19.k,this43.a * s19.d + this43.b * s19.h + this43.c * s19.l + this43.d,this43.e * s19.a + this43.f * s19.e + this43.g * s19.i,this43.e * s19.b + this43.f * s19.f + this43.g * s19.j,this43.e * s19.c + this43.f * s19.g + this43.g * s19.k,this43.e * s19.d + this43.f * s19.h + this43.g * s19.l + this43.h,this43.i * s19.a + this43.j * s19.e + this43.k * s19.i,this43.i * s19.b + this43.j * s19.f + this43.k * s19.j,this43.i * s19.c + this43.j * s19.g + this43.k * s19.k,this43.i * s19.d + this43.j * s19.h + this43.k * s19.l + this43.l);
	var s20 = this45;
	var this46 = new geom_structure_Mat4x3(r4.a * s20.a + r4.b * s20.e + r4.c * s20.i,r4.a * s20.b + r4.b * s20.f + r4.c * s20.j,r4.a * s20.c + r4.b * s20.g + r4.c * s20.k,r4.a * s20.d + r4.b * s20.h + r4.c * s20.l + r4.d,r4.e * s20.a + r4.f * s20.e + r4.g * s20.i,r4.e * s20.b + r4.f * s20.f + r4.g * s20.j,r4.e * s20.c + r4.f * s20.g + r4.g * s20.k,r4.e * s20.d + r4.f * s20.h + r4.g * s20.l + r4.h,r4.i * s20.a + r4.j * s20.e + r4.k * s20.i,r4.i * s20.b + r4.j * s20.f + r4.k * s20.j,r4.i * s20.c + r4.j * s20.g + r4.k * s20.k,r4.i * s20.d + r4.j * s20.h + r4.k * s20.l + r4.l);
	this1.drawType.transformRange(this46,se14.start,se14.end);
	var c41 = new trilateral2_IndexRange(se04.start,se14.end);
	var s51 = rs.clone();
	s51.x += dx;
	var start10 = this1.drawType.get_size();
	var drawType10 = this1.drawType;
	var ax10 = s51.x;
	var ay10 = s51.y;
	var radius10 = s51.radius;
	var sides10 = 36;
	if(sides10 == null) {
		sides10 = 36;
	}
	var pi10 = Math.PI;
	var theta15 = pi10 / 2;
	var step10 = pi10 * 2 / sides10;
	var bx10;
	var by10;
	var cx10;
	var cy10;
	var _g20 = 0;
	var _g110 = sides10;
	while(_g20 < _g110) {
		var i10 = _g20++;
		bx10 = ax10 + radius10 * Math.sin(theta15);
		by10 = ay10 + radius10 * Math.cos(theta15);
		theta15 += step10;
		cx10 = ax10 + radius10 * Math.sin(theta15);
		cy10 = ay10 + radius10 * Math.cos(theta15);
		drawType10.triangle(ax10,ay10,0,bx10,by10,0,cx10,cy10,0);
		var m10 = trilateral2_Shaper.transformMatrix;
		if(m10 != null) {
			drawType10.transform(m10);
		}
		drawType10.next();
	}
	var len10 = sides10;
	var color10 = s51.color;
	if(color10 == -1) {
		color10 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color10,len10);
	var end10 = start10 + len10 - 1;
	var startEnd10 = new trilateral2_IndexRange(start10,end10);
	var se05 = startEnd10;
	var start11 = this1.drawType.get_size();
	var drawType11 = this1.drawType;
	var ax11 = s51.x;
	var ay11 = s51.y;
	var radius11 = s51.radius;
	var sides11 = 36;
	if(sides11 == null) {
		sides11 = 36;
	}
	var pi11 = Math.PI;
	var theta16 = pi11 / 2;
	var step11 = pi11 * 2 / sides11;
	var bx11;
	var by11;
	var cx11;
	var cy11;
	var _g21 = 0;
	var _g111 = sides11;
	while(_g21 < _g111) {
		var i11 = _g21++;
		bx11 = ax11 + radius11 * Math.sin(theta16);
		by11 = ay11 + radius11 * Math.cos(theta16);
		theta16 += step11;
		cx11 = ax11 + radius11 * Math.sin(theta16);
		cy11 = ay11 + radius11 * Math.cos(theta16);
		drawType11.triangle(ax11,ay11,0,bx11,by11,0,cx11,cy11,0);
		var m11 = trilateral2_Shaper.transformMatrix;
		if(m11 != null) {
			drawType11.transform(m11);
		}
		drawType11.next();
	}
	var len11 = sides11;
	var color11 = s51.color;
	if(color11 == -1) {
		color11 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color11,len11);
	var end11 = start11 + len11 - 1;
	var startEnd11 = new trilateral2_IndexRange(start11,end11);
	var se15 = startEnd11;
	var this47 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this48 = this47;
	var theta17 = Math.PI;
	var c5 = Math.cos(theta17);
	var s22 = Math.sin(theta17);
	var this49 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c5,-s22,0.,0.,s22,c5,0.);
	var s23 = this49;
	var this50 = new geom_structure_Mat4x3(this48.a * s23.a + this48.b * s23.e + this48.c * s23.i,this48.a * s23.b + this48.b * s23.f + this48.c * s23.j,this48.a * s23.c + this48.b * s23.g + this48.c * s23.k,this48.a * s23.d + this48.b * s23.h + this48.c * s23.l + this48.d,this48.e * s23.a + this48.f * s23.e + this48.g * s23.i,this48.e * s23.b + this48.f * s23.f + this48.g * s23.j,this48.e * s23.c + this48.f * s23.g + this48.g * s23.k,this48.e * s23.d + this48.f * s23.h + this48.g * s23.l + this48.h,this48.i * s23.a + this48.j * s23.e + this48.k * s23.i,this48.i * s23.b + this48.j * s23.f + this48.k * s23.j,this48.i * s23.c + this48.j * s23.g + this48.k * s23.k,this48.i * s23.d + this48.j * s23.h + this48.k * s23.l + this48.l);
	var r5 = this50;
	var this51 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this52 = this51;
	var this53 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s24 = this53;
	var this54 = new geom_structure_Mat4x3(this52.a * s24.a + this52.b * s24.e + this52.c * s24.i,this52.a * s24.b + this52.b * s24.f + this52.c * s24.j,this52.a * s24.c + this52.b * s24.g + this52.c * s24.k,this52.a * s24.d + this52.b * s24.h + this52.c * s24.l + this52.d,this52.e * s24.a + this52.f * s24.e + this52.g * s24.i,this52.e * s24.b + this52.f * s24.f + this52.g * s24.j,this52.e * s24.c + this52.f * s24.g + this52.g * s24.k,this52.e * s24.d + this52.f * s24.h + this52.g * s24.l + this52.h,this52.i * s24.a + this52.j * s24.e + this52.k * s24.i,this52.i * s24.b + this52.j * s24.f + this52.k * s24.j,this52.i * s24.c + this52.j * s24.g + this52.k * s24.k,this52.i * s24.d + this52.j * s24.h + this52.k * s24.l + this52.l);
	var s25 = this54;
	var this55 = new geom_structure_Mat4x3(r5.a * s25.a + r5.b * s25.e + r5.c * s25.i,r5.a * s25.b + r5.b * s25.f + r5.c * s25.j,r5.a * s25.c + r5.b * s25.g + r5.c * s25.k,r5.a * s25.d + r5.b * s25.h + r5.c * s25.l + r5.d,r5.e * s25.a + r5.f * s25.e + r5.g * s25.i,r5.e * s25.b + r5.f * s25.f + r5.g * s25.j,r5.e * s25.c + r5.f * s25.g + r5.g * s25.k,r5.e * s25.d + r5.f * s25.h + r5.g * s25.l + r5.h,r5.i * s25.a + r5.j * s25.e + r5.k * s25.i,r5.i * s25.b + r5.j * s25.f + r5.k * s25.j,r5.i * s25.c + r5.j * s25.g + r5.k * s25.k,r5.i * s25.d + r5.j * s25.h + r5.k * s25.l + r5.l);
	this1.drawType.transformRange(this55,se15.start,se15.end);
	var c51 = new trilateral2_IndexRange(se05.start,se15.end);
	return new trilateral2_IndexRange(c0.start,c51.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.colorSix = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 35;
	}
	if(dx == null) {
		dx = 25;
	}
	var s0 = rs.clone();
	s0.x -= dx;
	s0.y -= dy;
	var arr = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var rx = -0.25;
	var ry = 0.25;
	var sides = 47;
	if(sides == null) {
		sides = 36;
	}
	if(ry == null) {
		ry = 0;
	}
	if(rx == null) {
		rx = 0;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = s0.x;
	var y = s0.y;
	var radius = s0.radius;
	var len;
	if((sides & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx1 = rx;
		var ry1 = ry;
		var sides1 = sides;
		var omega = 0.;
		if(omega == null) {
			omega = 0.;
		}
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2 + omega;
		var step = pi * 2 / sides1;
		var bx;
		var by;
		var cx;
		var cy;
		if(rx1 > 1.) {
			rx1 = 1;
		}
		if(rx1 < -1.) {
			rx1 = -1;
		}
		if(ry1 > 1.) {
			ry1 = 1;
		}
		if(ry1 < -1.) {
			ry1 = -1;
		}
		var mx = x + rx1 * radius;
		var my = y - ry1 * radius;
		var _g = 0;
		var _g1 = sides1;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = sides1;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx2 = rx;
		var ry2 = ry;
		var sides2 = sides;
		var omega1 = 0.;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides2 == null) {
			sides2 = 36;
		}
		var pi1 = Math.PI;
		var theta1 = pi1 / 2;
		var step1 = pi1 * 2 / sides2;
		theta1 -= step1 / 2 + omega1;
		var bx1 = 0;
		var by1 = 0;
		var cx1 = 0;
		var cy1 = 0;
		if(rx2 > 1.) {
			rx2 = 1;
		}
		if(rx2 < -1.) {
			rx2 = -1;
		}
		if(ry2 > 1.) {
			ry2 = 1;
		}
		if(ry2 < -1.) {
			ry2 = -1;
		}
		var mx1 = x + rx2 * radius;
		var my1 = y - ry2 * radius;
		var dx1 = x + radius * Math.sin(theta1);
		var dy1 = y + radius * Math.cos(theta1);
		var _g2 = 0;
		var _g11 = sides2 - 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			bx1 = x + radius * Math.sin(theta1);
			by1 = y + radius * Math.cos(theta1);
			theta1 += step1;
			cx1 = x + radius * Math.sin(theta1);
			cy1 = y + radius * Math.cos(theta1);
			drawType.triangle(mx1,my1,0,bx1,by1,0,cx1,cy1,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		drawType.triangle(mx1,my1,0,cx1,cy1,0,dx1,dy1,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		len = sides2;
	}
	var k = 1;
	var arrEnd = arr.length - 1;
	var end = start + len - 1;
	var arr_ = arr.slice();
	var _g3 = 0;
	var _g12 = len - 1;
	while(_g3 < _g12) {
		var j = _g3++;
		this1.colorType.cornerColors(s0.color,arr_[k - 1],arr_[k]);
		++k;
		if(k > arrEnd) {
			k = 1;
			arr_.reverse();
		}
	}
	this1.colorType.cornerColors(s0.color,arr_[k - 1],arr[0]);
	var startEnd = new trilateral2_IndexRange(start,end);
	var c0 = startEnd;
	var s1 = rs.clone();
	s1.x += dx;
	s1.y -= dy;
	var arr1 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var rx3 = -0.25;
	var ry3 = 0.25;
	var sides3 = 47;
	if(sides3 == null) {
		sides3 = 36;
	}
	if(ry3 == null) {
		ry3 = 0;
	}
	if(rx3 == null) {
		rx3 = 0;
	}
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var x1 = s1.x;
	var y1 = s1.y;
	var radius1 = s1.radius;
	var len1;
	if((sides3 & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx4 = rx3;
		var ry4 = ry3;
		var sides4 = sides3;
		var omega2 = 0.;
		if(omega2 == null) {
			omega2 = 0.;
		}
		if(sides4 == null) {
			sides4 = 36;
		}
		var pi2 = Math.PI;
		var theta2 = pi2 / 2 + omega2;
		var step2 = pi2 * 2 / sides4;
		var bx2;
		var by2;
		var cx2;
		var cy2;
		if(rx4 > 1.) {
			rx4 = 1;
		}
		if(rx4 < -1.) {
			rx4 = -1;
		}
		if(ry4 > 1.) {
			ry4 = 1;
		}
		if(ry4 < -1.) {
			ry4 = -1;
		}
		var mx2 = x1 + rx4 * radius1;
		var my2 = y1 - ry4 * radius1;
		var _g4 = 0;
		var _g13 = sides4;
		while(_g4 < _g13) {
			var i2 = _g4++;
			bx2 = x1 + radius1 * Math.sin(theta2);
			by2 = y1 + radius1 * Math.cos(theta2);
			theta2 += step2;
			cx2 = x1 + radius1 * Math.sin(theta2);
			cy2 = y1 + radius1 * Math.cos(theta2);
			drawType1.triangle(mx2,my2,0,bx2,by2,0,cx2,cy2,0);
			var m3 = trilateral2_Shaper.transformMatrix;
			if(m3 != null) {
				drawType1.transform(m3);
			}
			drawType1.next();
		}
		len1 = sides4;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides3 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx5 = rx3;
		var ry5 = ry3;
		var sides5 = sides3;
		var omega3 = 0.;
		if(omega3 == null) {
			omega3 = 0.;
		}
		if(sides5 == null) {
			sides5 = 36;
		}
		var pi3 = Math.PI;
		var theta3 = pi3 / 2;
		var step3 = pi3 * 2 / sides5;
		theta3 -= step3 / 2 + omega3;
		var bx3 = 0;
		var by3 = 0;
		var cx3 = 0;
		var cy3 = 0;
		if(rx5 > 1.) {
			rx5 = 1;
		}
		if(rx5 < -1.) {
			rx5 = -1;
		}
		if(ry5 > 1.) {
			ry5 = 1;
		}
		if(ry5 < -1.) {
			ry5 = -1;
		}
		var mx3 = x1 + rx5 * radius1;
		var my3 = y1 - ry5 * radius1;
		var dx2 = x1 + radius1 * Math.sin(theta3);
		var dy2 = y1 + radius1 * Math.cos(theta3);
		var _g5 = 0;
		var _g14 = sides5 - 1;
		while(_g5 < _g14) {
			var i3 = _g5++;
			bx3 = x1 + radius1 * Math.sin(theta3);
			by3 = y1 + radius1 * Math.cos(theta3);
			theta3 += step3;
			cx3 = x1 + radius1 * Math.sin(theta3);
			cy3 = y1 + radius1 * Math.cos(theta3);
			drawType1.triangle(mx3,my3,0,bx3,by3,0,cx3,cy3,0);
			var m4 = trilateral2_Shaper.transformMatrix;
			if(m4 != null) {
				drawType1.transform(m4);
			}
			drawType1.next();
		}
		drawType1.triangle(mx3,my3,0,cx3,cy3,0,dx2,dy2,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType1.transform(m5);
		}
		drawType1.next();
		len1 = sides5;
	}
	var k1 = 1;
	var arrEnd1 = arr1.length - 1;
	var end1 = start1 + len1 - 1;
	var arr_1 = arr1.slice();
	var _g6 = 0;
	var _g15 = len1 - 1;
	while(_g6 < _g15) {
		var j1 = _g6++;
		this1.colorType.cornerColors(s1.color,arr_1[k1 - 1],arr_1[k1]);
		++k1;
		if(k1 > arrEnd1) {
			k1 = 1;
			arr_1.reverse();
		}
	}
	this1.colorType.cornerColors(s1.color,arr_1[k1 - 1],arr1[0]);
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var c1 = startEnd1;
	var s2 = rs.clone();
	s2.x -= dx;
	s2.y += dy;
	var arr2 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var rx6 = -0.25;
	var ry6 = 0.25;
	var sides6 = 47;
	if(sides6 == null) {
		sides6 = 36;
	}
	if(ry6 == null) {
		ry6 = 0;
	}
	if(rx6 == null) {
		rx6 = 0;
	}
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var x2 = s2.x;
	var y2 = s2.y;
	var radius2 = s2.radius;
	var len2;
	if((sides6 & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx7 = rx6;
		var ry7 = ry6;
		var sides7 = sides6;
		var omega4 = 0.;
		if(omega4 == null) {
			omega4 = 0.;
		}
		if(sides7 == null) {
			sides7 = 36;
		}
		var pi4 = Math.PI;
		var theta4 = pi4 / 2 + omega4;
		var step4 = pi4 * 2 / sides7;
		var bx4;
		var by4;
		var cx4;
		var cy4;
		if(rx7 > 1.) {
			rx7 = 1;
		}
		if(rx7 < -1.) {
			rx7 = -1;
		}
		if(ry7 > 1.) {
			ry7 = 1;
		}
		if(ry7 < -1.) {
			ry7 = -1;
		}
		var mx4 = x2 + rx7 * radius2;
		var my4 = y2 - ry7 * radius2;
		var _g7 = 0;
		var _g16 = sides7;
		while(_g7 < _g16) {
			var i4 = _g7++;
			bx4 = x2 + radius2 * Math.sin(theta4);
			by4 = y2 + radius2 * Math.cos(theta4);
			theta4 += step4;
			cx4 = x2 + radius2 * Math.sin(theta4);
			cy4 = y2 + radius2 * Math.cos(theta4);
			drawType2.triangle(mx4,my4,0,bx4,by4,0,cx4,cy4,0);
			var m6 = trilateral2_Shaper.transformMatrix;
			if(m6 != null) {
				drawType2.transform(m6);
			}
			drawType2.next();
		}
		len2 = sides7;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides6 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx8 = rx6;
		var ry8 = ry6;
		var sides8 = sides6;
		var omega5 = 0.;
		if(omega5 == null) {
			omega5 = 0.;
		}
		if(sides8 == null) {
			sides8 = 36;
		}
		var pi5 = Math.PI;
		var theta5 = pi5 / 2;
		var step5 = pi5 * 2 / sides8;
		theta5 -= step5 / 2 + omega5;
		var bx5 = 0;
		var by5 = 0;
		var cx5 = 0;
		var cy5 = 0;
		if(rx8 > 1.) {
			rx8 = 1;
		}
		if(rx8 < -1.) {
			rx8 = -1;
		}
		if(ry8 > 1.) {
			ry8 = 1;
		}
		if(ry8 < -1.) {
			ry8 = -1;
		}
		var mx5 = x2 + rx8 * radius2;
		var my5 = y2 - ry8 * radius2;
		var dx3 = x2 + radius2 * Math.sin(theta5);
		var dy3 = y2 + radius2 * Math.cos(theta5);
		var _g8 = 0;
		var _g17 = sides8 - 1;
		while(_g8 < _g17) {
			var i5 = _g8++;
			bx5 = x2 + radius2 * Math.sin(theta5);
			by5 = y2 + radius2 * Math.cos(theta5);
			theta5 += step5;
			cx5 = x2 + radius2 * Math.sin(theta5);
			cy5 = y2 + radius2 * Math.cos(theta5);
			drawType2.triangle(mx5,my5,0,bx5,by5,0,cx5,cy5,0);
			var m7 = trilateral2_Shaper.transformMatrix;
			if(m7 != null) {
				drawType2.transform(m7);
			}
			drawType2.next();
		}
		drawType2.triangle(mx5,my5,0,cx5,cy5,0,dx3,dy3,0);
		var m8 = trilateral2_Shaper.transformMatrix;
		if(m8 != null) {
			drawType2.transform(m8);
		}
		drawType2.next();
		len2 = sides8;
	}
	var k2 = 1;
	var arrEnd2 = arr2.length - 1;
	var end2 = start2 + len2 - 1;
	var arr_2 = arr2.slice();
	var _g9 = 0;
	var _g18 = len2 - 1;
	while(_g9 < _g18) {
		var j2 = _g9++;
		this1.colorType.cornerColors(s2.color,arr_2[k2 - 1],arr_2[k2]);
		++k2;
		if(k2 > arrEnd2) {
			k2 = 1;
			arr_2.reverse();
		}
	}
	this1.colorType.cornerColors(s2.color,arr_2[k2 - 1],arr2[0]);
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var c2 = startEnd2;
	var s3 = rs.clone();
	s3.x += dx;
	s3.y += dy;
	var arr3 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var rx9 = -0.25;
	var ry9 = 0.25;
	var sides9 = 47;
	if(sides9 == null) {
		sides9 = 36;
	}
	if(ry9 == null) {
		ry9 = 0;
	}
	if(rx9 == null) {
		rx9 = 0;
	}
	var start3 = this1.drawType.get_size();
	var drawType3 = this1.drawType;
	var x3 = s3.x;
	var y3 = s3.y;
	var radius3 = s3.radius;
	var len3;
	if((sides9 & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx10 = rx9;
		var ry10 = ry9;
		var sides10 = sides9;
		var omega6 = 0.;
		if(omega6 == null) {
			omega6 = 0.;
		}
		if(sides10 == null) {
			sides10 = 36;
		}
		var pi6 = Math.PI;
		var theta6 = pi6 / 2 + omega6;
		var step6 = pi6 * 2 / sides10;
		var bx6;
		var by6;
		var cx6;
		var cy6;
		if(rx10 > 1.) {
			rx10 = 1;
		}
		if(rx10 < -1.) {
			rx10 = -1;
		}
		if(ry10 > 1.) {
			ry10 = 1;
		}
		if(ry10 < -1.) {
			ry10 = -1;
		}
		var mx6 = x3 + rx10 * radius3;
		var my6 = y3 - ry10 * radius3;
		var _g10 = 0;
		var _g19 = sides10;
		while(_g10 < _g19) {
			var i6 = _g10++;
			bx6 = x3 + radius3 * Math.sin(theta6);
			by6 = y3 + radius3 * Math.cos(theta6);
			theta6 += step6;
			cx6 = x3 + radius3 * Math.sin(theta6);
			cy6 = y3 + radius3 * Math.cos(theta6);
			drawType3.triangle(mx6,my6,0,bx6,by6,0,cx6,cy6,0);
			var m9 = trilateral2_Shaper.transformMatrix;
			if(m9 != null) {
				drawType3.transform(m9);
			}
			drawType3.next();
		}
		len3 = sides10;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides9 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx11 = rx9;
		var ry11 = ry9;
		var sides11 = sides9;
		var omega7 = 0.;
		if(omega7 == null) {
			omega7 = 0.;
		}
		if(sides11 == null) {
			sides11 = 36;
		}
		var pi7 = Math.PI;
		var theta7 = pi7 / 2;
		var step7 = pi7 * 2 / sides11;
		theta7 -= step7 / 2 + omega7;
		var bx7 = 0;
		var by7 = 0;
		var cx7 = 0;
		var cy7 = 0;
		if(rx11 > 1.) {
			rx11 = 1;
		}
		if(rx11 < -1.) {
			rx11 = -1;
		}
		if(ry11 > 1.) {
			ry11 = 1;
		}
		if(ry11 < -1.) {
			ry11 = -1;
		}
		var mx7 = x3 + rx11 * radius3;
		var my7 = y3 - ry11 * radius3;
		var dx4 = x3 + radius3 * Math.sin(theta7);
		var dy4 = y3 + radius3 * Math.cos(theta7);
		var _g20 = 0;
		var _g110 = sides11 - 1;
		while(_g20 < _g110) {
			var i7 = _g20++;
			bx7 = x3 + radius3 * Math.sin(theta7);
			by7 = y3 + radius3 * Math.cos(theta7);
			theta7 += step7;
			cx7 = x3 + radius3 * Math.sin(theta7);
			cy7 = y3 + radius3 * Math.cos(theta7);
			drawType3.triangle(mx7,my7,0,bx7,by7,0,cx7,cy7,0);
			var m10 = trilateral2_Shaper.transformMatrix;
			if(m10 != null) {
				drawType3.transform(m10);
			}
			drawType3.next();
		}
		drawType3.triangle(mx7,my7,0,cx7,cy7,0,dx4,dy4,0);
		var m11 = trilateral2_Shaper.transformMatrix;
		if(m11 != null) {
			drawType3.transform(m11);
		}
		drawType3.next();
		len3 = sides11;
	}
	var k3 = 1;
	var arrEnd3 = arr3.length - 1;
	var end3 = start3 + len3 - 1;
	var arr_3 = arr3.slice();
	var _g21 = 0;
	var _g111 = len3 - 1;
	while(_g21 < _g111) {
		var j3 = _g21++;
		this1.colorType.cornerColors(s3.color,arr_3[k3 - 1],arr_3[k3]);
		++k3;
		if(k3 > arrEnd3) {
			k3 = 1;
			arr_3.reverse();
		}
	}
	this1.colorType.cornerColors(s3.color,arr_3[k3 - 1],arr3[0]);
	var startEnd3 = new trilateral2_IndexRange(start3,end3);
	var c3 = startEnd3;
	var s4 = rs.clone();
	s4.x -= dx;
	var arr4 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var rx12 = -0.25;
	var ry12 = 0.25;
	var sides12 = 47;
	if(sides12 == null) {
		sides12 = 36;
	}
	if(ry12 == null) {
		ry12 = 0;
	}
	if(rx12 == null) {
		rx12 = 0;
	}
	var start4 = this1.drawType.get_size();
	var drawType4 = this1.drawType;
	var x4 = s4.x;
	var y4 = s4.y;
	var radius4 = s4.radius;
	var len4;
	if((sides12 & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx13 = rx12;
		var ry13 = ry12;
		var sides13 = sides12;
		var omega8 = 0.;
		if(omega8 == null) {
			omega8 = 0.;
		}
		if(sides13 == null) {
			sides13 = 36;
		}
		var pi8 = Math.PI;
		var theta8 = pi8 / 2 + omega8;
		var step8 = pi8 * 2 / sides13;
		var bx8;
		var by8;
		var cx8;
		var cy8;
		if(rx13 > 1.) {
			rx13 = 1;
		}
		if(rx13 < -1.) {
			rx13 = -1;
		}
		if(ry13 > 1.) {
			ry13 = 1;
		}
		if(ry13 < -1.) {
			ry13 = -1;
		}
		var mx8 = x4 + rx13 * radius4;
		var my8 = y4 - ry13 * radius4;
		var _g22 = 0;
		var _g112 = sides13;
		while(_g22 < _g112) {
			var i8 = _g22++;
			bx8 = x4 + radius4 * Math.sin(theta8);
			by8 = y4 + radius4 * Math.cos(theta8);
			theta8 += step8;
			cx8 = x4 + radius4 * Math.sin(theta8);
			cy8 = y4 + radius4 * Math.cos(theta8);
			drawType4.triangle(mx8,my8,0,bx8,by8,0,cx8,cy8,0);
			var m12 = trilateral2_Shaper.transformMatrix;
			if(m12 != null) {
				drawType4.transform(m12);
			}
			drawType4.next();
		}
		len4 = sides13;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides12 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx14 = rx12;
		var ry14 = ry12;
		var sides14 = sides12;
		var omega9 = 0.;
		if(omega9 == null) {
			omega9 = 0.;
		}
		if(sides14 == null) {
			sides14 = 36;
		}
		var pi9 = Math.PI;
		var theta9 = pi9 / 2;
		var step9 = pi9 * 2 / sides14;
		theta9 -= step9 / 2 + omega9;
		var bx9 = 0;
		var by9 = 0;
		var cx9 = 0;
		var cy9 = 0;
		if(rx14 > 1.) {
			rx14 = 1;
		}
		if(rx14 < -1.) {
			rx14 = -1;
		}
		if(ry14 > 1.) {
			ry14 = 1;
		}
		if(ry14 < -1.) {
			ry14 = -1;
		}
		var mx9 = x4 + rx14 * radius4;
		var my9 = y4 - ry14 * radius4;
		var dx5 = x4 + radius4 * Math.sin(theta9);
		var dy5 = y4 + radius4 * Math.cos(theta9);
		var _g23 = 0;
		var _g113 = sides14 - 1;
		while(_g23 < _g113) {
			var i9 = _g23++;
			bx9 = x4 + radius4 * Math.sin(theta9);
			by9 = y4 + radius4 * Math.cos(theta9);
			theta9 += step9;
			cx9 = x4 + radius4 * Math.sin(theta9);
			cy9 = y4 + radius4 * Math.cos(theta9);
			drawType4.triangle(mx9,my9,0,bx9,by9,0,cx9,cy9,0);
			var m13 = trilateral2_Shaper.transformMatrix;
			if(m13 != null) {
				drawType4.transform(m13);
			}
			drawType4.next();
		}
		drawType4.triangle(mx9,my9,0,cx9,cy9,0,dx5,dy5,0);
		var m14 = trilateral2_Shaper.transformMatrix;
		if(m14 != null) {
			drawType4.transform(m14);
		}
		drawType4.next();
		len4 = sides14;
	}
	var k4 = 1;
	var arrEnd4 = arr4.length - 1;
	var end4 = start4 + len4 - 1;
	var arr_4 = arr4.slice();
	var _g24 = 0;
	var _g114 = len4 - 1;
	while(_g24 < _g114) {
		var j4 = _g24++;
		this1.colorType.cornerColors(s4.color,arr_4[k4 - 1],arr_4[k4]);
		++k4;
		if(k4 > arrEnd4) {
			k4 = 1;
			arr_4.reverse();
		}
	}
	this1.colorType.cornerColors(s4.color,arr_4[k4 - 1],arr4[0]);
	var startEnd4 = new trilateral2_IndexRange(start4,end4);
	var c4 = startEnd4;
	var s5 = rs.clone();
	s5.x += dx;
	var arr5 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var rx15 = -0.25;
	var ry15 = 0.25;
	var sides15 = 47;
	if(sides15 == null) {
		sides15 = 36;
	}
	if(ry15 == null) {
		ry15 = 0;
	}
	if(rx15 == null) {
		rx15 = 0;
	}
	var start5 = this1.drawType.get_size();
	var drawType5 = this1.drawType;
	var x5 = s5.x;
	var y5 = s5.y;
	var radius5 = s5.radius;
	var len5;
	if((sides15 & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx16 = rx15;
		var ry16 = ry15;
		var sides16 = sides15;
		var omega10 = 0.;
		if(omega10 == null) {
			omega10 = 0.;
		}
		if(sides16 == null) {
			sides16 = 36;
		}
		var pi10 = Math.PI;
		var theta10 = pi10 / 2 + omega10;
		var step10 = pi10 * 2 / sides16;
		var bx10;
		var by10;
		var cx10;
		var cy10;
		if(rx16 > 1.) {
			rx16 = 1;
		}
		if(rx16 < -1.) {
			rx16 = -1;
		}
		if(ry16 > 1.) {
			ry16 = 1;
		}
		if(ry16 < -1.) {
			ry16 = -1;
		}
		var mx10 = x5 + rx16 * radius5;
		var my10 = y5 - ry16 * radius5;
		var _g25 = 0;
		var _g115 = sides16;
		while(_g25 < _g115) {
			var i10 = _g25++;
			bx10 = x5 + radius5 * Math.sin(theta10);
			by10 = y5 + radius5 * Math.cos(theta10);
			theta10 += step10;
			cx10 = x5 + radius5 * Math.sin(theta10);
			cy10 = y5 + radius5 * Math.cos(theta10);
			drawType5.triangle(mx10,my10,0,bx10,by10,0,cx10,cy10,0);
			var m15 = trilateral2_Shaper.transformMatrix;
			if(m15 != null) {
				drawType5.transform(m15);
			}
			drawType5.next();
		}
		len5 = sides16;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides15 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx17 = rx15;
		var ry17 = ry15;
		var sides17 = sides15;
		var omega11 = 0.;
		if(omega11 == null) {
			omega11 = 0.;
		}
		if(sides17 == null) {
			sides17 = 36;
		}
		var pi11 = Math.PI;
		var theta11 = pi11 / 2;
		var step11 = pi11 * 2 / sides17;
		theta11 -= step11 / 2 + omega11;
		var bx11 = 0;
		var by11 = 0;
		var cx11 = 0;
		var cy11 = 0;
		if(rx17 > 1.) {
			rx17 = 1;
		}
		if(rx17 < -1.) {
			rx17 = -1;
		}
		if(ry17 > 1.) {
			ry17 = 1;
		}
		if(ry17 < -1.) {
			ry17 = -1;
		}
		var mx11 = x5 + rx17 * radius5;
		var my11 = y5 - ry17 * radius5;
		var dx6 = x5 + radius5 * Math.sin(theta11);
		var dy6 = y5 + radius5 * Math.cos(theta11);
		var _g26 = 0;
		var _g116 = sides17 - 1;
		while(_g26 < _g116) {
			var i11 = _g26++;
			bx11 = x5 + radius5 * Math.sin(theta11);
			by11 = y5 + radius5 * Math.cos(theta11);
			theta11 += step11;
			cx11 = x5 + radius5 * Math.sin(theta11);
			cy11 = y5 + radius5 * Math.cos(theta11);
			drawType5.triangle(mx11,my11,0,bx11,by11,0,cx11,cy11,0);
			var m16 = trilateral2_Shaper.transformMatrix;
			if(m16 != null) {
				drawType5.transform(m16);
			}
			drawType5.next();
		}
		drawType5.triangle(mx11,my11,0,cx11,cy11,0,dx6,dy6,0);
		var m17 = trilateral2_Shaper.transformMatrix;
		if(m17 != null) {
			drawType5.transform(m17);
		}
		drawType5.next();
		len5 = sides17;
	}
	var k5 = 1;
	var arrEnd5 = arr5.length - 1;
	var end5 = start5 + len5 - 1;
	var arr_5 = arr5.slice();
	var _g27 = 0;
	var _g117 = len5 - 1;
	while(_g27 < _g117) {
		var j5 = _g27++;
		this1.colorType.cornerColors(s5.color,arr_5[k5 - 1],arr_5[k5]);
		++k5;
		if(k5 > arrEnd5) {
			k5 = 1;
			arr_5.reverse();
		}
	}
	this1.colorType.cornerColors(s5.color,arr_5[k5 - 1],arr5[0]);
	var startEnd5 = new trilateral2_IndexRange(start5,end5);
	var c5 = startEnd5;
	return new trilateral2_IndexRange(c0.start,c5.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.five2 = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 30;
	}
	if(dx == null) {
		dx = 30;
	}
	var s0 = rs.clone();
	s0.x -= dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s0.x;
	var ay1 = s0.y;
	var radius1 = s0.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s0.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	var c0 = new trilateral2_IndexRange(se0.start,se1.end);
	var s11 = rs.clone();
	s11.x += dx;
	s11.y -= dy;
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var ax2 = s11.x;
	var ay2 = s11.y;
	var radius2 = s11.radius;
	var sides2 = 36;
	if(sides2 == null) {
		sides2 = 36;
	}
	var pi2 = Math.PI;
	var theta3 = pi2 / 2;
	var step2 = pi2 * 2 / sides2;
	var bx2;
	var by2;
	var cx2;
	var cy2;
	var _g3 = 0;
	var _g12 = sides2;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx2 = ax2 + radius2 * Math.sin(theta3);
		by2 = ay2 + radius2 * Math.cos(theta3);
		theta3 += step2;
		cx2 = ax2 + radius2 * Math.sin(theta3);
		cy2 = ay2 + radius2 * Math.cos(theta3);
		drawType2.triangle(ax2,ay2,0,bx2,by2,0,cx2,cy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType2.transform(m2);
		}
		drawType2.next();
	}
	var len2 = sides2;
	var color2 = s11.color;
	if(color2 == -1) {
		color2 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color2,len2);
	var end2 = start2 + len2 - 1;
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var se01 = startEnd2;
	var start3 = this1.drawType.get_size();
	var drawType3 = this1.drawType;
	var ax3 = s11.x;
	var ay3 = s11.y;
	var radius3 = s11.radius;
	var sides3 = 36;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi3 = Math.PI;
	var theta4 = pi3 / 2;
	var step3 = pi3 * 2 / sides3;
	var bx3;
	var by3;
	var cx3;
	var cy3;
	var _g4 = 0;
	var _g13 = sides3;
	while(_g4 < _g13) {
		var i3 = _g4++;
		bx3 = ax3 + radius3 * Math.sin(theta4);
		by3 = ay3 + radius3 * Math.cos(theta4);
		theta4 += step3;
		cx3 = ax3 + radius3 * Math.sin(theta4);
		cy3 = ay3 + radius3 * Math.cos(theta4);
		drawType3.triangle(ax3,ay3,0,bx3,by3,0,cx3,cy3,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType3.transform(m3);
		}
		drawType3.next();
	}
	var len3 = sides3;
	var color3 = s11.color;
	if(color3 == -1) {
		color3 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color3,len3);
	var end3 = start3 + len3 - 1;
	var startEnd3 = new trilateral2_IndexRange(start3,end3);
	var se11 = startEnd3;
	var this11 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this12 = this11;
	var theta5 = Math.PI;
	var c1 = Math.cos(theta5);
	var s4 = Math.sin(theta5);
	var this13 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c1,-s4,0.,0.,s4,c1,0.);
	var s5 = this13;
	var this14 = new geom_structure_Mat4x3(this12.a * s5.a + this12.b * s5.e + this12.c * s5.i,this12.a * s5.b + this12.b * s5.f + this12.c * s5.j,this12.a * s5.c + this12.b * s5.g + this12.c * s5.k,this12.a * s5.d + this12.b * s5.h + this12.c * s5.l + this12.d,this12.e * s5.a + this12.f * s5.e + this12.g * s5.i,this12.e * s5.b + this12.f * s5.f + this12.g * s5.j,this12.e * s5.c + this12.f * s5.g + this12.g * s5.k,this12.e * s5.d + this12.f * s5.h + this12.g * s5.l + this12.h,this12.i * s5.a + this12.j * s5.e + this12.k * s5.i,this12.i * s5.b + this12.j * s5.f + this12.k * s5.j,this12.i * s5.c + this12.j * s5.g + this12.k * s5.k,this12.i * s5.d + this12.j * s5.h + this12.k * s5.l + this12.l);
	var r1 = this14;
	var this15 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this16 = this15;
	var this17 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s6 = this17;
	var this18 = new geom_structure_Mat4x3(this16.a * s6.a + this16.b * s6.e + this16.c * s6.i,this16.a * s6.b + this16.b * s6.f + this16.c * s6.j,this16.a * s6.c + this16.b * s6.g + this16.c * s6.k,this16.a * s6.d + this16.b * s6.h + this16.c * s6.l + this16.d,this16.e * s6.a + this16.f * s6.e + this16.g * s6.i,this16.e * s6.b + this16.f * s6.f + this16.g * s6.j,this16.e * s6.c + this16.f * s6.g + this16.g * s6.k,this16.e * s6.d + this16.f * s6.h + this16.g * s6.l + this16.h,this16.i * s6.a + this16.j * s6.e + this16.k * s6.i,this16.i * s6.b + this16.j * s6.f + this16.k * s6.j,this16.i * s6.c + this16.j * s6.g + this16.k * s6.k,this16.i * s6.d + this16.j * s6.h + this16.k * s6.l + this16.l);
	var s7 = this18;
	var this19 = new geom_structure_Mat4x3(r1.a * s7.a + r1.b * s7.e + r1.c * s7.i,r1.a * s7.b + r1.b * s7.f + r1.c * s7.j,r1.a * s7.c + r1.b * s7.g + r1.c * s7.k,r1.a * s7.d + r1.b * s7.h + r1.c * s7.l + r1.d,r1.e * s7.a + r1.f * s7.e + r1.g * s7.i,r1.e * s7.b + r1.f * s7.f + r1.g * s7.j,r1.e * s7.c + r1.f * s7.g + r1.g * s7.k,r1.e * s7.d + r1.f * s7.h + r1.g * s7.l + r1.h,r1.i * s7.a + r1.j * s7.e + r1.k * s7.i,r1.i * s7.b + r1.j * s7.f + r1.k * s7.j,r1.i * s7.c + r1.j * s7.g + r1.k * s7.k,r1.i * s7.d + r1.j * s7.h + r1.k * s7.l + r1.l);
	this1.drawType.transformRange(this19,se11.start,se11.end);
	var c11 = new trilateral2_IndexRange(se01.start,se11.end);
	var s21 = rs.clone();
	s21.x -= dx;
	s21.y += dy;
	var start4 = this1.drawType.get_size();
	var drawType4 = this1.drawType;
	var ax4 = s21.x;
	var ay4 = s21.y;
	var radius4 = s21.radius;
	var sides4 = 36;
	if(sides4 == null) {
		sides4 = 36;
	}
	var pi4 = Math.PI;
	var theta6 = pi4 / 2;
	var step4 = pi4 * 2 / sides4;
	var bx4;
	var by4;
	var cx4;
	var cy4;
	var _g5 = 0;
	var _g14 = sides4;
	while(_g5 < _g14) {
		var i4 = _g5++;
		bx4 = ax4 + radius4 * Math.sin(theta6);
		by4 = ay4 + radius4 * Math.cos(theta6);
		theta6 += step4;
		cx4 = ax4 + radius4 * Math.sin(theta6);
		cy4 = ay4 + radius4 * Math.cos(theta6);
		drawType4.triangle(ax4,ay4,0,bx4,by4,0,cx4,cy4,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType4.transform(m4);
		}
		drawType4.next();
	}
	var len4 = sides4;
	var color4 = s21.color;
	if(color4 == -1) {
		color4 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color4,len4);
	var end4 = start4 + len4 - 1;
	var startEnd4 = new trilateral2_IndexRange(start4,end4);
	var se02 = startEnd4;
	var start5 = this1.drawType.get_size();
	var drawType5 = this1.drawType;
	var ax5 = s21.x;
	var ay5 = s21.y;
	var radius5 = s21.radius;
	var sides5 = 36;
	if(sides5 == null) {
		sides5 = 36;
	}
	var pi5 = Math.PI;
	var theta7 = pi5 / 2;
	var step5 = pi5 * 2 / sides5;
	var bx5;
	var by5;
	var cx5;
	var cy5;
	var _g6 = 0;
	var _g15 = sides5;
	while(_g6 < _g15) {
		var i5 = _g6++;
		bx5 = ax5 + radius5 * Math.sin(theta7);
		by5 = ay5 + radius5 * Math.cos(theta7);
		theta7 += step5;
		cx5 = ax5 + radius5 * Math.sin(theta7);
		cy5 = ay5 + radius5 * Math.cos(theta7);
		drawType5.triangle(ax5,ay5,0,bx5,by5,0,cx5,cy5,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType5.transform(m5);
		}
		drawType5.next();
	}
	var len5 = sides5;
	var color5 = s21.color;
	if(color5 == -1) {
		color5 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color5,len5);
	var end5 = start5 + len5 - 1;
	var startEnd5 = new trilateral2_IndexRange(start5,end5);
	var se12 = startEnd5;
	var this20 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this21 = this20;
	var theta8 = Math.PI;
	var c2 = Math.cos(theta8);
	var s8 = Math.sin(theta8);
	var this22 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c2,-s8,0.,0.,s8,c2,0.);
	var s9 = this22;
	var this23 = new geom_structure_Mat4x3(this21.a * s9.a + this21.b * s9.e + this21.c * s9.i,this21.a * s9.b + this21.b * s9.f + this21.c * s9.j,this21.a * s9.c + this21.b * s9.g + this21.c * s9.k,this21.a * s9.d + this21.b * s9.h + this21.c * s9.l + this21.d,this21.e * s9.a + this21.f * s9.e + this21.g * s9.i,this21.e * s9.b + this21.f * s9.f + this21.g * s9.j,this21.e * s9.c + this21.f * s9.g + this21.g * s9.k,this21.e * s9.d + this21.f * s9.h + this21.g * s9.l + this21.h,this21.i * s9.a + this21.j * s9.e + this21.k * s9.i,this21.i * s9.b + this21.j * s9.f + this21.k * s9.j,this21.i * s9.c + this21.j * s9.g + this21.k * s9.k,this21.i * s9.d + this21.j * s9.h + this21.k * s9.l + this21.l);
	var r2 = this23;
	var this24 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this25 = this24;
	var this26 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s10 = this26;
	var this27 = new geom_structure_Mat4x3(this25.a * s10.a + this25.b * s10.e + this25.c * s10.i,this25.a * s10.b + this25.b * s10.f + this25.c * s10.j,this25.a * s10.c + this25.b * s10.g + this25.c * s10.k,this25.a * s10.d + this25.b * s10.h + this25.c * s10.l + this25.d,this25.e * s10.a + this25.f * s10.e + this25.g * s10.i,this25.e * s10.b + this25.f * s10.f + this25.g * s10.j,this25.e * s10.c + this25.f * s10.g + this25.g * s10.k,this25.e * s10.d + this25.f * s10.h + this25.g * s10.l + this25.h,this25.i * s10.a + this25.j * s10.e + this25.k * s10.i,this25.i * s10.b + this25.j * s10.f + this25.k * s10.j,this25.i * s10.c + this25.j * s10.g + this25.k * s10.k,this25.i * s10.d + this25.j * s10.h + this25.k * s10.l + this25.l);
	var s12 = this27;
	var this28 = new geom_structure_Mat4x3(r2.a * s12.a + r2.b * s12.e + r2.c * s12.i,r2.a * s12.b + r2.b * s12.f + r2.c * s12.j,r2.a * s12.c + r2.b * s12.g + r2.c * s12.k,r2.a * s12.d + r2.b * s12.h + r2.c * s12.l + r2.d,r2.e * s12.a + r2.f * s12.e + r2.g * s12.i,r2.e * s12.b + r2.f * s12.f + r2.g * s12.j,r2.e * s12.c + r2.f * s12.g + r2.g * s12.k,r2.e * s12.d + r2.f * s12.h + r2.g * s12.l + r2.h,r2.i * s12.a + r2.j * s12.e + r2.k * s12.i,r2.i * s12.b + r2.j * s12.f + r2.k * s12.j,r2.i * s12.c + r2.j * s12.g + r2.k * s12.k,r2.i * s12.d + r2.j * s12.h + r2.k * s12.l + r2.l);
	this1.drawType.transformRange(this28,se12.start,se12.end);
	var c21 = new trilateral2_IndexRange(se02.start,se12.end);
	var s31 = rs.clone();
	s31.x += dx;
	s31.y += dy;
	var start6 = this1.drawType.get_size();
	var drawType6 = this1.drawType;
	var ax6 = s31.x;
	var ay6 = s31.y;
	var radius6 = s31.radius;
	var sides6 = 36;
	if(sides6 == null) {
		sides6 = 36;
	}
	var pi6 = Math.PI;
	var theta9 = pi6 / 2;
	var step6 = pi6 * 2 / sides6;
	var bx6;
	var by6;
	var cx6;
	var cy6;
	var _g7 = 0;
	var _g16 = sides6;
	while(_g7 < _g16) {
		var i6 = _g7++;
		bx6 = ax6 + radius6 * Math.sin(theta9);
		by6 = ay6 + radius6 * Math.cos(theta9);
		theta9 += step6;
		cx6 = ax6 + radius6 * Math.sin(theta9);
		cy6 = ay6 + radius6 * Math.cos(theta9);
		drawType6.triangle(ax6,ay6,0,bx6,by6,0,cx6,cy6,0);
		var m6 = trilateral2_Shaper.transformMatrix;
		if(m6 != null) {
			drawType6.transform(m6);
		}
		drawType6.next();
	}
	var len6 = sides6;
	var color6 = s31.color;
	if(color6 == -1) {
		color6 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color6,len6);
	var end6 = start6 + len6 - 1;
	var startEnd6 = new trilateral2_IndexRange(start6,end6);
	var se03 = startEnd6;
	var start7 = this1.drawType.get_size();
	var drawType7 = this1.drawType;
	var ax7 = s31.x;
	var ay7 = s31.y;
	var radius7 = s31.radius;
	var sides7 = 36;
	if(sides7 == null) {
		sides7 = 36;
	}
	var pi7 = Math.PI;
	var theta10 = pi7 / 2;
	var step7 = pi7 * 2 / sides7;
	var bx7;
	var by7;
	var cx7;
	var cy7;
	var _g8 = 0;
	var _g17 = sides7;
	while(_g8 < _g17) {
		var i7 = _g8++;
		bx7 = ax7 + radius7 * Math.sin(theta10);
		by7 = ay7 + radius7 * Math.cos(theta10);
		theta10 += step7;
		cx7 = ax7 + radius7 * Math.sin(theta10);
		cy7 = ay7 + radius7 * Math.cos(theta10);
		drawType7.triangle(ax7,ay7,0,bx7,by7,0,cx7,cy7,0);
		var m7 = trilateral2_Shaper.transformMatrix;
		if(m7 != null) {
			drawType7.transform(m7);
		}
		drawType7.next();
	}
	var len7 = sides7;
	var color7 = s31.color;
	if(color7 == -1) {
		color7 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color7,len7);
	var end7 = start7 + len7 - 1;
	var startEnd7 = new trilateral2_IndexRange(start7,end7);
	var se13 = startEnd7;
	var this29 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this30 = this29;
	var theta11 = Math.PI;
	var c3 = Math.cos(theta11);
	var s13 = Math.sin(theta11);
	var this31 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c3,-s13,0.,0.,s13,c3,0.);
	var s14 = this31;
	var this32 = new geom_structure_Mat4x3(this30.a * s14.a + this30.b * s14.e + this30.c * s14.i,this30.a * s14.b + this30.b * s14.f + this30.c * s14.j,this30.a * s14.c + this30.b * s14.g + this30.c * s14.k,this30.a * s14.d + this30.b * s14.h + this30.c * s14.l + this30.d,this30.e * s14.a + this30.f * s14.e + this30.g * s14.i,this30.e * s14.b + this30.f * s14.f + this30.g * s14.j,this30.e * s14.c + this30.f * s14.g + this30.g * s14.k,this30.e * s14.d + this30.f * s14.h + this30.g * s14.l + this30.h,this30.i * s14.a + this30.j * s14.e + this30.k * s14.i,this30.i * s14.b + this30.j * s14.f + this30.k * s14.j,this30.i * s14.c + this30.j * s14.g + this30.k * s14.k,this30.i * s14.d + this30.j * s14.h + this30.k * s14.l + this30.l);
	var r3 = this32;
	var this33 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this34 = this33;
	var this35 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s15 = this35;
	var this36 = new geom_structure_Mat4x3(this34.a * s15.a + this34.b * s15.e + this34.c * s15.i,this34.a * s15.b + this34.b * s15.f + this34.c * s15.j,this34.a * s15.c + this34.b * s15.g + this34.c * s15.k,this34.a * s15.d + this34.b * s15.h + this34.c * s15.l + this34.d,this34.e * s15.a + this34.f * s15.e + this34.g * s15.i,this34.e * s15.b + this34.f * s15.f + this34.g * s15.j,this34.e * s15.c + this34.f * s15.g + this34.g * s15.k,this34.e * s15.d + this34.f * s15.h + this34.g * s15.l + this34.h,this34.i * s15.a + this34.j * s15.e + this34.k * s15.i,this34.i * s15.b + this34.j * s15.f + this34.k * s15.j,this34.i * s15.c + this34.j * s15.g + this34.k * s15.k,this34.i * s15.d + this34.j * s15.h + this34.k * s15.l + this34.l);
	var s16 = this36;
	var this37 = new geom_structure_Mat4x3(r3.a * s16.a + r3.b * s16.e + r3.c * s16.i,r3.a * s16.b + r3.b * s16.f + r3.c * s16.j,r3.a * s16.c + r3.b * s16.g + r3.c * s16.k,r3.a * s16.d + r3.b * s16.h + r3.c * s16.l + r3.d,r3.e * s16.a + r3.f * s16.e + r3.g * s16.i,r3.e * s16.b + r3.f * s16.f + r3.g * s16.j,r3.e * s16.c + r3.f * s16.g + r3.g * s16.k,r3.e * s16.d + r3.f * s16.h + r3.g * s16.l + r3.h,r3.i * s16.a + r3.j * s16.e + r3.k * s16.i,r3.i * s16.b + r3.j * s16.f + r3.k * s16.j,r3.i * s16.c + r3.j * s16.g + r3.k * s16.k,r3.i * s16.d + r3.j * s16.h + r3.k * s16.l + r3.l);
	this1.drawType.transformRange(this37,se13.start,se13.end);
	var c31 = new trilateral2_IndexRange(se03.start,se13.end);
	var s41 = rs.clone();
	var start8 = this1.drawType.get_size();
	var drawType8 = this1.drawType;
	var ax8 = s41.x;
	var ay8 = s41.y;
	var radius8 = s41.radius;
	var sides8 = 36;
	if(sides8 == null) {
		sides8 = 36;
	}
	var pi8 = Math.PI;
	var theta12 = pi8 / 2;
	var step8 = pi8 * 2 / sides8;
	var bx8;
	var by8;
	var cx8;
	var cy8;
	var _g9 = 0;
	var _g18 = sides8;
	while(_g9 < _g18) {
		var i8 = _g9++;
		bx8 = ax8 + radius8 * Math.sin(theta12);
		by8 = ay8 + radius8 * Math.cos(theta12);
		theta12 += step8;
		cx8 = ax8 + radius8 * Math.sin(theta12);
		cy8 = ay8 + radius8 * Math.cos(theta12);
		drawType8.triangle(ax8,ay8,0,bx8,by8,0,cx8,cy8,0);
		var m8 = trilateral2_Shaper.transformMatrix;
		if(m8 != null) {
			drawType8.transform(m8);
		}
		drawType8.next();
	}
	var len8 = sides8;
	var color8 = s41.color;
	if(color8 == -1) {
		color8 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color8,len8);
	var end8 = start8 + len8 - 1;
	var startEnd8 = new trilateral2_IndexRange(start8,end8);
	var se04 = startEnd8;
	var start9 = this1.drawType.get_size();
	var drawType9 = this1.drawType;
	var ax9 = s41.x;
	var ay9 = s41.y;
	var radius9 = s41.radius;
	var sides9 = 36;
	if(sides9 == null) {
		sides9 = 36;
	}
	var pi9 = Math.PI;
	var theta13 = pi9 / 2;
	var step9 = pi9 * 2 / sides9;
	var bx9;
	var by9;
	var cx9;
	var cy9;
	var _g10 = 0;
	var _g19 = sides9;
	while(_g10 < _g19) {
		var i9 = _g10++;
		bx9 = ax9 + radius9 * Math.sin(theta13);
		by9 = ay9 + radius9 * Math.cos(theta13);
		theta13 += step9;
		cx9 = ax9 + radius9 * Math.sin(theta13);
		cy9 = ay9 + radius9 * Math.cos(theta13);
		drawType9.triangle(ax9,ay9,0,bx9,by9,0,cx9,cy9,0);
		var m9 = trilateral2_Shaper.transformMatrix;
		if(m9 != null) {
			drawType9.transform(m9);
		}
		drawType9.next();
	}
	var len9 = sides9;
	var color9 = s41.color;
	if(color9 == -1) {
		color9 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color9,len9);
	var end9 = start9 + len9 - 1;
	var startEnd9 = new trilateral2_IndexRange(start9,end9);
	var se14 = startEnd9;
	var this38 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this39 = this38;
	var theta14 = Math.PI;
	var c4 = Math.cos(theta14);
	var s17 = Math.sin(theta14);
	var this40 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c4,-s17,0.,0.,s17,c4,0.);
	var s18 = this40;
	var this41 = new geom_structure_Mat4x3(this39.a * s18.a + this39.b * s18.e + this39.c * s18.i,this39.a * s18.b + this39.b * s18.f + this39.c * s18.j,this39.a * s18.c + this39.b * s18.g + this39.c * s18.k,this39.a * s18.d + this39.b * s18.h + this39.c * s18.l + this39.d,this39.e * s18.a + this39.f * s18.e + this39.g * s18.i,this39.e * s18.b + this39.f * s18.f + this39.g * s18.j,this39.e * s18.c + this39.f * s18.g + this39.g * s18.k,this39.e * s18.d + this39.f * s18.h + this39.g * s18.l + this39.h,this39.i * s18.a + this39.j * s18.e + this39.k * s18.i,this39.i * s18.b + this39.j * s18.f + this39.k * s18.j,this39.i * s18.c + this39.j * s18.g + this39.k * s18.k,this39.i * s18.d + this39.j * s18.h + this39.k * s18.l + this39.l);
	var r4 = this41;
	var this42 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this43 = this42;
	var this44 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s19 = this44;
	var this45 = new geom_structure_Mat4x3(this43.a * s19.a + this43.b * s19.e + this43.c * s19.i,this43.a * s19.b + this43.b * s19.f + this43.c * s19.j,this43.a * s19.c + this43.b * s19.g + this43.c * s19.k,this43.a * s19.d + this43.b * s19.h + this43.c * s19.l + this43.d,this43.e * s19.a + this43.f * s19.e + this43.g * s19.i,this43.e * s19.b + this43.f * s19.f + this43.g * s19.j,this43.e * s19.c + this43.f * s19.g + this43.g * s19.k,this43.e * s19.d + this43.f * s19.h + this43.g * s19.l + this43.h,this43.i * s19.a + this43.j * s19.e + this43.k * s19.i,this43.i * s19.b + this43.j * s19.f + this43.k * s19.j,this43.i * s19.c + this43.j * s19.g + this43.k * s19.k,this43.i * s19.d + this43.j * s19.h + this43.k * s19.l + this43.l);
	var s20 = this45;
	var this46 = new geom_structure_Mat4x3(r4.a * s20.a + r4.b * s20.e + r4.c * s20.i,r4.a * s20.b + r4.b * s20.f + r4.c * s20.j,r4.a * s20.c + r4.b * s20.g + r4.c * s20.k,r4.a * s20.d + r4.b * s20.h + r4.c * s20.l + r4.d,r4.e * s20.a + r4.f * s20.e + r4.g * s20.i,r4.e * s20.b + r4.f * s20.f + r4.g * s20.j,r4.e * s20.c + r4.f * s20.g + r4.g * s20.k,r4.e * s20.d + r4.f * s20.h + r4.g * s20.l + r4.h,r4.i * s20.a + r4.j * s20.e + r4.k * s20.i,r4.i * s20.b + r4.j * s20.f + r4.k * s20.j,r4.i * s20.c + r4.j * s20.g + r4.k * s20.k,r4.i * s20.d + r4.j * s20.h + r4.k * s20.l + r4.l);
	this1.drawType.transformRange(this46,se14.start,se14.end);
	var c41 = new trilateral2_IndexRange(se04.start,se14.end);
	return new trilateral2_IndexRange(c0.start,c41.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.four2 = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 30;
	}
	if(dx == null) {
		dx = 30;
	}
	var s0 = rs.clone();
	s0.x -= dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s0.x;
	var ay1 = s0.y;
	var radius1 = s0.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s0.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	var c0 = new trilateral2_IndexRange(se0.start,se1.end);
	var s11 = rs.clone();
	s11.x += dx;
	s11.y -= dy;
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var ax2 = s11.x;
	var ay2 = s11.y;
	var radius2 = s11.radius;
	var sides2 = 36;
	if(sides2 == null) {
		sides2 = 36;
	}
	var pi2 = Math.PI;
	var theta3 = pi2 / 2;
	var step2 = pi2 * 2 / sides2;
	var bx2;
	var by2;
	var cx2;
	var cy2;
	var _g3 = 0;
	var _g12 = sides2;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx2 = ax2 + radius2 * Math.sin(theta3);
		by2 = ay2 + radius2 * Math.cos(theta3);
		theta3 += step2;
		cx2 = ax2 + radius2 * Math.sin(theta3);
		cy2 = ay2 + radius2 * Math.cos(theta3);
		drawType2.triangle(ax2,ay2,0,bx2,by2,0,cx2,cy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType2.transform(m2);
		}
		drawType2.next();
	}
	var len2 = sides2;
	var color2 = s11.color;
	if(color2 == -1) {
		color2 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color2,len2);
	var end2 = start2 + len2 - 1;
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var se01 = startEnd2;
	var start3 = this1.drawType.get_size();
	var drawType3 = this1.drawType;
	var ax3 = s11.x;
	var ay3 = s11.y;
	var radius3 = s11.radius;
	var sides3 = 36;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi3 = Math.PI;
	var theta4 = pi3 / 2;
	var step3 = pi3 * 2 / sides3;
	var bx3;
	var by3;
	var cx3;
	var cy3;
	var _g4 = 0;
	var _g13 = sides3;
	while(_g4 < _g13) {
		var i3 = _g4++;
		bx3 = ax3 + radius3 * Math.sin(theta4);
		by3 = ay3 + radius3 * Math.cos(theta4);
		theta4 += step3;
		cx3 = ax3 + radius3 * Math.sin(theta4);
		cy3 = ay3 + radius3 * Math.cos(theta4);
		drawType3.triangle(ax3,ay3,0,bx3,by3,0,cx3,cy3,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType3.transform(m3);
		}
		drawType3.next();
	}
	var len3 = sides3;
	var color3 = s11.color;
	if(color3 == -1) {
		color3 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color3,len3);
	var end3 = start3 + len3 - 1;
	var startEnd3 = new trilateral2_IndexRange(start3,end3);
	var se11 = startEnd3;
	var this11 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this12 = this11;
	var theta5 = Math.PI;
	var c1 = Math.cos(theta5);
	var s4 = Math.sin(theta5);
	var this13 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c1,-s4,0.,0.,s4,c1,0.);
	var s5 = this13;
	var this14 = new geom_structure_Mat4x3(this12.a * s5.a + this12.b * s5.e + this12.c * s5.i,this12.a * s5.b + this12.b * s5.f + this12.c * s5.j,this12.a * s5.c + this12.b * s5.g + this12.c * s5.k,this12.a * s5.d + this12.b * s5.h + this12.c * s5.l + this12.d,this12.e * s5.a + this12.f * s5.e + this12.g * s5.i,this12.e * s5.b + this12.f * s5.f + this12.g * s5.j,this12.e * s5.c + this12.f * s5.g + this12.g * s5.k,this12.e * s5.d + this12.f * s5.h + this12.g * s5.l + this12.h,this12.i * s5.a + this12.j * s5.e + this12.k * s5.i,this12.i * s5.b + this12.j * s5.f + this12.k * s5.j,this12.i * s5.c + this12.j * s5.g + this12.k * s5.k,this12.i * s5.d + this12.j * s5.h + this12.k * s5.l + this12.l);
	var r1 = this14;
	var this15 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this16 = this15;
	var this17 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s6 = this17;
	var this18 = new geom_structure_Mat4x3(this16.a * s6.a + this16.b * s6.e + this16.c * s6.i,this16.a * s6.b + this16.b * s6.f + this16.c * s6.j,this16.a * s6.c + this16.b * s6.g + this16.c * s6.k,this16.a * s6.d + this16.b * s6.h + this16.c * s6.l + this16.d,this16.e * s6.a + this16.f * s6.e + this16.g * s6.i,this16.e * s6.b + this16.f * s6.f + this16.g * s6.j,this16.e * s6.c + this16.f * s6.g + this16.g * s6.k,this16.e * s6.d + this16.f * s6.h + this16.g * s6.l + this16.h,this16.i * s6.a + this16.j * s6.e + this16.k * s6.i,this16.i * s6.b + this16.j * s6.f + this16.k * s6.j,this16.i * s6.c + this16.j * s6.g + this16.k * s6.k,this16.i * s6.d + this16.j * s6.h + this16.k * s6.l + this16.l);
	var s7 = this18;
	var this19 = new geom_structure_Mat4x3(r1.a * s7.a + r1.b * s7.e + r1.c * s7.i,r1.a * s7.b + r1.b * s7.f + r1.c * s7.j,r1.a * s7.c + r1.b * s7.g + r1.c * s7.k,r1.a * s7.d + r1.b * s7.h + r1.c * s7.l + r1.d,r1.e * s7.a + r1.f * s7.e + r1.g * s7.i,r1.e * s7.b + r1.f * s7.f + r1.g * s7.j,r1.e * s7.c + r1.f * s7.g + r1.g * s7.k,r1.e * s7.d + r1.f * s7.h + r1.g * s7.l + r1.h,r1.i * s7.a + r1.j * s7.e + r1.k * s7.i,r1.i * s7.b + r1.j * s7.f + r1.k * s7.j,r1.i * s7.c + r1.j * s7.g + r1.k * s7.k,r1.i * s7.d + r1.j * s7.h + r1.k * s7.l + r1.l);
	this1.drawType.transformRange(this19,se11.start,se11.end);
	var c11 = new trilateral2_IndexRange(se01.start,se11.end);
	var s21 = rs.clone();
	s21.x -= dx;
	s21.y += dy;
	var start4 = this1.drawType.get_size();
	var drawType4 = this1.drawType;
	var ax4 = s21.x;
	var ay4 = s21.y;
	var radius4 = s21.radius;
	var sides4 = 36;
	if(sides4 == null) {
		sides4 = 36;
	}
	var pi4 = Math.PI;
	var theta6 = pi4 / 2;
	var step4 = pi4 * 2 / sides4;
	var bx4;
	var by4;
	var cx4;
	var cy4;
	var _g5 = 0;
	var _g14 = sides4;
	while(_g5 < _g14) {
		var i4 = _g5++;
		bx4 = ax4 + radius4 * Math.sin(theta6);
		by4 = ay4 + radius4 * Math.cos(theta6);
		theta6 += step4;
		cx4 = ax4 + radius4 * Math.sin(theta6);
		cy4 = ay4 + radius4 * Math.cos(theta6);
		drawType4.triangle(ax4,ay4,0,bx4,by4,0,cx4,cy4,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType4.transform(m4);
		}
		drawType4.next();
	}
	var len4 = sides4;
	var color4 = s21.color;
	if(color4 == -1) {
		color4 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color4,len4);
	var end4 = start4 + len4 - 1;
	var startEnd4 = new trilateral2_IndexRange(start4,end4);
	var se02 = startEnd4;
	var start5 = this1.drawType.get_size();
	var drawType5 = this1.drawType;
	var ax5 = s21.x;
	var ay5 = s21.y;
	var radius5 = s21.radius;
	var sides5 = 36;
	if(sides5 == null) {
		sides5 = 36;
	}
	var pi5 = Math.PI;
	var theta7 = pi5 / 2;
	var step5 = pi5 * 2 / sides5;
	var bx5;
	var by5;
	var cx5;
	var cy5;
	var _g6 = 0;
	var _g15 = sides5;
	while(_g6 < _g15) {
		var i5 = _g6++;
		bx5 = ax5 + radius5 * Math.sin(theta7);
		by5 = ay5 + radius5 * Math.cos(theta7);
		theta7 += step5;
		cx5 = ax5 + radius5 * Math.sin(theta7);
		cy5 = ay5 + radius5 * Math.cos(theta7);
		drawType5.triangle(ax5,ay5,0,bx5,by5,0,cx5,cy5,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType5.transform(m5);
		}
		drawType5.next();
	}
	var len5 = sides5;
	var color5 = s21.color;
	if(color5 == -1) {
		color5 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color5,len5);
	var end5 = start5 + len5 - 1;
	var startEnd5 = new trilateral2_IndexRange(start5,end5);
	var se12 = startEnd5;
	var this20 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this21 = this20;
	var theta8 = Math.PI;
	var c2 = Math.cos(theta8);
	var s8 = Math.sin(theta8);
	var this22 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c2,-s8,0.,0.,s8,c2,0.);
	var s9 = this22;
	var this23 = new geom_structure_Mat4x3(this21.a * s9.a + this21.b * s9.e + this21.c * s9.i,this21.a * s9.b + this21.b * s9.f + this21.c * s9.j,this21.a * s9.c + this21.b * s9.g + this21.c * s9.k,this21.a * s9.d + this21.b * s9.h + this21.c * s9.l + this21.d,this21.e * s9.a + this21.f * s9.e + this21.g * s9.i,this21.e * s9.b + this21.f * s9.f + this21.g * s9.j,this21.e * s9.c + this21.f * s9.g + this21.g * s9.k,this21.e * s9.d + this21.f * s9.h + this21.g * s9.l + this21.h,this21.i * s9.a + this21.j * s9.e + this21.k * s9.i,this21.i * s9.b + this21.j * s9.f + this21.k * s9.j,this21.i * s9.c + this21.j * s9.g + this21.k * s9.k,this21.i * s9.d + this21.j * s9.h + this21.k * s9.l + this21.l);
	var r2 = this23;
	var this24 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this25 = this24;
	var this26 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s10 = this26;
	var this27 = new geom_structure_Mat4x3(this25.a * s10.a + this25.b * s10.e + this25.c * s10.i,this25.a * s10.b + this25.b * s10.f + this25.c * s10.j,this25.a * s10.c + this25.b * s10.g + this25.c * s10.k,this25.a * s10.d + this25.b * s10.h + this25.c * s10.l + this25.d,this25.e * s10.a + this25.f * s10.e + this25.g * s10.i,this25.e * s10.b + this25.f * s10.f + this25.g * s10.j,this25.e * s10.c + this25.f * s10.g + this25.g * s10.k,this25.e * s10.d + this25.f * s10.h + this25.g * s10.l + this25.h,this25.i * s10.a + this25.j * s10.e + this25.k * s10.i,this25.i * s10.b + this25.j * s10.f + this25.k * s10.j,this25.i * s10.c + this25.j * s10.g + this25.k * s10.k,this25.i * s10.d + this25.j * s10.h + this25.k * s10.l + this25.l);
	var s12 = this27;
	var this28 = new geom_structure_Mat4x3(r2.a * s12.a + r2.b * s12.e + r2.c * s12.i,r2.a * s12.b + r2.b * s12.f + r2.c * s12.j,r2.a * s12.c + r2.b * s12.g + r2.c * s12.k,r2.a * s12.d + r2.b * s12.h + r2.c * s12.l + r2.d,r2.e * s12.a + r2.f * s12.e + r2.g * s12.i,r2.e * s12.b + r2.f * s12.f + r2.g * s12.j,r2.e * s12.c + r2.f * s12.g + r2.g * s12.k,r2.e * s12.d + r2.f * s12.h + r2.g * s12.l + r2.h,r2.i * s12.a + r2.j * s12.e + r2.k * s12.i,r2.i * s12.b + r2.j * s12.f + r2.k * s12.j,r2.i * s12.c + r2.j * s12.g + r2.k * s12.k,r2.i * s12.d + r2.j * s12.h + r2.k * s12.l + r2.l);
	this1.drawType.transformRange(this28,se12.start,se12.end);
	var c21 = new trilateral2_IndexRange(se02.start,se12.end);
	var s31 = rs.clone();
	s31.x += dx;
	s31.y += dy;
	var start6 = this1.drawType.get_size();
	var drawType6 = this1.drawType;
	var ax6 = s31.x;
	var ay6 = s31.y;
	var radius6 = s31.radius;
	var sides6 = 36;
	if(sides6 == null) {
		sides6 = 36;
	}
	var pi6 = Math.PI;
	var theta9 = pi6 / 2;
	var step6 = pi6 * 2 / sides6;
	var bx6;
	var by6;
	var cx6;
	var cy6;
	var _g7 = 0;
	var _g16 = sides6;
	while(_g7 < _g16) {
		var i6 = _g7++;
		bx6 = ax6 + radius6 * Math.sin(theta9);
		by6 = ay6 + radius6 * Math.cos(theta9);
		theta9 += step6;
		cx6 = ax6 + radius6 * Math.sin(theta9);
		cy6 = ay6 + radius6 * Math.cos(theta9);
		drawType6.triangle(ax6,ay6,0,bx6,by6,0,cx6,cy6,0);
		var m6 = trilateral2_Shaper.transformMatrix;
		if(m6 != null) {
			drawType6.transform(m6);
		}
		drawType6.next();
	}
	var len6 = sides6;
	var color6 = s31.color;
	if(color6 == -1) {
		color6 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color6,len6);
	var end6 = start6 + len6 - 1;
	var startEnd6 = new trilateral2_IndexRange(start6,end6);
	var se03 = startEnd6;
	var start7 = this1.drawType.get_size();
	var drawType7 = this1.drawType;
	var ax7 = s31.x;
	var ay7 = s31.y;
	var radius7 = s31.radius;
	var sides7 = 36;
	if(sides7 == null) {
		sides7 = 36;
	}
	var pi7 = Math.PI;
	var theta10 = pi7 / 2;
	var step7 = pi7 * 2 / sides7;
	var bx7;
	var by7;
	var cx7;
	var cy7;
	var _g8 = 0;
	var _g17 = sides7;
	while(_g8 < _g17) {
		var i7 = _g8++;
		bx7 = ax7 + radius7 * Math.sin(theta10);
		by7 = ay7 + radius7 * Math.cos(theta10);
		theta10 += step7;
		cx7 = ax7 + radius7 * Math.sin(theta10);
		cy7 = ay7 + radius7 * Math.cos(theta10);
		drawType7.triangle(ax7,ay7,0,bx7,by7,0,cx7,cy7,0);
		var m7 = trilateral2_Shaper.transformMatrix;
		if(m7 != null) {
			drawType7.transform(m7);
		}
		drawType7.next();
	}
	var len7 = sides7;
	var color7 = s31.color;
	if(color7 == -1) {
		color7 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color7,len7);
	var end7 = start7 + len7 - 1;
	var startEnd7 = new trilateral2_IndexRange(start7,end7);
	var se13 = startEnd7;
	var this29 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this30 = this29;
	var theta11 = Math.PI;
	var c3 = Math.cos(theta11);
	var s13 = Math.sin(theta11);
	var this31 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c3,-s13,0.,0.,s13,c3,0.);
	var s14 = this31;
	var this32 = new geom_structure_Mat4x3(this30.a * s14.a + this30.b * s14.e + this30.c * s14.i,this30.a * s14.b + this30.b * s14.f + this30.c * s14.j,this30.a * s14.c + this30.b * s14.g + this30.c * s14.k,this30.a * s14.d + this30.b * s14.h + this30.c * s14.l + this30.d,this30.e * s14.a + this30.f * s14.e + this30.g * s14.i,this30.e * s14.b + this30.f * s14.f + this30.g * s14.j,this30.e * s14.c + this30.f * s14.g + this30.g * s14.k,this30.e * s14.d + this30.f * s14.h + this30.g * s14.l + this30.h,this30.i * s14.a + this30.j * s14.e + this30.k * s14.i,this30.i * s14.b + this30.j * s14.f + this30.k * s14.j,this30.i * s14.c + this30.j * s14.g + this30.k * s14.k,this30.i * s14.d + this30.j * s14.h + this30.k * s14.l + this30.l);
	var r3 = this32;
	var this33 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this34 = this33;
	var this35 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s15 = this35;
	var this36 = new geom_structure_Mat4x3(this34.a * s15.a + this34.b * s15.e + this34.c * s15.i,this34.a * s15.b + this34.b * s15.f + this34.c * s15.j,this34.a * s15.c + this34.b * s15.g + this34.c * s15.k,this34.a * s15.d + this34.b * s15.h + this34.c * s15.l + this34.d,this34.e * s15.a + this34.f * s15.e + this34.g * s15.i,this34.e * s15.b + this34.f * s15.f + this34.g * s15.j,this34.e * s15.c + this34.f * s15.g + this34.g * s15.k,this34.e * s15.d + this34.f * s15.h + this34.g * s15.l + this34.h,this34.i * s15.a + this34.j * s15.e + this34.k * s15.i,this34.i * s15.b + this34.j * s15.f + this34.k * s15.j,this34.i * s15.c + this34.j * s15.g + this34.k * s15.k,this34.i * s15.d + this34.j * s15.h + this34.k * s15.l + this34.l);
	var s16 = this36;
	var this37 = new geom_structure_Mat4x3(r3.a * s16.a + r3.b * s16.e + r3.c * s16.i,r3.a * s16.b + r3.b * s16.f + r3.c * s16.j,r3.a * s16.c + r3.b * s16.g + r3.c * s16.k,r3.a * s16.d + r3.b * s16.h + r3.c * s16.l + r3.d,r3.e * s16.a + r3.f * s16.e + r3.g * s16.i,r3.e * s16.b + r3.f * s16.f + r3.g * s16.j,r3.e * s16.c + r3.f * s16.g + r3.g * s16.k,r3.e * s16.d + r3.f * s16.h + r3.g * s16.l + r3.h,r3.i * s16.a + r3.j * s16.e + r3.k * s16.i,r3.i * s16.b + r3.j * s16.f + r3.k * s16.j,r3.i * s16.c + r3.j * s16.g + r3.k * s16.k,r3.i * s16.d + r3.j * s16.h + r3.k * s16.l + r3.l);
	this1.drawType.transformRange(this37,se13.start,se13.end);
	var c31 = new trilateral2_IndexRange(se03.start,se13.end);
	return new trilateral2_IndexRange(c0.start,c31.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.three2 = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 25;
	}
	if(dx == null) {
		dx = 25;
	}
	var s0 = rs.clone();
	s0.x += dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s0.x;
	var ay1 = s0.y;
	var radius1 = s0.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s0.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	var c0 = new trilateral2_IndexRange(se0.start,se1.end);
	var s11 = rs.clone();
	s11.x -= dx;
	s11.y += dy;
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var ax2 = s11.x;
	var ay2 = s11.y;
	var radius2 = s11.radius;
	var sides2 = 36;
	if(sides2 == null) {
		sides2 = 36;
	}
	var pi2 = Math.PI;
	var theta3 = pi2 / 2;
	var step2 = pi2 * 2 / sides2;
	var bx2;
	var by2;
	var cx2;
	var cy2;
	var _g3 = 0;
	var _g12 = sides2;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx2 = ax2 + radius2 * Math.sin(theta3);
		by2 = ay2 + radius2 * Math.cos(theta3);
		theta3 += step2;
		cx2 = ax2 + radius2 * Math.sin(theta3);
		cy2 = ay2 + radius2 * Math.cos(theta3);
		drawType2.triangle(ax2,ay2,0,bx2,by2,0,cx2,cy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType2.transform(m2);
		}
		drawType2.next();
	}
	var len2 = sides2;
	var color2 = s11.color;
	if(color2 == -1) {
		color2 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color2,len2);
	var end2 = start2 + len2 - 1;
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var se01 = startEnd2;
	var start3 = this1.drawType.get_size();
	var drawType3 = this1.drawType;
	var ax3 = s11.x;
	var ay3 = s11.y;
	var radius3 = s11.radius;
	var sides3 = 36;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi3 = Math.PI;
	var theta4 = pi3 / 2;
	var step3 = pi3 * 2 / sides3;
	var bx3;
	var by3;
	var cx3;
	var cy3;
	var _g4 = 0;
	var _g13 = sides3;
	while(_g4 < _g13) {
		var i3 = _g4++;
		bx3 = ax3 + radius3 * Math.sin(theta4);
		by3 = ay3 + radius3 * Math.cos(theta4);
		theta4 += step3;
		cx3 = ax3 + radius3 * Math.sin(theta4);
		cy3 = ay3 + radius3 * Math.cos(theta4);
		drawType3.triangle(ax3,ay3,0,bx3,by3,0,cx3,cy3,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType3.transform(m3);
		}
		drawType3.next();
	}
	var len3 = sides3;
	var color3 = s11.color;
	if(color3 == -1) {
		color3 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color3,len3);
	var end3 = start3 + len3 - 1;
	var startEnd3 = new trilateral2_IndexRange(start3,end3);
	var se11 = startEnd3;
	var this11 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this12 = this11;
	var theta5 = Math.PI;
	var c1 = Math.cos(theta5);
	var s4 = Math.sin(theta5);
	var this13 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c1,-s4,0.,0.,s4,c1,0.);
	var s5 = this13;
	var this14 = new geom_structure_Mat4x3(this12.a * s5.a + this12.b * s5.e + this12.c * s5.i,this12.a * s5.b + this12.b * s5.f + this12.c * s5.j,this12.a * s5.c + this12.b * s5.g + this12.c * s5.k,this12.a * s5.d + this12.b * s5.h + this12.c * s5.l + this12.d,this12.e * s5.a + this12.f * s5.e + this12.g * s5.i,this12.e * s5.b + this12.f * s5.f + this12.g * s5.j,this12.e * s5.c + this12.f * s5.g + this12.g * s5.k,this12.e * s5.d + this12.f * s5.h + this12.g * s5.l + this12.h,this12.i * s5.a + this12.j * s5.e + this12.k * s5.i,this12.i * s5.b + this12.j * s5.f + this12.k * s5.j,this12.i * s5.c + this12.j * s5.g + this12.k * s5.k,this12.i * s5.d + this12.j * s5.h + this12.k * s5.l + this12.l);
	var r1 = this14;
	var this15 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this16 = this15;
	var this17 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s6 = this17;
	var this18 = new geom_structure_Mat4x3(this16.a * s6.a + this16.b * s6.e + this16.c * s6.i,this16.a * s6.b + this16.b * s6.f + this16.c * s6.j,this16.a * s6.c + this16.b * s6.g + this16.c * s6.k,this16.a * s6.d + this16.b * s6.h + this16.c * s6.l + this16.d,this16.e * s6.a + this16.f * s6.e + this16.g * s6.i,this16.e * s6.b + this16.f * s6.f + this16.g * s6.j,this16.e * s6.c + this16.f * s6.g + this16.g * s6.k,this16.e * s6.d + this16.f * s6.h + this16.g * s6.l + this16.h,this16.i * s6.a + this16.j * s6.e + this16.k * s6.i,this16.i * s6.b + this16.j * s6.f + this16.k * s6.j,this16.i * s6.c + this16.j * s6.g + this16.k * s6.k,this16.i * s6.d + this16.j * s6.h + this16.k * s6.l + this16.l);
	var s7 = this18;
	var this19 = new geom_structure_Mat4x3(r1.a * s7.a + r1.b * s7.e + r1.c * s7.i,r1.a * s7.b + r1.b * s7.f + r1.c * s7.j,r1.a * s7.c + r1.b * s7.g + r1.c * s7.k,r1.a * s7.d + r1.b * s7.h + r1.c * s7.l + r1.d,r1.e * s7.a + r1.f * s7.e + r1.g * s7.i,r1.e * s7.b + r1.f * s7.f + r1.g * s7.j,r1.e * s7.c + r1.f * s7.g + r1.g * s7.k,r1.e * s7.d + r1.f * s7.h + r1.g * s7.l + r1.h,r1.i * s7.a + r1.j * s7.e + r1.k * s7.i,r1.i * s7.b + r1.j * s7.f + r1.k * s7.j,r1.i * s7.c + r1.j * s7.g + r1.k * s7.k,r1.i * s7.d + r1.j * s7.h + r1.k * s7.l + r1.l);
	this1.drawType.transformRange(this19,se11.start,se11.end);
	var c11 = new trilateral2_IndexRange(se01.start,se11.end);
	var s21 = rs.clone();
	var start4 = this1.drawType.get_size();
	var drawType4 = this1.drawType;
	var ax4 = s21.x;
	var ay4 = s21.y;
	var radius4 = s21.radius;
	var sides4 = 36;
	if(sides4 == null) {
		sides4 = 36;
	}
	var pi4 = Math.PI;
	var theta6 = pi4 / 2;
	var step4 = pi4 * 2 / sides4;
	var bx4;
	var by4;
	var cx4;
	var cy4;
	var _g5 = 0;
	var _g14 = sides4;
	while(_g5 < _g14) {
		var i4 = _g5++;
		bx4 = ax4 + radius4 * Math.sin(theta6);
		by4 = ay4 + radius4 * Math.cos(theta6);
		theta6 += step4;
		cx4 = ax4 + radius4 * Math.sin(theta6);
		cy4 = ay4 + radius4 * Math.cos(theta6);
		drawType4.triangle(ax4,ay4,0,bx4,by4,0,cx4,cy4,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType4.transform(m4);
		}
		drawType4.next();
	}
	var len4 = sides4;
	var color4 = s21.color;
	if(color4 == -1) {
		color4 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color4,len4);
	var end4 = start4 + len4 - 1;
	var startEnd4 = new trilateral2_IndexRange(start4,end4);
	var se02 = startEnd4;
	var start5 = this1.drawType.get_size();
	var drawType5 = this1.drawType;
	var ax5 = s21.x;
	var ay5 = s21.y;
	var radius5 = s21.radius;
	var sides5 = 36;
	if(sides5 == null) {
		sides5 = 36;
	}
	var pi5 = Math.PI;
	var theta7 = pi5 / 2;
	var step5 = pi5 * 2 / sides5;
	var bx5;
	var by5;
	var cx5;
	var cy5;
	var _g6 = 0;
	var _g15 = sides5;
	while(_g6 < _g15) {
		var i5 = _g6++;
		bx5 = ax5 + radius5 * Math.sin(theta7);
		by5 = ay5 + radius5 * Math.cos(theta7);
		theta7 += step5;
		cx5 = ax5 + radius5 * Math.sin(theta7);
		cy5 = ay5 + radius5 * Math.cos(theta7);
		drawType5.triangle(ax5,ay5,0,bx5,by5,0,cx5,cy5,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType5.transform(m5);
		}
		drawType5.next();
	}
	var len5 = sides5;
	var color5 = s21.color;
	if(color5 == -1) {
		color5 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color5,len5);
	var end5 = start5 + len5 - 1;
	var startEnd5 = new trilateral2_IndexRange(start5,end5);
	var se12 = startEnd5;
	var this20 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this21 = this20;
	var theta8 = Math.PI;
	var c2 = Math.cos(theta8);
	var s8 = Math.sin(theta8);
	var this22 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c2,-s8,0.,0.,s8,c2,0.);
	var s9 = this22;
	var this23 = new geom_structure_Mat4x3(this21.a * s9.a + this21.b * s9.e + this21.c * s9.i,this21.a * s9.b + this21.b * s9.f + this21.c * s9.j,this21.a * s9.c + this21.b * s9.g + this21.c * s9.k,this21.a * s9.d + this21.b * s9.h + this21.c * s9.l + this21.d,this21.e * s9.a + this21.f * s9.e + this21.g * s9.i,this21.e * s9.b + this21.f * s9.f + this21.g * s9.j,this21.e * s9.c + this21.f * s9.g + this21.g * s9.k,this21.e * s9.d + this21.f * s9.h + this21.g * s9.l + this21.h,this21.i * s9.a + this21.j * s9.e + this21.k * s9.i,this21.i * s9.b + this21.j * s9.f + this21.k * s9.j,this21.i * s9.c + this21.j * s9.g + this21.k * s9.k,this21.i * s9.d + this21.j * s9.h + this21.k * s9.l + this21.l);
	var r2 = this23;
	var this24 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this25 = this24;
	var this26 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s10 = this26;
	var this27 = new geom_structure_Mat4x3(this25.a * s10.a + this25.b * s10.e + this25.c * s10.i,this25.a * s10.b + this25.b * s10.f + this25.c * s10.j,this25.a * s10.c + this25.b * s10.g + this25.c * s10.k,this25.a * s10.d + this25.b * s10.h + this25.c * s10.l + this25.d,this25.e * s10.a + this25.f * s10.e + this25.g * s10.i,this25.e * s10.b + this25.f * s10.f + this25.g * s10.j,this25.e * s10.c + this25.f * s10.g + this25.g * s10.k,this25.e * s10.d + this25.f * s10.h + this25.g * s10.l + this25.h,this25.i * s10.a + this25.j * s10.e + this25.k * s10.i,this25.i * s10.b + this25.j * s10.f + this25.k * s10.j,this25.i * s10.c + this25.j * s10.g + this25.k * s10.k,this25.i * s10.d + this25.j * s10.h + this25.k * s10.l + this25.l);
	var s12 = this27;
	var this28 = new geom_structure_Mat4x3(r2.a * s12.a + r2.b * s12.e + r2.c * s12.i,r2.a * s12.b + r2.b * s12.f + r2.c * s12.j,r2.a * s12.c + r2.b * s12.g + r2.c * s12.k,r2.a * s12.d + r2.b * s12.h + r2.c * s12.l + r2.d,r2.e * s12.a + r2.f * s12.e + r2.g * s12.i,r2.e * s12.b + r2.f * s12.f + r2.g * s12.j,r2.e * s12.c + r2.f * s12.g + r2.g * s12.k,r2.e * s12.d + r2.f * s12.h + r2.g * s12.l + r2.h,r2.i * s12.a + r2.j * s12.e + r2.k * s12.i,r2.i * s12.b + r2.j * s12.f + r2.k * s12.j,r2.i * s12.c + r2.j * s12.g + r2.k * s12.k,r2.i * s12.d + r2.j * s12.h + r2.k * s12.l + r2.l);
	this1.drawType.transformRange(this28,se12.start,se12.end);
	var c21 = new trilateral2_IndexRange(se02.start,se12.end);
	return new trilateral2_IndexRange(c0.start,c21.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.two2 = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 20;
	}
	if(dx == null) {
		dx = 20;
	}
	var s0 = rs.clone();
	s0.x += dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s0.x;
	var ay1 = s0.y;
	var radius1 = s0.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s0.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	var c0 = new trilateral2_IndexRange(se0.start,se1.end);
	var s11 = rs.clone();
	s11.x -= dx;
	s11.y += dy;
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var ax2 = s11.x;
	var ay2 = s11.y;
	var radius2 = s11.radius;
	var sides2 = 36;
	if(sides2 == null) {
		sides2 = 36;
	}
	var pi2 = Math.PI;
	var theta3 = pi2 / 2;
	var step2 = pi2 * 2 / sides2;
	var bx2;
	var by2;
	var cx2;
	var cy2;
	var _g3 = 0;
	var _g12 = sides2;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx2 = ax2 + radius2 * Math.sin(theta3);
		by2 = ay2 + radius2 * Math.cos(theta3);
		theta3 += step2;
		cx2 = ax2 + radius2 * Math.sin(theta3);
		cy2 = ay2 + radius2 * Math.cos(theta3);
		drawType2.triangle(ax2,ay2,0,bx2,by2,0,cx2,cy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType2.transform(m2);
		}
		drawType2.next();
	}
	var len2 = sides2;
	var color2 = s11.color;
	if(color2 == -1) {
		color2 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color2,len2);
	var end2 = start2 + len2 - 1;
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var se01 = startEnd2;
	var start3 = this1.drawType.get_size();
	var drawType3 = this1.drawType;
	var ax3 = s11.x;
	var ay3 = s11.y;
	var radius3 = s11.radius;
	var sides3 = 36;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi3 = Math.PI;
	var theta4 = pi3 / 2;
	var step3 = pi3 * 2 / sides3;
	var bx3;
	var by3;
	var cx3;
	var cy3;
	var _g4 = 0;
	var _g13 = sides3;
	while(_g4 < _g13) {
		var i3 = _g4++;
		bx3 = ax3 + radius3 * Math.sin(theta4);
		by3 = ay3 + radius3 * Math.cos(theta4);
		theta4 += step3;
		cx3 = ax3 + radius3 * Math.sin(theta4);
		cy3 = ay3 + radius3 * Math.cos(theta4);
		drawType3.triangle(ax3,ay3,0,bx3,by3,0,cx3,cy3,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType3.transform(m3);
		}
		drawType3.next();
	}
	var len3 = sides3;
	var color3 = s11.color;
	if(color3 == -1) {
		color3 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color3,len3);
	var end3 = start3 + len3 - 1;
	var startEnd3 = new trilateral2_IndexRange(start3,end3);
	var se11 = startEnd3;
	var this11 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this12 = this11;
	var theta5 = Math.PI;
	var c1 = Math.cos(theta5);
	var s4 = Math.sin(theta5);
	var this13 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c1,-s4,0.,0.,s4,c1,0.);
	var s5 = this13;
	var this14 = new geom_structure_Mat4x3(this12.a * s5.a + this12.b * s5.e + this12.c * s5.i,this12.a * s5.b + this12.b * s5.f + this12.c * s5.j,this12.a * s5.c + this12.b * s5.g + this12.c * s5.k,this12.a * s5.d + this12.b * s5.h + this12.c * s5.l + this12.d,this12.e * s5.a + this12.f * s5.e + this12.g * s5.i,this12.e * s5.b + this12.f * s5.f + this12.g * s5.j,this12.e * s5.c + this12.f * s5.g + this12.g * s5.k,this12.e * s5.d + this12.f * s5.h + this12.g * s5.l + this12.h,this12.i * s5.a + this12.j * s5.e + this12.k * s5.i,this12.i * s5.b + this12.j * s5.f + this12.k * s5.j,this12.i * s5.c + this12.j * s5.g + this12.k * s5.k,this12.i * s5.d + this12.j * s5.h + this12.k * s5.l + this12.l);
	var r1 = this14;
	var this15 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this16 = this15;
	var this17 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s6 = this17;
	var this18 = new geom_structure_Mat4x3(this16.a * s6.a + this16.b * s6.e + this16.c * s6.i,this16.a * s6.b + this16.b * s6.f + this16.c * s6.j,this16.a * s6.c + this16.b * s6.g + this16.c * s6.k,this16.a * s6.d + this16.b * s6.h + this16.c * s6.l + this16.d,this16.e * s6.a + this16.f * s6.e + this16.g * s6.i,this16.e * s6.b + this16.f * s6.f + this16.g * s6.j,this16.e * s6.c + this16.f * s6.g + this16.g * s6.k,this16.e * s6.d + this16.f * s6.h + this16.g * s6.l + this16.h,this16.i * s6.a + this16.j * s6.e + this16.k * s6.i,this16.i * s6.b + this16.j * s6.f + this16.k * s6.j,this16.i * s6.c + this16.j * s6.g + this16.k * s6.k,this16.i * s6.d + this16.j * s6.h + this16.k * s6.l + this16.l);
	var s7 = this18;
	var this19 = new geom_structure_Mat4x3(r1.a * s7.a + r1.b * s7.e + r1.c * s7.i,r1.a * s7.b + r1.b * s7.f + r1.c * s7.j,r1.a * s7.c + r1.b * s7.g + r1.c * s7.k,r1.a * s7.d + r1.b * s7.h + r1.c * s7.l + r1.d,r1.e * s7.a + r1.f * s7.e + r1.g * s7.i,r1.e * s7.b + r1.f * s7.f + r1.g * s7.j,r1.e * s7.c + r1.f * s7.g + r1.g * s7.k,r1.e * s7.d + r1.f * s7.h + r1.g * s7.l + r1.h,r1.i * s7.a + r1.j * s7.e + r1.k * s7.i,r1.i * s7.b + r1.j * s7.f + r1.k * s7.j,r1.i * s7.c + r1.j * s7.g + r1.k * s7.k,r1.i * s7.d + r1.j * s7.h + r1.k * s7.l + r1.l);
	this1.drawType.transformRange(this19,se11.start,se11.end);
	var c11 = new trilateral2_IndexRange(se01.start,se11.end);
	return new trilateral2_IndexRange(c0.start,c11.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.one2 = function(this1,rs) {
	var s0 = rs.clone();
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s0.x;
	var ay1 = s0.y;
	var radius1 = s0.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s0.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	var c0 = new trilateral2_IndexRange(se0.start,se1.end);
	return new trilateral2_IndexRange(c0.start,c0.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.six = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 35;
	}
	if(dx == null) {
		dx = 25;
	}
	var s0 = rs.clone();
	s0.x -= dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var c0 = startEnd;
	var s1 = rs.clone();
	s1.x += dx;
	s1.y -= dy;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s1.x;
	var ay1 = s1.y;
	var radius1 = s1.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s1.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var c1 = startEnd1;
	var s2 = rs.clone();
	s2.x -= dx;
	s2.y += dy;
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var ax2 = s2.x;
	var ay2 = s2.y;
	var radius2 = s2.radius;
	var sides2 = 36;
	if(sides2 == null) {
		sides2 = 36;
	}
	var pi2 = Math.PI;
	var theta2 = pi2 / 2;
	var step2 = pi2 * 2 / sides2;
	var bx2;
	var by2;
	var cx2;
	var cy2;
	var _g3 = 0;
	var _g12 = sides2;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx2 = ax2 + radius2 * Math.sin(theta2);
		by2 = ay2 + radius2 * Math.cos(theta2);
		theta2 += step2;
		cx2 = ax2 + radius2 * Math.sin(theta2);
		cy2 = ay2 + radius2 * Math.cos(theta2);
		drawType2.triangle(ax2,ay2,0,bx2,by2,0,cx2,cy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType2.transform(m2);
		}
		drawType2.next();
	}
	var len2 = sides2;
	var color2 = s2.color;
	if(color2 == -1) {
		color2 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color2,len2);
	var end2 = start2 + len2 - 1;
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var c2 = startEnd2;
	var s3 = rs.clone();
	s3.x += dx;
	s3.y += dy;
	var start3 = this1.drawType.get_size();
	var drawType3 = this1.drawType;
	var ax3 = s3.x;
	var ay3 = s3.y;
	var radius3 = s3.radius;
	var sides3 = 36;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi3 = Math.PI;
	var theta3 = pi3 / 2;
	var step3 = pi3 * 2 / sides3;
	var bx3;
	var by3;
	var cx3;
	var cy3;
	var _g4 = 0;
	var _g13 = sides3;
	while(_g4 < _g13) {
		var i3 = _g4++;
		bx3 = ax3 + radius3 * Math.sin(theta3);
		by3 = ay3 + radius3 * Math.cos(theta3);
		theta3 += step3;
		cx3 = ax3 + radius3 * Math.sin(theta3);
		cy3 = ay3 + radius3 * Math.cos(theta3);
		drawType3.triangle(ax3,ay3,0,bx3,by3,0,cx3,cy3,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType3.transform(m3);
		}
		drawType3.next();
	}
	var len3 = sides3;
	var color3 = s3.color;
	if(color3 == -1) {
		color3 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color3,len3);
	var end3 = start3 + len3 - 1;
	var startEnd3 = new trilateral2_IndexRange(start3,end3);
	var c3 = startEnd3;
	var s4 = rs.clone();
	s4.x -= dx;
	var start4 = this1.drawType.get_size();
	var drawType4 = this1.drawType;
	var ax4 = s4.x;
	var ay4 = s4.y;
	var radius4 = s4.radius;
	var sides4 = 36;
	if(sides4 == null) {
		sides4 = 36;
	}
	var pi4 = Math.PI;
	var theta4 = pi4 / 2;
	var step4 = pi4 * 2 / sides4;
	var bx4;
	var by4;
	var cx4;
	var cy4;
	var _g5 = 0;
	var _g14 = sides4;
	while(_g5 < _g14) {
		var i4 = _g5++;
		bx4 = ax4 + radius4 * Math.sin(theta4);
		by4 = ay4 + radius4 * Math.cos(theta4);
		theta4 += step4;
		cx4 = ax4 + radius4 * Math.sin(theta4);
		cy4 = ay4 + radius4 * Math.cos(theta4);
		drawType4.triangle(ax4,ay4,0,bx4,by4,0,cx4,cy4,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType4.transform(m4);
		}
		drawType4.next();
	}
	var len4 = sides4;
	var color4 = s4.color;
	if(color4 == -1) {
		color4 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color4,len4);
	var end4 = start4 + len4 - 1;
	var startEnd4 = new trilateral2_IndexRange(start4,end4);
	var c4 = startEnd4;
	var s5 = rs.clone();
	s5.x += dx;
	var start5 = this1.drawType.get_size();
	var drawType5 = this1.drawType;
	var ax5 = s5.x;
	var ay5 = s5.y;
	var radius5 = s5.radius;
	var sides5 = 36;
	if(sides5 == null) {
		sides5 = 36;
	}
	var pi5 = Math.PI;
	var theta5 = pi5 / 2;
	var step5 = pi5 * 2 / sides5;
	var bx5;
	var by5;
	var cx5;
	var cy5;
	var _g6 = 0;
	var _g15 = sides5;
	while(_g6 < _g15) {
		var i5 = _g6++;
		bx5 = ax5 + radius5 * Math.sin(theta5);
		by5 = ay5 + radius5 * Math.cos(theta5);
		theta5 += step5;
		cx5 = ax5 + radius5 * Math.sin(theta5);
		cy5 = ay5 + radius5 * Math.cos(theta5);
		drawType5.triangle(ax5,ay5,0,bx5,by5,0,cx5,cy5,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType5.transform(m5);
		}
		drawType5.next();
	}
	var len5 = sides5;
	var color5 = s5.color;
	if(color5 == -1) {
		color5 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color5,len5);
	var end5 = start5 + len5 - 1;
	var startEnd5 = new trilateral2_IndexRange(start5,end5);
	var c5 = startEnd5;
	return new trilateral2_IndexRange(c0.start,c5.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.five = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 30;
	}
	if(dx == null) {
		dx = 30;
	}
	var s0 = rs.clone();
	s0.x -= dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var c0 = startEnd;
	var s1 = rs.clone();
	s1.x += dx;
	s1.y -= dy;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s1.x;
	var ay1 = s1.y;
	var radius1 = s1.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s1.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var c1 = startEnd1;
	var s2 = rs.clone();
	s2.x -= dx;
	s2.y += dy;
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var ax2 = s2.x;
	var ay2 = s2.y;
	var radius2 = s2.radius;
	var sides2 = 36;
	if(sides2 == null) {
		sides2 = 36;
	}
	var pi2 = Math.PI;
	var theta2 = pi2 / 2;
	var step2 = pi2 * 2 / sides2;
	var bx2;
	var by2;
	var cx2;
	var cy2;
	var _g3 = 0;
	var _g12 = sides2;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx2 = ax2 + radius2 * Math.sin(theta2);
		by2 = ay2 + radius2 * Math.cos(theta2);
		theta2 += step2;
		cx2 = ax2 + radius2 * Math.sin(theta2);
		cy2 = ay2 + radius2 * Math.cos(theta2);
		drawType2.triangle(ax2,ay2,0,bx2,by2,0,cx2,cy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType2.transform(m2);
		}
		drawType2.next();
	}
	var len2 = sides2;
	var color2 = s2.color;
	if(color2 == -1) {
		color2 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color2,len2);
	var end2 = start2 + len2 - 1;
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var c2 = startEnd2;
	var s3 = rs.clone();
	s3.x += dx;
	s3.y += dy;
	var start3 = this1.drawType.get_size();
	var drawType3 = this1.drawType;
	var ax3 = s3.x;
	var ay3 = s3.y;
	var radius3 = s3.radius;
	var sides3 = 36;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi3 = Math.PI;
	var theta3 = pi3 / 2;
	var step3 = pi3 * 2 / sides3;
	var bx3;
	var by3;
	var cx3;
	var cy3;
	var _g4 = 0;
	var _g13 = sides3;
	while(_g4 < _g13) {
		var i3 = _g4++;
		bx3 = ax3 + radius3 * Math.sin(theta3);
		by3 = ay3 + radius3 * Math.cos(theta3);
		theta3 += step3;
		cx3 = ax3 + radius3 * Math.sin(theta3);
		cy3 = ay3 + radius3 * Math.cos(theta3);
		drawType3.triangle(ax3,ay3,0,bx3,by3,0,cx3,cy3,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType3.transform(m3);
		}
		drawType3.next();
	}
	var len3 = sides3;
	var color3 = s3.color;
	if(color3 == -1) {
		color3 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color3,len3);
	var end3 = start3 + len3 - 1;
	var startEnd3 = new trilateral2_IndexRange(start3,end3);
	var c3 = startEnd3;
	var s4 = rs.clone();
	var start4 = this1.drawType.get_size();
	var drawType4 = this1.drawType;
	var ax4 = s4.x;
	var ay4 = s4.y;
	var radius4 = s4.radius;
	var sides4 = 36;
	if(sides4 == null) {
		sides4 = 36;
	}
	var pi4 = Math.PI;
	var theta4 = pi4 / 2;
	var step4 = pi4 * 2 / sides4;
	var bx4;
	var by4;
	var cx4;
	var cy4;
	var _g5 = 0;
	var _g14 = sides4;
	while(_g5 < _g14) {
		var i4 = _g5++;
		bx4 = ax4 + radius4 * Math.sin(theta4);
		by4 = ay4 + radius4 * Math.cos(theta4);
		theta4 += step4;
		cx4 = ax4 + radius4 * Math.sin(theta4);
		cy4 = ay4 + radius4 * Math.cos(theta4);
		drawType4.triangle(ax4,ay4,0,bx4,by4,0,cx4,cy4,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType4.transform(m4);
		}
		drawType4.next();
	}
	var len4 = sides4;
	var color4 = s4.color;
	if(color4 == -1) {
		color4 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color4,len4);
	var end4 = start4 + len4 - 1;
	var startEnd4 = new trilateral2_IndexRange(start4,end4);
	var c4 = startEnd4;
	return new trilateral2_IndexRange(c0.start,c4.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.four = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 30;
	}
	if(dx == null) {
		dx = 30;
	}
	var s0 = rs.clone();
	s0.x -= dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var c0 = startEnd;
	var s1 = rs.clone();
	s1.x += dx;
	s1.y -= dy;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s1.x;
	var ay1 = s1.y;
	var radius1 = s1.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s1.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var c1 = startEnd1;
	var s2 = rs.clone();
	s2.x -= dx;
	s2.y += dy;
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var ax2 = s2.x;
	var ay2 = s2.y;
	var radius2 = s2.radius;
	var sides2 = 36;
	if(sides2 == null) {
		sides2 = 36;
	}
	var pi2 = Math.PI;
	var theta2 = pi2 / 2;
	var step2 = pi2 * 2 / sides2;
	var bx2;
	var by2;
	var cx2;
	var cy2;
	var _g3 = 0;
	var _g12 = sides2;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx2 = ax2 + radius2 * Math.sin(theta2);
		by2 = ay2 + radius2 * Math.cos(theta2);
		theta2 += step2;
		cx2 = ax2 + radius2 * Math.sin(theta2);
		cy2 = ay2 + radius2 * Math.cos(theta2);
		drawType2.triangle(ax2,ay2,0,bx2,by2,0,cx2,cy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType2.transform(m2);
		}
		drawType2.next();
	}
	var len2 = sides2;
	var color2 = s2.color;
	if(color2 == -1) {
		color2 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color2,len2);
	var end2 = start2 + len2 - 1;
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var c2 = startEnd2;
	var s3 = rs.clone();
	s3.x += dx;
	s3.y += dy;
	var start3 = this1.drawType.get_size();
	var drawType3 = this1.drawType;
	var ax3 = s3.x;
	var ay3 = s3.y;
	var radius3 = s3.radius;
	var sides3 = 36;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi3 = Math.PI;
	var theta3 = pi3 / 2;
	var step3 = pi3 * 2 / sides3;
	var bx3;
	var by3;
	var cx3;
	var cy3;
	var _g4 = 0;
	var _g13 = sides3;
	while(_g4 < _g13) {
		var i3 = _g4++;
		bx3 = ax3 + radius3 * Math.sin(theta3);
		by3 = ay3 + radius3 * Math.cos(theta3);
		theta3 += step3;
		cx3 = ax3 + radius3 * Math.sin(theta3);
		cy3 = ay3 + radius3 * Math.cos(theta3);
		drawType3.triangle(ax3,ay3,0,bx3,by3,0,cx3,cy3,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType3.transform(m3);
		}
		drawType3.next();
	}
	var len3 = sides3;
	var color3 = s3.color;
	if(color3 == -1) {
		color3 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color3,len3);
	var end3 = start3 + len3 - 1;
	var startEnd3 = new trilateral2_IndexRange(start3,end3);
	var c3 = startEnd3;
	return new trilateral2_IndexRange(c0.start,c3.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.three = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 25;
	}
	if(dx == null) {
		dx = 25;
	}
	var s0 = rs.clone();
	s0.x += dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var c0 = startEnd;
	var s1 = rs.clone();
	s1.x -= dx;
	s1.y += dy;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s1.x;
	var ay1 = s1.y;
	var radius1 = s1.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s1.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var c1 = startEnd1;
	var s2 = rs.clone();
	var start2 = this1.drawType.get_size();
	var drawType2 = this1.drawType;
	var ax2 = s2.x;
	var ay2 = s2.y;
	var radius2 = s2.radius;
	var sides2 = 36;
	if(sides2 == null) {
		sides2 = 36;
	}
	var pi2 = Math.PI;
	var theta2 = pi2 / 2;
	var step2 = pi2 * 2 / sides2;
	var bx2;
	var by2;
	var cx2;
	var cy2;
	var _g3 = 0;
	var _g12 = sides2;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx2 = ax2 + radius2 * Math.sin(theta2);
		by2 = ay2 + radius2 * Math.cos(theta2);
		theta2 += step2;
		cx2 = ax2 + radius2 * Math.sin(theta2);
		cy2 = ay2 + radius2 * Math.cos(theta2);
		drawType2.triangle(ax2,ay2,0,bx2,by2,0,cx2,cy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType2.transform(m2);
		}
		drawType2.next();
	}
	var len2 = sides2;
	var color2 = s2.color;
	if(color2 == -1) {
		color2 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color2,len2);
	var end2 = start2 + len2 - 1;
	var startEnd2 = new trilateral2_IndexRange(start2,end2);
	var c2 = startEnd2;
	return new trilateral2_IndexRange(c0.start,c2.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.two = function(this1,rs,dx,dy) {
	if(dy == null) {
		dy = 20;
	}
	if(dx == null) {
		dx = 20;
	}
	var s0 = rs.clone();
	s0.x += dx;
	s0.y -= dy;
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var c0 = startEnd;
	var s1 = rs.clone();
	s1.x -= dx;
	s1.y += dy;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = s1.x;
	var ay1 = s1.y;
	var radius1 = s1.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = s1.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var c1 = startEnd1;
	return new trilateral2_IndexRange(c0.start,c1.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.one = function(this1,rs) {
	var s0 = rs.clone();
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = s0.x;
	var ay = s0.y;
	var radius = s0.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = s0.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var c0 = startEnd;
	return new trilateral2_IndexRange(c0.start,c0.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.colorOne = function(this1,rs) {
	var s0 = rs.clone();
	var arr = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var rx = -0.25;
	var ry = 0.25;
	var sides = 47;
	if(sides == null) {
		sides = 36;
	}
	if(ry == null) {
		ry = 0;
	}
	if(rx == null) {
		rx = 0;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = s0.x;
	var y = s0.y;
	var radius = s0.radius;
	var len;
	if((sides & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx1 = rx;
		var ry1 = ry;
		var sides1 = sides;
		var omega = 0.;
		if(omega == null) {
			omega = 0.;
		}
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2 + omega;
		var step = pi * 2 / sides1;
		var bx;
		var by;
		var cx;
		var cy;
		if(rx1 > 1.) {
			rx1 = 1;
		}
		if(rx1 < -1.) {
			rx1 = -1;
		}
		if(ry1 > 1.) {
			ry1 = 1;
		}
		if(ry1 < -1.) {
			ry1 = -1;
		}
		var mx = x + rx1 * radius;
		var my = y - ry1 * radius;
		var _g = 0;
		var _g1 = sides1;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = sides1;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx2 = rx;
		var ry2 = ry;
		var sides2 = sides;
		var omega1 = 0.;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides2 == null) {
			sides2 = 36;
		}
		var pi1 = Math.PI;
		var theta1 = pi1 / 2;
		var step1 = pi1 * 2 / sides2;
		theta1 -= step1 / 2 + omega1;
		var bx1 = 0;
		var by1 = 0;
		var cx1 = 0;
		var cy1 = 0;
		if(rx2 > 1.) {
			rx2 = 1;
		}
		if(rx2 < -1.) {
			rx2 = -1;
		}
		if(ry2 > 1.) {
			ry2 = 1;
		}
		if(ry2 < -1.) {
			ry2 = -1;
		}
		var mx1 = x + rx2 * radius;
		var my1 = y - ry2 * radius;
		var dx = x + radius * Math.sin(theta1);
		var dy = y + radius * Math.cos(theta1);
		var _g2 = 0;
		var _g11 = sides2 - 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			bx1 = x + radius * Math.sin(theta1);
			by1 = y + radius * Math.cos(theta1);
			theta1 += step1;
			cx1 = x + radius * Math.sin(theta1);
			cy1 = y + radius * Math.cos(theta1);
			drawType.triangle(mx1,my1,0,bx1,by1,0,cx1,cy1,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		drawType.triangle(mx1,my1,0,cx1,cy1,0,dx,dy,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		len = sides2;
	}
	var k = 1;
	var arrEnd = arr.length - 1;
	var end = start + len - 1;
	var arr_ = arr.slice();
	var _g3 = 0;
	var _g12 = len - 1;
	while(_g3 < _g12) {
		var j = _g3++;
		this1.colorType.cornerColors(s0.color,arr_[k - 1],arr_[k]);
		++k;
		if(k > arrEnd) {
			k = 1;
			arr_.reverse();
		}
	}
	this1.colorType.cornerColors(s0.color,arr_[k - 1],arr[0]);
	var startEnd = new trilateral2_IndexRange(start,end);
	var c0 = startEnd;
	return new trilateral2_IndexRange(c0.start,c0.end);
};
trilateral2__$DieSpots_DieSpots_$Impl_$.goldOne = function(this1,rs) {
	var s0 = rs.clone();
	var arr = [-6062548,-2774968,-1788035,-2838729,-8448,-212480,-14809,-13312,-162539,-3763446,-12032,-935891,-1655158,-13261,-2453248,-2448096,-3820712,-3432139,-6724331];
	var rx = 0.5;
	var ry = 0.5;
	var sides = 47;
	if(sides == null) {
		sides = 36;
	}
	if(ry == null) {
		ry = 0;
	}
	if(rx == null) {
		rx = 0;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = s0.x;
	var y = s0.y;
	var radius = s0.radius;
	var len;
	if((sides & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx1 = rx;
		var ry1 = ry;
		var sides1 = sides;
		var omega = 0.;
		if(omega == null) {
			omega = 0.;
		}
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2 + omega;
		var step = pi * 2 / sides1;
		var bx;
		var by;
		var cx;
		var cy;
		if(rx1 > 1.) {
			rx1 = 1;
		}
		if(rx1 < -1.) {
			rx1 = -1;
		}
		if(ry1 > 1.) {
			ry1 = 1;
		}
		if(ry1 < -1.) {
			ry1 = -1;
		}
		var mx = x + rx1 * radius;
		var my = y - ry1 * radius;
		var _g = 0;
		var _g1 = sides1;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = sides1;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx2 = rx;
		var ry2 = ry;
		var sides2 = sides;
		var omega1 = 0.;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides2 == null) {
			sides2 = 36;
		}
		var pi1 = Math.PI;
		var theta1 = pi1 / 2;
		var step1 = pi1 * 2 / sides2;
		theta1 -= step1 / 2 + omega1;
		var bx1 = 0;
		var by1 = 0;
		var cx1 = 0;
		var cy1 = 0;
		if(rx2 > 1.) {
			rx2 = 1;
		}
		if(rx2 < -1.) {
			rx2 = -1;
		}
		if(ry2 > 1.) {
			ry2 = 1;
		}
		if(ry2 < -1.) {
			ry2 = -1;
		}
		var mx1 = x + rx2 * radius;
		var my1 = y - ry2 * radius;
		var dx = x + radius * Math.sin(theta1);
		var dy = y + radius * Math.cos(theta1);
		var _g2 = 0;
		var _g11 = sides2 - 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			bx1 = x + radius * Math.sin(theta1);
			by1 = y + radius * Math.cos(theta1);
			theta1 += step1;
			cx1 = x + radius * Math.sin(theta1);
			cy1 = y + radius * Math.cos(theta1);
			drawType.triangle(mx1,my1,0,bx1,by1,0,cx1,cy1,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		drawType.triangle(mx1,my1,0,cx1,cy1,0,dx,dy,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		len = sides2;
	}
	var k = 1;
	var arrEnd = arr.length - 1;
	var end = start + len - 1;
	var arr_ = arr.slice();
	var _g3 = 0;
	var _g12 = len - 1;
	while(_g3 < _g12) {
		var j = _g3++;
		this1.colorType.cornerColors(s0.color,arr_[k - 1],arr_[k]);
		++k;
		if(k > arrEnd) {
			k = 1;
			arr_.reverse();
		}
	}
	this1.colorType.cornerColors(s0.color,arr_[k - 1],arr[0]);
	var startEnd = new trilateral2_IndexRange(start,end);
	var c0 = startEnd;
	return new trilateral2_IndexRange(c0.start,c0.end);
};
var trilateral2__$DrawAbstract_DrawAbstract_$Impl_$ = {};
$hxClasses["trilateral2._DrawAbstract.DrawAbstract_Impl_"] = trilateral2__$DrawAbstract_DrawAbstract_$Impl_$;
trilateral2__$DrawAbstract_DrawAbstract_$Impl_$.__name__ = "trilateral2._DrawAbstract.DrawAbstract_Impl_";
trilateral2__$DrawAbstract_DrawAbstract_$Impl_$._new = function(drawType) {
	var this1 = drawType;
	return this1;
};
trilateral2__$DrawAbstract_DrawAbstract_$Impl_$.get_pos = function(this1) {
	return this1.get_pos();
};
trilateral2__$DrawAbstract_DrawAbstract_$Impl_$.set_pos = function(this1,v) {
	this1.set_pos(v);
	return v;
};
trilateral2__$DrawAbstract_DrawAbstract_$Impl_$.set_size = function(this1,v) {
	this1.set_size(v);
	return v;
};
trilateral2__$DrawAbstract_DrawAbstract_$Impl_$.get_size = function(this1) {
	return this1.get_size();
};
var trilateral2_Fill = function() { };
$hxClasses["trilateral2.Fill"] = trilateral2_Fill;
trilateral2_Fill.__name__ = "trilateral2.Fill";
trilateral2_Fill.triangulate = function(pen,sketch,fillForm) {
	var vert;
	var tri;
	var p;
	switch(fillForm._hx_index) {
	case 0:
		sketch.pointsRewound();
		p = sketch.points;
		var res = hxGeomAlgo_Tess2.tesselate(p,null,hxGeomAlgo_ResultType.POLYGONS,3);
		vert = res.vertices;
		tri = res.elements;
		var triples = hxPolyK__$PolyK_ArrayTriple_$Impl_$._new(tri);
		var _g = 0;
		while(_g < (triples.length / 3 | 0)) {
			var i = _g * 3 | 0;
			var tri__a = triples[i];
			var tri__b = triples[i + 1];
			var tri__c = triples[i + 2];
			++_g;
			var a = tri__a * 2 | 0;
			var b = tri__b * 2 | 0;
			var c = tri__c * 2 | 0;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = pen.currentColor;
			}
			pen.drawType.triangle(vert[a],vert[a + 1],0,vert[b],vert[b + 1],0,vert[c],vert[c + 1],0);
			if(pen.transformMatrix != null) {
				pen.drawType.transform(pen.transformMatrix);
			}
			pen.drawType.next();
			pen.colorType.cornerColors(color,color,color);
		}
		break;
	case 1:
		p = sketch.points;
		var l = p.length;
		var count = 0;
		vert = [];
		tri = [];
		var _g1 = 0;
		var _g11 = l;
		while(_g1 < _g11) {
			var i1 = _g1++;
			if(p[i1].length != 0) {
				var poly = p[i1];
				var n = poly.length >> 1;
				var tgs;
				if(n < 3) {
					tgs = [];
				} else {
					var tgs1 = [];
					var avl = [];
					var _g2 = 0;
					var _g12 = n;
					while(_g2 < _g12) {
						var i2 = _g2++;
						avl.push(i2);
					}
					var i3 = 0;
					var al = n;
					var i0;
					var i11;
					var i21;
					var ax;
					var ay;
					var bx;
					var by;
					var cx;
					var cy;
					var earFound;
					while(al > 3) {
						i0 = avl[i3 % al];
						i11 = avl[(i3 + 1) % al];
						i21 = avl[(i3 + 2) % al];
						ax = poly[2 * i0];
						ay = poly[2 * i0 + 1];
						bx = poly[2 * i11];
						by = poly[2 * i11 + 1];
						cx = poly[2 * i21];
						cy = poly[2 * i21 + 1];
						earFound = false;
						if((ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0) {
							earFound = true;
							var _g21 = 0;
							var _g3 = al;
							while(_g21 < _g3) {
								var j = _g21++;
								var vi = avl[j];
								if(vi == i0 || vi == i11 || vi == i21) {
									continue;
								}
								var v0x = cx - ax;
								var v0y = cy - ay;
								var v1x = bx - ax;
								var v1y = by - ay;
								var v2x = poly[2 * vi] - ax;
								var v2y = poly[2 * vi + 1] - ay;
								var dot00 = v0x * v0x + v0y * v0y;
								var dot01 = v0x * v1x + v0y * v1y;
								var dot02 = v0x * v2x + v0y * v2y;
								var dot11 = v1x * v1x + v1y * v1y;
								var dot12 = v1x * v2x + v1y * v2y;
								var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
								var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
								var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
								if(u >= 0 && v >= 0 && u + v < 1) {
									earFound = false;
									break;
								}
							}
						}
						if(earFound) {
							tgs1.push(i0);
							tgs1.push(i11);
							tgs1.push(i21);
							avl.splice((i3 + 1) % al,1);
							--al;
							i3 = 0;
						} else if(i3++ > 3 * al) {
							break;
						}
					}
					tgs1.push(avl[0]);
					tgs1.push(avl[1]);
					tgs1.push(avl[2]);
					tgs = tgs1;
				}
				var triples1 = hxPolyK__$PolyK_ArrayTriple_$Impl_$._new(tgs);
				var _g4 = 0;
				while(_g4 < (triples1.length / 3 | 0)) {
					var i4 = _g4 * 3 | 0;
					var tri__a1 = triples1[i4];
					var tri__b1 = triples1[i4 + 1];
					var tri__c1 = triples1[i4 + 2];
					++_g4;
					var a1 = tri__a1 * 2 | 0;
					var b1 = tri__b1 * 2 | 0;
					var c1 = tri__c1 * 2 | 0;
					var color1 = -1;
					if(color1 == null) {
						color1 = -1;
					}
					if(color1 == -1) {
						color1 = pen.currentColor;
					}
					pen.drawType.triangle(poly[a1],poly[a1 + 1],0,poly[b1],poly[b1 + 1],0,poly[c1],poly[c1 + 1],0);
					if(pen.transformMatrix != null) {
						pen.drawType.transform(pen.transformMatrix);
					}
					pen.drawType.next();
					pen.colorType.cornerColors(color1,color1,color1);
				}
			}
		}
		break;
	case 2:
		sketch.pointsNoEndOverlap();
		p = sketch.points;
		var vp = new org_poly2tri_VisiblePolygon();
		var l1 = p.length;
		var p_;
		var _g5 = 0;
		var _g13 = l1;
		while(_g5 < _g13) {
			var i5 = _g5++;
			p_ = p[i5];
			if(p_.length != 0) {
				var p2t = [];
				var pairs = hxPolyK__$PolyK_ArrayPairs_$Impl_$._new(p_);
				var i6 = 0 | 0;
				var inlobj_x = pairs[i6];
				var inlobj_y = pairs[i6 + 1];
				var p0 = inlobj_x;
				var i7 = 0 | 0;
				var inlobj_x1 = pairs[i7];
				var inlobj_y1 = pairs[i7 + 1];
				var p1 = inlobj_y1;
				var _g6 = 0;
				while(_g6 < (pairs.length / 2 | 0)) {
					var i8 = _g6 * 2 | 0;
					var pair_x = pairs[i8];
					var pair_y = pairs[i8 + 1];
					++_g6;
					p2t.push(new org_poly2tri_Point(pair_x,pair_y));
				}
				var l2 = p2t.length;
				if(p0 == p2t[l2 - 1].x && p1 == p2t[l2 - 1].y) {
					p2t.pop();
				}
				vp.addPolyline(p2t);
			}
		}
		vp.performTriangulationOnce();
		var pt = vp.getVerticesAndTriangles();
		tri = pt.triangles;
		vert = pt.vertices;
		var triples2 = hxPolyK__$PolyK_ArrayTriple_$Impl_$._new(tri);
		var _g22 = 0;
		while(_g22 < (triples2.length / 3 | 0)) {
			var i9 = _g22 * 3 | 0;
			var tri__a2 = triples2[i9];
			var tri__b2 = triples2[i9 + 1];
			var tri__c2 = triples2[i9 + 2];
			++_g22;
			var a2 = tri__a2 * 3 | 0;
			var b2 = tri__b2 * 3 | 0;
			var c2 = tri__c2 * 3 | 0;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = pen.currentColor;
			}
			pen.drawType.triangle(vert[a2],vert[a2 + 1],0,vert[b2],vert[b2 + 1],0,vert[c2],vert[c2 + 1],0);
			if(pen.transformMatrix != null) {
				pen.drawType.transform(pen.transformMatrix);
			}
			pen.drawType.next();
			pen.colorType.cornerColors(color2,color2,color2);
		}
		break;
	}
};
var trilateral2_FillForm = $hxEnums["trilateral2.FillForm"] = { __ename__ : "trilateral2.FillForm", __constructs__ : ["tess2","polyK","poly2tri"]
	,tess2: {_hx_index:0,__enum__:"trilateral2.FillForm",toString:$estr}
	,polyK: {_hx_index:1,__enum__:"trilateral2.FillForm",toString:$estr}
	,poly2tri: {_hx_index:2,__enum__:"trilateral2.FillForm",toString:$estr}
};
var trilateral2_IndexRange = function(start,end) {
	this.start = start;
	this.end = end;
};
$hxClasses["trilateral2.IndexRange"] = trilateral2_IndexRange;
trilateral2_IndexRange.__name__ = "trilateral2.IndexRange";
trilateral2_IndexRange.merge = function(ir0,ir1) {
	return new trilateral2_IndexRange(ir0.start,ir1.end);
};
trilateral2_IndexRange.prototype = {
	__class__: trilateral2_IndexRange
};
var trilateral2_Pen = function(drawType_,colorType_) {
	this.indices = [];
	this.currentColor = 16435934;
	this.dz = 0.01;
	this.rounded = 30;
	this.drawType = drawType_;
	this.colorType = colorType_;
};
$hxClasses["trilateral2.Pen"] = trilateral2_Pen;
trilateral2_Pen.__name__ = "trilateral2.Pen";
trilateral2_Pen.create = function(verts,cols) {
	var _e = verts;
	var _e1 = verts;
	var _e2 = verts;
	var _e3 = verts;
	var _e4 = verts;
	var _e5 = verts;
	var _e6 = verts;
	var _e7 = verts;
	var _e8 = verts;
	var _e9 = cols;
	var tmp = function(colorA,colorB,colorC) {
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e9,(colorA >> 16 & 255) / 255);
		var v = (colorA & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 2 + 2] = v;
		var v1 = (colorA >> 8 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 1 + 2] = v1;
		var v2 = (colorA >> 24 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 3 + 2] = v2;
		var pos_ = _e9[0] + 1.;
		_e9[0] = pos_;
		if(_e9[0] > _e9[1] - 1) {
			_e9[1] = _e9[0];
		}
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e9,(colorB >> 16 & 255) / 255);
		var v3 = (colorB & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 2 + 2] = v3;
		var v4 = (colorB >> 8 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 1 + 2] = v4;
		var v5 = (colorB >> 24 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 3 + 2] = v5;
		var pos_1 = _e9[0] + 1.;
		_e9[0] = pos_1;
		if(_e9[0] > _e9[1] - 1) {
			_e9[1] = _e9[0];
		}
		geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e9,(colorC >> 16 & 255) / 255);
		var v6 = (colorC & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 2 + 2] = v6;
		var v7 = (colorC >> 8 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 1 + 2] = v7;
		var v8 = (colorC >> 24 & 255) / 255;
		_e9[(_e9[0] | 0) * 4 + 3 + 2] = v8;
		var pos_2 = _e9[0] + 1.;
		_e9[0] = pos_2;
		if(_e9[0] > _e9[1] - 1) {
			_e9[1] = _e9[0];
		}
	};
	var _e10 = cols;
	var tmp1 = function(color,times) {
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e10,(color >> 16 & 255) / 255);
			var v9 = (color & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 2 + 2] = v9;
			var v10 = (color >> 8 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 1 + 2] = v10;
			var v11 = (color >> 24 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 3 + 2] = v11;
			var pos_3 = _e10[0] + 1.;
			_e10[0] = pos_3;
			if(_e10[0] > _e10[1] - 1) {
				_e10[1] = _e10[0];
			}
			geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e10,(color >> 16 & 255) / 255);
			var v12 = (color & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 2 + 2] = v12;
			var v13 = (color >> 8 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 1 + 2] = v13;
			var v14 = (color >> 24 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 3 + 2] = v14;
			var pos_4 = _e10[0] + 1.;
			_e10[0] = pos_4;
			if(_e10[0] > _e10[1] - 1) {
				_e10[1] = _e10[0];
			}
			geom_flat_f32__$Float32FlatRGBA_Float32FlatRGBA_$Impl_$.set_red(_e10,(color >> 16 & 255) / 255);
			var v15 = (color & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 2 + 2] = v15;
			var v16 = (color >> 8 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 1 + 2] = v16;
			var v17 = (color >> 24 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 3 + 2] = v17;
			var pos_5 = _e10[0] + 1.;
			_e10[0] = pos_5;
			if(_e10[0] > _e10[1] - 1) {
				_e10[1] = _e10[0];
			}
		}
	};
	var _e11 = verts;
	var _e12 = verts;
	var tmp2 = function(pos_6) {
		_e12[0] = pos_6;
		if(_e12[0] > _e12[1] - 1) {
			_e12[1] = _e12[0];
		}
		return pos_6;
	};
	var _e13 = verts;
	var tmp3 = function() {
		return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(_e13);
	};
	var _e14 = verts;
	var tmp4 = function(id) {
		return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_size(_e14,id);
	};
	return new trilateral2_Pen({ triangle : function(ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
		return geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.triangle(_e,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
	}, transform : function(m) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transform(_e1,m);
	}, transformRange : function(m1,start,end) {
		geom_flat_f32__$Float32FlatTriangle_Float32FlatTriangle_$Impl_$.transformRange(_e2,m1,start,end);
	}, next : function() {
		var pos_7 = _e3[0] + 1.;
		_e3[0] = pos_7;
		if(_e3[0] > _e3[1] - 1) {
			_e3[1] = _e3[0];
		}
		return _e3[0];
	}, hasNext : function() {
		return _e4[0] < geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(_e4);
	}, get_pos : function() {
		return _e5[0];
	}, set_pos : function(pos_8) {
		_e6[0] = pos_8;
		if(_e6[0] > _e6[1] - 1) {
			_e6[1] = _e6[0];
		}
		return pos_8;
	}, get_size : function() {
		return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.get_size(_e7);
	}, set_size : function(id1) {
		return geom_flat_f32__$Float32Flat_Float32Flat_$Impl_$.set_size(_e8,id1);
	}},{ cornerColors : tmp, colorTriangles : tmp1, get_pos : function() {
		return _e11[0];
	}, set_pos : tmp2, get_size : tmp3, set_size : tmp4});
};
trilateral2_Pen.prototype = {
	cornerColor: function(color) {
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = this.currentColor;
		}
		this.colorType.cornerColors(color,color,color);
	}
	,cornerColors: function(colorA,colorB,colorC) {
		this.colorType.cornerColors(colorA,colorB,colorC);
	}
	,middleColor: function(color,colorCentre) {
		this.colorType.cornerColors(colorCentre,color,color);
	}
	,middleColors: function(color,colorCentre,times) {
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			this.colorType.cornerColors(colorCentre,color,color);
		}
	}
	,colorTriangles: function(color,times) {
		if(color == -1) {
			color = this.currentColor;
		}
		this.colorType.colorTriangles(color,times);
	}
	,addTriangle: function(ax,ay,az,bx,by,bz,cx,cy,cz) {
		this.drawType.triangle(ax,ay,az,bx,by,bz,cx,cy,cz);
		if(this.transformMatrix != null) {
			this.drawType.transform(this.transformMatrix);
		}
		this.drawType.next();
	}
	,triangle2DFill: function(ax,ay,bx,by,cx,cy,color) {
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = this.currentColor;
		}
		this.drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		if(this.transformMatrix != null) {
			this.drawType.transform(this.transformMatrix);
		}
		this.drawType.next();
		this.colorType.cornerColors(color,color,color);
		return 1;
	}
	,get_pos: function() {
		return this.drawType.get_pos();
	}
	,set_pos: function(v) {
		this.drawType.set_pos(v);
		this.colorType.set_pos(v);
		return v;
	}
	,__class__: trilateral2_Pen
};
var trilateral2__$Regular_Regular_$Impl_$ = {};
$hxClasses["trilateral2._Regular.Regular_Impl_"] = trilateral2__$Regular_Regular_$Impl_$;
trilateral2__$Regular_Regular_$Impl_$.__name__ = "trilateral2._Regular.Regular_Impl_";
trilateral2__$Regular_Regular_$Impl_$._new = function(pen) {
	var this1 = pen;
	return this1;
};
trilateral2__$Regular_Regular_$Impl_$.triangle = function(this1,rs) {
	var sides = 3;
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides1 = sides;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides1;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides1;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
trilateral2__$Regular_Regular_$Impl_$.triangle2 = function(this1,rs) {
	var sides = 3;
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides1 = sides;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides1;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides1;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var sides2 = 3;
	if(sides2 == null) {
		sides2 = 36;
	}
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = rs.x;
	var ay1 = rs.y;
	var radius1 = rs.radius;
	var sides3 = sides2;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides3;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides3;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides3;
	var color1 = rs.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	return new trilateral2_IndexRange(se0.start,se1.end);
};
trilateral2__$Regular_Regular_$Impl_$.square = function(this1,rs) {
	var sides = 4;
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides1 = sides;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides1;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides1;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
trilateral2__$Regular_Regular_$Impl_$.square2 = function(this1,rs) {
	var sides = 4;
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides1 = sides;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides1;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides1;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var sides2 = 4;
	if(sides2 == null) {
		sides2 = 36;
	}
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = rs.x;
	var ay1 = rs.y;
	var radius1 = rs.radius;
	var sides3 = sides2;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides3;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides3;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides3;
	var color1 = rs.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	return new trilateral2_IndexRange(se0.start,se1.end);
};
trilateral2__$Regular_Regular_$Impl_$.bar = function(this1,rs) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = rs.x - rs.radius;
	var ax = x;
	var ay = rs.y - rs.radius / 4;
	var bx = x + rs.radius * 2;
	var by = ay;
	var cx = bx;
	var cy = ay + rs.radius / 3;
	var dx = x;
	var dy = cy;
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	var len = 2;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	return new trilateral2_IndexRange(start,end);
};
trilateral2__$Regular_Regular_$Impl_$.bar2 = function(this1,rs) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = rs.x - rs.radius;
	var ax = x;
	var ay = rs.y - rs.radius / 4;
	var bx = x + rs.radius * 2;
	var by = ay;
	var cx = bx;
	var cy = ay + rs.radius / 3;
	var dx = x;
	var dy = cy;
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	var len = 2;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var se0 = new trilateral2_IndexRange(start,end);
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var x1 = rs.x - rs.radius;
	var ax1 = x1;
	var ay1 = rs.y - rs.radius / 4;
	var bx1 = x1 + rs.radius * 2;
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + rs.radius / 3;
	var dx1 = x1;
	var dy1 = cy1;
	drawType1.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m2 = trilateral2_Shaper.transformMatrix;
	if(m2 != null) {
		drawType1.transform(m2);
	}
	drawType1.next();
	drawType1.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m3 = trilateral2_Shaper.transformMatrix;
	if(m3 != null) {
		drawType1.transform(m3);
	}
	drawType1.next();
	var len1 = 2;
	var color1 = rs.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var se1 = new trilateral2_IndexRange(start1,end1);
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta = Math.PI;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	return new trilateral2_IndexRange(se0.start,se1.end);
};
trilateral2__$Regular_Regular_$Impl_$.pentagon = function(this1,rs) {
	var sides = 5;
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides1 = sides;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides1;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides1;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
trilateral2__$Regular_Regular_$Impl_$.pentagon2 = function(this1,rs) {
	var sides = 5;
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides1 = sides;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides1;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides1;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var sides2 = 5;
	if(sides2 == null) {
		sides2 = 36;
	}
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = rs.x;
	var ay1 = rs.y;
	var radius1 = rs.radius;
	var sides3 = sides2;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides3;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides3;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides3;
	var color1 = rs.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	return new trilateral2_IndexRange(se0.start,se1.end);
};
trilateral2__$Regular_Regular_$Impl_$.hexagon = function(this1,rs) {
	var sides = 6;
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides1 = sides;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides1;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides1;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
trilateral2__$Regular_Regular_$Impl_$.hexagon2 = function(this1,rs) {
	var sides = 6;
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides1 = sides;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides1;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides1;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var sides2 = 6;
	if(sides2 == null) {
		sides2 = 36;
	}
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = rs.x;
	var ay1 = rs.y;
	var radius1 = rs.radius;
	var sides3 = sides2;
	if(sides3 == null) {
		sides3 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides3;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides3;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides3;
	var color1 = rs.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	return new trilateral2_IndexRange(se0.start,se1.end);
};
trilateral2__$Regular_Regular_$Impl_$.circle = function(this1,rs) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
trilateral2__$Regular_Regular_$Impl_$.circle2 = function(this1,rs) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides = 36;
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var ax1 = rs.x;
	var ay1 = rs.y;
	var radius1 = rs.radius;
	var sides1 = 36;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	var _g2 = 0;
	var _g11 = sides1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		bx1 = ax1 + radius1 * Math.sin(theta1);
		by1 = ay1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = ax1 + radius1 * Math.sin(theta1);
		cy1 = ay1 + radius1 * Math.cos(theta1);
		drawType1.triangle(ax1,ay1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var color1 = rs.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	return new trilateral2_IndexRange(se0.start,se1.end);
};
trilateral2__$Regular_Regular_$Impl_$.circleRadial = function(this1,rs,colorCentre,rx,ry) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = rs.x;
	var y = rs.y;
	var radius = rs.radius;
	haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
	var rx1 = rx;
	var ry1 = ry;
	var sides = 36;
	var omega = 0.;
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2 + omega;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	if(rx1 > 1.) {
		rx1 = 1;
	}
	if(rx1 < -1.) {
		rx1 = -1;
	}
	if(ry1 > 1.) {
		ry1 = 1;
	}
	if(ry1 < -1.) {
		ry1 = -1;
	}
	var mx = x + rx1 * radius;
	var my = y - ry1 * radius;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = x + radius * Math.sin(theta);
		by = y + radius * Math.cos(theta);
		theta += step;
		cx = x + radius * Math.sin(theta);
		cy = y + radius * Math.cos(theta);
		drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var colorCentre1 = rs.color;
	var _g2 = 0;
	var _g11 = len;
	while(_g2 < _g11) {
		var i1 = _g2++;
		this1.colorType.cornerColors(colorCentre1,colorCentre,colorCentre);
	}
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
trilateral2__$Regular_Regular_$Impl_$.circleRadial2 = function(this1,rs,colorCentre,rx,ry) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = rs.x;
	var y = rs.y;
	var radius = rs.radius;
	haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
	var rx1 = rx;
	var ry1 = ry;
	var sides = 36;
	var omega = 0.;
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2 + omega;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	if(rx1 > 1.) {
		rx1 = 1;
	}
	if(rx1 < -1.) {
		rx1 = -1;
	}
	if(ry1 > 1.) {
		ry1 = 1;
	}
	if(ry1 < -1.) {
		ry1 = -1;
	}
	var mx = x + rx1 * radius;
	var my = y - ry1 * radius;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = x + radius * Math.sin(theta);
		by = y + radius * Math.cos(theta);
		theta += step;
		cx = x + radius * Math.sin(theta);
		cy = y + radius * Math.cos(theta);
		drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var colorCentre1 = rs.color;
	var _g2 = 0;
	var _g11 = len;
	while(_g2 < _g11) {
		var i1 = _g2++;
		this1.colorType.cornerColors(colorCentre1,colorCentre,colorCentre);
	}
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	var se0 = startEnd;
	var rx2 = -rx;
	var ry2 = -ry;
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var x1 = rs.x;
	var y1 = rs.y;
	var radius1 = rs.radius;
	haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
	var rx3 = rx2;
	var ry3 = ry2;
	var sides1 = 36;
	var omega1 = 0.;
	if(omega1 == null) {
		omega1 = 0.;
	}
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi1 = Math.PI;
	var theta1 = pi1 / 2 + omega1;
	var step1 = pi1 * 2 / sides1;
	var bx1;
	var by1;
	var cx1;
	var cy1;
	if(rx3 > 1.) {
		rx3 = 1;
	}
	if(rx3 < -1.) {
		rx3 = -1;
	}
	if(ry3 > 1.) {
		ry3 = 1;
	}
	if(ry3 < -1.) {
		ry3 = -1;
	}
	var mx1 = x1 + rx3 * radius1;
	var my1 = y1 - ry3 * radius1;
	var _g3 = 0;
	var _g12 = sides1;
	while(_g3 < _g12) {
		var i2 = _g3++;
		bx1 = x1 + radius1 * Math.sin(theta1);
		by1 = y1 + radius1 * Math.cos(theta1);
		theta1 += step1;
		cx1 = x1 + radius1 * Math.sin(theta1);
		cy1 = y1 + radius1 * Math.cos(theta1);
		drawType1.triangle(mx1,my1,0,bx1,by1,0,cx1,cy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType1.transform(m1);
		}
		drawType1.next();
	}
	var len1 = sides1;
	var colorCentre2 = rs.color;
	var _g4 = 0;
	var _g13 = len1;
	while(_g4 < _g13) {
		var i3 = _g4++;
		this1.colorType.cornerColors(colorCentre2,colorCentre,colorCentre);
	}
	var end1 = start1 + len1 - 1;
	var startEnd1 = new trilateral2_IndexRange(start1,end1);
	var se1 = startEnd1;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	return new trilateral2_IndexRange(se0.start,se1.end);
};
trilateral2__$Regular_Regular_$Impl_$.roundedSquare = function(this1,rs) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = rs.x - rs.radius;
	var y = rs.y - rs.radius;
	var width = rs.radius * 2;
	var height = rs.radius * 2;
	var radius = this1.rounded;
	var pi = Math.PI;
	var pi_2 = Math.PI / 2;
	var ax = x + radius;
	var ay = y + radius;
	var bx = x + width - radius;
	var by = y + radius;
	var cx = bx;
	var cy = y + height - radius;
	var dx = ax;
	var dy = cy;
	var count = 0;
	var ax1 = ax;
	var ay1 = y;
	var bx1 = ax + (width - radius * 2);
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + height;
	var dx1 = ax;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	count += 2;
	var dimY = height - 2 * radius;
	var ax2 = x;
	var ay2 = ay;
	var bx2 = x + radius;
	var by2 = ay2;
	var cx2 = bx2;
	var cy2 = ay2 + dimY;
	var dx2 = x;
	var dy2 = cy2;
	drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
	var m2 = trilateral2_Shaper.transformMatrix;
	if(m2 != null) {
		drawType.transform(m2);
	}
	drawType.next();
	drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
	var m3 = trilateral2_Shaper.transformMatrix;
	if(m3 != null) {
		drawType.transform(m3);
	}
	drawType.next();
	count += 2;
	var ax3 = bx;
	var ay3 = by;
	var bx3 = bx + radius;
	var by3 = ay3;
	var cx3 = bx3;
	var cy3 = ay3 + dimY;
	var dx3 = bx;
	var dy3 = cy3;
	drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
	var m4 = trilateral2_Shaper.transformMatrix;
	if(m4 != null) {
		drawType.transform(m4);
	}
	drawType.next();
	drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
	var m5 = trilateral2_Shaper.transformMatrix;
	if(m5 != null) {
		drawType.transform(m5);
	}
	drawType.next();
	count += 2;
	var beta = -pi;
	var gamma = -pi_2;
	var pi1 = Math.PI;
	var step = pi1 * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this2 = f;
		var za = this2;
		var f1;
		if(gamma >= 0 && gamma > Math.PI) {
			f1 = gamma;
		} else {
			var a1 = gamma % (2 * Math.PI);
			f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this3 = f1;
		var zb = this3;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f2;
		if(beta >= 0 && beta > Math.PI) {
			f2 = beta;
		} else {
			var a2 = beta % (2 * Math.PI);
			f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
		}
		var this4 = f2;
		var za1 = this4;
		var f3;
		if(gamma >= 0 && gamma > Math.PI) {
			f3 = gamma;
		} else {
			var a3 = gamma % (2 * Math.PI);
			f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
		}
		var this5 = f3;
		var zb1 = this5;
		var fa1 = za1;
		var fb1 = zb1;
		var theta1 = Math.abs(fa1 - fb1);
		var clockwise1 = fa1 < fb1;
		var dif2 = clockwise1 ? theta1 : -theta1;
		dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
		break;
	case 2:
		var f4;
		if(beta >= 0 && beta > Math.PI) {
			f4 = beta;
		} else {
			var a4 = beta % (2 * Math.PI);
			f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
		}
		var this6 = f4;
		var za2 = this6;
		var f5;
		if(gamma >= 0 && gamma > Math.PI) {
			f5 = gamma;
		} else {
			var a5 = gamma % (2 * Math.PI);
			f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
		}
		var this7 = f5;
		var zb2 = this7;
		var fa2 = za2;
		var fb2 = zb2;
		var theta2 = Math.abs(fa2 - fb2);
		var smallest = theta2 <= Math.PI;
		var clockwise2 = fa2 < fb2;
		var dif3 = clockwise2 ? theta2 : -theta2;
		dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
		break;
	case 3:
		var f6;
		if(beta >= 0 && beta > Math.PI) {
			f6 = beta;
		} else {
			var a6 = beta % (2 * Math.PI);
			f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
		}
		var this8 = f6;
		var za3 = this8;
		var f7;
		if(gamma >= 0 && gamma > Math.PI) {
			f7 = gamma;
		} else {
			var a7 = gamma % (2 * Math.PI);
			f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
		}
		var this9 = f7;
		var zb3 = this9;
		var fa3 = za3;
		var fb3 = zb3;
		var theta3 = Math.abs(fa3 - fb3);
		var largest = theta3 > Math.PI;
		var clockwise3 = fa3 < fb3;
		var dif4 = clockwise3 ? theta3 : -theta3;
		dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx4;
	var cy4;
	var bx4 = 0;
	var by4 = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx4 = ax + radius * Math.sin(angle);
		cy4 = ay + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
			var m6 = trilateral2_Shaper.transformMatrix;
			if(m6 != null) {
				drawType.transform(m6);
			}
			drawType.next();
		}
		angle += step1;
		bx4 = cx4;
		by4 = cy4;
	}
	count += totalSteps;
	var pi2 = Math.PI;
	var step2 = pi2 * 2 / 36;
	var dif5;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f8;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f8 = pi_2;
		} else {
			var a8 = pi_2 % (2 * Math.PI);
			f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
		}
		var this10 = f8;
		var za4 = this10;
		var f9;
		if(pi >= 0 && pi > Math.PI) {
			f9 = pi;
		} else {
			var a9 = pi % (2 * Math.PI);
			f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
		}
		var this11 = f9;
		var zb4 = this11;
		var fa4 = za4;
		var fb4 = zb4;
		var theta4 = Math.abs(fa4 - fb4);
		var clockwise4 = fa4 < fb4;
		var dif6 = clockwise4 ? theta4 : -theta4;
		dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
		break;
	case 1:
		var f10;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f10 = pi_2;
		} else {
			var a10 = pi_2 % (2 * Math.PI);
			f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
		}
		var this12 = f10;
		var za5 = this12;
		var f11;
		if(pi >= 0 && pi > Math.PI) {
			f11 = pi;
		} else {
			var a11 = pi % (2 * Math.PI);
			f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
		}
		var this13 = f11;
		var zb5 = this13;
		var fa5 = za5;
		var fb5 = zb5;
		var theta5 = Math.abs(fa5 - fb5);
		var clockwise5 = fa5 < fb5;
		var dif7 = clockwise5 ? theta5 : -theta5;
		dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
		break;
	case 2:
		var f12;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f12 = pi_2;
		} else {
			var a12 = pi_2 % (2 * Math.PI);
			f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
		}
		var this14 = f12;
		var za6 = this14;
		var f13;
		if(pi >= 0 && pi > Math.PI) {
			f13 = pi;
		} else {
			var a13 = pi % (2 * Math.PI);
			f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
		}
		var this15 = f13;
		var zb6 = this15;
		var fa6 = za6;
		var fb6 = zb6;
		var theta6 = Math.abs(fa6 - fb6);
		var smallest1 = theta6 <= Math.PI;
		var clockwise6 = fa6 < fb6;
		var dif8 = clockwise6 ? theta6 : -theta6;
		dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
		break;
	case 3:
		var f14;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f14 = pi_2;
		} else {
			var a14 = pi_2 % (2 * Math.PI);
			f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
		}
		var this16 = f14;
		var za7 = this16;
		var f15;
		if(pi >= 0 && pi > Math.PI) {
			f15 = pi;
		} else {
			var a15 = pi % (2 * Math.PI);
			f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
		}
		var this17 = f15;
		var zb7 = this17;
		var fa7 = za7;
		var fb7 = zb7;
		var theta7 = Math.abs(fa7 - fb7);
		var largest1 = theta7 > Math.PI;
		var clockwise7 = fa7 < fb7;
		var dif9 = clockwise7 ? theta7 : -theta7;
		dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
		break;
	}
	var positive1 = dif5 >= 0;
	var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
	var step3 = dif5 / totalSteps1;
	var angle1 = pi_2;
	var cx5;
	var cy5;
	var bx5 = 0;
	var by5 = 0;
	var _g2 = 0;
	var _g11 = totalSteps1 + 1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		cx5 = bx + radius * Math.sin(angle1);
		cy5 = by + radius * Math.cos(angle1);
		if(i1 != 0) {
			drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
			var m7 = trilateral2_Shaper.transformMatrix;
			if(m7 != null) {
				drawType.transform(m7);
			}
			drawType.next();
		}
		angle1 += step3;
		bx5 = cx5;
		by5 = cy5;
	}
	count += totalSteps1;
	var pi3 = Math.PI;
	var step4 = pi3 * 2 / 36;
	var dif10;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f16;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f16 = pi_2;
		} else {
			var a16 = pi_2 % (2 * Math.PI);
			f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
		}
		var this18 = f16;
		var za8 = this18;
		var f17;
		if(0 > Math.PI) {
			f17 = 0;
		} else {
			var a17 = 0 % (2 * Math.PI);
			f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
		}
		var this19 = f17;
		var zb8 = this19;
		var fa8 = za8;
		var fb8 = zb8;
		var theta8 = Math.abs(fa8 - fb8);
		var clockwise8 = fa8 < fb8;
		var dif11 = clockwise8 ? theta8 : -theta8;
		dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
		break;
	case 1:
		var f18;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f18 = pi_2;
		} else {
			var a18 = pi_2 % (2 * Math.PI);
			f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
		}
		var this20 = f18;
		var za9 = this20;
		var f19;
		if(0 > Math.PI) {
			f19 = 0;
		} else {
			var a19 = 0 % (2 * Math.PI);
			f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
		}
		var this21 = f19;
		var zb9 = this21;
		var fa9 = za9;
		var fb9 = zb9;
		var theta9 = Math.abs(fa9 - fb9);
		var clockwise9 = fa9 < fb9;
		var dif12 = clockwise9 ? theta9 : -theta9;
		dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
		break;
	case 2:
		var f20;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f20 = pi_2;
		} else {
			var a20 = pi_2 % (2 * Math.PI);
			f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
		}
		var this22 = f20;
		var za10 = this22;
		var f21;
		if(0 > Math.PI) {
			f21 = 0;
		} else {
			var a21 = 0 % (2 * Math.PI);
			f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
		}
		var this23 = f21;
		var zb10 = this23;
		var fa10 = za10;
		var fb10 = zb10;
		var theta10 = Math.abs(fa10 - fb10);
		var smallest2 = theta10 <= Math.PI;
		var clockwise10 = fa10 < fb10;
		var dif13 = clockwise10 ? theta10 : -theta10;
		dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
		break;
	case 3:
		var f22;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f22 = pi_2;
		} else {
			var a22 = pi_2 % (2 * Math.PI);
			f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
		}
		var this24 = f22;
		var za11 = this24;
		var f23;
		if(0 > Math.PI) {
			f23 = 0;
		} else {
			var a23 = 0 % (2 * Math.PI);
			f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
		}
		var this25 = f23;
		var zb11 = this25;
		var fa11 = za11;
		var fb11 = zb11;
		var theta11 = Math.abs(fa11 - fb11);
		var largest2 = theta11 > Math.PI;
		var clockwise11 = fa11 < fb11;
		var dif14 = clockwise11 ? theta11 : -theta11;
		dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
		break;
	}
	var positive2 = dif10 >= 0;
	var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
	var step5 = dif10 / totalSteps2;
	var angle2 = pi_2;
	var cx6;
	var cy6;
	var bx6 = 0;
	var by6 = 0;
	var _g3 = 0;
	var _g12 = totalSteps2 + 1;
	while(_g3 < _g12) {
		var i2 = _g3++;
		cx6 = cx + radius * Math.sin(angle2);
		cy6 = cy + radius * Math.cos(angle2);
		if(i2 != 0) {
			drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
			var m8 = trilateral2_Shaper.transformMatrix;
			if(m8 != null) {
				drawType.transform(m8);
			}
			drawType.next();
		}
		angle2 += step5;
		bx6 = cx6;
		by6 = cy6;
	}
	count += totalSteps2;
	var gamma1 = -pi_2;
	var pi4 = Math.PI;
	var step6 = pi4 * 2 / 36;
	var dif15;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f24;
		if(0 > Math.PI) {
			f24 = 0;
		} else {
			var a24 = 0 % (2 * Math.PI);
			f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
		}
		var this26 = f24;
		var za12 = this26;
		var f25;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f25 = gamma1;
		} else {
			var a25 = gamma1 % (2 * Math.PI);
			f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
		}
		var this27 = f25;
		var zb12 = this27;
		var fa12 = za12;
		var fb12 = zb12;
		var theta12 = Math.abs(fa12 - fb12);
		var clockwise12 = fa12 < fb12;
		var dif16 = clockwise12 ? theta12 : -theta12;
		dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
		break;
	case 1:
		var f26;
		if(0 > Math.PI) {
			f26 = 0;
		} else {
			var a26 = 0 % (2 * Math.PI);
			f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
		}
		var this28 = f26;
		var za13 = this28;
		var f27;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f27 = gamma1;
		} else {
			var a27 = gamma1 % (2 * Math.PI);
			f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
		}
		var this29 = f27;
		var zb13 = this29;
		var fa13 = za13;
		var fb13 = zb13;
		var theta13 = Math.abs(fa13 - fb13);
		var clockwise13 = fa13 < fb13;
		var dif17 = clockwise13 ? theta13 : -theta13;
		dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
		break;
	case 2:
		var f28;
		if(0 > Math.PI) {
			f28 = 0;
		} else {
			var a28 = 0 % (2 * Math.PI);
			f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
		}
		var this30 = f28;
		var za14 = this30;
		var f29;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f29 = gamma1;
		} else {
			var a29 = gamma1 % (2 * Math.PI);
			f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
		}
		var this31 = f29;
		var zb14 = this31;
		var fa14 = za14;
		var fb14 = zb14;
		var theta14 = Math.abs(fa14 - fb14);
		var smallest3 = theta14 <= Math.PI;
		var clockwise14 = fa14 < fb14;
		var dif18 = clockwise14 ? theta14 : -theta14;
		dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
		break;
	case 3:
		var f30;
		if(0 > Math.PI) {
			f30 = 0;
		} else {
			var a30 = 0 % (2 * Math.PI);
			f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
		}
		var this32 = f30;
		var za15 = this32;
		var f31;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f31 = gamma1;
		} else {
			var a31 = gamma1 % (2 * Math.PI);
			f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
		}
		var this33 = f31;
		var zb15 = this33;
		var fa15 = za15;
		var fb15 = zb15;
		var theta15 = Math.abs(fa15 - fb15);
		var largest3 = theta15 > Math.PI;
		var clockwise15 = fa15 < fb15;
		var dif19 = clockwise15 ? theta15 : -theta15;
		dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
		break;
	}
	var positive3 = dif15 >= 0;
	var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
	var step7 = dif15 / totalSteps3;
	var angle3 = 0;
	var cx7;
	var cy7;
	var bx7 = 0;
	var by7 = 0;
	var _g4 = 0;
	var _g13 = totalSteps3 + 1;
	while(_g4 < _g13) {
		var i3 = _g4++;
		cx7 = dx + radius * Math.sin(angle3);
		cy7 = dy + radius * Math.cos(angle3);
		if(i3 != 0) {
			drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
			var m9 = trilateral2_Shaper.transformMatrix;
			if(m9 != null) {
				drawType.transform(m9);
			}
			drawType.next();
		}
		angle3 += step7;
		bx7 = cx7;
		by7 = cy7;
	}
	var len = count += totalSteps3;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	return new trilateral2_IndexRange(start,end);
};
trilateral2__$Regular_Regular_$Impl_$.roundedSquare2 = function(this1,rs) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = rs.x - rs.radius;
	var y = rs.y - rs.radius;
	var width = rs.radius * 2;
	var height = rs.radius * 2;
	var radius = this1.rounded;
	var pi = Math.PI;
	var pi_2 = Math.PI / 2;
	var ax = x + radius;
	var ay = y + radius;
	var bx = x + width - radius;
	var by = y + radius;
	var cx = bx;
	var cy = y + height - radius;
	var dx = ax;
	var dy = cy;
	var count = 0;
	var ax1 = ax;
	var ay1 = y;
	var bx1 = ax + (width - radius * 2);
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + height;
	var dx1 = ax;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	count += 2;
	var dimY = height - 2 * radius;
	var ax2 = x;
	var ay2 = ay;
	var bx2 = x + radius;
	var by2 = ay2;
	var cx2 = bx2;
	var cy2 = ay2 + dimY;
	var dx2 = x;
	var dy2 = cy2;
	drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
	var m2 = trilateral2_Shaper.transformMatrix;
	if(m2 != null) {
		drawType.transform(m2);
	}
	drawType.next();
	drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
	var m3 = trilateral2_Shaper.transformMatrix;
	if(m3 != null) {
		drawType.transform(m3);
	}
	drawType.next();
	count += 2;
	var ax3 = bx;
	var ay3 = by;
	var bx3 = bx + radius;
	var by3 = ay3;
	var cx3 = bx3;
	var cy3 = ay3 + dimY;
	var dx3 = bx;
	var dy3 = cy3;
	drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
	var m4 = trilateral2_Shaper.transformMatrix;
	if(m4 != null) {
		drawType.transform(m4);
	}
	drawType.next();
	drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
	var m5 = trilateral2_Shaper.transformMatrix;
	if(m5 != null) {
		drawType.transform(m5);
	}
	drawType.next();
	count += 2;
	var beta = -pi;
	var gamma = -pi_2;
	var pi1 = Math.PI;
	var step = pi1 * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this2 = f;
		var za = this2;
		var f1;
		if(gamma >= 0 && gamma > Math.PI) {
			f1 = gamma;
		} else {
			var a1 = gamma % (2 * Math.PI);
			f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this3 = f1;
		var zb = this3;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f2;
		if(beta >= 0 && beta > Math.PI) {
			f2 = beta;
		} else {
			var a2 = beta % (2 * Math.PI);
			f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
		}
		var this4 = f2;
		var za1 = this4;
		var f3;
		if(gamma >= 0 && gamma > Math.PI) {
			f3 = gamma;
		} else {
			var a3 = gamma % (2 * Math.PI);
			f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
		}
		var this5 = f3;
		var zb1 = this5;
		var fa1 = za1;
		var fb1 = zb1;
		var theta1 = Math.abs(fa1 - fb1);
		var clockwise1 = fa1 < fb1;
		var dif2 = clockwise1 ? theta1 : -theta1;
		dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
		break;
	case 2:
		var f4;
		if(beta >= 0 && beta > Math.PI) {
			f4 = beta;
		} else {
			var a4 = beta % (2 * Math.PI);
			f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
		}
		var this6 = f4;
		var za2 = this6;
		var f5;
		if(gamma >= 0 && gamma > Math.PI) {
			f5 = gamma;
		} else {
			var a5 = gamma % (2 * Math.PI);
			f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
		}
		var this7 = f5;
		var zb2 = this7;
		var fa2 = za2;
		var fb2 = zb2;
		var theta2 = Math.abs(fa2 - fb2);
		var smallest = theta2 <= Math.PI;
		var clockwise2 = fa2 < fb2;
		var dif3 = clockwise2 ? theta2 : -theta2;
		dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
		break;
	case 3:
		var f6;
		if(beta >= 0 && beta > Math.PI) {
			f6 = beta;
		} else {
			var a6 = beta % (2 * Math.PI);
			f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
		}
		var this8 = f6;
		var za3 = this8;
		var f7;
		if(gamma >= 0 && gamma > Math.PI) {
			f7 = gamma;
		} else {
			var a7 = gamma % (2 * Math.PI);
			f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
		}
		var this9 = f7;
		var zb3 = this9;
		var fa3 = za3;
		var fb3 = zb3;
		var theta3 = Math.abs(fa3 - fb3);
		var largest = theta3 > Math.PI;
		var clockwise3 = fa3 < fb3;
		var dif4 = clockwise3 ? theta3 : -theta3;
		dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx4;
	var cy4;
	var bx4 = 0;
	var by4 = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx4 = ax + radius * Math.sin(angle);
		cy4 = ay + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
			var m6 = trilateral2_Shaper.transformMatrix;
			if(m6 != null) {
				drawType.transform(m6);
			}
			drawType.next();
		}
		angle += step1;
		bx4 = cx4;
		by4 = cy4;
	}
	count += totalSteps;
	var pi2 = Math.PI;
	var step2 = pi2 * 2 / 36;
	var dif5;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f8;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f8 = pi_2;
		} else {
			var a8 = pi_2 % (2 * Math.PI);
			f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
		}
		var this10 = f8;
		var za4 = this10;
		var f9;
		if(pi >= 0 && pi > Math.PI) {
			f9 = pi;
		} else {
			var a9 = pi % (2 * Math.PI);
			f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
		}
		var this11 = f9;
		var zb4 = this11;
		var fa4 = za4;
		var fb4 = zb4;
		var theta4 = Math.abs(fa4 - fb4);
		var clockwise4 = fa4 < fb4;
		var dif6 = clockwise4 ? theta4 : -theta4;
		dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
		break;
	case 1:
		var f10;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f10 = pi_2;
		} else {
			var a10 = pi_2 % (2 * Math.PI);
			f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
		}
		var this12 = f10;
		var za5 = this12;
		var f11;
		if(pi >= 0 && pi > Math.PI) {
			f11 = pi;
		} else {
			var a11 = pi % (2 * Math.PI);
			f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
		}
		var this13 = f11;
		var zb5 = this13;
		var fa5 = za5;
		var fb5 = zb5;
		var theta5 = Math.abs(fa5 - fb5);
		var clockwise5 = fa5 < fb5;
		var dif7 = clockwise5 ? theta5 : -theta5;
		dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
		break;
	case 2:
		var f12;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f12 = pi_2;
		} else {
			var a12 = pi_2 % (2 * Math.PI);
			f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
		}
		var this14 = f12;
		var za6 = this14;
		var f13;
		if(pi >= 0 && pi > Math.PI) {
			f13 = pi;
		} else {
			var a13 = pi % (2 * Math.PI);
			f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
		}
		var this15 = f13;
		var zb6 = this15;
		var fa6 = za6;
		var fb6 = zb6;
		var theta6 = Math.abs(fa6 - fb6);
		var smallest1 = theta6 <= Math.PI;
		var clockwise6 = fa6 < fb6;
		var dif8 = clockwise6 ? theta6 : -theta6;
		dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
		break;
	case 3:
		var f14;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f14 = pi_2;
		} else {
			var a14 = pi_2 % (2 * Math.PI);
			f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
		}
		var this16 = f14;
		var za7 = this16;
		var f15;
		if(pi >= 0 && pi > Math.PI) {
			f15 = pi;
		} else {
			var a15 = pi % (2 * Math.PI);
			f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
		}
		var this17 = f15;
		var zb7 = this17;
		var fa7 = za7;
		var fb7 = zb7;
		var theta7 = Math.abs(fa7 - fb7);
		var largest1 = theta7 > Math.PI;
		var clockwise7 = fa7 < fb7;
		var dif9 = clockwise7 ? theta7 : -theta7;
		dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
		break;
	}
	var positive1 = dif5 >= 0;
	var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
	var step3 = dif5 / totalSteps1;
	var angle1 = pi_2;
	var cx5;
	var cy5;
	var bx5 = 0;
	var by5 = 0;
	var _g2 = 0;
	var _g11 = totalSteps1 + 1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		cx5 = bx + radius * Math.sin(angle1);
		cy5 = by + radius * Math.cos(angle1);
		if(i1 != 0) {
			drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
			var m7 = trilateral2_Shaper.transformMatrix;
			if(m7 != null) {
				drawType.transform(m7);
			}
			drawType.next();
		}
		angle1 += step3;
		bx5 = cx5;
		by5 = cy5;
	}
	count += totalSteps1;
	var pi3 = Math.PI;
	var step4 = pi3 * 2 / 36;
	var dif10;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f16;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f16 = pi_2;
		} else {
			var a16 = pi_2 % (2 * Math.PI);
			f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
		}
		var this18 = f16;
		var za8 = this18;
		var f17;
		if(0 > Math.PI) {
			f17 = 0;
		} else {
			var a17 = 0 % (2 * Math.PI);
			f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
		}
		var this19 = f17;
		var zb8 = this19;
		var fa8 = za8;
		var fb8 = zb8;
		var theta8 = Math.abs(fa8 - fb8);
		var clockwise8 = fa8 < fb8;
		var dif11 = clockwise8 ? theta8 : -theta8;
		dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
		break;
	case 1:
		var f18;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f18 = pi_2;
		} else {
			var a18 = pi_2 % (2 * Math.PI);
			f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
		}
		var this20 = f18;
		var za9 = this20;
		var f19;
		if(0 > Math.PI) {
			f19 = 0;
		} else {
			var a19 = 0 % (2 * Math.PI);
			f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
		}
		var this21 = f19;
		var zb9 = this21;
		var fa9 = za9;
		var fb9 = zb9;
		var theta9 = Math.abs(fa9 - fb9);
		var clockwise9 = fa9 < fb9;
		var dif12 = clockwise9 ? theta9 : -theta9;
		dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
		break;
	case 2:
		var f20;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f20 = pi_2;
		} else {
			var a20 = pi_2 % (2 * Math.PI);
			f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
		}
		var this22 = f20;
		var za10 = this22;
		var f21;
		if(0 > Math.PI) {
			f21 = 0;
		} else {
			var a21 = 0 % (2 * Math.PI);
			f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
		}
		var this23 = f21;
		var zb10 = this23;
		var fa10 = za10;
		var fb10 = zb10;
		var theta10 = Math.abs(fa10 - fb10);
		var smallest2 = theta10 <= Math.PI;
		var clockwise10 = fa10 < fb10;
		var dif13 = clockwise10 ? theta10 : -theta10;
		dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
		break;
	case 3:
		var f22;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f22 = pi_2;
		} else {
			var a22 = pi_2 % (2 * Math.PI);
			f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
		}
		var this24 = f22;
		var za11 = this24;
		var f23;
		if(0 > Math.PI) {
			f23 = 0;
		} else {
			var a23 = 0 % (2 * Math.PI);
			f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
		}
		var this25 = f23;
		var zb11 = this25;
		var fa11 = za11;
		var fb11 = zb11;
		var theta11 = Math.abs(fa11 - fb11);
		var largest2 = theta11 > Math.PI;
		var clockwise11 = fa11 < fb11;
		var dif14 = clockwise11 ? theta11 : -theta11;
		dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
		break;
	}
	var positive2 = dif10 >= 0;
	var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
	var step5 = dif10 / totalSteps2;
	var angle2 = pi_2;
	var cx6;
	var cy6;
	var bx6 = 0;
	var by6 = 0;
	var _g3 = 0;
	var _g12 = totalSteps2 + 1;
	while(_g3 < _g12) {
		var i2 = _g3++;
		cx6 = cx + radius * Math.sin(angle2);
		cy6 = cy + radius * Math.cos(angle2);
		if(i2 != 0) {
			drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
			var m8 = trilateral2_Shaper.transformMatrix;
			if(m8 != null) {
				drawType.transform(m8);
			}
			drawType.next();
		}
		angle2 += step5;
		bx6 = cx6;
		by6 = cy6;
	}
	count += totalSteps2;
	var gamma1 = -pi_2;
	var pi4 = Math.PI;
	var step6 = pi4 * 2 / 36;
	var dif15;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f24;
		if(0 > Math.PI) {
			f24 = 0;
		} else {
			var a24 = 0 % (2 * Math.PI);
			f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
		}
		var this26 = f24;
		var za12 = this26;
		var f25;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f25 = gamma1;
		} else {
			var a25 = gamma1 % (2 * Math.PI);
			f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
		}
		var this27 = f25;
		var zb12 = this27;
		var fa12 = za12;
		var fb12 = zb12;
		var theta12 = Math.abs(fa12 - fb12);
		var clockwise12 = fa12 < fb12;
		var dif16 = clockwise12 ? theta12 : -theta12;
		dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
		break;
	case 1:
		var f26;
		if(0 > Math.PI) {
			f26 = 0;
		} else {
			var a26 = 0 % (2 * Math.PI);
			f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
		}
		var this28 = f26;
		var za13 = this28;
		var f27;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f27 = gamma1;
		} else {
			var a27 = gamma1 % (2 * Math.PI);
			f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
		}
		var this29 = f27;
		var zb13 = this29;
		var fa13 = za13;
		var fb13 = zb13;
		var theta13 = Math.abs(fa13 - fb13);
		var clockwise13 = fa13 < fb13;
		var dif17 = clockwise13 ? theta13 : -theta13;
		dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
		break;
	case 2:
		var f28;
		if(0 > Math.PI) {
			f28 = 0;
		} else {
			var a28 = 0 % (2 * Math.PI);
			f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
		}
		var this30 = f28;
		var za14 = this30;
		var f29;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f29 = gamma1;
		} else {
			var a29 = gamma1 % (2 * Math.PI);
			f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
		}
		var this31 = f29;
		var zb14 = this31;
		var fa14 = za14;
		var fb14 = zb14;
		var theta14 = Math.abs(fa14 - fb14);
		var smallest3 = theta14 <= Math.PI;
		var clockwise14 = fa14 < fb14;
		var dif18 = clockwise14 ? theta14 : -theta14;
		dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
		break;
	case 3:
		var f30;
		if(0 > Math.PI) {
			f30 = 0;
		} else {
			var a30 = 0 % (2 * Math.PI);
			f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
		}
		var this32 = f30;
		var za15 = this32;
		var f31;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f31 = gamma1;
		} else {
			var a31 = gamma1 % (2 * Math.PI);
			f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
		}
		var this33 = f31;
		var zb15 = this33;
		var fa15 = za15;
		var fb15 = zb15;
		var theta15 = Math.abs(fa15 - fb15);
		var largest3 = theta15 > Math.PI;
		var clockwise15 = fa15 < fb15;
		var dif19 = clockwise15 ? theta15 : -theta15;
		dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
		break;
	}
	var positive3 = dif15 >= 0;
	var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
	var step7 = dif15 / totalSteps3;
	var angle3 = 0;
	var cx7;
	var cy7;
	var bx7 = 0;
	var by7 = 0;
	var _g4 = 0;
	var _g13 = totalSteps3 + 1;
	while(_g4 < _g13) {
		var i3 = _g4++;
		cx7 = dx + radius * Math.sin(angle3);
		cy7 = dy + radius * Math.cos(angle3);
		if(i3 != 0) {
			drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
			var m9 = trilateral2_Shaper.transformMatrix;
			if(m9 != null) {
				drawType.transform(m9);
			}
			drawType.next();
		}
		angle3 += step7;
		bx7 = cx7;
		by7 = cy7;
	}
	var len = count += totalSteps3;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var se0 = new trilateral2_IndexRange(start,end);
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var x1 = rs.x - rs.radius;
	var y1 = rs.y - rs.radius;
	var width1 = rs.radius * 2;
	var height1 = rs.radius * 2;
	var radius1 = this1.rounded;
	var pi5 = Math.PI;
	var pi_21 = Math.PI / 2;
	var ax4 = x1 + radius1;
	var ay4 = y1 + radius1;
	var bx8 = x1 + width1 - radius1;
	var by8 = y1 + radius1;
	var cx8 = bx8;
	var cy8 = y1 + height1 - radius1;
	var dx4 = ax4;
	var dy4 = cy8;
	var count1 = 0;
	var ax5 = ax4;
	var ay5 = y1;
	var bx9 = ax4 + (width1 - radius1 * 2);
	var by9 = ay5;
	var cx9 = bx9;
	var cy9 = ay5 + height1;
	var dx5 = ax4;
	var dy5 = cy9;
	drawType1.triangle(ax5,ay5,0,bx9,by9,0,dx5,dy5,0);
	var m10 = trilateral2_Shaper.transformMatrix;
	if(m10 != null) {
		drawType1.transform(m10);
	}
	drawType1.next();
	drawType1.triangle(bx9,by9,0,cx9,cy9,0,dx5,dy5,0);
	var m11 = trilateral2_Shaper.transformMatrix;
	if(m11 != null) {
		drawType1.transform(m11);
	}
	drawType1.next();
	count1 += 2;
	var dimY1 = height1 - 2 * radius1;
	var ax6 = x1;
	var ay6 = ay4;
	var bx10 = x1 + radius1;
	var by10 = ay6;
	var cx10 = bx10;
	var cy10 = ay6 + dimY1;
	var dx6 = x1;
	var dy6 = cy10;
	drawType1.triangle(ax6,ay6,0,bx10,by10,0,dx6,dy6,0);
	var m12 = trilateral2_Shaper.transformMatrix;
	if(m12 != null) {
		drawType1.transform(m12);
	}
	drawType1.next();
	drawType1.triangle(bx10,by10,0,cx10,cy10,0,dx6,dy6,0);
	var m13 = trilateral2_Shaper.transformMatrix;
	if(m13 != null) {
		drawType1.transform(m13);
	}
	drawType1.next();
	count1 += 2;
	var ax7 = bx8;
	var ay7 = by8;
	var bx11 = bx8 + radius1;
	var by11 = ay7;
	var cx11 = bx11;
	var cy11 = ay7 + dimY1;
	var dx7 = bx8;
	var dy7 = cy11;
	drawType1.triangle(ax7,ay7,0,bx11,by11,0,dx7,dy7,0);
	var m14 = trilateral2_Shaper.transformMatrix;
	if(m14 != null) {
		drawType1.transform(m14);
	}
	drawType1.next();
	drawType1.triangle(bx11,by11,0,cx11,cy11,0,dx7,dy7,0);
	var m15 = trilateral2_Shaper.transformMatrix;
	if(m15 != null) {
		drawType1.transform(m15);
	}
	drawType1.next();
	count1 += 2;
	var beta1 = -pi5;
	var gamma2 = -pi_21;
	var pi6 = Math.PI;
	var step8 = pi6 * 2 / 36;
	var dif20;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f32;
		if(beta1 >= 0 && beta1 > Math.PI) {
			f32 = beta1;
		} else {
			var a32 = beta1 % (2 * Math.PI);
			f32 = a32 >= 0 ? a32 : a32 + 2 * Math.PI;
		}
		var this34 = f32;
		var za16 = this34;
		var f33;
		if(gamma2 >= 0 && gamma2 > Math.PI) {
			f33 = gamma2;
		} else {
			var a33 = gamma2 % (2 * Math.PI);
			f33 = a33 >= 0 ? a33 : a33 + 2 * Math.PI;
		}
		var this35 = f33;
		var zb16 = this35;
		var fa16 = za16;
		var fb16 = zb16;
		var theta16 = Math.abs(fa16 - fb16);
		var clockwise16 = fa16 < fb16;
		var dif21 = clockwise16 ? theta16 : -theta16;
		dif20 = dif21 > 0 ? dif21 : 2 * Math.PI + dif21;
		break;
	case 1:
		var f34;
		if(beta1 >= 0 && beta1 > Math.PI) {
			f34 = beta1;
		} else {
			var a34 = beta1 % (2 * Math.PI);
			f34 = a34 >= 0 ? a34 : a34 + 2 * Math.PI;
		}
		var this36 = f34;
		var za17 = this36;
		var f35;
		if(gamma2 >= 0 && gamma2 > Math.PI) {
			f35 = gamma2;
		} else {
			var a35 = gamma2 % (2 * Math.PI);
			f35 = a35 >= 0 ? a35 : a35 + 2 * Math.PI;
		}
		var this37 = f35;
		var zb17 = this37;
		var fa17 = za17;
		var fb17 = zb17;
		var theta17 = Math.abs(fa17 - fb17);
		var clockwise17 = fa17 < fb17;
		var dif22 = clockwise17 ? theta17 : -theta17;
		dif20 = dif22 < 0 ? dif22 : -2 * Math.PI + dif22;
		break;
	case 2:
		var f36;
		if(beta1 >= 0 && beta1 > Math.PI) {
			f36 = beta1;
		} else {
			var a36 = beta1 % (2 * Math.PI);
			f36 = a36 >= 0 ? a36 : a36 + 2 * Math.PI;
		}
		var this38 = f36;
		var za18 = this38;
		var f37;
		if(gamma2 >= 0 && gamma2 > Math.PI) {
			f37 = gamma2;
		} else {
			var a37 = gamma2 % (2 * Math.PI);
			f37 = a37 >= 0 ? a37 : a37 + 2 * Math.PI;
		}
		var this39 = f37;
		var zb18 = this39;
		var fa18 = za18;
		var fb18 = zb18;
		var theta18 = Math.abs(fa18 - fb18);
		var smallest4 = theta18 <= Math.PI;
		var clockwise18 = fa18 < fb18;
		var dif23 = clockwise18 ? theta18 : -theta18;
		dif20 = smallest4 ? dif23 : clockwise18 ? -(2 * Math.PI - theta18) : 2 * Math.PI - theta18;
		break;
	case 3:
		var f38;
		if(beta1 >= 0 && beta1 > Math.PI) {
			f38 = beta1;
		} else {
			var a38 = beta1 % (2 * Math.PI);
			f38 = a38 >= 0 ? a38 : a38 + 2 * Math.PI;
		}
		var this40 = f38;
		var za19 = this40;
		var f39;
		if(gamma2 >= 0 && gamma2 > Math.PI) {
			f39 = gamma2;
		} else {
			var a39 = gamma2 % (2 * Math.PI);
			f39 = a39 >= 0 ? a39 : a39 + 2 * Math.PI;
		}
		var this41 = f39;
		var zb19 = this41;
		var fa19 = za19;
		var fb19 = zb19;
		var theta19 = Math.abs(fa19 - fb19);
		var largest4 = theta19 > Math.PI;
		var clockwise19 = fa19 < fb19;
		var dif24 = clockwise19 ? theta19 : -theta19;
		dif20 = largest4 ? dif24 : clockwise19 ? -(2 * Math.PI - theta19) : 2 * Math.PI - theta19;
		break;
	}
	var positive4 = dif20 >= 0;
	var totalSteps4 = Math.ceil(Math.abs(dif20) / step8);
	var step9 = dif20 / totalSteps4;
	var angle4 = beta1;
	var cx12;
	var cy12;
	var bx12 = 0;
	var by12 = 0;
	var _g5 = 0;
	var _g14 = totalSteps4 + 1;
	while(_g5 < _g14) {
		var i4 = _g5++;
		cx12 = ax4 + radius1 * Math.sin(angle4);
		cy12 = ay4 + radius1 * Math.cos(angle4);
		if(i4 != 0) {
			drawType1.triangle(ax4,ay4,0,bx12,by12,0,cx12,cy12,0);
			var m16 = trilateral2_Shaper.transformMatrix;
			if(m16 != null) {
				drawType1.transform(m16);
			}
			drawType1.next();
		}
		angle4 += step9;
		bx12 = cx12;
		by12 = cy12;
	}
	count1 += totalSteps4;
	var pi7 = Math.PI;
	var step10 = pi7 * 2 / 36;
	var dif25;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f40;
		if(pi_21 >= 0 && pi_21 > Math.PI) {
			f40 = pi_21;
		} else {
			var a40 = pi_21 % (2 * Math.PI);
			f40 = a40 >= 0 ? a40 : a40 + 2 * Math.PI;
		}
		var this42 = f40;
		var za20 = this42;
		var f41;
		if(pi5 >= 0 && pi5 > Math.PI) {
			f41 = pi5;
		} else {
			var a41 = pi5 % (2 * Math.PI);
			f41 = a41 >= 0 ? a41 : a41 + 2 * Math.PI;
		}
		var this43 = f41;
		var zb20 = this43;
		var fa20 = za20;
		var fb20 = zb20;
		var theta20 = Math.abs(fa20 - fb20);
		var clockwise20 = fa20 < fb20;
		var dif26 = clockwise20 ? theta20 : -theta20;
		dif25 = dif26 > 0 ? dif26 : 2 * Math.PI + dif26;
		break;
	case 1:
		var f42;
		if(pi_21 >= 0 && pi_21 > Math.PI) {
			f42 = pi_21;
		} else {
			var a42 = pi_21 % (2 * Math.PI);
			f42 = a42 >= 0 ? a42 : a42 + 2 * Math.PI;
		}
		var this44 = f42;
		var za21 = this44;
		var f43;
		if(pi5 >= 0 && pi5 > Math.PI) {
			f43 = pi5;
		} else {
			var a43 = pi5 % (2 * Math.PI);
			f43 = a43 >= 0 ? a43 : a43 + 2 * Math.PI;
		}
		var this45 = f43;
		var zb21 = this45;
		var fa21 = za21;
		var fb21 = zb21;
		var theta21 = Math.abs(fa21 - fb21);
		var clockwise21 = fa21 < fb21;
		var dif27 = clockwise21 ? theta21 : -theta21;
		dif25 = dif27 < 0 ? dif27 : -2 * Math.PI + dif27;
		break;
	case 2:
		var f44;
		if(pi_21 >= 0 && pi_21 > Math.PI) {
			f44 = pi_21;
		} else {
			var a44 = pi_21 % (2 * Math.PI);
			f44 = a44 >= 0 ? a44 : a44 + 2 * Math.PI;
		}
		var this46 = f44;
		var za22 = this46;
		var f45;
		if(pi5 >= 0 && pi5 > Math.PI) {
			f45 = pi5;
		} else {
			var a45 = pi5 % (2 * Math.PI);
			f45 = a45 >= 0 ? a45 : a45 + 2 * Math.PI;
		}
		var this47 = f45;
		var zb22 = this47;
		var fa22 = za22;
		var fb22 = zb22;
		var theta22 = Math.abs(fa22 - fb22);
		var smallest5 = theta22 <= Math.PI;
		var clockwise22 = fa22 < fb22;
		var dif28 = clockwise22 ? theta22 : -theta22;
		dif25 = smallest5 ? dif28 : clockwise22 ? -(2 * Math.PI - theta22) : 2 * Math.PI - theta22;
		break;
	case 3:
		var f46;
		if(pi_21 >= 0 && pi_21 > Math.PI) {
			f46 = pi_21;
		} else {
			var a46 = pi_21 % (2 * Math.PI);
			f46 = a46 >= 0 ? a46 : a46 + 2 * Math.PI;
		}
		var this48 = f46;
		var za23 = this48;
		var f47;
		if(pi5 >= 0 && pi5 > Math.PI) {
			f47 = pi5;
		} else {
			var a47 = pi5 % (2 * Math.PI);
			f47 = a47 >= 0 ? a47 : a47 + 2 * Math.PI;
		}
		var this49 = f47;
		var zb23 = this49;
		var fa23 = za23;
		var fb23 = zb23;
		var theta23 = Math.abs(fa23 - fb23);
		var largest5 = theta23 > Math.PI;
		var clockwise23 = fa23 < fb23;
		var dif29 = clockwise23 ? theta23 : -theta23;
		dif25 = largest5 ? dif29 : clockwise23 ? -(2 * Math.PI - theta23) : 2 * Math.PI - theta23;
		break;
	}
	var positive5 = dif25 >= 0;
	var totalSteps5 = Math.ceil(Math.abs(dif25) / step10);
	var step11 = dif25 / totalSteps5;
	var angle5 = pi_21;
	var cx13;
	var cy13;
	var bx13 = 0;
	var by13 = 0;
	var _g6 = 0;
	var _g15 = totalSteps5 + 1;
	while(_g6 < _g15) {
		var i5 = _g6++;
		cx13 = bx8 + radius1 * Math.sin(angle5);
		cy13 = by8 + radius1 * Math.cos(angle5);
		if(i5 != 0) {
			drawType1.triangle(bx8,by8,0,bx13,by13,0,cx13,cy13,0);
			var m17 = trilateral2_Shaper.transformMatrix;
			if(m17 != null) {
				drawType1.transform(m17);
			}
			drawType1.next();
		}
		angle5 += step11;
		bx13 = cx13;
		by13 = cy13;
	}
	count1 += totalSteps5;
	var pi8 = Math.PI;
	var step12 = pi8 * 2 / 36;
	var dif30;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f48;
		if(pi_21 >= 0 && pi_21 > Math.PI) {
			f48 = pi_21;
		} else {
			var a48 = pi_21 % (2 * Math.PI);
			f48 = a48 >= 0 ? a48 : a48 + 2 * Math.PI;
		}
		var this50 = f48;
		var za24 = this50;
		var f49;
		if(0 > Math.PI) {
			f49 = 0;
		} else {
			var a49 = 0 % (2 * Math.PI);
			f49 = a49 >= 0 ? a49 : a49 + 2 * Math.PI;
		}
		var this51 = f49;
		var zb24 = this51;
		var fa24 = za24;
		var fb24 = zb24;
		var theta24 = Math.abs(fa24 - fb24);
		var clockwise24 = fa24 < fb24;
		var dif31 = clockwise24 ? theta24 : -theta24;
		dif30 = dif31 > 0 ? dif31 : 2 * Math.PI + dif31;
		break;
	case 1:
		var f50;
		if(pi_21 >= 0 && pi_21 > Math.PI) {
			f50 = pi_21;
		} else {
			var a50 = pi_21 % (2 * Math.PI);
			f50 = a50 >= 0 ? a50 : a50 + 2 * Math.PI;
		}
		var this52 = f50;
		var za25 = this52;
		var f51;
		if(0 > Math.PI) {
			f51 = 0;
		} else {
			var a51 = 0 % (2 * Math.PI);
			f51 = a51 >= 0 ? a51 : a51 + 2 * Math.PI;
		}
		var this53 = f51;
		var zb25 = this53;
		var fa25 = za25;
		var fb25 = zb25;
		var theta25 = Math.abs(fa25 - fb25);
		var clockwise25 = fa25 < fb25;
		var dif32 = clockwise25 ? theta25 : -theta25;
		dif30 = dif32 < 0 ? dif32 : -2 * Math.PI + dif32;
		break;
	case 2:
		var f52;
		if(pi_21 >= 0 && pi_21 > Math.PI) {
			f52 = pi_21;
		} else {
			var a52 = pi_21 % (2 * Math.PI);
			f52 = a52 >= 0 ? a52 : a52 + 2 * Math.PI;
		}
		var this54 = f52;
		var za26 = this54;
		var f53;
		if(0 > Math.PI) {
			f53 = 0;
		} else {
			var a53 = 0 % (2 * Math.PI);
			f53 = a53 >= 0 ? a53 : a53 + 2 * Math.PI;
		}
		var this55 = f53;
		var zb26 = this55;
		var fa26 = za26;
		var fb26 = zb26;
		var theta26 = Math.abs(fa26 - fb26);
		var smallest6 = theta26 <= Math.PI;
		var clockwise26 = fa26 < fb26;
		var dif33 = clockwise26 ? theta26 : -theta26;
		dif30 = smallest6 ? dif33 : clockwise26 ? -(2 * Math.PI - theta26) : 2 * Math.PI - theta26;
		break;
	case 3:
		var f54;
		if(pi_21 >= 0 && pi_21 > Math.PI) {
			f54 = pi_21;
		} else {
			var a54 = pi_21 % (2 * Math.PI);
			f54 = a54 >= 0 ? a54 : a54 + 2 * Math.PI;
		}
		var this56 = f54;
		var za27 = this56;
		var f55;
		if(0 > Math.PI) {
			f55 = 0;
		} else {
			var a55 = 0 % (2 * Math.PI);
			f55 = a55 >= 0 ? a55 : a55 + 2 * Math.PI;
		}
		var this57 = f55;
		var zb27 = this57;
		var fa27 = za27;
		var fb27 = zb27;
		var theta27 = Math.abs(fa27 - fb27);
		var largest6 = theta27 > Math.PI;
		var clockwise27 = fa27 < fb27;
		var dif34 = clockwise27 ? theta27 : -theta27;
		dif30 = largest6 ? dif34 : clockwise27 ? -(2 * Math.PI - theta27) : 2 * Math.PI - theta27;
		break;
	}
	var positive6 = dif30 >= 0;
	var totalSteps6 = Math.ceil(Math.abs(dif30) / step12);
	var step13 = dif30 / totalSteps6;
	var angle6 = pi_21;
	var cx14;
	var cy14;
	var bx14 = 0;
	var by14 = 0;
	var _g7 = 0;
	var _g16 = totalSteps6 + 1;
	while(_g7 < _g16) {
		var i6 = _g7++;
		cx14 = cx8 + radius1 * Math.sin(angle6);
		cy14 = cy8 + radius1 * Math.cos(angle6);
		if(i6 != 0) {
			drawType1.triangle(cx8,cy8,0,bx14,by14,0,cx14,cy14,0);
			var m18 = trilateral2_Shaper.transformMatrix;
			if(m18 != null) {
				drawType1.transform(m18);
			}
			drawType1.next();
		}
		angle6 += step13;
		bx14 = cx14;
		by14 = cy14;
	}
	count1 += totalSteps6;
	var gamma3 = -pi_21;
	var pi9 = Math.PI;
	var step14 = pi9 * 2 / 36;
	var dif35;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f56;
		if(0 > Math.PI) {
			f56 = 0;
		} else {
			var a56 = 0 % (2 * Math.PI);
			f56 = a56 >= 0 ? a56 : a56 + 2 * Math.PI;
		}
		var this58 = f56;
		var za28 = this58;
		var f57;
		if(gamma3 >= 0 && gamma3 > Math.PI) {
			f57 = gamma3;
		} else {
			var a57 = gamma3 % (2 * Math.PI);
			f57 = a57 >= 0 ? a57 : a57 + 2 * Math.PI;
		}
		var this59 = f57;
		var zb28 = this59;
		var fa28 = za28;
		var fb28 = zb28;
		var theta28 = Math.abs(fa28 - fb28);
		var clockwise28 = fa28 < fb28;
		var dif36 = clockwise28 ? theta28 : -theta28;
		dif35 = dif36 > 0 ? dif36 : 2 * Math.PI + dif36;
		break;
	case 1:
		var f58;
		if(0 > Math.PI) {
			f58 = 0;
		} else {
			var a58 = 0 % (2 * Math.PI);
			f58 = a58 >= 0 ? a58 : a58 + 2 * Math.PI;
		}
		var this60 = f58;
		var za29 = this60;
		var f59;
		if(gamma3 >= 0 && gamma3 > Math.PI) {
			f59 = gamma3;
		} else {
			var a59 = gamma3 % (2 * Math.PI);
			f59 = a59 >= 0 ? a59 : a59 + 2 * Math.PI;
		}
		var this61 = f59;
		var zb29 = this61;
		var fa29 = za29;
		var fb29 = zb29;
		var theta29 = Math.abs(fa29 - fb29);
		var clockwise29 = fa29 < fb29;
		var dif37 = clockwise29 ? theta29 : -theta29;
		dif35 = dif37 < 0 ? dif37 : -2 * Math.PI + dif37;
		break;
	case 2:
		var f60;
		if(0 > Math.PI) {
			f60 = 0;
		} else {
			var a60 = 0 % (2 * Math.PI);
			f60 = a60 >= 0 ? a60 : a60 + 2 * Math.PI;
		}
		var this62 = f60;
		var za30 = this62;
		var f61;
		if(gamma3 >= 0 && gamma3 > Math.PI) {
			f61 = gamma3;
		} else {
			var a61 = gamma3 % (2 * Math.PI);
			f61 = a61 >= 0 ? a61 : a61 + 2 * Math.PI;
		}
		var this63 = f61;
		var zb30 = this63;
		var fa30 = za30;
		var fb30 = zb30;
		var theta30 = Math.abs(fa30 - fb30);
		var smallest7 = theta30 <= Math.PI;
		var clockwise30 = fa30 < fb30;
		var dif38 = clockwise30 ? theta30 : -theta30;
		dif35 = smallest7 ? dif38 : clockwise30 ? -(2 * Math.PI - theta30) : 2 * Math.PI - theta30;
		break;
	case 3:
		var f62;
		if(0 > Math.PI) {
			f62 = 0;
		} else {
			var a62 = 0 % (2 * Math.PI);
			f62 = a62 >= 0 ? a62 : a62 + 2 * Math.PI;
		}
		var this64 = f62;
		var za31 = this64;
		var f63;
		if(gamma3 >= 0 && gamma3 > Math.PI) {
			f63 = gamma3;
		} else {
			var a63 = gamma3 % (2 * Math.PI);
			f63 = a63 >= 0 ? a63 : a63 + 2 * Math.PI;
		}
		var this65 = f63;
		var zb31 = this65;
		var fa31 = za31;
		var fb31 = zb31;
		var theta31 = Math.abs(fa31 - fb31);
		var largest7 = theta31 > Math.PI;
		var clockwise31 = fa31 < fb31;
		var dif39 = clockwise31 ? theta31 : -theta31;
		dif35 = largest7 ? dif39 : clockwise31 ? -(2 * Math.PI - theta31) : 2 * Math.PI - theta31;
		break;
	}
	var positive7 = dif35 >= 0;
	var totalSteps7 = Math.ceil(Math.abs(dif35) / step14);
	var step15 = dif35 / totalSteps7;
	var angle7 = 0;
	var cx15;
	var cy15;
	var bx15 = 0;
	var by15 = 0;
	var _g8 = 0;
	var _g17 = totalSteps7 + 1;
	while(_g8 < _g17) {
		var i7 = _g8++;
		cx15 = dx4 + radius1 * Math.sin(angle7);
		cy15 = dy4 + radius1 * Math.cos(angle7);
		if(i7 != 0) {
			drawType1.triangle(dx4,dy4,0,bx15,by15,0,cx15,cy15,0);
			var m19 = trilateral2_Shaper.transformMatrix;
			if(m19 != null) {
				drawType1.transform(m19);
			}
			drawType1.next();
		}
		angle7 += step15;
		bx15 = cx15;
		by15 = cy15;
	}
	var len1 = count1 += totalSteps7;
	var color1 = rs.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var se1 = new trilateral2_IndexRange(start1,end1);
	var this66 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this67 = this66;
	var theta32 = Math.PI;
	var c = Math.cos(theta32);
	var s = Math.sin(theta32);
	var this68 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this68;
	var this69 = new geom_structure_Mat4x3(this67.a * s1.a + this67.b * s1.e + this67.c * s1.i,this67.a * s1.b + this67.b * s1.f + this67.c * s1.j,this67.a * s1.c + this67.b * s1.g + this67.c * s1.k,this67.a * s1.d + this67.b * s1.h + this67.c * s1.l + this67.d,this67.e * s1.a + this67.f * s1.e + this67.g * s1.i,this67.e * s1.b + this67.f * s1.f + this67.g * s1.j,this67.e * s1.c + this67.f * s1.g + this67.g * s1.k,this67.e * s1.d + this67.f * s1.h + this67.g * s1.l + this67.h,this67.i * s1.a + this67.j * s1.e + this67.k * s1.i,this67.i * s1.b + this67.j * s1.f + this67.k * s1.j,this67.i * s1.c + this67.j * s1.g + this67.k * s1.k,this67.i * s1.d + this67.j * s1.h + this67.k * s1.l + this67.l);
	var r = this69;
	var this70 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this71 = this70;
	var this72 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this72;
	var this73 = new geom_structure_Mat4x3(this71.a * s2.a + this71.b * s2.e + this71.c * s2.i,this71.a * s2.b + this71.b * s2.f + this71.c * s2.j,this71.a * s2.c + this71.b * s2.g + this71.c * s2.k,this71.a * s2.d + this71.b * s2.h + this71.c * s2.l + this71.d,this71.e * s2.a + this71.f * s2.e + this71.g * s2.i,this71.e * s2.b + this71.f * s2.f + this71.g * s2.j,this71.e * s2.c + this71.f * s2.g + this71.g * s2.k,this71.e * s2.d + this71.f * s2.h + this71.g * s2.l + this71.h,this71.i * s2.a + this71.j * s2.e + this71.k * s2.i,this71.i * s2.b + this71.j * s2.f + this71.k * s2.j,this71.i * s2.c + this71.j * s2.g + this71.k * s2.k,this71.i * s2.d + this71.j * s2.h + this71.k * s2.l + this71.l);
	var s3 = this73;
	var this74 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this74,se1.start,se1.end);
	return new trilateral2_IndexRange(se0.start,se1.end);
};
trilateral2__$Regular_Regular_$Impl_$.star = function(this1,rs) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var px = rs.x - rs.radius;
	var py = rs.y - rs.radius;
	var radius = rs.radius * 2;
	var theta = rs.radius * 2;
	if(theta == null) {
		theta = 0;
	}
	var pi = Math.PI;
	var omega = -pi + theta;
	var a0x = px + radius * Math.sin(omega);
	var a0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var a1x = px + radius * Math.sin(omega);
	var a1y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var b0x = px + radius * Math.sin(omega);
	var b0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var b1x = px + radius * Math.sin(omega);
	var b1y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var c0x = px + radius * Math.sin(omega);
	var c0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var c1x = px + radius * Math.sin(omega);
	var c1y = py + radius * Math.cos(omega);
	drawType.triangle(a0x,a0y,0,b0x,b0y,0,c0x,c0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(a1x,a1y,0,b1x,b1y,0,c1x,c1y,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	var len = 2;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	return new trilateral2_IndexRange(start,end);
};
trilateral2__$Regular_Regular_$Impl_$.star2 = function(this1,rs) {
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var px = rs.x - rs.radius;
	var py = rs.y - rs.radius;
	var radius = rs.radius * 2;
	var theta = rs.radius * 2;
	if(theta == null) {
		theta = 0;
	}
	var pi = Math.PI;
	var omega = -pi + theta;
	var a0x = px + radius * Math.sin(omega);
	var a0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var a1x = px + radius * Math.sin(omega);
	var a1y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var b0x = px + radius * Math.sin(omega);
	var b0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var b1x = px + radius * Math.sin(omega);
	var b1y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var c0x = px + radius * Math.sin(omega);
	var c0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var c1x = px + radius * Math.sin(omega);
	var c1y = py + radius * Math.cos(omega);
	drawType.triangle(a0x,a0y,0,b0x,b0y,0,c0x,c0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(a1x,a1y,0,b1x,b1y,0,c1x,c1y,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	var len = 2;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var se0 = new trilateral2_IndexRange(start,end);
	var start1 = this1.drawType.get_size();
	var drawType1 = this1.drawType;
	var px1 = rs.x - rs.radius;
	var py1 = rs.y - rs.radius;
	var radius1 = rs.radius * 2;
	var theta1 = rs.radius * 2;
	if(theta1 == null) {
		theta1 = 0;
	}
	var pi1 = Math.PI;
	var omega1 = -pi1 + theta1;
	var a0x1 = px1 + radius1 * Math.sin(omega1);
	var a0y1 = py1 + radius1 * Math.cos(omega1);
	omega1 += pi1 / 3;
	var a1x1 = px1 + radius1 * Math.sin(omega1);
	var a1y1 = py1 + radius1 * Math.cos(omega1);
	omega1 += pi1 / 3;
	var b0x1 = px1 + radius1 * Math.sin(omega1);
	var b0y1 = py1 + radius1 * Math.cos(omega1);
	omega1 += pi1 / 3;
	var b1x1 = px1 + radius1 * Math.sin(omega1);
	var b1y1 = py1 + radius1 * Math.cos(omega1);
	omega1 += pi1 / 3;
	var c0x1 = px1 + radius1 * Math.sin(omega1);
	var c0y1 = py1 + radius1 * Math.cos(omega1);
	omega1 += pi1 / 3;
	var c1x1 = px1 + radius1 * Math.sin(omega1);
	var c1y1 = py1 + radius1 * Math.cos(omega1);
	drawType1.triangle(a0x1,a0y1,0,b0x1,b0y1,0,c0x1,c0y1,0);
	var m2 = trilateral2_Shaper.transformMatrix;
	if(m2 != null) {
		drawType1.transform(m2);
	}
	drawType1.next();
	drawType1.triangle(a1x1,a1y1,0,b1x1,b1y1,0,c1x1,c1y1,0);
	var m3 = trilateral2_Shaper.transformMatrix;
	if(m3 != null) {
		drawType1.transform(m3);
	}
	drawType1.next();
	var len1 = 2;
	var color1 = rs.color;
	if(color1 == -1) {
		color1 = this1.currentColor;
	}
	this1.colorType.colorTriangles(color1,len1);
	var end1 = start1 + len1 - 1;
	var se1 = new trilateral2_IndexRange(start1,end1);
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta2 = Math.PI;
	var c = Math.cos(theta2);
	var s = Math.sin(theta2);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,se1.start,se1.end);
	return new trilateral2_IndexRange(se0.start,se1.end);
};
trilateral2__$Regular_Regular_$Impl_$.transformRange = function(this1,trans,ir) {
	this1.drawType.transformRange(trans,ir.start,ir.end);
};
trilateral2__$Regular_Regular_$Impl_$.up = function(this1,ir) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,this1.dz / 2);
	var s = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
	var trans = this5;
	this1.drawType.transformRange(trans,ir.start,ir.end);
};
trilateral2__$Regular_Regular_$Impl_$.down = function(this1,ir) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this1.dz / 2);
	var s = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
	var trans = this5;
	this1.drawType.transformRange(trans,ir.start,ir.end);
};
trilateral2__$Regular_Regular_$Impl_$.back = function(this1,ir) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta = Math.PI;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	this1.drawType.transformRange(this10,ir.start,ir.end);
};
trilateral2__$Regular_Regular_$Impl_$.transBack = function(this1) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var theta = Math.PI;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this4 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s1 = this4;
	var this5 = new geom_structure_Mat4x3(this3.a * s1.a + this3.b * s1.e + this3.c * s1.i,this3.a * s1.b + this3.b * s1.f + this3.c * s1.j,this3.a * s1.c + this3.b * s1.g + this3.c * s1.k,this3.a * s1.d + this3.b * s1.h + this3.c * s1.l + this3.d,this3.e * s1.a + this3.f * s1.e + this3.g * s1.i,this3.e * s1.b + this3.f * s1.f + this3.g * s1.j,this3.e * s1.c + this3.f * s1.g + this3.g * s1.k,this3.e * s1.d + this3.f * s1.h + this3.g * s1.l + this3.h,this3.i * s1.a + this3.j * s1.e + this3.k * s1.i,this3.i * s1.b + this3.j * s1.f + this3.k * s1.j,this3.i * s1.c + this3.j * s1.g + this3.k * s1.k,this3.i * s1.d + this3.j * s1.h + this3.k * s1.l + this3.l);
	var r = this5;
	var this6 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this7 = this6;
	var this8 = new geom_structure_Mat4x3(1.,0.,0.,this1.dz,0.,1.,0.,0.,0.,0.,1.,0.);
	var s2 = this8;
	var this9 = new geom_structure_Mat4x3(this7.a * s2.a + this7.b * s2.e + this7.c * s2.i,this7.a * s2.b + this7.b * s2.f + this7.c * s2.j,this7.a * s2.c + this7.b * s2.g + this7.c * s2.k,this7.a * s2.d + this7.b * s2.h + this7.c * s2.l + this7.d,this7.e * s2.a + this7.f * s2.e + this7.g * s2.i,this7.e * s2.b + this7.f * s2.f + this7.g * s2.j,this7.e * s2.c + this7.f * s2.g + this7.g * s2.k,this7.e * s2.d + this7.f * s2.h + this7.g * s2.l + this7.h,this7.i * s2.a + this7.j * s2.e + this7.k * s2.i,this7.i * s2.b + this7.j * s2.f + this7.k * s2.j,this7.i * s2.c + this7.j * s2.g + this7.k * s2.k,this7.i * s2.d + this7.j * s2.h + this7.k * s2.l + this7.l);
	var s3 = this9;
	var this10 = new geom_structure_Mat4x3(r.a * s3.a + r.b * s3.e + r.c * s3.i,r.a * s3.b + r.b * s3.f + r.c * s3.j,r.a * s3.c + r.b * s3.g + r.c * s3.k,r.a * s3.d + r.b * s3.h + r.c * s3.l + r.d,r.e * s3.a + r.f * s3.e + r.g * s3.i,r.e * s3.b + r.f * s3.f + r.g * s3.j,r.e * s3.c + r.f * s3.g + r.g * s3.k,r.e * s3.d + r.f * s3.h + r.g * s3.l + r.h,r.i * s3.a + r.j * s3.e + r.k * s3.i,r.i * s3.b + r.j * s3.f + r.k * s3.j,r.i * s3.c + r.j * s3.g + r.k * s3.k,r.i * s3.d + r.j * s3.h + r.k * s3.l + r.l);
	return this10;
};
trilateral2__$Regular_Regular_$Impl_$.polygon = function(this1,rs,sides) {
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var ax = rs.x;
	var ay = rs.y;
	var radius = rs.radius;
	var sides1 = sides;
	if(sides1 == null) {
		sides1 = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides1;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides1;
	var color = rs.color;
	if(color == -1) {
		color = this1.currentColor;
	}
	this1.colorType.colorTriangles(color,len);
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
trilateral2__$Regular_Regular_$Impl_$.polygonRadial = function(this1,rs,colorCentre,rx,ry,sides) {
	if(sides == null) {
		sides = 36;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = rs.x;
	var y = rs.y;
	var radius = rs.radius;
	var len;
	if((sides & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx1 = rx;
		var ry1 = ry;
		var sides1 = sides;
		var omega = 0.;
		if(omega == null) {
			omega = 0.;
		}
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2 + omega;
		var step = pi * 2 / sides1;
		var bx;
		var by;
		var cx;
		var cy;
		if(rx1 > 1.) {
			rx1 = 1;
		}
		if(rx1 < -1.) {
			rx1 = -1;
		}
		if(ry1 > 1.) {
			ry1 = 1;
		}
		if(ry1 < -1.) {
			ry1 = -1;
		}
		var mx = x + rx1 * radius;
		var my = y - ry1 * radius;
		var _g = 0;
		var _g1 = sides1;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = sides1;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx2 = rx;
		var ry2 = ry;
		var sides2 = sides;
		var omega1 = 0.;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides2 == null) {
			sides2 = 36;
		}
		var pi1 = Math.PI;
		var theta1 = pi1 / 2;
		var step1 = pi1 * 2 / sides2;
		theta1 -= step1 / 2 + omega1;
		var bx1 = 0;
		var by1 = 0;
		var cx1 = 0;
		var cy1 = 0;
		if(rx2 > 1.) {
			rx2 = 1;
		}
		if(rx2 < -1.) {
			rx2 = -1;
		}
		if(ry2 > 1.) {
			ry2 = 1;
		}
		if(ry2 < -1.) {
			ry2 = -1;
		}
		var mx1 = x + rx2 * radius;
		var my1 = y - ry2 * radius;
		var dx = x + radius * Math.sin(theta1);
		var dy = y + radius * Math.cos(theta1);
		var _g2 = 0;
		var _g11 = sides2 - 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			bx1 = x + radius * Math.sin(theta1);
			by1 = y + radius * Math.cos(theta1);
			theta1 += step1;
			cx1 = x + radius * Math.sin(theta1);
			cy1 = y + radius * Math.cos(theta1);
			drawType.triangle(mx1,my1,0,bx1,by1,0,cx1,cy1,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		drawType.triangle(mx1,my1,0,cx1,cy1,0,dx,dy,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		len = sides2;
	}
	var colorCentre1 = rs.color;
	var _g3 = 0;
	var _g12 = len;
	while(_g3 < _g12) {
		var i2 = _g3++;
		this1.colorType.cornerColors(colorCentre1,colorCentre,colorCentre);
	}
	var end = start + len - 1;
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
trilateral2__$Regular_Regular_$Impl_$.circleMultiCorners = function(this1,rs,arr,rx,ry) {
	if(ry == null) {
		ry = 0;
	}
	if(rx == null) {
		rx = 0;
	}
	var rx1 = rx;
	var ry1 = ry;
	if(ry1 == null) {
		ry1 = 0;
	}
	if(rx1 == null) {
		rx1 = 0;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = rs.x;
	var y = rs.y;
	var radius = rs.radius;
	haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
	var rx2 = rx1;
	var ry2 = ry1;
	var sides = 36;
	var omega = 0.;
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2 + omega;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	if(rx2 > 1.) {
		rx2 = 1;
	}
	if(rx2 < -1.) {
		rx2 = -1;
	}
	if(ry2 > 1.) {
		ry2 = 1;
	}
	if(ry2 < -1.) {
		ry2 = -1;
	}
	var mx = x + rx2 * radius;
	var my = y - ry2 * radius;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = x + radius * Math.sin(theta);
		by = y + radius * Math.cos(theta);
		theta += step;
		cx = x + radius * Math.sin(theta);
		cy = y + radius * Math.cos(theta);
		drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	var len = sides;
	var k = 1;
	var arrEnd = arr.length - 1;
	var end = start + len - 1;
	var arr_ = arr.slice();
	var _g2 = 0;
	var _g11 = len - 1;
	while(_g2 < _g11) {
		var j = _g2++;
		this1.colorType.cornerColors(rs.color,arr_[k - 1],arr_[k]);
		++k;
		if(k > arrEnd) {
			k = 1;
			arr_.reverse();
		}
	}
	this1.colorType.cornerColors(rs.color,arr_[k - 1],arr[0]);
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
trilateral2__$Regular_Regular_$Impl_$.polygonMultiCorners = function(this1,rs,arr,rx,ry,sides) {
	if(sides == null) {
		sides = 36;
	}
	if(ry == null) {
		ry = 0;
	}
	if(rx == null) {
		rx = 0;
	}
	var start = this1.drawType.get_size();
	var drawType = this1.drawType;
	var x = rs.x;
	var y = rs.y;
	var radius = rs.radius;
	var len;
	if((sides & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx1 = rx;
		var ry1 = ry;
		var sides1 = sides;
		var omega = 0.;
		if(omega == null) {
			omega = 0.;
		}
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2 + omega;
		var step = pi * 2 / sides1;
		var bx;
		var by;
		var cx;
		var cy;
		if(rx1 > 1.) {
			rx1 = 1;
		}
		if(rx1 < -1.) {
			rx1 = -1;
		}
		if(ry1 > 1.) {
			ry1 = 1;
		}
		if(ry1 < -1.) {
			ry1 = -1;
		}
		var mx = x + rx1 * radius;
		var my = y - ry1 * radius;
		var _g = 0;
		var _g1 = sides1;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = sides1;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(sides & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx2 = rx;
		var ry2 = ry;
		var sides2 = sides;
		var omega1 = 0.;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides2 == null) {
			sides2 = 36;
		}
		var pi1 = Math.PI;
		var theta1 = pi1 / 2;
		var step1 = pi1 * 2 / sides2;
		theta1 -= step1 / 2 + omega1;
		var bx1 = 0;
		var by1 = 0;
		var cx1 = 0;
		var cy1 = 0;
		if(rx2 > 1.) {
			rx2 = 1;
		}
		if(rx2 < -1.) {
			rx2 = -1;
		}
		if(ry2 > 1.) {
			ry2 = 1;
		}
		if(ry2 < -1.) {
			ry2 = -1;
		}
		var mx1 = x + rx2 * radius;
		var my1 = y - ry2 * radius;
		var dx = x + radius * Math.sin(theta1);
		var dy = y + radius * Math.cos(theta1);
		var _g2 = 0;
		var _g11 = sides2 - 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			bx1 = x + radius * Math.sin(theta1);
			by1 = y + radius * Math.cos(theta1);
			theta1 += step1;
			cx1 = x + radius * Math.sin(theta1);
			cy1 = y + radius * Math.cos(theta1);
			drawType.triangle(mx1,my1,0,bx1,by1,0,cx1,cy1,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		drawType.triangle(mx1,my1,0,cx1,cy1,0,dx,dy,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		len = sides2;
	}
	var k = 1;
	var arrEnd = arr.length - 1;
	var end = start + len - 1;
	var arr_ = arr.slice();
	var _g3 = 0;
	var _g12 = len - 1;
	while(_g3 < _g12) {
		var j = _g3++;
		this1.colorType.cornerColors(rs.color,arr_[k - 1],arr_[k]);
		++k;
		if(k > arrEnd) {
			k = 1;
			arr_.reverse();
		}
	}
	this1.colorType.cornerColors(rs.color,arr_[k - 1],arr[0]);
	var startEnd = new trilateral2_IndexRange(start,end);
	return startEnd;
};
var trilateral2_RegularShape = function(x,y,radius,color) {
	this.x = x;
	this.y = y;
	this.radius = radius;
	this.color = color;
};
$hxClasses["trilateral2.RegularShape"] = trilateral2_RegularShape;
trilateral2_RegularShape.__name__ = "trilateral2.RegularShape";
trilateral2_RegularShape.prototype = {
	clone: function() {
		return new trilateral2_RegularShape(this.x,this.y,this.radius,this.color);
	}
	,__class__: trilateral2_RegularShape
};
var trilateral2_Shaper = function() { };
$hxClasses["trilateral2.Shaper"] = trilateral2_Shaper;
trilateral2_Shaper.__name__ = "trilateral2.Shaper";
trilateral2_Shaper.add2DTriangle = function(drawType,ax,ay,bx,by,cx,cy) {
	drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 1;
};
trilateral2_Shaper.add2DQuad = function(drawType,ax,ay,bx,by,cx,cy,dx,dy) {
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.quad = function(drawType,q) {
	var bx = q.B.x;
	var by = q.B.y;
	var cx = q.C.x;
	var cy = q.C.y;
	var dx = q.D.x;
	var dy = q.D.y;
	drawType.triangle(q.A.x,q.A.y,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.lineAB = function(drawType,A,B,width) {
	var dx = A.x - B.x;
	var dy = A.y - B.y;
	var P = new geom_structure_Mat1x2(A.x - width / 2,A.y);
	var omega = Math.atan2(dy,dx);
	var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
	var pivotX = A.x + width / 2;
	var pivotY = A.y;
	var px = P.x;
	var py = P.y;
	var dx1 = dim.x;
	var dy1 = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx1,py);
	var C_ = new geom_structure_Mat1x2(px + dx1,py + dy1);
	var D_ = new geom_structure_Mat1x2(px,py + dy1);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px1 = A_.x - pivotX;
		var py1 = A_.y - pivotY;
		var px2 = px1 * cos - py1 * sin;
		py1 = py1 * cos + px1 * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py1 + pivotY);
		var px3 = B_.x - pivotX;
		var py2 = B_.y - pivotY;
		var px21 = px3 * cos - py2 * sin;
		py2 = py2 * cos + px3 * sin;
		B_ = new geom_structure_Mat1x2(px21 + pivotX,py2 + pivotY);
		var px4 = C_.x - pivotX;
		var py3 = C_.y - pivotY;
		var px22 = px4 * cos - py3 * sin;
		py3 = py3 * cos + px4 * sin;
		C_ = new geom_structure_Mat1x2(px22 + pivotX,py3 + pivotY);
		var px5 = D_.x - pivotX;
		var py4 = D_.y - pivotY;
		var px23 = px5 * cos - py4 * sin;
		py4 = py4 * cos + px5 * sin;
		D_ = new geom_structure_Mat1x2(px23 + pivotX,py4 + pivotY);
	}
	var q = new geom_obj_Quad2D(A_,B_,C_,D_);
	var bx = q.B.x;
	var by = q.B.y;
	var cx = q.C.x;
	var cy = q.C.y;
	var dx2 = q.D.x;
	var dy2 = q.D.y;
	drawType.triangle(q.A.x,q.A.y,0,bx,by,0,dx2,dy2,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx2,dy2,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.lineXY = function(drawType,ax,ay,bx,by,width) {
	var dx = ax - bx;
	var dy = ay - by;
	var P = new geom_structure_Mat1x2(ax - width / 2,ay);
	var omega = Math.atan2(dy,dx);
	var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
	var pivotX = ax + width / 2;
	var px = P.x;
	var py = P.y;
	var dx1 = dim.x;
	var dy1 = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx1,py);
	var C_ = new geom_structure_Mat1x2(px + dx1,py + dy1);
	var D_ = new geom_structure_Mat1x2(px,py + dy1);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px1 = A_.x - pivotX;
		var py1 = A_.y - ay;
		var px2 = px1 * cos - py1 * sin;
		py1 = py1 * cos + px1 * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py1 + ay);
		var px3 = B_.x - pivotX;
		var py2 = B_.y - ay;
		var px21 = px3 * cos - py2 * sin;
		py2 = py2 * cos + px3 * sin;
		B_ = new geom_structure_Mat1x2(px21 + pivotX,py2 + ay);
		var px4 = C_.x - pivotX;
		var py3 = C_.y - ay;
		var px22 = px4 * cos - py3 * sin;
		py3 = py3 * cos + px4 * sin;
		C_ = new geom_structure_Mat1x2(px22 + pivotX,py3 + ay);
		var px5 = D_.x - pivotX;
		var py4 = D_.y - ay;
		var px23 = px5 * cos - py4 * sin;
		py4 = py4 * cos + px5 * sin;
		D_ = new geom_structure_Mat1x2(px23 + pivotX,py4 + ay);
	}
	var q = new geom_obj_Quad2D(A_,B_,C_,D_);
	var bx1 = q.B.x;
	var by1 = q.B.y;
	var cx = q.C.x;
	var cy = q.C.y;
	var dx2 = q.D.x;
	var dy2 = q.D.y;
	drawType.triangle(q.A.x,q.A.y,0,bx1,by1,0,dx2,dy2,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx,cy,0,dx2,dy2,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.rectangle = function(drawType,x,y,w,h) {
	var ax = x;
	var ay = y;
	var bx = x + w;
	var by = ay;
	var cx = bx;
	var cy = ay + h;
	var dx = x;
	var dy = cy;
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.squareOutline = function(drawType,px,py,radius,thick,theta) {
	if(theta == null) {
		theta = 0;
	}
	var ax = 0.;
	var ay = 0.;
	var bx = 0.;
	var by = 0.;
	var cx = 0.;
	var cy = 0.;
	var dx = 0.;
	var dy = 0.;
	var a0x = 0.;
	var a0y = 0.;
	var b0x = 0.;
	var b0y = 0.;
	var c0x = 0.;
	var c0y = 0.;
	var d0x = 0.;
	var d0y = 0.;
	if(theta != 0) {
		var pi = Math.PI;
		var pi4 = pi / 4;
		var pi2 = pi / 2;
		var sqrt2 = Math.sqrt(2);
		var r = radius * sqrt2;
		var aTheta = -pi + theta - pi4;
		var dTheta = -pi + theta + pi / 2 - pi / 4;
		var cTheta = theta - pi4;
		var bTheta = -pi + theta - pi2 - pi4;
		var as = Math.sin(aTheta);
		var ac = Math.cos(aTheta);
		var bs = Math.sin(bTheta);
		var bc = Math.cos(bTheta);
		var cs = Math.sin(cTheta);
		var cc = Math.cos(cTheta);
		var ds = Math.sin(dTheta);
		var dc = Math.cos(dTheta);
		var r0 = r - thick;
		ax = px + r * as;
		ay = py + r * ac;
		bx = px + r * bs;
		by = py + r * bc;
		cx = px + r * cs;
		cy = py + r * cc;
		dx = px + r * ds;
		dy = py + r * dc;
		a0x = px + r0 * as;
		a0y = py + r0 * ac;
		b0x = px + r0 * bs;
		b0y = py + r0 * bc;
		c0x = px + r0 * cs;
		c0y = py + r0 * cc;
		d0x = px + r0 * ds;
		d0y = py + r0 * dc;
	} else {
		ax = px - radius;
		ay = py - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
		var radius0 = radius - thick;
		a0x = px - radius0;
		a0y = py - radius0;
		var l0x = radius0 * 2;
		var l0y = l0x;
		b0x = a0x + l0x;
		b0y = a0y;
		c0x = b0x;
		c0y = a0y + l0y;
		d0x = a0x;
		d0y = c0y;
	}
	drawType.triangle(ax,ay,0,bx,by,0,a0x,a0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,b0x,b0y,0,a0x,a0y,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	drawType.triangle(d0x,d0y,0,c0x,c0y,0,dx,dy,0);
	var m2 = trilateral2_Shaper.transformMatrix;
	if(m2 != null) {
		drawType.transform(m2);
	}
	drawType.next();
	drawType.triangle(c0x,c0y,0,cx,cy,0,dx,dy,0);
	var m3 = trilateral2_Shaper.transformMatrix;
	if(m3 != null) {
		drawType.transform(m3);
	}
	drawType.next();
	drawType.triangle(ax,ay,0,a0x,a0y,0,d0x,d0y,0);
	var m4 = trilateral2_Shaper.transformMatrix;
	if(m4 != null) {
		drawType.transform(m4);
	}
	drawType.next();
	drawType.triangle(ax,ay,0,d0x,d0y,0,dx,dy,0);
	var m5 = trilateral2_Shaper.transformMatrix;
	if(m5 != null) {
		drawType.transform(m5);
	}
	drawType.next();
	drawType.triangle(b0x,b0y,0,bx,by,0,c0x,c0y,0);
	var m6 = trilateral2_Shaper.transformMatrix;
	if(m6 != null) {
		drawType.transform(m6);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,c0x,c0y,0);
	var m7 = trilateral2_Shaper.transformMatrix;
	if(m7 != null) {
		drawType.transform(m7);
	}
	drawType.next();
	return 8;
};
trilateral2_Shaper.square = function(drawType,px,py,radius,theta) {
	if(theta == null) {
		theta = 0;
	}
	var ax = 0.;
	var ay = 0.;
	var bx = 0.;
	var by = 0.;
	var cx = 0.;
	var cy = 0.;
	var dx = 0.;
	var dy = 0.;
	if(theta != 0) {
		var pi = Math.PI;
		var pi4 = pi / 4;
		var pi2 = pi / 2;
		var sqrt2 = Math.sqrt(2);
		var r = radius * sqrt2;
		var aTheta = -pi + theta - pi4;
		var dTheta = -pi + theta + pi / 2 - pi / 4;
		var cTheta = theta - pi4;
		var bTheta = -pi + theta - pi2 - pi4;
		ax = px + r * Math.sin(aTheta);
		ay = py + r * Math.cos(aTheta);
		bx = px + r * Math.sin(bTheta);
		by = py + r * Math.cos(bTheta);
		cx = px + r * Math.sin(cTheta);
		cy = py + r * Math.cos(cTheta);
		dx = px + r * Math.sin(dTheta);
		dy = py + r * Math.cos(dTheta);
	} else {
		ax = px - radius;
		ay = py - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
	}
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.diamond = function(drawType,x,y,radius,theta) {
	if(theta == null) {
		theta = 0.;
	}
	var theta1 = Math.PI / 4 + theta;
	if(theta1 == null) {
		theta1 = 0;
	}
	var ax = 0.;
	var ay = 0.;
	var bx = 0.;
	var by = 0.;
	var cx = 0.;
	var cy = 0.;
	var dx = 0.;
	var dy = 0.;
	if(theta1 != 0) {
		var pi = Math.PI;
		var pi4 = pi / 4;
		var pi2 = pi / 2;
		var sqrt2 = Math.sqrt(2);
		var r = radius * sqrt2;
		var aTheta = -pi + theta1 - pi4;
		var dTheta = -pi + theta1 + pi / 2 - pi / 4;
		var cTheta = theta1 - pi4;
		var bTheta = -pi + theta1 - pi2 - pi4;
		ax = x + r * Math.sin(aTheta);
		ay = y + r * Math.cos(aTheta);
		bx = x + r * Math.sin(bTheta);
		by = y + r * Math.cos(bTheta);
		cx = x + r * Math.sin(cTheta);
		cy = y + r * Math.cos(cTheta);
		dx = x + r * Math.sin(dTheta);
		dy = y + r * Math.cos(dTheta);
	} else {
		ax = x - radius;
		ay = y - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
	}
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.diamondOutline = function(drawType,x,y,thick,radius,theta) {
	if(theta == null) {
		theta = 0.;
	}
	var theta1 = Math.PI / 4 + theta;
	if(theta1 == null) {
		theta1 = 0;
	}
	var ax = 0.;
	var ay = 0.;
	var bx = 0.;
	var by = 0.;
	var cx = 0.;
	var cy = 0.;
	var dx = 0.;
	var dy = 0.;
	var a0x = 0.;
	var a0y = 0.;
	var b0x = 0.;
	var b0y = 0.;
	var c0x = 0.;
	var c0y = 0.;
	var d0x = 0.;
	var d0y = 0.;
	if(theta1 != 0) {
		var pi = Math.PI;
		var pi4 = pi / 4;
		var pi2 = pi / 2;
		var sqrt2 = Math.sqrt(2);
		var r = radius * sqrt2;
		var aTheta = -pi + theta1 - pi4;
		var dTheta = -pi + theta1 + pi / 2 - pi / 4;
		var cTheta = theta1 - pi4;
		var bTheta = -pi + theta1 - pi2 - pi4;
		var as = Math.sin(aTheta);
		var ac = Math.cos(aTheta);
		var bs = Math.sin(bTheta);
		var bc = Math.cos(bTheta);
		var cs = Math.sin(cTheta);
		var cc = Math.cos(cTheta);
		var ds = Math.sin(dTheta);
		var dc = Math.cos(dTheta);
		var r0 = r - thick;
		ax = x + r * as;
		ay = y + r * ac;
		bx = x + r * bs;
		by = y + r * bc;
		cx = x + r * cs;
		cy = y + r * cc;
		dx = x + r * ds;
		dy = y + r * dc;
		a0x = x + r0 * as;
		a0y = y + r0 * ac;
		b0x = x + r0 * bs;
		b0y = y + r0 * bc;
		c0x = x + r0 * cs;
		c0y = y + r0 * cc;
		d0x = x + r0 * ds;
		d0y = y + r0 * dc;
	} else {
		ax = x - radius;
		ay = y - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
		var radius0 = radius - thick;
		a0x = x - radius0;
		a0y = y - radius0;
		var l0x = radius0 * 2;
		var l0y = l0x;
		b0x = a0x + l0x;
		b0y = a0y;
		c0x = b0x;
		c0y = a0y + l0y;
		d0x = a0x;
		d0y = c0y;
	}
	drawType.triangle(ax,ay,0,bx,by,0,a0x,a0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,b0x,b0y,0,a0x,a0y,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	drawType.triangle(d0x,d0y,0,c0x,c0y,0,dx,dy,0);
	var m2 = trilateral2_Shaper.transformMatrix;
	if(m2 != null) {
		drawType.transform(m2);
	}
	drawType.next();
	drawType.triangle(c0x,c0y,0,cx,cy,0,dx,dy,0);
	var m3 = trilateral2_Shaper.transformMatrix;
	if(m3 != null) {
		drawType.transform(m3);
	}
	drawType.next();
	drawType.triangle(ax,ay,0,a0x,a0y,0,d0x,d0y,0);
	var m4 = trilateral2_Shaper.transformMatrix;
	if(m4 != null) {
		drawType.transform(m4);
	}
	drawType.next();
	drawType.triangle(ax,ay,0,d0x,d0y,0,dx,dy,0);
	var m5 = trilateral2_Shaper.transformMatrix;
	if(m5 != null) {
		drawType.transform(m5);
	}
	drawType.next();
	drawType.triangle(b0x,b0y,0,bx,by,0,c0x,c0y,0);
	var m6 = trilateral2_Shaper.transformMatrix;
	if(m6 != null) {
		drawType.transform(m6);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,c0x,c0y,0);
	var m7 = trilateral2_Shaper.transformMatrix;
	if(m7 != null) {
		drawType.transform(m7);
	}
	drawType.next();
	return 8;
};
trilateral2_Shaper.overlapStar = function(drawType,px,py,radius,theta) {
	if(theta == null) {
		theta = 0;
	}
	var pi = Math.PI;
	var omega = -pi + theta;
	var a0x = px + radius * Math.sin(omega);
	var a0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var a1x = px + radius * Math.sin(omega);
	var a1y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var b0x = px + radius * Math.sin(omega);
	var b0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var b1x = px + radius * Math.sin(omega);
	var b1y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var c0x = px + radius * Math.sin(omega);
	var c0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var c1x = px + radius * Math.sin(omega);
	var c1y = py + radius * Math.cos(omega);
	drawType.triangle(a0x,a0y,0,b0x,b0y,0,c0x,c0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(a1x,a1y,0,b1x,b1y,0,c1x,c1y,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.circle = function(drawType,ax,ay,radius,sides,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2 + omega;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.circleRadial = function(drawType,ax,ay,rx,ry,radius,sides,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2 + omega;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	if(rx > 1.) {
		rx = 1;
	}
	if(rx < -1.) {
		rx = -1;
	}
	if(ry > 1.) {
		ry = 1;
	}
	if(ry < -1.) {
		ry = -1;
	}
	var mx = ax + rx * radius;
	var my = ay - ry * radius;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.circleRadialOnSide = function(drawType,ax,ay,rx,ry,radius,sides,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	theta -= step / 2 + omega;
	var bx = 0;
	var by = 0;
	var cx = 0;
	var cy = 0;
	if(rx > 1.) {
		rx = 1;
	}
	if(rx < -1.) {
		rx = -1;
	}
	if(ry > 1.) {
		ry = 1;
	}
	if(ry < -1.) {
		ry = -1;
	}
	var mx = ax + rx * radius;
	var my = ay - ry * radius;
	var dx = ax + radius * Math.sin(theta);
	var dy = ay + radius * Math.cos(theta);
	var _g = 0;
	var _g1 = sides - 1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	drawType.triangle(mx,my,0,cx,cy,0,dx,dy,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	return sides;
};
trilateral2_Shaper.ellipse = function(drawType,ax,ay,rx,ry,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + rx * Math.sin(theta);
		by = ay + ry * Math.cos(theta);
		theta += step;
		cx = ax + rx * Math.sin(theta);
		cy = ay + ry * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.pie = function(drawType,ax,ay,radius,beta,gamma,prefer,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var dif;
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f1;
		if(gamma >= 0 && gamma > Math.PI) {
			f1 = gamma;
		} else {
			var a1 = gamma % (2 * Math.PI);
			f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this2 = f1;
		var zb = this2;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f2;
		if(beta >= 0 && beta > Math.PI) {
			f2 = beta;
		} else {
			var a2 = beta % (2 * Math.PI);
			f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
		}
		var this3 = f2;
		var za1 = this3;
		var f3;
		if(gamma >= 0 && gamma > Math.PI) {
			f3 = gamma;
		} else {
			var a3 = gamma % (2 * Math.PI);
			f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
		}
		var this4 = f3;
		var zb1 = this4;
		var fa1 = za1;
		var fb1 = zb1;
		var theta1 = Math.abs(fa1 - fb1);
		var clockwise1 = fa1 < fb1;
		var dif2 = clockwise1 ? theta1 : -theta1;
		dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
		break;
	case 2:
		var f4;
		if(beta >= 0 && beta > Math.PI) {
			f4 = beta;
		} else {
			var a4 = beta % (2 * Math.PI);
			f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
		}
		var this5 = f4;
		var za2 = this5;
		var f5;
		if(gamma >= 0 && gamma > Math.PI) {
			f5 = gamma;
		} else {
			var a5 = gamma % (2 * Math.PI);
			f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
		}
		var this6 = f5;
		var zb2 = this6;
		var fa2 = za2;
		var fb2 = zb2;
		var theta2 = Math.abs(fa2 - fb2);
		var smallest = theta2 <= Math.PI;
		var clockwise2 = fa2 < fb2;
		var dif3 = clockwise2 ? theta2 : -theta2;
		dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
		break;
	case 3:
		var f6;
		if(beta >= 0 && beta > Math.PI) {
			f6 = beta;
		} else {
			var a6 = beta % (2 * Math.PI);
			f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
		}
		var this7 = f6;
		var za3 = this7;
		var f7;
		if(gamma >= 0 && gamma > Math.PI) {
			f7 = gamma;
		} else {
			var a7 = gamma % (2 * Math.PI);
			f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
		}
		var this8 = f7;
		var zb3 = this8;
		var fa3 = za3;
		var fb3 = zb3;
		var theta3 = Math.abs(fa3 - fb3);
		var largest = theta3 > Math.PI;
		var clockwise3 = fa3 < fb3;
		var dif4 = clockwise3 ? theta3 : -theta3;
		dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step1;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.pieX = function(drawType,ax,ay,radius,beta,gamma,prefer,edgePoly,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var dif;
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f1;
		if(gamma >= 0 && gamma > Math.PI) {
			f1 = gamma;
		} else {
			var a1 = gamma % (2 * Math.PI);
			f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this2 = f1;
		var zb = this2;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f2;
		if(beta >= 0 && beta > Math.PI) {
			f2 = beta;
		} else {
			var a2 = beta % (2 * Math.PI);
			f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
		}
		var this3 = f2;
		var za1 = this3;
		var f3;
		if(gamma >= 0 && gamma > Math.PI) {
			f3 = gamma;
		} else {
			var a3 = gamma % (2 * Math.PI);
			f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
		}
		var this4 = f3;
		var zb1 = this4;
		var fa1 = za1;
		var fb1 = zb1;
		var theta1 = Math.abs(fa1 - fb1);
		var clockwise1 = fa1 < fb1;
		var dif2 = clockwise1 ? theta1 : -theta1;
		dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
		break;
	case 2:
		var f4;
		if(beta >= 0 && beta > Math.PI) {
			f4 = beta;
		} else {
			var a4 = beta % (2 * Math.PI);
			f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
		}
		var this5 = f4;
		var za2 = this5;
		var f5;
		if(gamma >= 0 && gamma > Math.PI) {
			f5 = gamma;
		} else {
			var a5 = gamma % (2 * Math.PI);
			f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
		}
		var this6 = f5;
		var zb2 = this6;
		var fa2 = za2;
		var fb2 = zb2;
		var theta2 = Math.abs(fa2 - fb2);
		var smallest = theta2 <= Math.PI;
		var clockwise2 = fa2 < fb2;
		var dif3 = clockwise2 ? theta2 : -theta2;
		dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
		break;
	case 3:
		var f6;
		if(beta >= 0 && beta > Math.PI) {
			f6 = beta;
		} else {
			var a6 = beta % (2 * Math.PI);
			f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
		}
		var this7 = f6;
		var za3 = this7;
		var f7;
		if(gamma >= 0 && gamma > Math.PI) {
			f7 = gamma;
		} else {
			var a7 = gamma % (2 * Math.PI);
			f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
		}
		var this8 = f7;
		var zb3 = this8;
		var fa3 = za3;
		var fb3 = zb3;
		var theta3 = Math.abs(fa3 - fb3);
		var largest = theta3 > Math.PI;
		var clockwise3 = fa3 < fb3;
		var dif4 = clockwise3 ? theta3 : -theta3;
		dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var p2 = edgePoly.length;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		edgePoly[p2++] = cx;
		edgePoly[p2++] = cy;
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step1;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.pieDifX = function(drawType,ax,ay,radius,beta,dif,edgePoly,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var p2 = edgePoly.length;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		edgePoly[p2++] = cx;
		edgePoly[p2++] = cy;
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step1;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.ellpisePie = function(drawType,ax,ay,rx,ry,beta,gamma,prefer,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var dif;
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f1;
		if(gamma >= 0 && gamma > Math.PI) {
			f1 = gamma;
		} else {
			var a1 = gamma % (2 * Math.PI);
			f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this2 = f1;
		var zb = this2;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f2;
		if(beta >= 0 && beta > Math.PI) {
			f2 = beta;
		} else {
			var a2 = beta % (2 * Math.PI);
			f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
		}
		var this3 = f2;
		var za1 = this3;
		var f3;
		if(gamma >= 0 && gamma > Math.PI) {
			f3 = gamma;
		} else {
			var a3 = gamma % (2 * Math.PI);
			f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
		}
		var this4 = f3;
		var zb1 = this4;
		var fa1 = za1;
		var fb1 = zb1;
		var theta1 = Math.abs(fa1 - fb1);
		var clockwise1 = fa1 < fb1;
		var dif2 = clockwise1 ? theta1 : -theta1;
		dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
		break;
	case 2:
		var f4;
		if(beta >= 0 && beta > Math.PI) {
			f4 = beta;
		} else {
			var a4 = beta % (2 * Math.PI);
			f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
		}
		var this5 = f4;
		var za2 = this5;
		var f5;
		if(gamma >= 0 && gamma > Math.PI) {
			f5 = gamma;
		} else {
			var a5 = gamma % (2 * Math.PI);
			f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
		}
		var this6 = f5;
		var zb2 = this6;
		var fa2 = za2;
		var fb2 = zb2;
		var theta2 = Math.abs(fa2 - fb2);
		var smallest = theta2 <= Math.PI;
		var clockwise2 = fa2 < fb2;
		var dif3 = clockwise2 ? theta2 : -theta2;
		dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
		break;
	case 3:
		var f6;
		if(beta >= 0 && beta > Math.PI) {
			f6 = beta;
		} else {
			var a6 = beta % (2 * Math.PI);
			f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
		}
		var this7 = f6;
		var za3 = this7;
		var f7;
		if(gamma >= 0 && gamma > Math.PI) {
			f7 = gamma;
		} else {
			var a7 = gamma % (2 * Math.PI);
			f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
		}
		var this8 = f7;
		var zb3 = this8;
		var fa3 = za3;
		var fb3 = zb3;
		var theta3 = Math.abs(fa3 - fb3);
		var largest = theta3 > Math.PI;
		var clockwise3 = fa3 < fb3;
		var dif4 = clockwise3 ? theta3 : -theta3;
		dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + rx * Math.sin(angle);
		cy = ay + ry * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step1;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.pieDif = function(drawType,ax,ay,radius,beta,dif,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step1;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.arc = function(drawType,ax,ay,radius,width,beta,gamma,prefer,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var dif;
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f1;
		if(gamma >= 0 && gamma > Math.PI) {
			f1 = gamma;
		} else {
			var a1 = gamma % (2 * Math.PI);
			f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this2 = f1;
		var zb = this2;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f2;
		if(beta >= 0 && beta > Math.PI) {
			f2 = beta;
		} else {
			var a2 = beta % (2 * Math.PI);
			f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
		}
		var this3 = f2;
		var za1 = this3;
		var f3;
		if(gamma >= 0 && gamma > Math.PI) {
			f3 = gamma;
		} else {
			var a3 = gamma % (2 * Math.PI);
			f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
		}
		var this4 = f3;
		var zb1 = this4;
		var fa1 = za1;
		var fb1 = zb1;
		var theta1 = Math.abs(fa1 - fb1);
		var clockwise1 = fa1 < fb1;
		var dif2 = clockwise1 ? theta1 : -theta1;
		dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
		break;
	case 2:
		var f4;
		if(beta >= 0 && beta > Math.PI) {
			f4 = beta;
		} else {
			var a4 = beta % (2 * Math.PI);
			f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
		}
		var this5 = f4;
		var za2 = this5;
		var f5;
		if(gamma >= 0 && gamma > Math.PI) {
			f5 = gamma;
		} else {
			var a5 = gamma % (2 * Math.PI);
			f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
		}
		var this6 = f5;
		var zb2 = this6;
		var fa2 = za2;
		var fb2 = zb2;
		var theta2 = Math.abs(fa2 - fb2);
		var smallest = theta2 <= Math.PI;
		var clockwise2 = fa2 < fb2;
		var dif3 = clockwise2 ? theta2 : -theta2;
		dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
		break;
	case 3:
		var f6;
		if(beta >= 0 && beta > Math.PI) {
			f6 = beta;
		} else {
			var a6 = beta % (2 * Math.PI);
			f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
		}
		var this7 = f6;
		var za3 = this7;
		var f7;
		if(gamma >= 0 && gamma > Math.PI) {
			f7 = gamma;
		} else {
			var a7 = gamma % (2 * Math.PI);
			f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
		}
		var this8 = f7;
		var zb3 = this8;
		var fa3 = za3;
		var fb3 = zb3;
		var theta3 = Math.abs(fa3 - fb3);
		var largest = theta3 > Math.PI;
		var clockwise3 = fa3 < fb3;
		var dif4 = clockwise3 ? theta3 : -theta3;
		dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var dx = 0;
	var dy = 0;
	var ex = 0;
	var ey = 0;
	var r2 = radius - width;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		ex = ax + r2 * Math.sin(angle);
		ey = ay + r2 * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(dx,dy,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
			drawType.triangle(dx,dy,0,cx,cy,0,ex,ey,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		angle += step1;
		bx = cx;
		by = cy;
		dx = ex;
		dy = ey;
	}
	return totalSteps * 2;
};
trilateral2_Shaper.circleOnSide = function(drawType,ax,ay,radius,sides,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	theta -= step / 2 + omega;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.ellipseOnSide = function(drawType,ax,ay,rx,ry,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	theta -= step / 2;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + rx * Math.sin(theta);
		by = ay + rx * Math.cos(theta);
		theta += step;
		cx = ax + rx * Math.sin(theta);
		cy = ay + ry * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.shape = function(drawType,x,y,radius,p,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if((p & 1) == 0) {
		var sides = p;
		var omega1 = omega;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides == null) {
			sides = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / sides;
		theta -= step / 2 + omega1;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = sides;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(x,y,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		return sides;
	} else {
		var sides1 = p;
		var omega2 = omega;
		if(omega2 == null) {
			omega2 = 0.;
		}
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi1 = Math.PI;
		var theta1 = pi1 / 2 + omega2;
		var step1 = pi1 * 2 / sides1;
		var bx1;
		var by1;
		var cx1;
		var cy1;
		var _g2 = 0;
		var _g11 = sides1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			bx1 = x + radius * Math.sin(theta1);
			by1 = y + radius * Math.cos(theta1);
			theta1 += step1;
			cx1 = x + radius * Math.sin(theta1);
			cy1 = y + radius * Math.cos(theta1);
			drawType.triangle(x,y,0,bx1,by1,0,cx1,cy1,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		return sides1;
	}
};
trilateral2_Shaper.shapeRadial = function(drawType,x,y,rx,ry,radius,p,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if((p & 1) == 0) {
		haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx1 = rx;
		var ry1 = ry;
		var sides = p;
		var omega1 = omega;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides == null) {
			sides = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2 + omega1;
		var step = pi * 2 / sides;
		var bx;
		var by;
		var cx;
		var cy;
		if(rx1 > 1.) {
			rx1 = 1;
		}
		if(rx1 < -1.) {
			rx1 = -1;
		}
		if(ry1 > 1.) {
			ry1 = 1;
		}
		if(ry1 < -1.) {
			ry1 = -1;
		}
		var mx = x + rx1 * radius;
		var my = y - ry1 * radius;
		var _g = 0;
		var _g1 = sides;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		return sides;
	} else {
		haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		haxe_Log.trace(p & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
		var rx2 = rx;
		var ry2 = ry;
		var sides1 = p;
		var omega2 = omega;
		if(omega2 == null) {
			omega2 = 0.;
		}
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi1 = Math.PI;
		var theta1 = pi1 / 2;
		var step1 = pi1 * 2 / sides1;
		theta1 -= step1 / 2 + omega2;
		var bx1 = 0;
		var by1 = 0;
		var cx1 = 0;
		var cy1 = 0;
		if(rx2 > 1.) {
			rx2 = 1;
		}
		if(rx2 < -1.) {
			rx2 = -1;
		}
		if(ry2 > 1.) {
			ry2 = 1;
		}
		if(ry2 < -1.) {
			ry2 = -1;
		}
		var mx1 = x + rx2 * radius;
		var my1 = y - ry2 * radius;
		var dx = x + radius * Math.sin(theta1);
		var dy = y + radius * Math.cos(theta1);
		var _g2 = 0;
		var _g11 = sides1 - 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			bx1 = x + radius * Math.sin(theta1);
			by1 = y + radius * Math.cos(theta1);
			theta1 += step1;
			cx1 = x + radius * Math.sin(theta1);
			cy1 = y + radius * Math.cos(theta1);
			drawType.triangle(mx1,my1,0,bx1,by1,0,cx1,cy1,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		drawType.triangle(mx1,my1,0,cx1,cy1,0,dx,dy,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		return sides1;
	}
};
trilateral2_Shaper.roundedRectangle = function(drawType,x,y,width,height,radius) {
	var pi = Math.PI;
	var pi_2 = Math.PI / 2;
	var ax = x + radius;
	var ay = y + radius;
	var bx = x + width - radius;
	var by = y + radius;
	var cx = bx;
	var cy = y + height - radius;
	var dx = ax;
	var dy = cy;
	var count = 0;
	var ax1 = ax;
	var ay1 = y;
	var bx1 = ax + (width - radius * 2);
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + height;
	var dx1 = ax;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	count += 2;
	var dimY = height - 2 * radius;
	var ax2 = x;
	var ay2 = ay;
	var bx2 = x + radius;
	var by2 = ay2;
	var cx2 = bx2;
	var cy2 = ay2 + dimY;
	var dx2 = x;
	var dy2 = cy2;
	drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
	var m2 = trilateral2_Shaper.transformMatrix;
	if(m2 != null) {
		drawType.transform(m2);
	}
	drawType.next();
	drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
	var m3 = trilateral2_Shaper.transformMatrix;
	if(m3 != null) {
		drawType.transform(m3);
	}
	drawType.next();
	count += 2;
	var ax3 = bx;
	var ay3 = by;
	var bx3 = bx + radius;
	var by3 = ay3;
	var cx3 = bx3;
	var cy3 = ay3 + dimY;
	var dx3 = bx;
	var dy3 = cy3;
	drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
	var m4 = trilateral2_Shaper.transformMatrix;
	if(m4 != null) {
		drawType.transform(m4);
	}
	drawType.next();
	drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
	var m5 = trilateral2_Shaper.transformMatrix;
	if(m5 != null) {
		drawType.transform(m5);
	}
	drawType.next();
	count += 2;
	var beta = -pi;
	var gamma = -pi_2;
	var pi1 = Math.PI;
	var step = pi1 * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f1;
		if(gamma >= 0 && gamma > Math.PI) {
			f1 = gamma;
		} else {
			var a1 = gamma % (2 * Math.PI);
			f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this2 = f1;
		var zb = this2;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f2;
		if(beta >= 0 && beta > Math.PI) {
			f2 = beta;
		} else {
			var a2 = beta % (2 * Math.PI);
			f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
		}
		var this3 = f2;
		var za1 = this3;
		var f3;
		if(gamma >= 0 && gamma > Math.PI) {
			f3 = gamma;
		} else {
			var a3 = gamma % (2 * Math.PI);
			f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
		}
		var this4 = f3;
		var zb1 = this4;
		var fa1 = za1;
		var fb1 = zb1;
		var theta1 = Math.abs(fa1 - fb1);
		var clockwise1 = fa1 < fb1;
		var dif2 = clockwise1 ? theta1 : -theta1;
		dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
		break;
	case 2:
		var f4;
		if(beta >= 0 && beta > Math.PI) {
			f4 = beta;
		} else {
			var a4 = beta % (2 * Math.PI);
			f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
		}
		var this5 = f4;
		var za2 = this5;
		var f5;
		if(gamma >= 0 && gamma > Math.PI) {
			f5 = gamma;
		} else {
			var a5 = gamma % (2 * Math.PI);
			f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
		}
		var this6 = f5;
		var zb2 = this6;
		var fa2 = za2;
		var fb2 = zb2;
		var theta2 = Math.abs(fa2 - fb2);
		var smallest = theta2 <= Math.PI;
		var clockwise2 = fa2 < fb2;
		var dif3 = clockwise2 ? theta2 : -theta2;
		dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
		break;
	case 3:
		var f6;
		if(beta >= 0 && beta > Math.PI) {
			f6 = beta;
		} else {
			var a6 = beta % (2 * Math.PI);
			f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
		}
		var this7 = f6;
		var za3 = this7;
		var f7;
		if(gamma >= 0 && gamma > Math.PI) {
			f7 = gamma;
		} else {
			var a7 = gamma % (2 * Math.PI);
			f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
		}
		var this8 = f7;
		var zb3 = this8;
		var fa3 = za3;
		var fb3 = zb3;
		var theta3 = Math.abs(fa3 - fb3);
		var largest = theta3 > Math.PI;
		var clockwise3 = fa3 < fb3;
		var dif4 = clockwise3 ? theta3 : -theta3;
		dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx4;
	var cy4;
	var bx4 = 0;
	var by4 = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx4 = ax + radius * Math.sin(angle);
		cy4 = ay + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
			var m6 = trilateral2_Shaper.transformMatrix;
			if(m6 != null) {
				drawType.transform(m6);
			}
			drawType.next();
		}
		angle += step1;
		bx4 = cx4;
		by4 = cy4;
	}
	count += totalSteps;
	var pi2 = Math.PI;
	var step2 = pi2 * 2 / 36;
	var dif5;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f8;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f8 = pi_2;
		} else {
			var a8 = pi_2 % (2 * Math.PI);
			f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
		}
		var this9 = f8;
		var za4 = this9;
		var f9;
		if(pi >= 0 && pi > Math.PI) {
			f9 = pi;
		} else {
			var a9 = pi % (2 * Math.PI);
			f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
		}
		var this10 = f9;
		var zb4 = this10;
		var fa4 = za4;
		var fb4 = zb4;
		var theta4 = Math.abs(fa4 - fb4);
		var clockwise4 = fa4 < fb4;
		var dif6 = clockwise4 ? theta4 : -theta4;
		dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
		break;
	case 1:
		var f10;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f10 = pi_2;
		} else {
			var a10 = pi_2 % (2 * Math.PI);
			f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
		}
		var this11 = f10;
		var za5 = this11;
		var f11;
		if(pi >= 0 && pi > Math.PI) {
			f11 = pi;
		} else {
			var a11 = pi % (2 * Math.PI);
			f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
		}
		var this12 = f11;
		var zb5 = this12;
		var fa5 = za5;
		var fb5 = zb5;
		var theta5 = Math.abs(fa5 - fb5);
		var clockwise5 = fa5 < fb5;
		var dif7 = clockwise5 ? theta5 : -theta5;
		dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
		break;
	case 2:
		var f12;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f12 = pi_2;
		} else {
			var a12 = pi_2 % (2 * Math.PI);
			f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
		}
		var this13 = f12;
		var za6 = this13;
		var f13;
		if(pi >= 0 && pi > Math.PI) {
			f13 = pi;
		} else {
			var a13 = pi % (2 * Math.PI);
			f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
		}
		var this14 = f13;
		var zb6 = this14;
		var fa6 = za6;
		var fb6 = zb6;
		var theta6 = Math.abs(fa6 - fb6);
		var smallest1 = theta6 <= Math.PI;
		var clockwise6 = fa6 < fb6;
		var dif8 = clockwise6 ? theta6 : -theta6;
		dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
		break;
	case 3:
		var f14;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f14 = pi_2;
		} else {
			var a14 = pi_2 % (2 * Math.PI);
			f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
		}
		var this15 = f14;
		var za7 = this15;
		var f15;
		if(pi >= 0 && pi > Math.PI) {
			f15 = pi;
		} else {
			var a15 = pi % (2 * Math.PI);
			f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
		}
		var this16 = f15;
		var zb7 = this16;
		var fa7 = za7;
		var fb7 = zb7;
		var theta7 = Math.abs(fa7 - fb7);
		var largest1 = theta7 > Math.PI;
		var clockwise7 = fa7 < fb7;
		var dif9 = clockwise7 ? theta7 : -theta7;
		dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
		break;
	}
	var positive1 = dif5 >= 0;
	var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
	var step3 = dif5 / totalSteps1;
	var angle1 = pi_2;
	var cx5;
	var cy5;
	var bx5 = 0;
	var by5 = 0;
	var _g2 = 0;
	var _g11 = totalSteps1 + 1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		cx5 = bx + radius * Math.sin(angle1);
		cy5 = by + radius * Math.cos(angle1);
		if(i1 != 0) {
			drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
			var m7 = trilateral2_Shaper.transformMatrix;
			if(m7 != null) {
				drawType.transform(m7);
			}
			drawType.next();
		}
		angle1 += step3;
		bx5 = cx5;
		by5 = cy5;
	}
	count += totalSteps1;
	var pi3 = Math.PI;
	var step4 = pi3 * 2 / 36;
	var dif10;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f16;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f16 = pi_2;
		} else {
			var a16 = pi_2 % (2 * Math.PI);
			f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
		}
		var this17 = f16;
		var za8 = this17;
		var f17;
		if(0 > Math.PI) {
			f17 = 0;
		} else {
			var a17 = 0 % (2 * Math.PI);
			f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
		}
		var this18 = f17;
		var zb8 = this18;
		var fa8 = za8;
		var fb8 = zb8;
		var theta8 = Math.abs(fa8 - fb8);
		var clockwise8 = fa8 < fb8;
		var dif11 = clockwise8 ? theta8 : -theta8;
		dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
		break;
	case 1:
		var f18;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f18 = pi_2;
		} else {
			var a18 = pi_2 % (2 * Math.PI);
			f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
		}
		var this19 = f18;
		var za9 = this19;
		var f19;
		if(0 > Math.PI) {
			f19 = 0;
		} else {
			var a19 = 0 % (2 * Math.PI);
			f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
		}
		var this20 = f19;
		var zb9 = this20;
		var fa9 = za9;
		var fb9 = zb9;
		var theta9 = Math.abs(fa9 - fb9);
		var clockwise9 = fa9 < fb9;
		var dif12 = clockwise9 ? theta9 : -theta9;
		dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
		break;
	case 2:
		var f20;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f20 = pi_2;
		} else {
			var a20 = pi_2 % (2 * Math.PI);
			f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
		}
		var this21 = f20;
		var za10 = this21;
		var f21;
		if(0 > Math.PI) {
			f21 = 0;
		} else {
			var a21 = 0 % (2 * Math.PI);
			f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
		}
		var this22 = f21;
		var zb10 = this22;
		var fa10 = za10;
		var fb10 = zb10;
		var theta10 = Math.abs(fa10 - fb10);
		var smallest2 = theta10 <= Math.PI;
		var clockwise10 = fa10 < fb10;
		var dif13 = clockwise10 ? theta10 : -theta10;
		dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
		break;
	case 3:
		var f22;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f22 = pi_2;
		} else {
			var a22 = pi_2 % (2 * Math.PI);
			f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
		}
		var this23 = f22;
		var za11 = this23;
		var f23;
		if(0 > Math.PI) {
			f23 = 0;
		} else {
			var a23 = 0 % (2 * Math.PI);
			f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
		}
		var this24 = f23;
		var zb11 = this24;
		var fa11 = za11;
		var fb11 = zb11;
		var theta11 = Math.abs(fa11 - fb11);
		var largest2 = theta11 > Math.PI;
		var clockwise11 = fa11 < fb11;
		var dif14 = clockwise11 ? theta11 : -theta11;
		dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
		break;
	}
	var positive2 = dif10 >= 0;
	var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
	var step5 = dif10 / totalSteps2;
	var angle2 = pi_2;
	var cx6;
	var cy6;
	var bx6 = 0;
	var by6 = 0;
	var _g3 = 0;
	var _g12 = totalSteps2 + 1;
	while(_g3 < _g12) {
		var i2 = _g3++;
		cx6 = cx + radius * Math.sin(angle2);
		cy6 = cy + radius * Math.cos(angle2);
		if(i2 != 0) {
			drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
			var m8 = trilateral2_Shaper.transformMatrix;
			if(m8 != null) {
				drawType.transform(m8);
			}
			drawType.next();
		}
		angle2 += step5;
		bx6 = cx6;
		by6 = cy6;
	}
	count += totalSteps2;
	var gamma1 = -pi_2;
	var pi4 = Math.PI;
	var step6 = pi4 * 2 / 36;
	var dif15;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f24;
		if(0 > Math.PI) {
			f24 = 0;
		} else {
			var a24 = 0 % (2 * Math.PI);
			f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
		}
		var this25 = f24;
		var za12 = this25;
		var f25;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f25 = gamma1;
		} else {
			var a25 = gamma1 % (2 * Math.PI);
			f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
		}
		var this26 = f25;
		var zb12 = this26;
		var fa12 = za12;
		var fb12 = zb12;
		var theta12 = Math.abs(fa12 - fb12);
		var clockwise12 = fa12 < fb12;
		var dif16 = clockwise12 ? theta12 : -theta12;
		dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
		break;
	case 1:
		var f26;
		if(0 > Math.PI) {
			f26 = 0;
		} else {
			var a26 = 0 % (2 * Math.PI);
			f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
		}
		var this27 = f26;
		var za13 = this27;
		var f27;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f27 = gamma1;
		} else {
			var a27 = gamma1 % (2 * Math.PI);
			f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
		}
		var this28 = f27;
		var zb13 = this28;
		var fa13 = za13;
		var fb13 = zb13;
		var theta13 = Math.abs(fa13 - fb13);
		var clockwise13 = fa13 < fb13;
		var dif17 = clockwise13 ? theta13 : -theta13;
		dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
		break;
	case 2:
		var f28;
		if(0 > Math.PI) {
			f28 = 0;
		} else {
			var a28 = 0 % (2 * Math.PI);
			f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
		}
		var this29 = f28;
		var za14 = this29;
		var f29;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f29 = gamma1;
		} else {
			var a29 = gamma1 % (2 * Math.PI);
			f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
		}
		var this30 = f29;
		var zb14 = this30;
		var fa14 = za14;
		var fb14 = zb14;
		var theta14 = Math.abs(fa14 - fb14);
		var smallest3 = theta14 <= Math.PI;
		var clockwise14 = fa14 < fb14;
		var dif18 = clockwise14 ? theta14 : -theta14;
		dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
		break;
	case 3:
		var f30;
		if(0 > Math.PI) {
			f30 = 0;
		} else {
			var a30 = 0 % (2 * Math.PI);
			f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
		}
		var this31 = f30;
		var za15 = this31;
		var f31;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f31 = gamma1;
		} else {
			var a31 = gamma1 % (2 * Math.PI);
			f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
		}
		var this32 = f31;
		var zb15 = this32;
		var fa15 = za15;
		var fb15 = zb15;
		var theta15 = Math.abs(fa15 - fb15);
		var largest3 = theta15 > Math.PI;
		var clockwise15 = fa15 < fb15;
		var dif19 = clockwise15 ? theta15 : -theta15;
		dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
		break;
	}
	var positive3 = dif15 >= 0;
	var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
	var step7 = dif15 / totalSteps3;
	var angle3 = 0;
	var cx7;
	var cy7;
	var bx7 = 0;
	var by7 = 0;
	var _g4 = 0;
	var _g13 = totalSteps3 + 1;
	while(_g4 < _g13) {
		var i3 = _g4++;
		cx7 = dx + radius * Math.sin(angle3);
		cy7 = dy + radius * Math.cos(angle3);
		if(i3 != 0) {
			drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
			var m9 = trilateral2_Shaper.transformMatrix;
			if(m9 != null) {
				drawType.transform(m9);
			}
			drawType.next();
		}
		angle3 += step7;
		bx7 = cx7;
		by7 = cy7;
	}
	count += totalSteps3;
	return count;
};
trilateral2_Shaper.roundedRectangleOutline = function(drawType,x,y,width,height,thick,radius) {
	var pi = Math.PI;
	var pi_2 = Math.PI / 2;
	var ax = x + radius;
	var ay = y + radius;
	var bx = x + width - radius;
	var by = y + radius;
	var cx = bx;
	var cy = y + height - radius;
	var dx = ax;
	var dy = cy;
	var count = 0;
	var ax1 = ax;
	var ay1 = y;
	var bx1 = ax + (width - radius * 2);
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + thick;
	var dx1 = ax;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m1 = trilateral2_Shaper.transformMatrix;
	if(m1 != null) {
		drawType.transform(m1);
	}
	drawType.next();
	count += 2;
	var ax2 = ax;
	var ay2 = y + height - thick;
	var bx2 = ax + (width - radius * 2);
	var by2 = ay2;
	var cx2 = bx2;
	var cy2 = ay2 + thick;
	var dx2 = ax;
	var dy2 = cy2;
	drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
	var m2 = trilateral2_Shaper.transformMatrix;
	if(m2 != null) {
		drawType.transform(m2);
	}
	drawType.next();
	drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
	var m3 = trilateral2_Shaper.transformMatrix;
	if(m3 != null) {
		drawType.transform(m3);
	}
	drawType.next();
	count += 2;
	var dimY = height - 2 * radius;
	var ax3 = x;
	var ay3 = ay;
	var bx3 = x + thick;
	var by3 = ay3;
	var cx3 = bx3;
	var cy3 = ay3 + dimY;
	var dx3 = x;
	var dy3 = cy3;
	drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
	var m4 = trilateral2_Shaper.transformMatrix;
	if(m4 != null) {
		drawType.transform(m4);
	}
	drawType.next();
	drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
	var m5 = trilateral2_Shaper.transformMatrix;
	if(m5 != null) {
		drawType.transform(m5);
	}
	drawType.next();
	count += 2;
	var x1 = x + width - thick;
	var ax4 = x1;
	var ay4 = by;
	var bx4 = x1 + thick;
	var by4 = ay4;
	var cx4 = bx4;
	var cy4 = ay4 + dimY;
	var dx4 = x1;
	var dy4 = cy4;
	drawType.triangle(ax4,ay4,0,bx4,by4,0,dx4,dy4,0);
	var m6 = trilateral2_Shaper.transformMatrix;
	if(m6 != null) {
		drawType.transform(m6);
	}
	drawType.next();
	drawType.triangle(bx4,by4,0,cx4,cy4,0,dx4,dy4,0);
	var m7 = trilateral2_Shaper.transformMatrix;
	if(m7 != null) {
		drawType.transform(m7);
	}
	drawType.next();
	count += 2;
	var beta = -pi;
	var gamma = -pi_2;
	var pi1 = Math.PI;
	var step = pi1 * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f1;
		if(gamma >= 0 && gamma > Math.PI) {
			f1 = gamma;
		} else {
			var a1 = gamma % (2 * Math.PI);
			f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this2 = f1;
		var zb = this2;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f2;
		if(beta >= 0 && beta > Math.PI) {
			f2 = beta;
		} else {
			var a2 = beta % (2 * Math.PI);
			f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
		}
		var this3 = f2;
		var za1 = this3;
		var f3;
		if(gamma >= 0 && gamma > Math.PI) {
			f3 = gamma;
		} else {
			var a3 = gamma % (2 * Math.PI);
			f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
		}
		var this4 = f3;
		var zb1 = this4;
		var fa1 = za1;
		var fb1 = zb1;
		var theta1 = Math.abs(fa1 - fb1);
		var clockwise1 = fa1 < fb1;
		var dif2 = clockwise1 ? theta1 : -theta1;
		dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
		break;
	case 2:
		var f4;
		if(beta >= 0 && beta > Math.PI) {
			f4 = beta;
		} else {
			var a4 = beta % (2 * Math.PI);
			f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
		}
		var this5 = f4;
		var za2 = this5;
		var f5;
		if(gamma >= 0 && gamma > Math.PI) {
			f5 = gamma;
		} else {
			var a5 = gamma % (2 * Math.PI);
			f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
		}
		var this6 = f5;
		var zb2 = this6;
		var fa2 = za2;
		var fb2 = zb2;
		var theta2 = Math.abs(fa2 - fb2);
		var smallest = theta2 <= Math.PI;
		var clockwise2 = fa2 < fb2;
		var dif3 = clockwise2 ? theta2 : -theta2;
		dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
		break;
	case 3:
		var f6;
		if(beta >= 0 && beta > Math.PI) {
			f6 = beta;
		} else {
			var a6 = beta % (2 * Math.PI);
			f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
		}
		var this7 = f6;
		var za3 = this7;
		var f7;
		if(gamma >= 0 && gamma > Math.PI) {
			f7 = gamma;
		} else {
			var a7 = gamma % (2 * Math.PI);
			f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
		}
		var this8 = f7;
		var zb3 = this8;
		var fa3 = za3;
		var fb3 = zb3;
		var theta3 = Math.abs(fa3 - fb3);
		var largest = theta3 > Math.PI;
		var clockwise3 = fa3 < fb3;
		var dif4 = clockwise3 ? theta3 : -theta3;
		dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step1 = dif / totalSteps;
	var angle = beta;
	var cx5;
	var cy5;
	var bx5 = 0;
	var by5 = 0;
	var dx5 = 0;
	var dy5 = 0;
	var ex = 0;
	var ey = 0;
	var r2 = radius - thick;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx5 = ax + radius * Math.sin(angle);
		cy5 = ay + radius * Math.cos(angle);
		ex = ax + r2 * Math.sin(angle);
		ey = ay + r2 * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(dx5,dy5,0,bx5,by5,0,cx5,cy5,0);
			var m8 = trilateral2_Shaper.transformMatrix;
			if(m8 != null) {
				drawType.transform(m8);
			}
			drawType.next();
			drawType.triangle(dx5,dy5,0,cx5,cy5,0,ex,ey,0);
			var m9 = trilateral2_Shaper.transformMatrix;
			if(m9 != null) {
				drawType.transform(m9);
			}
			drawType.next();
		}
		angle += step1;
		bx5 = cx5;
		by5 = cy5;
		dx5 = ex;
		dy5 = ey;
	}
	count += totalSteps * 2;
	var pi2 = Math.PI;
	var step2 = pi2 * 2 / 36;
	var dif5;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f8;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f8 = pi_2;
		} else {
			var a8 = pi_2 % (2 * Math.PI);
			f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
		}
		var this9 = f8;
		var za4 = this9;
		var f9;
		if(pi >= 0 && pi > Math.PI) {
			f9 = pi;
		} else {
			var a9 = pi % (2 * Math.PI);
			f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
		}
		var this10 = f9;
		var zb4 = this10;
		var fa4 = za4;
		var fb4 = zb4;
		var theta4 = Math.abs(fa4 - fb4);
		var clockwise4 = fa4 < fb4;
		var dif6 = clockwise4 ? theta4 : -theta4;
		dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
		break;
	case 1:
		var f10;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f10 = pi_2;
		} else {
			var a10 = pi_2 % (2 * Math.PI);
			f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
		}
		var this11 = f10;
		var za5 = this11;
		var f11;
		if(pi >= 0 && pi > Math.PI) {
			f11 = pi;
		} else {
			var a11 = pi % (2 * Math.PI);
			f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
		}
		var this12 = f11;
		var zb5 = this12;
		var fa5 = za5;
		var fb5 = zb5;
		var theta5 = Math.abs(fa5 - fb5);
		var clockwise5 = fa5 < fb5;
		var dif7 = clockwise5 ? theta5 : -theta5;
		dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
		break;
	case 2:
		var f12;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f12 = pi_2;
		} else {
			var a12 = pi_2 % (2 * Math.PI);
			f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
		}
		var this13 = f12;
		var za6 = this13;
		var f13;
		if(pi >= 0 && pi > Math.PI) {
			f13 = pi;
		} else {
			var a13 = pi % (2 * Math.PI);
			f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
		}
		var this14 = f13;
		var zb6 = this14;
		var fa6 = za6;
		var fb6 = zb6;
		var theta6 = Math.abs(fa6 - fb6);
		var smallest1 = theta6 <= Math.PI;
		var clockwise6 = fa6 < fb6;
		var dif8 = clockwise6 ? theta6 : -theta6;
		dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
		break;
	case 3:
		var f14;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f14 = pi_2;
		} else {
			var a14 = pi_2 % (2 * Math.PI);
			f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
		}
		var this15 = f14;
		var za7 = this15;
		var f15;
		if(pi >= 0 && pi > Math.PI) {
			f15 = pi;
		} else {
			var a15 = pi % (2 * Math.PI);
			f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
		}
		var this16 = f15;
		var zb7 = this16;
		var fa7 = za7;
		var fb7 = zb7;
		var theta7 = Math.abs(fa7 - fb7);
		var largest1 = theta7 > Math.PI;
		var clockwise7 = fa7 < fb7;
		var dif9 = clockwise7 ? theta7 : -theta7;
		dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
		break;
	}
	var positive1 = dif5 >= 0;
	var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
	var step3 = dif5 / totalSteps1;
	var angle1 = pi_2;
	var cx6;
	var cy6;
	var bx6 = 0;
	var by6 = 0;
	var dx6 = 0;
	var dy6 = 0;
	var ex1 = 0;
	var ey1 = 0;
	var r21 = radius - thick;
	var _g2 = 0;
	var _g11 = totalSteps1 + 1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		cx6 = bx + radius * Math.sin(angle1);
		cy6 = by + radius * Math.cos(angle1);
		ex1 = bx + r21 * Math.sin(angle1);
		ey1 = by + r21 * Math.cos(angle1);
		if(i1 != 0) {
			drawType.triangle(dx6,dy6,0,bx6,by6,0,cx6,cy6,0);
			var m10 = trilateral2_Shaper.transformMatrix;
			if(m10 != null) {
				drawType.transform(m10);
			}
			drawType.next();
			drawType.triangle(dx6,dy6,0,cx6,cy6,0,ex1,ey1,0);
			var m11 = trilateral2_Shaper.transformMatrix;
			if(m11 != null) {
				drawType.transform(m11);
			}
			drawType.next();
		}
		angle1 += step3;
		bx6 = cx6;
		by6 = cy6;
		dx6 = ex1;
		dy6 = ey1;
	}
	count += totalSteps1 * 2;
	var pi3 = Math.PI;
	var step4 = pi3 * 2 / 36;
	var dif10;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f16;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f16 = pi_2;
		} else {
			var a16 = pi_2 % (2 * Math.PI);
			f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
		}
		var this17 = f16;
		var za8 = this17;
		var f17;
		if(0 > Math.PI) {
			f17 = 0;
		} else {
			var a17 = 0 % (2 * Math.PI);
			f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
		}
		var this18 = f17;
		var zb8 = this18;
		var fa8 = za8;
		var fb8 = zb8;
		var theta8 = Math.abs(fa8 - fb8);
		var clockwise8 = fa8 < fb8;
		var dif11 = clockwise8 ? theta8 : -theta8;
		dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
		break;
	case 1:
		var f18;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f18 = pi_2;
		} else {
			var a18 = pi_2 % (2 * Math.PI);
			f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
		}
		var this19 = f18;
		var za9 = this19;
		var f19;
		if(0 > Math.PI) {
			f19 = 0;
		} else {
			var a19 = 0 % (2 * Math.PI);
			f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
		}
		var this20 = f19;
		var zb9 = this20;
		var fa9 = za9;
		var fb9 = zb9;
		var theta9 = Math.abs(fa9 - fb9);
		var clockwise9 = fa9 < fb9;
		var dif12 = clockwise9 ? theta9 : -theta9;
		dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
		break;
	case 2:
		var f20;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f20 = pi_2;
		} else {
			var a20 = pi_2 % (2 * Math.PI);
			f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
		}
		var this21 = f20;
		var za10 = this21;
		var f21;
		if(0 > Math.PI) {
			f21 = 0;
		} else {
			var a21 = 0 % (2 * Math.PI);
			f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
		}
		var this22 = f21;
		var zb10 = this22;
		var fa10 = za10;
		var fb10 = zb10;
		var theta10 = Math.abs(fa10 - fb10);
		var smallest2 = theta10 <= Math.PI;
		var clockwise10 = fa10 < fb10;
		var dif13 = clockwise10 ? theta10 : -theta10;
		dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
		break;
	case 3:
		var f22;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f22 = pi_2;
		} else {
			var a22 = pi_2 % (2 * Math.PI);
			f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
		}
		var this23 = f22;
		var za11 = this23;
		var f23;
		if(0 > Math.PI) {
			f23 = 0;
		} else {
			var a23 = 0 % (2 * Math.PI);
			f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
		}
		var this24 = f23;
		var zb11 = this24;
		var fa11 = za11;
		var fb11 = zb11;
		var theta11 = Math.abs(fa11 - fb11);
		var largest2 = theta11 > Math.PI;
		var clockwise11 = fa11 < fb11;
		var dif14 = clockwise11 ? theta11 : -theta11;
		dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
		break;
	}
	var positive2 = dif10 >= 0;
	var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
	var step5 = dif10 / totalSteps2;
	var angle2 = pi_2;
	var cx7;
	var cy7;
	var bx7 = 0;
	var by7 = 0;
	var dx7 = 0;
	var dy7 = 0;
	var ex2 = 0;
	var ey2 = 0;
	var r22 = radius - thick;
	var _g3 = 0;
	var _g12 = totalSteps2 + 1;
	while(_g3 < _g12) {
		var i2 = _g3++;
		cx7 = cx + radius * Math.sin(angle2);
		cy7 = cy + radius * Math.cos(angle2);
		ex2 = cx + r22 * Math.sin(angle2);
		ey2 = cy + r22 * Math.cos(angle2);
		if(i2 != 0) {
			drawType.triangle(dx7,dy7,0,bx7,by7,0,cx7,cy7,0);
			var m12 = trilateral2_Shaper.transformMatrix;
			if(m12 != null) {
				drawType.transform(m12);
			}
			drawType.next();
			drawType.triangle(dx7,dy7,0,cx7,cy7,0,ex2,ey2,0);
			var m13 = trilateral2_Shaper.transformMatrix;
			if(m13 != null) {
				drawType.transform(m13);
			}
			drawType.next();
		}
		angle2 += step5;
		bx7 = cx7;
		by7 = cy7;
		dx7 = ex2;
		dy7 = ey2;
	}
	count += totalSteps2 * 2;
	var gamma1 = -pi_2;
	var pi4 = Math.PI;
	var step6 = pi4 * 2 / 36;
	var dif15;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f24;
		if(0 > Math.PI) {
			f24 = 0;
		} else {
			var a24 = 0 % (2 * Math.PI);
			f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
		}
		var this25 = f24;
		var za12 = this25;
		var f25;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f25 = gamma1;
		} else {
			var a25 = gamma1 % (2 * Math.PI);
			f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
		}
		var this26 = f25;
		var zb12 = this26;
		var fa12 = za12;
		var fb12 = zb12;
		var theta12 = Math.abs(fa12 - fb12);
		var clockwise12 = fa12 < fb12;
		var dif16 = clockwise12 ? theta12 : -theta12;
		dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
		break;
	case 1:
		var f26;
		if(0 > Math.PI) {
			f26 = 0;
		} else {
			var a26 = 0 % (2 * Math.PI);
			f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
		}
		var this27 = f26;
		var za13 = this27;
		var f27;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f27 = gamma1;
		} else {
			var a27 = gamma1 % (2 * Math.PI);
			f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
		}
		var this28 = f27;
		var zb13 = this28;
		var fa13 = za13;
		var fb13 = zb13;
		var theta13 = Math.abs(fa13 - fb13);
		var clockwise13 = fa13 < fb13;
		var dif17 = clockwise13 ? theta13 : -theta13;
		dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
		break;
	case 2:
		var f28;
		if(0 > Math.PI) {
			f28 = 0;
		} else {
			var a28 = 0 % (2 * Math.PI);
			f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
		}
		var this29 = f28;
		var za14 = this29;
		var f29;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f29 = gamma1;
		} else {
			var a29 = gamma1 % (2 * Math.PI);
			f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
		}
		var this30 = f29;
		var zb14 = this30;
		var fa14 = za14;
		var fb14 = zb14;
		var theta14 = Math.abs(fa14 - fb14);
		var smallest3 = theta14 <= Math.PI;
		var clockwise14 = fa14 < fb14;
		var dif18 = clockwise14 ? theta14 : -theta14;
		dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
		break;
	case 3:
		var f30;
		if(0 > Math.PI) {
			f30 = 0;
		} else {
			var a30 = 0 % (2 * Math.PI);
			f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
		}
		var this31 = f30;
		var za15 = this31;
		var f31;
		if(gamma1 >= 0 && gamma1 > Math.PI) {
			f31 = gamma1;
		} else {
			var a31 = gamma1 % (2 * Math.PI);
			f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
		}
		var this32 = f31;
		var zb15 = this32;
		var fa15 = za15;
		var fb15 = zb15;
		var theta15 = Math.abs(fa15 - fb15);
		var largest3 = theta15 > Math.PI;
		var clockwise15 = fa15 < fb15;
		var dif19 = clockwise15 ? theta15 : -theta15;
		dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
		break;
	}
	var positive3 = dif15 >= 0;
	var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
	var step7 = dif15 / totalSteps3;
	var angle3 = 0;
	var cx8;
	var cy8;
	var bx8 = 0;
	var by8 = 0;
	var dx8 = 0;
	var dy8 = 0;
	var ex3 = 0;
	var ey3 = 0;
	var r23 = radius - thick;
	var _g4 = 0;
	var _g13 = totalSteps3 + 1;
	while(_g4 < _g13) {
		var i3 = _g4++;
		cx8 = dx + radius * Math.sin(angle3);
		cy8 = dy + radius * Math.cos(angle3);
		ex3 = dx + r23 * Math.sin(angle3);
		ey3 = dy + r23 * Math.cos(angle3);
		if(i3 != 0) {
			drawType.triangle(dx8,dy8,0,bx8,by8,0,cx8,cy8,0);
			var m14 = trilateral2_Shaper.transformMatrix;
			if(m14 != null) {
				drawType.transform(m14);
			}
			drawType.next();
			drawType.triangle(dx8,dy8,0,cx8,cy8,0,ex3,ey3,0);
			var m15 = trilateral2_Shaper.transformMatrix;
			if(m15 != null) {
				drawType.transform(m15);
			}
			drawType.next();
		}
		angle3 += step7;
		bx8 = cx8;
		by8 = cy8;
		dx8 = ex3;
		dy8 = ey3;
	}
	count += totalSteps3 * 2;
	return count;
};
trilateral2_Shaper.spiralLines = function(drawType,x,y,radius,nolines,startWid,stepWid) {
	var theta = 0.;
	var wid = startWid;
	var _g = 0;
	var _g1 = nolines;
	while(_g < _g1) {
		var i = _g++;
		var width = wid += stepWid;
		var dx = x - (x + radius * Math.sin(theta));
		var dy = y - (y + radius * Math.cos(theta));
		var P = new geom_structure_Mat1x2(x - width / 2,y);
		var omega = Math.atan2(dy,dx);
		var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
		var pivotX = x + width / 2;
		var px = P.x;
		var py = P.y;
		var dx1 = dim.x;
		var dy1 = dim.y;
		var A_ = new geom_structure_Mat1x2(px,py);
		var B_ = new geom_structure_Mat1x2(px + dx1,py);
		var C_ = new geom_structure_Mat1x2(px + dx1,py + dy1);
		var D_ = new geom_structure_Mat1x2(px,py + dy1);
		if(omega != 0.) {
			var sin = Math.sin(omega);
			var cos = Math.cos(omega);
			var px1 = A_.x - pivotX;
			var py1 = A_.y - y;
			var px2 = px1 * cos - py1 * sin;
			py1 = py1 * cos + px1 * sin;
			A_ = new geom_structure_Mat1x2(px2 + pivotX,py1 + y);
			var px3 = B_.x - pivotX;
			var py2 = B_.y - y;
			var px21 = px3 * cos - py2 * sin;
			py2 = py2 * cos + px3 * sin;
			B_ = new geom_structure_Mat1x2(px21 + pivotX,py2 + y);
			var px4 = C_.x - pivotX;
			var py3 = C_.y - y;
			var px22 = px4 * cos - py3 * sin;
			py3 = py3 * cos + px4 * sin;
			C_ = new geom_structure_Mat1x2(px22 + pivotX,py3 + y);
			var px5 = D_.x - pivotX;
			var py4 = D_.y - y;
			var px23 = px5 * cos - py4 * sin;
			py4 = py4 * cos + px5 * sin;
			D_ = new geom_structure_Mat1x2(px23 + pivotX,py4 + y);
		}
		var q = new geom_obj_Quad2D(A_,B_,C_,D_);
		var bx = q.B.x;
		var by = q.B.y;
		var cx = q.C.x;
		var cy = q.C.y;
		var dx2 = q.D.x;
		var dy2 = q.D.y;
		drawType.triangle(q.A.x,q.A.y,0,bx,by,0,dx2,dy2,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx,by,0,cx,cy,0,dx2,dy2,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		theta += Math.PI * 2 / nolines;
	}
	return nolines;
};
var trilateral2_Sketch = function(pen_,sketchForm_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.width = 0.01;
	this.y = 0.;
	this.x = 0.;
	this.contour = new trilateral2_Contour(pen_,endLine_);
	this.pen = pen_;
	this.endLine = endLine_;
	this.sketchForm = sketchForm_;
	switch(sketchForm_._hx_index) {
	case 0:
		this.line = $bind(this,this.tracerLine);
		break;
	case 1:
		this.line = $bind(this,this.baseLine);
		break;
	case 2:
		this.line = $bind(this,this.crudeLine);
		break;
	case 3:
		this.line = $bind(this,this.fillOnlyLine);
		break;
	case 4:
		this.line = $bind(this,this.fineLine);
		break;
	case 5:
		this.line = $bind(this,this.fineOverlapLine);
		break;
	case 6:
		this.line = $bind(this,this.mediumLine);
		break;
	case 7:
		this.line = $bind(this,this.mediumOverlapLine);
		break;
	case 8:
		this.line = $bind(this,this.roundEndLine);
		break;
	}
	this.points = [];
	this.pointsClock = [];
	this.pointsAnti = [];
	this.points[0] = [];
	this.dim = [];
};
$hxClasses["trilateral2.Sketch"] = trilateral2_Sketch;
trilateral2_Sketch.__name__ = "trilateral2.Sketch";
trilateral2_Sketch.__interfaces__ = [justPath_IPathContext];
trilateral2_Sketch.prototype = {
	tracerLine: function(x_,y_) {
		haxe_Log.trace("lineTo( " + this.x + ", " + this.y + ", " + x_ + ", " + y_ + ", width )",{ fileName : "trilateral2/Sketch.hx", lineNumber : 27, className : "trilateral2.Sketch", methodName : "tracerLine"});
	}
	,fillOnlyLine: function(x_,y_) {
	}
	,baseLine: function(x_,y_) {
		haxe_Log.trace("lineTo( " + this.x + ", " + this.y + ", " + x_ + ", " + y_ + ", width )",{ fileName : "trilateral2/Sketch.hx", lineNumber : 27, className : "trilateral2.Sketch", methodName : "tracerLine"});
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
		var _this2 = _this.pen;
		var color1 = -1;
		if(color1 == null) {
			color1 = -1;
		}
		if(color1 == -1) {
			color1 = _this2.currentColor;
		}
		_this2.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this2.transformMatrix != null) {
			_this2.drawType.transform(_this2.transformMatrix);
		}
		_this2.drawType.next();
		_this2.colorType.cornerColors(color1,color1,color1);
	}
	,crudeLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
		var _this2 = _this.pen;
		var color1 = -1;
		if(color1 == null) {
			color1 = -1;
		}
		if(color1 == -1) {
			color1 = _this2.currentColor;
		}
		_this2.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this2.transformMatrix != null) {
			_this2.drawType.transform(_this2.transformMatrix);
		}
		_this2.drawType.next();
		_this2.colorType.cornerColors(color1,color1,color1);
	}
	,roundEndLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var endLineCurve = 3;
		if(endLineCurve == null) {
			endLineCurve = 0;
		}
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		switch(endLineCurve) {
		case 0:
			break;
		case 1:
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f1;
				if(gamma >= 0 && gamma > Math.PI) {
					f1 = gamma;
				} else {
					var a1 = gamma % (2 * Math.PI);
					f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
				}
				var this2 = f1;
				var zb = this2;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f2;
				if(beta >= 0 && beta > Math.PI) {
					f2 = beta;
				} else {
					var a2 = beta % (2 * Math.PI);
					f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
				}
				var this3 = f2;
				var za1 = this3;
				var f3;
				if(gamma >= 0 && gamma > Math.PI) {
					f3 = gamma;
				} else {
					var a3 = gamma % (2 * Math.PI);
					f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
				}
				var this4 = f3;
				var zb1 = this4;
				var fa1 = za1;
				var fb1 = zb1;
				var theta1 = Math.abs(fa1 - fb1);
				var clockwise1 = fa1 < fb1;
				var dif2 = clockwise1 ? theta1 : -theta1;
				dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f4;
				if(beta >= 0 && beta > Math.PI) {
					f4 = beta;
				} else {
					var a4 = beta % (2 * Math.PI);
					f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
				}
				var this5 = f4;
				var za2 = this5;
				var f5;
				if(gamma >= 0 && gamma > Math.PI) {
					f5 = gamma;
				} else {
					var a5 = gamma % (2 * Math.PI);
					f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
				}
				var this6 = f5;
				var zb2 = this6;
				var fa2 = za2;
				var fb2 = zb2;
				var theta2 = Math.abs(fa2 - fb2);
				var smallest = theta2 <= Math.PI;
				var clockwise2 = fa2 < fb2;
				var dif3 = clockwise2 ? theta2 : -theta2;
				dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
				break;
			case 3:
				var f6;
				if(beta >= 0 && beta > Math.PI) {
					f6 = beta;
				} else {
					var a6 = beta % (2 * Math.PI);
					f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
				}
				var this7 = f6;
				var za3 = this7;
				var f7;
				if(gamma >= 0 && gamma > Math.PI) {
					f7 = gamma;
				} else {
					var a7 = gamma % (2 * Math.PI);
					f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
				}
				var this8 = f7;
				var zb3 = this8;
				var fa3 = za3;
				var fb3 = zb3;
				var theta3 = Math.abs(fa3 - fb3);
				var largest = theta3 > Math.PI;
				var clockwise3 = fa3 < fb3;
				var dif4 = clockwise3 ? theta3 : -theta3;
				dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step1 = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax_ + radius * Math.sin(angle);
				cy = ay_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = 0;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			break;
		case 2:
			var radius1 = width_ / 2;
			var beta1 = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 - Math.PI;
			var drawType1 = _this.pen.drawType;
			var sides1 = 36;
			if(sides1 == null) {
				sides1 = 36;
			}
			var pi1 = Math.PI;
			var step2 = pi1 * 2 / sides1;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f8;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f8 = beta1;
				} else {
					var a8 = beta1 % (2 * Math.PI);
					f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
				}
				var this9 = f8;
				var za4 = this9;
				var f9;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f9 = gamma1;
				} else {
					var a9 = gamma1 % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var zb4 = this10;
				var fa4 = za4;
				var fb4 = zb4;
				var theta4 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta4 : -theta4;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f10;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f10 = beta1;
				} else {
					var a10 = beta1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var za5 = this11;
				var f11;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f11 = gamma1;
				} else {
					var a11 = gamma1 % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var zb5 = this12;
				var fa5 = za5;
				var fb5 = zb5;
				var theta5 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta5 : -theta5;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f12;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f12 = beta1;
				} else {
					var a12 = beta1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var za6 = this13;
				var f13;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f13 = gamma1;
				} else {
					var a13 = gamma1 % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var zb6 = this14;
				var fa6 = za6;
				var fb6 = zb6;
				var theta6 = Math.abs(fa6 - fb6);
				var smallest1 = theta6 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta6 : -theta6;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
				break;
			case 3:
				var f14;
				if(beta1 >= 0 && beta1 > Math.PI) {
					f14 = beta1;
				} else {
					var a14 = beta1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var za7 = this15;
				var f15;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f15 = gamma1;
				} else {
					var a15 = gamma1 % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var zb7 = this16;
				var fa7 = za7;
				var fb7 = zb7;
				var theta7 = Math.abs(fa7 - fb7);
				var largest1 = theta7 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta7 : -theta7;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			}
			var positive1 = dif5 >= 0;
			var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
			var step3 = dif5 / totalSteps1;
			var angle1 = beta1;
			var cx1;
			var cy1;
			var bx1 = 0;
			var by1 = 0;
			var _g2 = 0;
			var _g11 = totalSteps1 + 1;
			while(_g2 < _g11) {
				var i1 = _g2++;
				cx1 = x_ + radius1 * Math.sin(angle1);
				cy1 = y_ + radius1 * Math.cos(angle1);
				if(i1 != 0) {
					drawType1.triangle(x_,y_,0,bx1,by1,0,cx1,cy1,0);
					var m1 = trilateral2_Shaper.transformMatrix;
					if(m1 != null) {
						drawType1.transform(m1);
					}
					drawType1.next();
				}
				angle1 += step3;
				bx1 = cx1;
				by1 = cy1;
			}
			var len1 = totalSteps1;
			var _this2 = _this.pen;
			var color1 = 0;
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.colorType.colorTriangles(color1,len1);
			break;
		case 3:
			var radius2 = width_ / 2;
			var beta2 = -_this.angle1 - Math.PI / 2;
			var gamma2 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var drawType2 = _this.pen.drawType;
			var sides2 = 36;
			if(sides2 == null) {
				sides2 = 36;
			}
			var pi2 = Math.PI;
			var step4 = pi2 * 2 / sides2;
			var dif10;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f16;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f16 = beta2;
				} else {
					var a16 = beta2 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var za8 = this17;
				var f17;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f17 = gamma2;
				} else {
					var a17 = gamma2 % (2 * Math.PI);
					f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
				}
				var this18 = f17;
				var zb8 = this18;
				var fa8 = za8;
				var fb8 = zb8;
				var theta8 = Math.abs(fa8 - fb8);
				var clockwise8 = fa8 < fb8;
				var dif11 = clockwise8 ? theta8 : -theta8;
				dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
				break;
			case 1:
				var f18;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f18 = beta2;
				} else {
					var a18 = beta2 % (2 * Math.PI);
					f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
				}
				var this19 = f18;
				var za9 = this19;
				var f19;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f19 = gamma2;
				} else {
					var a19 = gamma2 % (2 * Math.PI);
					f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
				}
				var this20 = f19;
				var zb9 = this20;
				var fa9 = za9;
				var fb9 = zb9;
				var theta9 = Math.abs(fa9 - fb9);
				var clockwise9 = fa9 < fb9;
				var dif12 = clockwise9 ? theta9 : -theta9;
				dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
				break;
			case 2:
				var f20;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f20 = beta2;
				} else {
					var a20 = beta2 % (2 * Math.PI);
					f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
				}
				var this21 = f20;
				var za10 = this21;
				var f21;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f21 = gamma2;
				} else {
					var a21 = gamma2 % (2 * Math.PI);
					f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
				}
				var this22 = f21;
				var zb10 = this22;
				var fa10 = za10;
				var fb10 = zb10;
				var theta10 = Math.abs(fa10 - fb10);
				var smallest2 = theta10 <= Math.PI;
				var clockwise10 = fa10 < fb10;
				var dif13 = clockwise10 ? theta10 : -theta10;
				dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
				break;
			case 3:
				var f22;
				if(beta2 >= 0 && beta2 > Math.PI) {
					f22 = beta2;
				} else {
					var a22 = beta2 % (2 * Math.PI);
					f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
				}
				var this23 = f22;
				var za11 = this23;
				var f23;
				if(gamma2 >= 0 && gamma2 > Math.PI) {
					f23 = gamma2;
				} else {
					var a23 = gamma2 % (2 * Math.PI);
					f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
				}
				var this24 = f23;
				var zb11 = this24;
				var fa11 = za11;
				var fb11 = zb11;
				var theta11 = Math.abs(fa11 - fb11);
				var largest2 = theta11 > Math.PI;
				var clockwise11 = fa11 < fb11;
				var dif14 = clockwise11 ? theta11 : -theta11;
				dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
				break;
			}
			var positive2 = dif10 >= 0;
			var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
			var step5 = dif10 / totalSteps2;
			var angle2 = beta2;
			var cx2;
			var cy2;
			var bx2 = 0;
			var by2 = 0;
			var _g3 = 0;
			var _g12 = totalSteps2 + 1;
			while(_g3 < _g12) {
				var i2 = _g3++;
				cx2 = ax_ + radius2 * Math.sin(angle2);
				cy2 = ay_ + radius2 * Math.cos(angle2);
				if(i2 != 0) {
					drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
					var m2 = trilateral2_Shaper.transformMatrix;
					if(m2 != null) {
						drawType2.transform(m2);
					}
					drawType2.next();
				}
				angle2 += step5;
				bx2 = cx2;
				by2 = cy2;
			}
			var len2 = totalSteps2;
			var _this3 = _this.pen;
			var color2 = 0;
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.colorType.colorTriangles(color2,len2);
			var radius3 = width_ / 2;
			var beta3 = -_this.angle1 - Math.PI / 2;
			var gamma3 = -_this.angle1 - Math.PI / 2 - Math.PI;
			var drawType3 = _this.pen.drawType;
			var sides3 = 36;
			if(sides3 == null) {
				sides3 = 36;
			}
			var pi3 = Math.PI;
			var step6 = pi3 * 2 / sides3;
			var dif15;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f24;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f24 = beta3;
				} else {
					var a24 = beta3 % (2 * Math.PI);
					f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
				}
				var this25 = f24;
				var za12 = this25;
				var f25;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f25 = gamma3;
				} else {
					var a25 = gamma3 % (2 * Math.PI);
					f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
				}
				var this26 = f25;
				var zb12 = this26;
				var fa12 = za12;
				var fb12 = zb12;
				var theta12 = Math.abs(fa12 - fb12);
				var clockwise12 = fa12 < fb12;
				var dif16 = clockwise12 ? theta12 : -theta12;
				dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
				break;
			case 1:
				var f26;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f26 = beta3;
				} else {
					var a26 = beta3 % (2 * Math.PI);
					f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
				}
				var this27 = f26;
				var za13 = this27;
				var f27;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f27 = gamma3;
				} else {
					var a27 = gamma3 % (2 * Math.PI);
					f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
				}
				var this28 = f27;
				var zb13 = this28;
				var fa13 = za13;
				var fb13 = zb13;
				var theta13 = Math.abs(fa13 - fb13);
				var clockwise13 = fa13 < fb13;
				var dif17 = clockwise13 ? theta13 : -theta13;
				dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
				break;
			case 2:
				var f28;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f28 = beta3;
				} else {
					var a28 = beta3 % (2 * Math.PI);
					f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
				}
				var this29 = f28;
				var za14 = this29;
				var f29;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f29 = gamma3;
				} else {
					var a29 = gamma3 % (2 * Math.PI);
					f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
				}
				var this30 = f29;
				var zb14 = this30;
				var fa14 = za14;
				var fb14 = zb14;
				var theta14 = Math.abs(fa14 - fb14);
				var smallest3 = theta14 <= Math.PI;
				var clockwise14 = fa14 < fb14;
				var dif18 = clockwise14 ? theta14 : -theta14;
				dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
				break;
			case 3:
				var f30;
				if(beta3 >= 0 && beta3 > Math.PI) {
					f30 = beta3;
				} else {
					var a30 = beta3 % (2 * Math.PI);
					f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
				}
				var this31 = f30;
				var za15 = this31;
				var f31;
				if(gamma3 >= 0 && gamma3 > Math.PI) {
					f31 = gamma3;
				} else {
					var a31 = gamma3 % (2 * Math.PI);
					f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
				}
				var this32 = f31;
				var zb15 = this32;
				var fa15 = za15;
				var fb15 = zb15;
				var theta15 = Math.abs(fa15 - fb15);
				var largest3 = theta15 > Math.PI;
				var clockwise15 = fa15 < fb15;
				var dif19 = clockwise15 ? theta15 : -theta15;
				dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
				break;
			}
			var positive3 = dif15 >= 0;
			var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
			var step7 = dif15 / totalSteps3;
			var angle3 = beta3;
			var cx3;
			var cy3;
			var bx3 = 0;
			var by3 = 0;
			var _g4 = 0;
			var _g13 = totalSteps3 + 1;
			while(_g4 < _g13) {
				var i3 = _g4++;
				cx3 = x_ + radius3 * Math.sin(angle3);
				cy3 = y_ + radius3 * Math.cos(angle3);
				if(i3 != 0) {
					drawType3.triangle(x_,y_,0,bx3,by3,0,cx3,cy3,0);
					var m3 = trilateral2_Shaper.transformMatrix;
					if(m3 != null) {
						drawType3.transform(m3);
					}
					drawType3.next();
				}
				angle3 += step7;
				bx3 = cx3;
				by3 = cy3;
			}
			var len3 = totalSteps3;
			var _this4 = _this.pen;
			var color3 = 0;
			if(color3 == -1) {
				color3 = _this4.currentColor;
			}
			_this4.colorType.colorTriangles(color3,len3);
			break;
		}
		var _this5 = _this.pen;
		var color4 = -1;
		if(color4 == null) {
			color4 = -1;
		}
		if(color4 == -1) {
			color4 = _this5.currentColor;
		}
		_this5.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this5.transformMatrix != null) {
			_this5.drawType.transform(_this5.transformMatrix);
		}
		_this5.drawType.next();
		_this5.colorType.cornerColors(color4,color4,color4);
		var _this6 = _this.pen;
		var color5 = -1;
		if(color5 == null) {
			color5 = -1;
		}
		if(color5 == -1) {
			color5 = _this6.currentColor;
		}
		_this6.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this6.transformMatrix != null) {
			_this6.drawType.transform(_this6.transformMatrix);
		}
		_this6.drawType.next();
		_this6.colorType.cornerColors(color5,color5,color5);
	}
	,mediumLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = false;
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(_this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(_this.count != 0) {
			_this.addQuads(clockWise,width_);
		}
		_this.quadIndex = _this.pen.drawType.get_pos();
		if(_this.count == 0) {
			_this.penultimateAX = _this.dxPrev;
			_this.penultimateAY = _this.dyPrev;
			_this.lastAntiX = _this.ex;
			_this.lastAntiY = _this.ey;
			_this.penultimateCX = _this.dx;
			_this.penultimateCY = _this.dy;
			_this.lastClockX = _this.exPrev;
			_this.lastClockY = _this.eyPrev;
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(clockWise && !_this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			}
			if(clockWise && _this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this6 = _this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this6.currentColor;
				}
				_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this6.transformMatrix != null) {
					_this6.drawType.transform(_this6.transformMatrix);
				}
				_this6.drawType.next();
				_this6.colorType.cornerColors(color5,color5,color5);
				var _this7 = _this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this7.currentColor;
				}
				_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color6,color6,color6);
			}
			if(!clockWise && !_this.lastClock) {
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.jx;
				_this.lastClockY = _this.jy;
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				var _this8 = _this.pen;
				var color7 = -1;
				if(color7 == null) {
					color7 = -1;
				}
				if(color7 == -1) {
					color7 = _this8.currentColor;
				}
				_this8.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
				if(_this8.transformMatrix != null) {
					_this8.drawType.transform(_this8.transformMatrix);
				}
				_this8.drawType.next();
				_this8.colorType.cornerColors(color7,color7,color7);
				var _this9 = _this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this9.currentColor;
				}
				_this9.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color8,color8,color8);
			}
			if(!clockWise && _this.lastClock) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.jx;
				_this.penultimateCY = _this.jy;
				_this.lastClockX = _this.dx;
				_this.lastClockY = _this.dy;
				var _this10 = _this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this10.currentColor;
				}
				_this10.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this10.transformMatrix != null) {
					_this10.drawType.transform(_this10.transformMatrix);
				}
				_this10.drawType.next();
				_this10.colorType.cornerColors(color9,color9,color9);
				var _this11 = _this.pen;
				var color10 = -1;
				if(color10 == null) {
					color10 = -1;
				}
				if(color10 == -1) {
					color10 = _this11.currentColor;
				}
				_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
				if(_this11.transformMatrix != null) {
					_this11.drawType.transform(_this11.transformMatrix);
				}
				_this11.drawType.next();
				_this11.colorType.cornerColors(color10,color10,color10);
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this12 = _this.pen;
				var color11 = -1;
				if(color11 == -1) {
					color11 = _this12.currentColor;
				}
				_this12.colorType.colorTriangles(color11,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this13 = _this.pen;
				var color12 = -1;
				if(color12 == -1) {
					color12 = _this13.currentColor;
				}
				_this13.colorType.colorTriangles(color12,len3);
			}
		} else if(_this.count != 0) {
			if(clockWise) {
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == null) {
					color13 = -1;
				}
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this14.transformMatrix != null) {
					_this14.drawType.transform(_this14.transformMatrix);
				}
				_this14.drawType.next();
				_this14.colorType.cornerColors(color13,color13,color13);
			} else {
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == null) {
					color14 = -1;
				}
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this15.transformMatrix != null) {
					_this15.drawType.transform(_this15.transformMatrix);
				}
				_this15.drawType.next();
				_this15.colorType.cornerColors(color14,color14,color14);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && _this.count != 0) {
			if(clockWise) {
				var _this16 = _this.pen;
				var color15 = -1;
				if(color15 == null) {
					color15 = -1;
				}
				if(color15 == -1) {
					color15 = _this16.currentColor;
				}
				_this16.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this16.transformMatrix != null) {
					_this16.drawType.transform(_this16.transformMatrix);
				}
				_this16.drawType.next();
				_this16.colorType.cornerColors(color15,color15,color15);
				var _this17 = _this.pen;
				var color16 = -1;
				if(color16 == null) {
					color16 = -1;
				}
				if(color16 == -1) {
					color16 = _this17.currentColor;
				}
				_this17.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color16,color16,color16);
			} else {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,mediumOverlapLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = false;
		var overlap = true;
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(!overlap && _this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(overlap) {
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(_this.count != 0) {
				_this.addQuads(clockWise,width_);
			}
			_this.quadIndex = _this.pen.drawType.get_pos();
			if(_this.count == 0) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			} else {
				if(clockWise && !_this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this6 = _this.pen;
					var color5 = -1;
					if(color5 == null) {
						color5 = -1;
					}
					if(color5 == -1) {
						color5 = _this6.currentColor;
					}
					_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this6.transformMatrix != null) {
						_this6.drawType.transform(_this6.transformMatrix);
					}
					_this6.drawType.next();
					_this6.colorType.cornerColors(color5,color5,color5);
					var _this7 = _this.pen;
					var color6 = -1;
					if(color6 == null) {
						color6 = -1;
					}
					if(color6 == -1) {
						color6 = _this7.currentColor;
					}
					_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this7.transformMatrix != null) {
						_this7.drawType.transform(_this7.transformMatrix);
					}
					_this7.drawType.next();
					_this7.colorType.cornerColors(color6,color6,color6);
				}
				if(clockWise && _this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this8 = _this.pen;
					var color7 = -1;
					if(color7 == null) {
						color7 = -1;
					}
					if(color7 == -1) {
						color7 = _this8.currentColor;
					}
					_this8.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this8.transformMatrix != null) {
						_this8.drawType.transform(_this8.transformMatrix);
					}
					_this8.drawType.next();
					_this8.colorType.cornerColors(color7,color7,color7);
					var _this9 = _this.pen;
					var color8 = -1;
					if(color8 == null) {
						color8 = -1;
					}
					if(color8 == -1) {
						color8 = _this9.currentColor;
					}
					_this9.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this9.transformMatrix != null) {
						_this9.drawType.transform(_this9.transformMatrix);
					}
					_this9.drawType.next();
					_this9.colorType.cornerColors(color8,color8,color8);
				}
				if(!clockWise && !_this.lastClock) {
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.jx;
					_this.lastClockY = _this.jy;
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					var _this10 = _this.pen;
					var color9 = -1;
					if(color9 == null) {
						color9 = -1;
					}
					if(color9 == -1) {
						color9 = _this10.currentColor;
					}
					_this10.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
					if(_this10.transformMatrix != null) {
						_this10.drawType.transform(_this10.transformMatrix);
					}
					_this10.drawType.next();
					_this10.colorType.cornerColors(color9,color9,color9);
					var _this11 = _this.pen;
					var color10 = -1;
					if(color10 == null) {
						color10 = -1;
					}
					if(color10 == -1) {
						color10 = _this11.currentColor;
					}
					_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this11.transformMatrix != null) {
						_this11.drawType.transform(_this11.transformMatrix);
					}
					_this11.drawType.next();
					_this11.colorType.cornerColors(color10,color10,color10);
				}
				if(!clockWise && _this.lastClock) {
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.jx;
					_this.penultimateCY = _this.jy;
					_this.lastClockX = _this.dx;
					_this.lastClockY = _this.dy;
					var _this12 = _this.pen;
					var color11 = -1;
					if(color11 == null) {
						color11 = -1;
					}
					if(color11 == -1) {
						color11 = _this12.currentColor;
					}
					_this12.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this12.transformMatrix != null) {
						_this12.drawType.transform(_this12.transformMatrix);
					}
					_this12.drawType.next();
					_this12.colorType.cornerColors(color11,color11,color11);
					var _this13 = _this.pen;
					var color12 = -1;
					if(color12 == null) {
						color12 = -1;
					}
					if(color12 == -1) {
						color12 = _this13.currentColor;
					}
					_this13.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
					if(_this13.transformMatrix != null) {
						_this13.drawType.transform(_this13.transformMatrix);
					}
					_this13.drawType.next();
					_this13.colorType.cornerColors(color12,color12,color12);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.colorType.colorTriangles(color13,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.colorType.colorTriangles(color14,len3);
			}
		} else if(_this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this16 = _this.pen;
					var color15 = -1;
					if(color15 == null) {
						color15 = -1;
					}
					if(color15 == -1) {
						color15 = _this16.currentColor;
					}
					_this16.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.ax,_this.ay,0);
					if(_this16.transformMatrix != null) {
						_this16.drawType.transform(_this16.transformMatrix);
					}
					_this16.drawType.next();
					_this16.colorType.cornerColors(color15,color15,color15);
				} else {
					var _this17 = _this.pen;
					var color16 = -1;
					if(color16 == null) {
						color16 = -1;
					}
					if(color16 == -1) {
						color16 = _this17.currentColor;
					}
					_this17.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.ax,_this.ay,0);
					if(_this17.transformMatrix != null) {
						_this17.drawType.transform(_this17.transformMatrix);
					}
					_this17.drawType.next();
					_this17.colorType.cornerColors(color16,color16,color16);
				}
			} else if(clockWise) {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
			} else {
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && !overlap && _this.count != 0) {
			if(clockWise) {
				var _this20 = _this.pen;
				var color19 = -1;
				if(color19 == null) {
					color19 = -1;
				}
				if(color19 == -1) {
					color19 = _this20.currentColor;
				}
				_this20.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this20.transformMatrix != null) {
					_this20.drawType.transform(_this20.transformMatrix);
				}
				_this20.drawType.next();
				_this20.colorType.cornerColors(color19,color19,color19);
				var _this21 = _this.pen;
				var color20 = -1;
				if(color20 == null) {
					color20 = -1;
				}
				if(color20 == -1) {
					color20 = _this21.currentColor;
				}
				_this21.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color20,color20,color20);
			} else {
				var _this22 = _this.pen;
				var color21 = -1;
				if(color21 == null) {
					color21 = -1;
				}
				if(color21 == -1) {
					color21 = _this22.currentColor;
				}
				_this22.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this22.transformMatrix != null) {
					_this22.drawType.transform(_this22.transformMatrix);
				}
				_this22.drawType.next();
				_this22.colorType.cornerColors(color21,color21,color21);
				var _this23 = _this.pen;
				var color22 = -1;
				if(color22 == null) {
					color22 = -1;
				}
				if(color22 == -1) {
					color22 = _this23.currentColor;
				}
				_this23.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this23.transformMatrix != null) {
					_this23.drawType.transform(_this23.transformMatrix);
				}
				_this23.drawType.next();
				_this23.colorType.cornerColors(color22,color22,color22);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,fineLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = true;
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(_this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(_this.count != 0) {
			_this.addQuads(clockWise,width_);
		}
		_this.quadIndex = _this.pen.drawType.get_pos();
		if(_this.count == 0) {
			_this.penultimateAX = _this.dxPrev;
			_this.penultimateAY = _this.dyPrev;
			_this.lastAntiX = _this.ex;
			_this.lastAntiY = _this.ey;
			_this.penultimateCX = _this.dx;
			_this.penultimateCY = _this.dy;
			_this.lastClockX = _this.exPrev;
			_this.lastClockY = _this.eyPrev;
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == null) {
				color1 = -1;
			}
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == null) {
				color2 = -1;
			}
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(clockWise && !_this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			}
			if(clockWise && _this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this6 = _this.pen;
				var color5 = -1;
				if(color5 == null) {
					color5 = -1;
				}
				if(color5 == -1) {
					color5 = _this6.currentColor;
				}
				_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this6.transformMatrix != null) {
					_this6.drawType.transform(_this6.transformMatrix);
				}
				_this6.drawType.next();
				_this6.colorType.cornerColors(color5,color5,color5);
				var _this7 = _this.pen;
				var color6 = -1;
				if(color6 == null) {
					color6 = -1;
				}
				if(color6 == -1) {
					color6 = _this7.currentColor;
				}
				_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this7.transformMatrix != null) {
					_this7.drawType.transform(_this7.transformMatrix);
				}
				_this7.drawType.next();
				_this7.colorType.cornerColors(color6,color6,color6);
			}
			if(!clockWise && !_this.lastClock) {
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.jx;
				_this.lastClockY = _this.jy;
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				var _this8 = _this.pen;
				var color7 = -1;
				if(color7 == null) {
					color7 = -1;
				}
				if(color7 == -1) {
					color7 = _this8.currentColor;
				}
				_this8.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
				if(_this8.transformMatrix != null) {
					_this8.drawType.transform(_this8.transformMatrix);
				}
				_this8.drawType.next();
				_this8.colorType.cornerColors(color7,color7,color7);
				var _this9 = _this.pen;
				var color8 = -1;
				if(color8 == null) {
					color8 = -1;
				}
				if(color8 == -1) {
					color8 = _this9.currentColor;
				}
				_this9.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this9.transformMatrix != null) {
					_this9.drawType.transform(_this9.transformMatrix);
				}
				_this9.drawType.next();
				_this9.colorType.cornerColors(color8,color8,color8);
			}
			if(!clockWise && _this.lastClock) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.jx;
				_this.penultimateCY = _this.jy;
				_this.lastClockX = _this.dx;
				_this.lastClockY = _this.dy;
				var _this10 = _this.pen;
				var color9 = -1;
				if(color9 == null) {
					color9 = -1;
				}
				if(color9 == -1) {
					color9 = _this10.currentColor;
				}
				_this10.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this10.transformMatrix != null) {
					_this10.drawType.transform(_this10.transformMatrix);
				}
				_this10.drawType.next();
				_this10.colorType.cornerColors(color9,color9,color9);
				var _this11 = _this.pen;
				var color10 = -1;
				if(color10 == null) {
					color10 = -1;
				}
				if(color10 == -1) {
					color10 = _this11.currentColor;
				}
				_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
				if(_this11.transformMatrix != null) {
					_this11.drawType.transform(_this11.transformMatrix);
				}
				_this11.drawType.next();
				_this11.colorType.cornerColors(color10,color10,color10);
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this12 = _this.pen;
				var color11 = -1;
				if(color11 == -1) {
					color11 = _this12.currentColor;
				}
				_this12.colorType.colorTriangles(color11,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this13 = _this.pen;
				var color12 = -1;
				if(color12 == -1) {
					color12 = _this13.currentColor;
				}
				_this13.colorType.colorTriangles(color12,len3);
			}
		} else if(_this.count != 0) {
			if(clockWise) {
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == null) {
					color13 = -1;
				}
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this14.transformMatrix != null) {
					_this14.drawType.transform(_this14.transformMatrix);
				}
				_this14.drawType.next();
				_this14.colorType.cornerColors(color13,color13,color13);
			} else {
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == null) {
					color14 = -1;
				}
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this15.transformMatrix != null) {
					_this15.drawType.transform(_this15.transformMatrix);
				}
				_this15.drawType.next();
				_this15.colorType.cornerColors(color14,color14,color14);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && _this.count != 0) {
			if(clockWise) {
				var _this16 = _this.pen;
				var color15 = -1;
				if(color15 == null) {
					color15 = -1;
				}
				if(color15 == -1) {
					color15 = _this16.currentColor;
				}
				_this16.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this16.transformMatrix != null) {
					_this16.drawType.transform(_this16.transformMatrix);
				}
				_this16.drawType.next();
				_this16.colorType.cornerColors(color15,color15,color15);
				var _this17 = _this.pen;
				var color16 = -1;
				if(color16 == null) {
					color16 = -1;
				}
				if(color16 == -1) {
					color16 = _this17.currentColor;
				}
				_this17.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this17.transformMatrix != null) {
					_this17.drawType.transform(_this17.transformMatrix);
				}
				_this17.drawType.next();
				_this17.colorType.cornerColors(color16,color16,color16);
			} else {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,fineOverlapLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = true;
		var overlap = true;
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f1;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f1 = theta1;
			} else {
				var a1 = theta1 % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this2 = f1;
			var zb = this2;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f2 = theta0;
			} else {
				var a2 = theta0 % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this3 = f2;
			var za1 = this3;
			var f3;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f3 = theta1;
			} else {
				var a3 = theta1 % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this4 = f3;
			var zb1 = this4;
			var fa1 = za1;
			var fb1 = zb1;
			var theta2 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta2 : -theta2;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f4 = theta0;
			} else {
				var a4 = theta0 % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this5 = f4;
			var za2 = this5;
			var f5;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f5 = theta1;
			} else {
				var a5 = theta1 % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this6 = f5;
			var zb2 = this6;
			var fa2 = za2;
			var fb2 = zb2;
			var theta3 = Math.abs(fa2 - fb2);
			var smallest = theta3 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta3 : -theta3;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		case 3:
			var f6;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f6 = theta0;
			} else {
				var a6 = theta0 % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this7 = f6;
			var za3 = this7;
			var f7;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f7 = theta1;
			} else {
				var a7 = theta1 % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this8 = f7;
			var zb3 = this8;
			var fa3 = za3;
			var fb3 = zb3;
			var theta4 = Math.abs(fa3 - fb3);
			var largest = theta4 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta4 : -theta4;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta4) : 2 * Math.PI - theta4;
			break;
		}
		if(!overlap && _this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f8;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f8 = theta0;
			} else {
				var a8 = (theta0 + Math.PI) % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 - Math.PI : a8 + Math.PI;
			}
			var this9 = f8;
			var start = this9;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma1 = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif5;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f9;
				if(beta >= 0 && beta > Math.PI) {
					f9 = beta;
				} else {
					var a9 = beta % (2 * Math.PI);
					f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
				}
				var this10 = f9;
				var za4 = this10;
				var f10;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f10 = gamma1;
				} else {
					var a10 = gamma1 % (2 * Math.PI);
					f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
				}
				var this11 = f10;
				var zb4 = this11;
				var fa4 = za4;
				var fb4 = zb4;
				var theta5 = Math.abs(fa4 - fb4);
				var clockwise4 = fa4 < fb4;
				var dif6 = clockwise4 ? theta5 : -theta5;
				dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
				break;
			case 1:
				var f11;
				if(beta >= 0 && beta > Math.PI) {
					f11 = beta;
				} else {
					var a11 = beta % (2 * Math.PI);
					f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
				}
				var this12 = f11;
				var za5 = this12;
				var f12;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f12 = gamma1;
				} else {
					var a12 = gamma1 % (2 * Math.PI);
					f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
				}
				var this13 = f12;
				var zb5 = this13;
				var fa5 = za5;
				var fb5 = zb5;
				var theta6 = Math.abs(fa5 - fb5);
				var clockwise5 = fa5 < fb5;
				var dif7 = clockwise5 ? theta6 : -theta6;
				dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
				break;
			case 2:
				var f13;
				if(beta >= 0 && beta > Math.PI) {
					f13 = beta;
				} else {
					var a13 = beta % (2 * Math.PI);
					f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
				}
				var this14 = f13;
				var za6 = this14;
				var f14;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f14 = gamma1;
				} else {
					var a14 = gamma1 % (2 * Math.PI);
					f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
				}
				var this15 = f14;
				var zb6 = this15;
				var fa6 = za6;
				var fb6 = zb6;
				var theta7 = Math.abs(fa6 - fb6);
				var smallest1 = theta7 <= Math.PI;
				var clockwise6 = fa6 < fb6;
				var dif8 = clockwise6 ? theta7 : -theta7;
				dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
				break;
			case 3:
				var f15;
				if(beta >= 0 && beta > Math.PI) {
					f15 = beta;
				} else {
					var a15 = beta % (2 * Math.PI);
					f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
				}
				var this16 = f15;
				var za7 = this16;
				var f16;
				if(gamma1 >= 0 && gamma1 > Math.PI) {
					f16 = gamma1;
				} else {
					var a16 = gamma1 % (2 * Math.PI);
					f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
				}
				var this17 = f16;
				var zb7 = this17;
				var fa7 = za7;
				var fb7 = zb7;
				var theta8 = Math.abs(fa7 - fb7);
				var largest1 = theta8 > Math.PI;
				var clockwise7 = fa7 < fb7;
				var dif9 = clockwise7 ? theta8 : -theta8;
				dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
				break;
			}
			var positive = dif5 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif5) / step);
			var step1 = dif5 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step1;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len1 = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g2 = 0;
			var _g11 = p4;
			while(_g2 < _g11) {
				var i1 = _g2++;
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1 + 1];
				_this.pointsAnti[pA++] = temp[len1 - 2 * i1];
			}
			var pC = _this.pointsClock.length;
			var _g21 = 0;
			var _g3 = p4;
			while(_g21 < _g3) {
				var i2 = _g21++;
				_this.pointsClock[pC++] = temp[i2 * 2 + len1 + 1];
				_this.pointsClock[pC++] = temp[i2 * 2 + len1];
			}
		}
		if(overlap) {
			var _this2 = _this.pen;
			var color1 = -1;
			if(color1 == -1) {
				color1 = _this2.currentColor;
			}
			_this2.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this2.transformMatrix != null) {
				_this2.drawType.transform(_this2.transformMatrix);
			}
			_this2.drawType.next();
			_this2.colorType.cornerColors(color1,color1,color1);
			var _this3 = _this.pen;
			var color2 = -1;
			if(color2 == -1) {
				color2 = _this3.currentColor;
			}
			_this3.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this3.transformMatrix != null) {
				_this3.drawType.transform(_this3.transformMatrix);
			}
			_this3.drawType.next();
			_this3.colorType.cornerColors(color2,color2,color2);
		} else {
			if(_this.count != 0) {
				_this.addQuads(clockWise,width_);
			}
			_this.quadIndex = _this.pen.drawType.get_pos();
			if(_this.count == 0) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this4 = _this.pen;
				var color3 = -1;
				if(color3 == null) {
					color3 = -1;
				}
				if(color3 == -1) {
					color3 = _this4.currentColor;
				}
				_this4.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this4.transformMatrix != null) {
					_this4.drawType.transform(_this4.transformMatrix);
				}
				_this4.drawType.next();
				_this4.colorType.cornerColors(color3,color3,color3);
				var _this5 = _this.pen;
				var color4 = -1;
				if(color4 == null) {
					color4 = -1;
				}
				if(color4 == -1) {
					color4 = _this5.currentColor;
				}
				_this5.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this5.transformMatrix != null) {
					_this5.drawType.transform(_this5.transformMatrix);
				}
				_this5.drawType.next();
				_this5.colorType.cornerColors(color4,color4,color4);
			} else {
				if(clockWise && !_this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this6 = _this.pen;
					var color5 = -1;
					if(color5 == null) {
						color5 = -1;
					}
					if(color5 == -1) {
						color5 = _this6.currentColor;
					}
					_this6.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this6.transformMatrix != null) {
						_this6.drawType.transform(_this6.transformMatrix);
					}
					_this6.drawType.next();
					_this6.colorType.cornerColors(color5,color5,color5);
					var _this7 = _this.pen;
					var color6 = -1;
					if(color6 == null) {
						color6 = -1;
					}
					if(color6 == -1) {
						color6 = _this7.currentColor;
					}
					_this7.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this7.transformMatrix != null) {
						_this7.drawType.transform(_this7.transformMatrix);
					}
					_this7.drawType.next();
					_this7.colorType.cornerColors(color6,color6,color6);
				}
				if(clockWise && _this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this8 = _this.pen;
					var color7 = -1;
					if(color7 == null) {
						color7 = -1;
					}
					if(color7 == -1) {
						color7 = _this8.currentColor;
					}
					_this8.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this8.transformMatrix != null) {
						_this8.drawType.transform(_this8.transformMatrix);
					}
					_this8.drawType.next();
					_this8.colorType.cornerColors(color7,color7,color7);
					var _this9 = _this.pen;
					var color8 = -1;
					if(color8 == null) {
						color8 = -1;
					}
					if(color8 == -1) {
						color8 = _this9.currentColor;
					}
					_this9.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this9.transformMatrix != null) {
						_this9.drawType.transform(_this9.transformMatrix);
					}
					_this9.drawType.next();
					_this9.colorType.cornerColors(color8,color8,color8);
				}
				if(!clockWise && !_this.lastClock) {
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.jx;
					_this.lastClockY = _this.jy;
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					var _this10 = _this.pen;
					var color9 = -1;
					if(color9 == null) {
						color9 = -1;
					}
					if(color9 == -1) {
						color9 = _this10.currentColor;
					}
					_this10.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
					if(_this10.transformMatrix != null) {
						_this10.drawType.transform(_this10.transformMatrix);
					}
					_this10.drawType.next();
					_this10.colorType.cornerColors(color9,color9,color9);
					var _this11 = _this.pen;
					var color10 = -1;
					if(color10 == null) {
						color10 = -1;
					}
					if(color10 == -1) {
						color10 = _this11.currentColor;
					}
					_this11.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this11.transformMatrix != null) {
						_this11.drawType.transform(_this11.transformMatrix);
					}
					_this11.drawType.next();
					_this11.colorType.cornerColors(color10,color10,color10);
				}
				if(!clockWise && _this.lastClock) {
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.jx;
					_this.penultimateCY = _this.jy;
					_this.lastClockX = _this.dx;
					_this.lastClockY = _this.dy;
					var _this12 = _this.pen;
					var color11 = -1;
					if(color11 == null) {
						color11 = -1;
					}
					if(color11 == -1) {
						color11 = _this12.currentColor;
					}
					_this12.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this12.transformMatrix != null) {
						_this12.drawType.transform(_this12.transformMatrix);
					}
					_this12.drawType.next();
					_this12.colorType.cornerColors(color11,color11,color11);
					var _this13 = _this.pen;
					var color12 = -1;
					if(color12 == null) {
						color12 = -1;
					}
					if(color12 == -1) {
						color12 = _this13.currentColor;
					}
					_this13.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
					if(_this13.transformMatrix != null) {
						_this13.drawType.transform(_this13.transformMatrix);
					}
					_this13.drawType.next();
					_this13.colorType.cornerColors(color12,color12,color12);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType1 = _this.pen.drawType;
				var radius1 = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi1 = Math.PI;
				var step2 = pi1 * 2 / 36;
				var positive1 = dif >= 0;
				var totalSteps1 = Math.ceil(Math.abs(dif) / step2);
				var step3 = dif / totalSteps1;
				var angle1 = theta0;
				var cx1;
				var cy1;
				var bx1 = 0;
				var by1 = 0;
				var p21 = edgePoly.length;
				var _g4 = 0;
				var _g12 = totalSteps1 + 1;
				while(_g4 < _g12) {
					var i3 = _g4++;
					cx1 = ax_ + radius1 * Math.sin(angle1);
					cy1 = ay_ + radius1 * Math.cos(angle1);
					edgePoly[p21++] = cx1;
					edgePoly[p21++] = cy1;
					if(i3 != 0) {
						drawType1.triangle(ax_,ay_,0,bx1,by1,0,cx1,cy1,0);
						var m1 = trilateral2_Shaper.transformMatrix;
						if(m1 != null) {
							drawType1.transform(m1);
						}
						drawType1.next();
					}
					angle1 += step3;
					bx1 = cx1;
					by1 = cy1;
				}
				var len2 = totalSteps1;
				var _this14 = _this.pen;
				var color13 = -1;
				if(color13 == -1) {
					color13 = _this14.currentColor;
				}
				_this14.colorType.colorTriangles(color13,len2);
			} else {
				var drawType2 = _this.pen.drawType;
				var radius2 = width_ / 2;
				var edgePoly1 = _this.pointsAnti;
				var pi2 = Math.PI;
				var step4 = pi2 * 2 / 36;
				var positive2 = dif >= 0;
				var totalSteps2 = Math.ceil(Math.abs(dif) / step4);
				var step5 = dif / totalSteps2;
				var angle2 = theta0;
				var cx2;
				var cy2;
				var bx2 = 0;
				var by2 = 0;
				var p22 = edgePoly1.length;
				var _g5 = 0;
				var _g13 = totalSteps2 + 1;
				while(_g5 < _g13) {
					var i4 = _g5++;
					cx2 = ax_ + radius2 * Math.sin(angle2);
					cy2 = ay_ + radius2 * Math.cos(angle2);
					edgePoly1[p22++] = cx2;
					edgePoly1[p22++] = cy2;
					if(i4 != 0) {
						drawType2.triangle(ax_,ay_,0,bx2,by2,0,cx2,cy2,0);
						var m2 = trilateral2_Shaper.transformMatrix;
						if(m2 != null) {
							drawType2.transform(m2);
						}
						drawType2.next();
					}
					angle2 += step5;
					bx2 = cx2;
					by2 = cy2;
				}
				var len3 = totalSteps2;
				var _this15 = _this.pen;
				var color14 = -1;
				if(color14 == -1) {
					color14 = _this15.currentColor;
				}
				_this15.colorType.colorTriangles(color14,len3);
			}
		} else if(_this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this16 = _this.pen;
					var color15 = -1;
					if(color15 == null) {
						color15 = -1;
					}
					if(color15 == -1) {
						color15 = _this16.currentColor;
					}
					_this16.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.ax,_this.ay,0);
					if(_this16.transformMatrix != null) {
						_this16.drawType.transform(_this16.transformMatrix);
					}
					_this16.drawType.next();
					_this16.colorType.cornerColors(color15,color15,color15);
				} else {
					var _this17 = _this.pen;
					var color16 = -1;
					if(color16 == null) {
						color16 = -1;
					}
					if(color16 == -1) {
						color16 = _this17.currentColor;
					}
					_this17.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.ax,_this.ay,0);
					if(_this17.transformMatrix != null) {
						_this17.drawType.transform(_this17.transformMatrix);
					}
					_this17.drawType.next();
					_this17.colorType.cornerColors(color16,color16,color16);
				}
			} else if(clockWise) {
				var _this18 = _this.pen;
				var color17 = -1;
				if(color17 == null) {
					color17 = -1;
				}
				if(color17 == -1) {
					color17 = _this18.currentColor;
				}
				_this18.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this18.transformMatrix != null) {
					_this18.drawType.transform(_this18.transformMatrix);
				}
				_this18.drawType.next();
				_this18.colorType.cornerColors(color17,color17,color17);
			} else {
				var _this19 = _this.pen;
				var color18 = -1;
				if(color18 == null) {
					color18 = -1;
				}
				if(color18 == -1) {
					color18 = _this19.currentColor;
				}
				_this19.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this19.transformMatrix != null) {
					_this19.drawType.transform(_this19.transformMatrix);
				}
				_this19.drawType.next();
				_this19.colorType.cornerColors(color18,color18,color18);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && !overlap && _this.count != 0) {
			if(clockWise) {
				var _this20 = _this.pen;
				var color19 = -1;
				if(color19 == null) {
					color19 = -1;
				}
				if(color19 == -1) {
					color19 = _this20.currentColor;
				}
				_this20.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this20.transformMatrix != null) {
					_this20.drawType.transform(_this20.transformMatrix);
				}
				_this20.drawType.next();
				_this20.colorType.cornerColors(color19,color19,color19);
				var _this21 = _this.pen;
				var color20 = -1;
				if(color20 == null) {
					color20 = -1;
				}
				if(color20 == -1) {
					color20 = _this21.currentColor;
				}
				_this21.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this21.transformMatrix != null) {
					_this21.drawType.transform(_this21.transformMatrix);
				}
				_this21.drawType.next();
				_this21.colorType.cornerColors(color20,color20,color20);
			} else {
				var _this22 = _this.pen;
				var color21 = -1;
				if(color21 == null) {
					color21 = -1;
				}
				if(color21 == -1) {
					color21 = _this22.currentColor;
				}
				_this22.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this22.transformMatrix != null) {
					_this22.drawType.transform(_this22.transformMatrix);
				}
				_this22.drawType.next();
				_this22.colorType.cornerColors(color21,color21,color21);
				var _this23 = _this.pen;
				var color22 = -1;
				if(color22 == null) {
					color22 = -1;
				}
				if(color22 == -1) {
					color22 = _this23.currentColor;
				}
				_this23.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this23.transformMatrix != null) {
					_this23.drawType.transform(_this23.transformMatrix);
				}
				_this23.drawType.next();
				_this23.colorType.cornerColors(color22,color22,color22);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,reset: function() {
		this.contour = new trilateral2_Contour(this.pen,this.endLine);
		this.points = [];
		this.pointsClock = [];
		this.pointsAnti = [];
		this.points[0] = [];
		this.dim = [];
	}
	,pointsNoEndOverlap: function() {
		var p;
		var l;
		var j = 0;
		var pointsClean = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			p = this.points[i];
			if(p.length > 2) {
				pointsClean[j++] = p;
			}
		}
		this.points = pointsClean;
		var _g2 = 0;
		var _g3 = this.points.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			p = this.points[i1];
			l = p.length;
			var repeat = p[0] == p[l - 2] && p[1] == p[l - 1];
			if(repeat) {
				this.points[i1].pop();
				this.points[i1].pop();
				l -= 2;
			}
		}
		return this.points;
	}
	,pointsRewound: function() {
		var p;
		var l;
		var j = 0;
		var pointsClean = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			p = this.points[i];
			if(p.length > 2) {
				pointsClean[j++] = p;
			}
		}
		this.points = pointsClean;
		var _g2 = 0;
		var _g3 = this.points.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			p = this.points[i1];
			l = p.length;
			var repeat = p[0] == p[l - 2] && p[1] == p[l - 1];
			if(repeat) {
				this.points[i1].pop();
				this.points[i1].pop();
				l -= 2;
			}
			var cc = 0.;
			var k = 0;
			var x1;
			var y1;
			var x2;
			var y2;
			var last = l - 2;
			while(k < l) {
				x1 = p[k];
				y1 = p[k + 1];
				if(k == last) {
					x2 = p[0];
					y2 = p[1];
				} else {
					x2 = p[k + 2];
					y2 = p[k + 3];
				}
				cc += (x2 - x1) * (y2 + y1);
				k += 2;
			}
			this.points[i1] = p;
		}
		return this.points;
	}
	,initDim: function() {
		return { minX : Infinity, maxX : -Infinity, minY : Infinity, maxY : -Infinity};
	}
	,updateDim: function(x,y) {
		var d = this.dim[this.dim.length - 1];
		if(x < d.minX) {
			d.minX = x;
		}
		if(x > d.maxX) {
			d.maxX = x;
		}
		if(y < d.minY) {
			d.minY = y;
		}
		if(y > d.maxY) {
			d.maxY = y;
		}
	}
	,moveTo: function(x_,y_) {
		if(this.endLine == 2 || this.endLine == 3) {
			var _this = this.contour;
			var width_ = this.width;
			_this.endEdges();
			if(_this.count != 0) {
				var ax = _this.bx;
				var ay = _this.by;
				var radius = width_ / 2;
				var beta = -_this.angle1 - Math.PI / 2;
				var gamma = -_this.angle1 - Math.PI / 2 - Math.PI;
				var temp = [];
				var drawType = _this.pen.drawType;
				var sides = 36;
				if(sides == null) {
					sides = 36;
				}
				var pi = Math.PI;
				var step = pi * 2 / sides;
				var dif;
				switch(fracs_DifferencePreference.SMALL._hx_index) {
				case 0:
					var f;
					if(beta >= 0 && beta > Math.PI) {
						f = beta;
					} else {
						var a = beta % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var za = this1;
					var f1;
					if(gamma >= 0 && gamma > Math.PI) {
						f1 = gamma;
					} else {
						var a1 = gamma % (2 * Math.PI);
						f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
					}
					var this2 = f1;
					var zb = this2;
					var fa = za;
					var fb = zb;
					var theta = Math.abs(fa - fb);
					var clockwise = fa < fb;
					var dif1 = clockwise ? theta : -theta;
					dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
					break;
				case 1:
					var f2;
					if(beta >= 0 && beta > Math.PI) {
						f2 = beta;
					} else {
						var a2 = beta % (2 * Math.PI);
						f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
					}
					var this3 = f2;
					var za1 = this3;
					var f3;
					if(gamma >= 0 && gamma > Math.PI) {
						f3 = gamma;
					} else {
						var a3 = gamma % (2 * Math.PI);
						f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
					}
					var this4 = f3;
					var zb1 = this4;
					var fa1 = za1;
					var fb1 = zb1;
					var theta1 = Math.abs(fa1 - fb1);
					var clockwise1 = fa1 < fb1;
					var dif2 = clockwise1 ? theta1 : -theta1;
					dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
					break;
				case 2:
					var f4;
					if(beta >= 0 && beta > Math.PI) {
						f4 = beta;
					} else {
						var a4 = beta % (2 * Math.PI);
						f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
					}
					var this5 = f4;
					var za2 = this5;
					var f5;
					if(gamma >= 0 && gamma > Math.PI) {
						f5 = gamma;
					} else {
						var a5 = gamma % (2 * Math.PI);
						f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
					}
					var this6 = f5;
					var zb2 = this6;
					var fa2 = za2;
					var fb2 = zb2;
					var theta2 = Math.abs(fa2 - fb2);
					var smallest = theta2 <= Math.PI;
					var clockwise2 = fa2 < fb2;
					var dif3 = clockwise2 ? theta2 : -theta2;
					dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
					break;
				case 3:
					var f6;
					if(beta >= 0 && beta > Math.PI) {
						f6 = beta;
					} else {
						var a6 = beta % (2 * Math.PI);
						f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
					}
					var this7 = f6;
					var za3 = this7;
					var f7;
					if(gamma >= 0 && gamma > Math.PI) {
						f7 = gamma;
					} else {
						var a7 = gamma % (2 * Math.PI);
						f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
					}
					var this8 = f7;
					var zb3 = this8;
					var fa3 = za3;
					var fb3 = zb3;
					var theta3 = Math.abs(fa3 - fb3);
					var largest = theta3 > Math.PI;
					var clockwise3 = fa3 < fb3;
					var dif4 = clockwise3 ? theta3 : -theta3;
					dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
					break;
				}
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step1 = dif / totalSteps;
				var angle = beta;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = temp.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax + radius * Math.sin(angle);
					cy = ay + radius * Math.cos(angle);
					temp[p2++] = cx;
					temp[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step1;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = 0;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
				var pA = _this.pointsAnti.length;
				var len1 = temp.length / 2 | 0;
				var _g2 = 0;
				var _g11 = len1 + 2;
				while(_g2 < _g11) {
					var i1 = _g2++;
					_this.pointsAnti[pA++] = temp[i1];
				}
				var pC = _this.pointsClock.length;
				var _g21 = 1;
				var _g3 = len1 / 2 + 1 | 0;
				while(_g21 < _g3) {
					var i2 = _g21++;
					_this.pointsClock[pC++] = temp[temp.length - 2 * i2];
					_this.pointsClock[pC++] = temp[temp.length - 2 * i2 - 1];
				}
			}
		}
		this.x = x_;
		this.y = y_;
		var l = this.points.length;
		this.points[l] = [];
		this.points[l][0] = x_;
		this.points[l][1] = y_;
		this.pointsClock[this.pointsClock.length] = this.contour.pointsClock.slice();
		this.pointsAnti[this.pointsAnti.length] = this.contour.pointsAnti.slice();
		this.dim[this.dim.length] = { minX : Infinity, maxX : -Infinity, minY : Infinity, maxY : -Infinity};
		var d = this.dim[this.dim.length - 1];
		if(x_ < d.minX) {
			d.minX = x_;
		}
		if(x_ > d.maxX) {
			d.maxX = x_;
		}
		if(y_ < d.minY) {
			d.minY = y_;
		}
		if(y_ > d.maxY) {
			d.maxY = y_;
		}
		this.contour.reset();
	}
	,lastClock: function() {
		if(this.contour.pointsClock.length != 0) {
			this.pointsClock[this.pointsClock.length] = this.contour.pointsClock.slice();
			this.pointsAnti[this.pointsAnti.length] = this.contour.pointsAnti.slice();
		}
	}
	,getEdges: function() {
		var edges = [];
		var no = this.pointsClock.length;
		if(no > this.pointsAnti.length) {
			no = this.pointsAnti.length;
		}
		var pClock;
		var pAnti;
		var shape;
		var _g = 0;
		var _g1 = no;
		while(_g < _g1) {
			var s = _g++;
			pClock = this.pointsClock[s];
			pAnti = this.pointsAnti[s];
			var lc = pClock.length;
			var la = pAnti.length;
			edges[s] = [];
			shape = edges[s];
			var _g2 = 0;
			var _g11 = lc;
			while(_g2 < _g11) {
				var i = _g2++;
				shape[i] = pClock[i];
			}
			var j = shape.length;
			var l5 = la / 2 | 0;
			var _g21 = 0;
			var _g3 = l5;
			while(_g21 < _g3) {
				var i1 = _g21++;
				shape[j + i1 * 2] = pAnti[la - i1 * 2 - 1];
				shape[j + i1 * 2 + 1] = pAnti[la - i1 * 2];
			}
			j = shape.length;
			shape[j++] = pClock[0];
			shape[j] = pClock[1];
		}
		return edges;
	}
	,lineTo: function(x_,y_) {
		var repeat = this.x == x_ && this.y == y_;
		if(!repeat) {
			if(this.widthFunction != null) {
				this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
			}
			if(this.colourFunction != null) {
				this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
			}
			this.line(x_,y_);
			var l = this.points.length;
			var p = this.points[l - 1];
			var l2 = p.length;
			p[l2] = x_;
			p[l2 + 1] = y_;
			var d = this.dim[this.dim.length - 1];
			if(x_ < d.minX) {
				d.minX = x_;
			}
			if(x_ > d.maxX) {
				d.maxX = x_;
			}
			if(y_ < d.minY) {
				d.minY = y_;
			}
			if(y_ > d.maxY) {
				d.maxY = y_;
			}
			this.x = x_;
			this.y = y_;
		}
	}
	,quadTo: function(x1,y1,x2,y2) {
		this.tempArr = [];
		var p = this.tempArr;
		var ax = this.x;
		var ay = this.y;
		var x = ax - x1;
		var y = ay - y1;
		var x3 = x1 - x2;
		var y3 = y1 - y2;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x3 * x3 + y3 * y3);
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.quadStep);
		var l = p.length;
		p[l++] = ax;
		p[l++] = ay;
		var t = step;
		while(t < 1.) {
			var u = 1 - t;
			p[l++] = Math.pow(u,2) * ax + 2 * u * t * x1 + Math.pow(t,2) * x2;
			var u1 = 1 - t;
			p[l++] = Math.pow(u1,2) * ay + 2 * u1 * t * y1 + Math.pow(t,2) * y2;
			t += step;
		}
		p[l++] = x2;
		p[l++] = y2;
		var arr = this.tempArr;
		var withMove = false;
		if(withMove == null) {
			withMove = true;
		}
		var l1 = arr.length;
		var i = 2;
		if(withMove) {
			this.moveTo(arr[0],arr[1]);
		} else {
			var x_ = arr[0];
			var y_ = arr[1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l2 = this.points.length;
				var p1 = this.points[l2 - 1];
				var l21 = p1.length;
				p1[l21] = x_;
				p1[l21 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
		}
		while(i < l1) {
			var x_1 = arr[i];
			var y_1 = arr[i + 1];
			var repeat1 = this.x == x_1 && this.y == y_1;
			if(!repeat1) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_1,y_1);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_1,y_1);
				}
				this.line(x_1,y_1);
				var l3 = this.points.length;
				var p2 = this.points[l3 - 1];
				var l22 = p2.length;
				p2[l22] = x_1;
				p2[l22 + 1] = y_1;
				var d1 = this.dim[this.dim.length - 1];
				if(x_1 < d1.minX) {
					d1.minX = x_1;
				}
				if(x_1 > d1.maxX) {
					d1.maxX = x_1;
				}
				if(y_1 < d1.minY) {
					d1.minY = y_1;
				}
				if(y_1 > d1.maxY) {
					d1.maxY = y_1;
				}
				this.x = x_1;
				this.y = y_1;
			}
			i += 2;
		}
		this.x = x2;
		this.y = y2;
	}
	,quadThru: function(x1,y1,x2,y2) {
		var newx = 2 * x1 - 0.5 * (this.x + x2);
		var newy = 2 * y1 - 0.5 * (this.y + y2);
		this.tempArr = [];
		var p = this.tempArr;
		var ax = this.x;
		var ay = this.y;
		var x = ax - newx;
		var y = ay - newy;
		var x3 = newx - x2;
		var y3 = newy - y2;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x3 * x3 + y3 * y3);
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.quadStep);
		var l = p.length;
		p[l++] = ax;
		p[l++] = ay;
		var t = step;
		while(t < 1.) {
			var u = 1 - t;
			p[l++] = Math.pow(u,2) * ax + 2 * u * t * newx + Math.pow(t,2) * x2;
			var u1 = 1 - t;
			p[l++] = Math.pow(u1,2) * ay + 2 * u1 * t * newy + Math.pow(t,2) * y2;
			t += step;
		}
		p[l++] = x2;
		p[l++] = y2;
		var arr = this.tempArr;
		var withMove = false;
		if(withMove == null) {
			withMove = true;
		}
		var l1 = arr.length;
		var i = 2;
		if(withMove) {
			this.moveTo(arr[0],arr[1]);
		} else {
			var x_ = arr[0];
			var y_ = arr[1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l2 = this.points.length;
				var p1 = this.points[l2 - 1];
				var l21 = p1.length;
				p1[l21] = x_;
				p1[l21 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
		}
		while(i < l1) {
			var x_1 = arr[i];
			var y_1 = arr[i + 1];
			var repeat1 = this.x == x_1 && this.y == y_1;
			if(!repeat1) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_1,y_1);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_1,y_1);
				}
				this.line(x_1,y_1);
				var l3 = this.points.length;
				var p2 = this.points[l3 - 1];
				var l22 = p2.length;
				p2[l22] = x_1;
				p2[l22 + 1] = y_1;
				var d1 = this.dim[this.dim.length - 1];
				if(x_1 < d1.minX) {
					d1.minX = x_1;
				}
				if(x_1 > d1.maxX) {
					d1.maxX = x_1;
				}
				if(y_1 < d1.minY) {
					d1.minY = y_1;
				}
				if(y_1 > d1.maxY) {
					d1.maxY = y_1;
				}
				this.x = x_1;
				this.y = y_1;
			}
			i += 2;
		}
		this.x = x2;
		this.y = y2;
		return;
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		this.tempArr = [];
		var p = this.tempArr;
		var ax = this.x;
		var ay = this.y;
		var x = ax - x1;
		var y = ay - y1;
		var x4 = x1 - x2;
		var y4 = y1 - y2;
		var x5 = x2 - x3;
		var y5 = y2 - y3;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5);
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.cubicStep);
		var l = p.length;
		p[l++] = ax;
		p[l++] = ay;
		var t = step;
		while(t < 1.) {
			var u = 1 - t;
			p[l++] = Math.pow(u,3) * ax + 3 * Math.pow(u,2) * t * x1 + 3 * u * Math.pow(t,2) * x2 + Math.pow(t,3) * x3;
			var u1 = 1 - t;
			p[l++] = Math.pow(u1,3) * ay + 3 * Math.pow(u1,2) * t * y1 + 3 * u1 * Math.pow(t,2) * y2 + Math.pow(t,3) * y3;
			t += step;
		}
		p[l++] = x3;
		p[l++] = y3;
		var arr = this.tempArr;
		var withMove = false;
		if(withMove == null) {
			withMove = true;
		}
		var l1 = arr.length;
		var i = 2;
		if(withMove) {
			this.moveTo(arr[0],arr[1]);
		} else {
			var x_ = arr[0];
			var y_ = arr[1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l2 = this.points.length;
				var p1 = this.points[l2 - 1];
				var l21 = p1.length;
				p1[l21] = x_;
				p1[l21 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
		}
		while(i < l1) {
			var x_1 = arr[i];
			var y_1 = arr[i + 1];
			var repeat1 = this.x == x_1 && this.y == y_1;
			if(!repeat1) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_1,y_1);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_1,y_1);
				}
				this.line(x_1,y_1);
				var l3 = this.points.length;
				var p2 = this.points[l3 - 1];
				var l22 = p2.length;
				p2[l22] = x_1;
				p2[l22 + 1] = y_1;
				var d1 = this.dim[this.dim.length - 1];
				if(x_1 < d1.minX) {
					d1.minX = x_1;
				}
				if(x_1 > d1.maxX) {
					d1.maxX = x_1;
				}
				if(y_1 < d1.minY) {
					d1.minY = y_1;
				}
				if(y_1 > d1.maxY) {
					d1.maxY = y_1;
				}
				this.x = x_1;
				this.y = y_1;
			}
			i += 2;
		}
		this.x = x3;
		this.y = y3;
	}
	,plotCoord: function(arr,withMove) {
		if(withMove == null) {
			withMove = true;
		}
		var l = arr.length;
		var i = 2;
		if(withMove) {
			this.moveTo(arr[0],arr[1]);
		} else {
			var x_ = arr[0];
			var y_ = arr[1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l1 = this.points.length;
				var p = this.points[l1 - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
		}
		while(i < l) {
			var x_1 = arr[i];
			var y_1 = arr[i + 1];
			var repeat1 = this.x == x_1 && this.y == y_1;
			if(!repeat1) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_1,y_1);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_1,y_1);
				}
				this.line(x_1,y_1);
				var l3 = this.points.length;
				var p1 = this.points[l3 - 1];
				var l21 = p1.length;
				p1[l21] = x_1;
				p1[l21 + 1] = y_1;
				var d1 = this.dim[this.dim.length - 1];
				if(x_1 < d1.minX) {
					d1.minX = x_1;
				}
				if(x_1 > d1.maxX) {
					d1.maxX = x_1;
				}
				if(y_1 < d1.minY) {
					d1.minY = y_1;
				}
				if(y_1 > d1.maxY) {
					d1.maxY = y_1;
				}
				this.x = x_1;
				this.y = y_1;
			}
			i += 2;
		}
	}
	,__class__: trilateral2_Sketch
};
var trilateral2_SketchForm = $hxEnums["trilateral2.SketchForm"] = { __ename__ : "trilateral2.SketchForm", __constructs__ : ["Tracer","Base","Crude","FillOnly","Fine","FineOverlap","Medium","MediumOverlap","RoundEnd"]
	,Tracer: {_hx_index:0,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Base: {_hx_index:1,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Crude: {_hx_index:2,__enum__:"trilateral2.SketchForm",toString:$estr}
	,FillOnly: {_hx_index:3,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Fine: {_hx_index:4,__enum__:"trilateral2.SketchForm",toString:$estr}
	,FineOverlap: {_hx_index:5,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Medium: {_hx_index:6,__enum__:"trilateral2.SketchForm",toString:$estr}
	,MediumOverlap: {_hx_index:7,__enum__:"trilateral2.SketchForm",toString:$estr}
	,RoundEnd: {_hx_index:8,__enum__:"trilateral2.SketchForm",toString:$estr}
};
var trilateral2Lime_Die = function(pen) {
	this.dieShape = new trilateral2_RegularShape(0.,0.,60.,-1057030144);
	this.spotShape = new trilateral2_RegularShape(0.,0.,15.,-983041);
	this.left = false;
	this.spots = pen;
};
$hxClasses["trilateral2Lime.Die"] = trilateral2Lime_Die;
trilateral2Lime_Die.__name__ = "trilateral2Lime.Die";
trilateral2Lime_Die.prototype = {
	one: function(trans) {
		var this1 = this.spots;
		var rs = this.dieShape;
		var start = this1.drawType.get_size();
		var drawType = this1.drawType;
		var x = rs.x - rs.radius;
		var y = rs.y - rs.radius;
		var width = rs.radius * 2;
		var height = rs.radius * 2;
		var radius = this1.rounded;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x + radius;
		var ay = y + radius;
		var bx = x + width - radius;
		var by = y + radius;
		var cx = bx;
		var cy = y + height - radius;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y;
		var bx1 = ax + (width - radius * 2);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + height;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		count += 2;
		var dimY = height - 2 * radius;
		var ax2 = x;
		var ay2 = ay;
		var bx2 = x + radius;
		var by2 = ay2;
		var cx2 = bx2;
		var cy2 = ay2 + dimY;
		var dx2 = x;
		var dy2 = cy2;
		drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType.transform(m3);
		}
		drawType.next();
		count += 2;
		var ax3 = bx;
		var ay3 = by;
		var bx3 = bx + radius;
		var by3 = ay3;
		var cx3 = bx3;
		var cy3 = ay3 + dimY;
		var dx3 = bx;
		var dy3 = cy3;
		drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType.transform(m4);
		}
		drawType.next();
		drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType.transform(m5);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this2 = f;
			var za = this2;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this3 = f1;
			var zb = this3;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this4 = f2;
			var za1 = this4;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this5 = f3;
			var zb1 = this5;
			var fa1 = za1;
			var fb1 = zb1;
			var theta1 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta1 : -theta1;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this6 = f4;
			var za2 = this6;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this7 = f5;
			var zb2 = this7;
			var fa2 = za2;
			var fb2 = zb2;
			var theta2 = Math.abs(fa2 - fb2);
			var smallest = theta2 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta2 : -theta2;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this8 = f6;
			var za3 = this8;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this9 = f7;
			var zb3 = this9;
			var fa3 = za3;
			var fb3 = zb3;
			var theta3 = Math.abs(fa3 - fb3);
			var largest = theta3 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta3 : -theta3;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx4;
		var cy4;
		var bx4 = 0;
		var by4 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx4 = ax + radius * Math.sin(angle);
			cy4 = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
				var m6 = trilateral2_Shaper.transformMatrix;
				if(m6 != null) {
					drawType.transform(m6);
				}
				drawType.next();
			}
			angle += step1;
			bx4 = cx4;
			by4 = cy4;
		}
		count += totalSteps;
		var pi2 = Math.PI;
		var step2 = pi2 * 2 / 36;
		var dif5;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f8;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f8 = pi_2;
			} else {
				var a8 = pi_2 % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
			}
			var this10 = f8;
			var za4 = this10;
			var f9;
			if(pi >= 0 && pi > Math.PI) {
				f9 = pi;
			} else {
				var a9 = pi % (2 * Math.PI);
				f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
			}
			var this11 = f9;
			var zb4 = this11;
			var fa4 = za4;
			var fb4 = zb4;
			var theta4 = Math.abs(fa4 - fb4);
			var clockwise4 = fa4 < fb4;
			var dif6 = clockwise4 ? theta4 : -theta4;
			dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
			break;
		case 1:
			var f10;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f10 = pi_2;
			} else {
				var a10 = pi_2 % (2 * Math.PI);
				f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
			}
			var this12 = f10;
			var za5 = this12;
			var f11;
			if(pi >= 0 && pi > Math.PI) {
				f11 = pi;
			} else {
				var a11 = pi % (2 * Math.PI);
				f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
			}
			var this13 = f11;
			var zb5 = this13;
			var fa5 = za5;
			var fb5 = zb5;
			var theta5 = Math.abs(fa5 - fb5);
			var clockwise5 = fa5 < fb5;
			var dif7 = clockwise5 ? theta5 : -theta5;
			dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
			break;
		case 2:
			var f12;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f12 = pi_2;
			} else {
				var a12 = pi_2 % (2 * Math.PI);
				f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
			}
			var this14 = f12;
			var za6 = this14;
			var f13;
			if(pi >= 0 && pi > Math.PI) {
				f13 = pi;
			} else {
				var a13 = pi % (2 * Math.PI);
				f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
			}
			var this15 = f13;
			var zb6 = this15;
			var fa6 = za6;
			var fb6 = zb6;
			var theta6 = Math.abs(fa6 - fb6);
			var smallest1 = theta6 <= Math.PI;
			var clockwise6 = fa6 < fb6;
			var dif8 = clockwise6 ? theta6 : -theta6;
			dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
			break;
		case 3:
			var f14;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f14 = pi_2;
			} else {
				var a14 = pi_2 % (2 * Math.PI);
				f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
			}
			var this16 = f14;
			var za7 = this16;
			var f15;
			if(pi >= 0 && pi > Math.PI) {
				f15 = pi;
			} else {
				var a15 = pi % (2 * Math.PI);
				f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
			}
			var this17 = f15;
			var zb7 = this17;
			var fa7 = za7;
			var fb7 = zb7;
			var theta7 = Math.abs(fa7 - fb7);
			var largest1 = theta7 > Math.PI;
			var clockwise7 = fa7 < fb7;
			var dif9 = clockwise7 ? theta7 : -theta7;
			dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
			break;
		}
		var positive1 = dif5 >= 0;
		var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
		var step3 = dif5 / totalSteps1;
		var angle1 = pi_2;
		var cx5;
		var cy5;
		var bx5 = 0;
		var by5 = 0;
		var _g2 = 0;
		var _g11 = totalSteps1 + 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			cx5 = bx + radius * Math.sin(angle1);
			cy5 = by + radius * Math.cos(angle1);
			if(i1 != 0) {
				drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
				var m7 = trilateral2_Shaper.transformMatrix;
				if(m7 != null) {
					drawType.transform(m7);
				}
				drawType.next();
			}
			angle1 += step3;
			bx5 = cx5;
			by5 = cy5;
		}
		count += totalSteps1;
		var pi3 = Math.PI;
		var step4 = pi3 * 2 / 36;
		var dif10;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f16;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f16 = pi_2;
			} else {
				var a16 = pi_2 % (2 * Math.PI);
				f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
			}
			var this18 = f16;
			var za8 = this18;
			var f17;
			if(0 > Math.PI) {
				f17 = 0;
			} else {
				var a17 = 0 % (2 * Math.PI);
				f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
			}
			var this19 = f17;
			var zb8 = this19;
			var fa8 = za8;
			var fb8 = zb8;
			var theta8 = Math.abs(fa8 - fb8);
			var clockwise8 = fa8 < fb8;
			var dif11 = clockwise8 ? theta8 : -theta8;
			dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
			break;
		case 1:
			var f18;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f18 = pi_2;
			} else {
				var a18 = pi_2 % (2 * Math.PI);
				f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
			}
			var this20 = f18;
			var za9 = this20;
			var f19;
			if(0 > Math.PI) {
				f19 = 0;
			} else {
				var a19 = 0 % (2 * Math.PI);
				f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
			}
			var this21 = f19;
			var zb9 = this21;
			var fa9 = za9;
			var fb9 = zb9;
			var theta9 = Math.abs(fa9 - fb9);
			var clockwise9 = fa9 < fb9;
			var dif12 = clockwise9 ? theta9 : -theta9;
			dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
			break;
		case 2:
			var f20;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f20 = pi_2;
			} else {
				var a20 = pi_2 % (2 * Math.PI);
				f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
			}
			var this22 = f20;
			var za10 = this22;
			var f21;
			if(0 > Math.PI) {
				f21 = 0;
			} else {
				var a21 = 0 % (2 * Math.PI);
				f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
			}
			var this23 = f21;
			var zb10 = this23;
			var fa10 = za10;
			var fb10 = zb10;
			var theta10 = Math.abs(fa10 - fb10);
			var smallest2 = theta10 <= Math.PI;
			var clockwise10 = fa10 < fb10;
			var dif13 = clockwise10 ? theta10 : -theta10;
			dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
			break;
		case 3:
			var f22;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f22 = pi_2;
			} else {
				var a22 = pi_2 % (2 * Math.PI);
				f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
			}
			var this24 = f22;
			var za11 = this24;
			var f23;
			if(0 > Math.PI) {
				f23 = 0;
			} else {
				var a23 = 0 % (2 * Math.PI);
				f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
			}
			var this25 = f23;
			var zb11 = this25;
			var fa11 = za11;
			var fb11 = zb11;
			var theta11 = Math.abs(fa11 - fb11);
			var largest2 = theta11 > Math.PI;
			var clockwise11 = fa11 < fb11;
			var dif14 = clockwise11 ? theta11 : -theta11;
			dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
			break;
		}
		var positive2 = dif10 >= 0;
		var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
		var step5 = dif10 / totalSteps2;
		var angle2 = pi_2;
		var cx6;
		var cy6;
		var bx6 = 0;
		var by6 = 0;
		var _g3 = 0;
		var _g12 = totalSteps2 + 1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			cx6 = cx + radius * Math.sin(angle2);
			cy6 = cy + radius * Math.cos(angle2);
			if(i2 != 0) {
				drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
				var m8 = trilateral2_Shaper.transformMatrix;
				if(m8 != null) {
					drawType.transform(m8);
				}
				drawType.next();
			}
			angle2 += step5;
			bx6 = cx6;
			by6 = cy6;
		}
		count += totalSteps2;
		var gamma1 = -pi_2;
		var pi4 = Math.PI;
		var step6 = pi4 * 2 / 36;
		var dif15;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f24;
			if(0 > Math.PI) {
				f24 = 0;
			} else {
				var a24 = 0 % (2 * Math.PI);
				f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
			}
			var this26 = f24;
			var za12 = this26;
			var f25;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f25 = gamma1;
			} else {
				var a25 = gamma1 % (2 * Math.PI);
				f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
			}
			var this27 = f25;
			var zb12 = this27;
			var fa12 = za12;
			var fb12 = zb12;
			var theta12 = Math.abs(fa12 - fb12);
			var clockwise12 = fa12 < fb12;
			var dif16 = clockwise12 ? theta12 : -theta12;
			dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
			break;
		case 1:
			var f26;
			if(0 > Math.PI) {
				f26 = 0;
			} else {
				var a26 = 0 % (2 * Math.PI);
				f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
			}
			var this28 = f26;
			var za13 = this28;
			var f27;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f27 = gamma1;
			} else {
				var a27 = gamma1 % (2 * Math.PI);
				f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
			}
			var this29 = f27;
			var zb13 = this29;
			var fa13 = za13;
			var fb13 = zb13;
			var theta13 = Math.abs(fa13 - fb13);
			var clockwise13 = fa13 < fb13;
			var dif17 = clockwise13 ? theta13 : -theta13;
			dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
			break;
		case 2:
			var f28;
			if(0 > Math.PI) {
				f28 = 0;
			} else {
				var a28 = 0 % (2 * Math.PI);
				f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
			}
			var this30 = f28;
			var za14 = this30;
			var f29;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f29 = gamma1;
			} else {
				var a29 = gamma1 % (2 * Math.PI);
				f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
			}
			var this31 = f29;
			var zb14 = this31;
			var fa14 = za14;
			var fb14 = zb14;
			var theta14 = Math.abs(fa14 - fb14);
			var smallest3 = theta14 <= Math.PI;
			var clockwise14 = fa14 < fb14;
			var dif18 = clockwise14 ? theta14 : -theta14;
			dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
			break;
		case 3:
			var f30;
			if(0 > Math.PI) {
				f30 = 0;
			} else {
				var a30 = 0 % (2 * Math.PI);
				f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
			}
			var this32 = f30;
			var za15 = this32;
			var f31;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f31 = gamma1;
			} else {
				var a31 = gamma1 % (2 * Math.PI);
				f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
			}
			var this33 = f31;
			var zb15 = this33;
			var fa15 = za15;
			var fb15 = zb15;
			var theta15 = Math.abs(fa15 - fb15);
			var largest3 = theta15 > Math.PI;
			var clockwise15 = fa15 < fb15;
			var dif19 = clockwise15 ? theta15 : -theta15;
			dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
			break;
		}
		var positive3 = dif15 >= 0;
		var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
		var step7 = dif15 / totalSteps3;
		var angle3 = 0;
		var cx7;
		var cy7;
		var bx7 = 0;
		var by7 = 0;
		var _g4 = 0;
		var _g13 = totalSteps3 + 1;
		while(_g4 < _g13) {
			var i3 = _g4++;
			cx7 = dx + radius * Math.sin(angle3);
			cy7 = dy + radius * Math.cos(angle3);
			if(i3 != 0) {
				drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
				var m9 = trilateral2_Shaper.transformMatrix;
				if(m9 != null) {
					drawType.transform(m9);
				}
				drawType.next();
			}
			angle3 += step7;
			bx7 = cx7;
			by7 = cy7;
		}
		var len = count += totalSteps3;
		var color = rs.color;
		if(color == -1) {
			color = this1.currentColor;
		}
		this1.colorType.colorTriangles(color,len);
		var end = start + len - 1;
		var s0 = new trilateral2_IndexRange(start,end);
		var this34 = this.spots;
		var this35 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this36 = this35;
		var this37 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this34.dz / 2);
		var s = this37;
		var this38 = new geom_structure_Mat4x3(this36.a * s.a + this36.b * s.e + this36.c * s.i,this36.a * s.b + this36.b * s.f + this36.c * s.j,this36.a * s.c + this36.b * s.g + this36.c * s.k,this36.a * s.d + this36.b * s.h + this36.c * s.l + this36.d,this36.e * s.a + this36.f * s.e + this36.g * s.i,this36.e * s.b + this36.f * s.f + this36.g * s.j,this36.e * s.c + this36.f * s.g + this36.g * s.k,this36.e * s.d + this36.f * s.h + this36.g * s.l + this36.h,this36.i * s.a + this36.j * s.e + this36.k * s.i,this36.i * s.b + this36.j * s.f + this36.k * s.j,this36.i * s.c + this36.j * s.g + this36.k * s.k,this36.i * s.d + this36.j * s.h + this36.k * s.l + this36.l);
		var trans1 = this38;
		this34.drawType.transformRange(trans1,s0.start,s0.end);
		var this39 = this.spots;
		var s01 = this.spotShape.clone();
		var arr = [-6062548,-2774968,-1788035,-2838729,-8448,-212480,-14809,-13312,-162539,-3763446,-12032,-935891,-1655158,-13261,-2453248,-2448096,-3820712,-3432139,-6724331];
		var rx = 0.5;
		var ry = 0.5;
		var sides = 47;
		if(sides == null) {
			sides = 36;
		}
		if(ry == null) {
			ry = 0;
		}
		if(rx == null) {
			rx = 0;
		}
		var start1 = this39.drawType.get_size();
		var drawType1 = this39.drawType;
		var x1 = s01.x;
		var y1 = s01.y;
		var radius1 = s01.radius;
		var len1;
		if((sides & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx1 = rx;
			var ry1 = ry;
			var sides1 = sides;
			var omega = 0.;
			if(omega == null) {
				omega = 0.;
			}
			if(sides1 == null) {
				sides1 = 36;
			}
			var pi5 = Math.PI;
			var theta16 = pi5 / 2 + omega;
			var step8 = pi5 * 2 / sides1;
			var bx8;
			var by8;
			var cx8;
			var cy8;
			if(rx1 > 1.) {
				rx1 = 1;
			}
			if(rx1 < -1.) {
				rx1 = -1;
			}
			if(ry1 > 1.) {
				ry1 = 1;
			}
			if(ry1 < -1.) {
				ry1 = -1;
			}
			var mx = x1 + rx1 * radius1;
			var my = y1 - ry1 * radius1;
			var _g5 = 0;
			var _g14 = sides1;
			while(_g5 < _g14) {
				var i4 = _g5++;
				bx8 = x1 + radius1 * Math.sin(theta16);
				by8 = y1 + radius1 * Math.cos(theta16);
				theta16 += step8;
				cx8 = x1 + radius1 * Math.sin(theta16);
				cy8 = y1 + radius1 * Math.cos(theta16);
				drawType1.triangle(mx,my,0,bx8,by8,0,cx8,cy8,0);
				var m10 = trilateral2_Shaper.transformMatrix;
				if(m10 != null) {
					drawType1.transform(m10);
				}
				drawType1.next();
			}
			len1 = sides1;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx2 = rx;
			var ry2 = ry;
			var sides2 = sides;
			var omega1 = 0.;
			if(omega1 == null) {
				omega1 = 0.;
			}
			if(sides2 == null) {
				sides2 = 36;
			}
			var pi6 = Math.PI;
			var theta17 = pi6 / 2;
			var step9 = pi6 * 2 / sides2;
			theta17 -= step9 / 2 + omega1;
			var bx9 = 0;
			var by9 = 0;
			var cx9 = 0;
			var cy9 = 0;
			if(rx2 > 1.) {
				rx2 = 1;
			}
			if(rx2 < -1.) {
				rx2 = -1;
			}
			if(ry2 > 1.) {
				ry2 = 1;
			}
			if(ry2 < -1.) {
				ry2 = -1;
			}
			var mx1 = x1 + rx2 * radius1;
			var my1 = y1 - ry2 * radius1;
			var dx4 = x1 + radius1 * Math.sin(theta17);
			var dy4 = y1 + radius1 * Math.cos(theta17);
			var _g6 = 0;
			var _g15 = sides2 - 1;
			while(_g6 < _g15) {
				var i5 = _g6++;
				bx9 = x1 + radius1 * Math.sin(theta17);
				by9 = y1 + radius1 * Math.cos(theta17);
				theta17 += step9;
				cx9 = x1 + radius1 * Math.sin(theta17);
				cy9 = y1 + radius1 * Math.cos(theta17);
				drawType1.triangle(mx1,my1,0,bx9,by9,0,cx9,cy9,0);
				var m11 = trilateral2_Shaper.transformMatrix;
				if(m11 != null) {
					drawType1.transform(m11);
				}
				drawType1.next();
			}
			drawType1.triangle(mx1,my1,0,cx9,cy9,0,dx4,dy4,0);
			var m12 = trilateral2_Shaper.transformMatrix;
			if(m12 != null) {
				drawType1.transform(m12);
			}
			drawType1.next();
			len1 = sides2;
		}
		var k = 1;
		var arrEnd = arr.length - 1;
		var end1 = start1 + len1 - 1;
		var arr_ = arr.slice();
		var _g7 = 0;
		var _g16 = len1 - 1;
		while(_g7 < _g16) {
			var j = _g7++;
			this39.colorType.cornerColors(s01.color,arr_[k - 1],arr_[k]);
			++k;
			if(k > arrEnd) {
				k = 1;
				arr_.reverse();
			}
		}
		this39.colorType.cornerColors(s01.color,arr_[k - 1],arr[0]);
		var startEnd = new trilateral2_IndexRange(start1,end1);
		var c0 = startEnd;
		var s1 = new trilateral2_IndexRange(c0.start,c0.end);
		var s2 = new trilateral2_IndexRange(s0.start,s1.end);
		this.spots.drawType.transformRange(trans,s2.start,s2.end);
		return s2;
	}
	,two: function(trans) {
		var this1 = this.spots;
		var rs = this.dieShape;
		var start = this1.drawType.get_size();
		var drawType = this1.drawType;
		var x = rs.x - rs.radius;
		var y = rs.y - rs.radius;
		var width = rs.radius * 2;
		var height = rs.radius * 2;
		var radius = this1.rounded;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x + radius;
		var ay = y + radius;
		var bx = x + width - radius;
		var by = y + radius;
		var cx = bx;
		var cy = y + height - radius;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y;
		var bx1 = ax + (width - radius * 2);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + height;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		count += 2;
		var dimY = height - 2 * radius;
		var ax2 = x;
		var ay2 = ay;
		var bx2 = x + radius;
		var by2 = ay2;
		var cx2 = bx2;
		var cy2 = ay2 + dimY;
		var dx2 = x;
		var dy2 = cy2;
		drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType.transform(m3);
		}
		drawType.next();
		count += 2;
		var ax3 = bx;
		var ay3 = by;
		var bx3 = bx + radius;
		var by3 = ay3;
		var cx3 = bx3;
		var cy3 = ay3 + dimY;
		var dx3 = bx;
		var dy3 = cy3;
		drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType.transform(m4);
		}
		drawType.next();
		drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType.transform(m5);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this2 = f;
			var za = this2;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this3 = f1;
			var zb = this3;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this4 = f2;
			var za1 = this4;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this5 = f3;
			var zb1 = this5;
			var fa1 = za1;
			var fb1 = zb1;
			var theta1 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta1 : -theta1;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this6 = f4;
			var za2 = this6;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this7 = f5;
			var zb2 = this7;
			var fa2 = za2;
			var fb2 = zb2;
			var theta2 = Math.abs(fa2 - fb2);
			var smallest = theta2 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta2 : -theta2;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this8 = f6;
			var za3 = this8;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this9 = f7;
			var zb3 = this9;
			var fa3 = za3;
			var fb3 = zb3;
			var theta3 = Math.abs(fa3 - fb3);
			var largest = theta3 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta3 : -theta3;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx4;
		var cy4;
		var bx4 = 0;
		var by4 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx4 = ax + radius * Math.sin(angle);
			cy4 = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
				var m6 = trilateral2_Shaper.transformMatrix;
				if(m6 != null) {
					drawType.transform(m6);
				}
				drawType.next();
			}
			angle += step1;
			bx4 = cx4;
			by4 = cy4;
		}
		count += totalSteps;
		var pi2 = Math.PI;
		var step2 = pi2 * 2 / 36;
		var dif5;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f8;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f8 = pi_2;
			} else {
				var a8 = pi_2 % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
			}
			var this10 = f8;
			var za4 = this10;
			var f9;
			if(pi >= 0 && pi > Math.PI) {
				f9 = pi;
			} else {
				var a9 = pi % (2 * Math.PI);
				f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
			}
			var this11 = f9;
			var zb4 = this11;
			var fa4 = za4;
			var fb4 = zb4;
			var theta4 = Math.abs(fa4 - fb4);
			var clockwise4 = fa4 < fb4;
			var dif6 = clockwise4 ? theta4 : -theta4;
			dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
			break;
		case 1:
			var f10;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f10 = pi_2;
			} else {
				var a10 = pi_2 % (2 * Math.PI);
				f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
			}
			var this12 = f10;
			var za5 = this12;
			var f11;
			if(pi >= 0 && pi > Math.PI) {
				f11 = pi;
			} else {
				var a11 = pi % (2 * Math.PI);
				f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
			}
			var this13 = f11;
			var zb5 = this13;
			var fa5 = za5;
			var fb5 = zb5;
			var theta5 = Math.abs(fa5 - fb5);
			var clockwise5 = fa5 < fb5;
			var dif7 = clockwise5 ? theta5 : -theta5;
			dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
			break;
		case 2:
			var f12;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f12 = pi_2;
			} else {
				var a12 = pi_2 % (2 * Math.PI);
				f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
			}
			var this14 = f12;
			var za6 = this14;
			var f13;
			if(pi >= 0 && pi > Math.PI) {
				f13 = pi;
			} else {
				var a13 = pi % (2 * Math.PI);
				f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
			}
			var this15 = f13;
			var zb6 = this15;
			var fa6 = za6;
			var fb6 = zb6;
			var theta6 = Math.abs(fa6 - fb6);
			var smallest1 = theta6 <= Math.PI;
			var clockwise6 = fa6 < fb6;
			var dif8 = clockwise6 ? theta6 : -theta6;
			dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
			break;
		case 3:
			var f14;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f14 = pi_2;
			} else {
				var a14 = pi_2 % (2 * Math.PI);
				f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
			}
			var this16 = f14;
			var za7 = this16;
			var f15;
			if(pi >= 0 && pi > Math.PI) {
				f15 = pi;
			} else {
				var a15 = pi % (2 * Math.PI);
				f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
			}
			var this17 = f15;
			var zb7 = this17;
			var fa7 = za7;
			var fb7 = zb7;
			var theta7 = Math.abs(fa7 - fb7);
			var largest1 = theta7 > Math.PI;
			var clockwise7 = fa7 < fb7;
			var dif9 = clockwise7 ? theta7 : -theta7;
			dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
			break;
		}
		var positive1 = dif5 >= 0;
		var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
		var step3 = dif5 / totalSteps1;
		var angle1 = pi_2;
		var cx5;
		var cy5;
		var bx5 = 0;
		var by5 = 0;
		var _g2 = 0;
		var _g11 = totalSteps1 + 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			cx5 = bx + radius * Math.sin(angle1);
			cy5 = by + radius * Math.cos(angle1);
			if(i1 != 0) {
				drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
				var m7 = trilateral2_Shaper.transformMatrix;
				if(m7 != null) {
					drawType.transform(m7);
				}
				drawType.next();
			}
			angle1 += step3;
			bx5 = cx5;
			by5 = cy5;
		}
		count += totalSteps1;
		var pi3 = Math.PI;
		var step4 = pi3 * 2 / 36;
		var dif10;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f16;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f16 = pi_2;
			} else {
				var a16 = pi_2 % (2 * Math.PI);
				f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
			}
			var this18 = f16;
			var za8 = this18;
			var f17;
			if(0 > Math.PI) {
				f17 = 0;
			} else {
				var a17 = 0 % (2 * Math.PI);
				f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
			}
			var this19 = f17;
			var zb8 = this19;
			var fa8 = za8;
			var fb8 = zb8;
			var theta8 = Math.abs(fa8 - fb8);
			var clockwise8 = fa8 < fb8;
			var dif11 = clockwise8 ? theta8 : -theta8;
			dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
			break;
		case 1:
			var f18;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f18 = pi_2;
			} else {
				var a18 = pi_2 % (2 * Math.PI);
				f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
			}
			var this20 = f18;
			var za9 = this20;
			var f19;
			if(0 > Math.PI) {
				f19 = 0;
			} else {
				var a19 = 0 % (2 * Math.PI);
				f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
			}
			var this21 = f19;
			var zb9 = this21;
			var fa9 = za9;
			var fb9 = zb9;
			var theta9 = Math.abs(fa9 - fb9);
			var clockwise9 = fa9 < fb9;
			var dif12 = clockwise9 ? theta9 : -theta9;
			dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
			break;
		case 2:
			var f20;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f20 = pi_2;
			} else {
				var a20 = pi_2 % (2 * Math.PI);
				f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
			}
			var this22 = f20;
			var za10 = this22;
			var f21;
			if(0 > Math.PI) {
				f21 = 0;
			} else {
				var a21 = 0 % (2 * Math.PI);
				f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
			}
			var this23 = f21;
			var zb10 = this23;
			var fa10 = za10;
			var fb10 = zb10;
			var theta10 = Math.abs(fa10 - fb10);
			var smallest2 = theta10 <= Math.PI;
			var clockwise10 = fa10 < fb10;
			var dif13 = clockwise10 ? theta10 : -theta10;
			dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
			break;
		case 3:
			var f22;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f22 = pi_2;
			} else {
				var a22 = pi_2 % (2 * Math.PI);
				f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
			}
			var this24 = f22;
			var za11 = this24;
			var f23;
			if(0 > Math.PI) {
				f23 = 0;
			} else {
				var a23 = 0 % (2 * Math.PI);
				f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
			}
			var this25 = f23;
			var zb11 = this25;
			var fa11 = za11;
			var fb11 = zb11;
			var theta11 = Math.abs(fa11 - fb11);
			var largest2 = theta11 > Math.PI;
			var clockwise11 = fa11 < fb11;
			var dif14 = clockwise11 ? theta11 : -theta11;
			dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
			break;
		}
		var positive2 = dif10 >= 0;
		var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
		var step5 = dif10 / totalSteps2;
		var angle2 = pi_2;
		var cx6;
		var cy6;
		var bx6 = 0;
		var by6 = 0;
		var _g3 = 0;
		var _g12 = totalSteps2 + 1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			cx6 = cx + radius * Math.sin(angle2);
			cy6 = cy + radius * Math.cos(angle2);
			if(i2 != 0) {
				drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
				var m8 = trilateral2_Shaper.transformMatrix;
				if(m8 != null) {
					drawType.transform(m8);
				}
				drawType.next();
			}
			angle2 += step5;
			bx6 = cx6;
			by6 = cy6;
		}
		count += totalSteps2;
		var gamma1 = -pi_2;
		var pi4 = Math.PI;
		var step6 = pi4 * 2 / 36;
		var dif15;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f24;
			if(0 > Math.PI) {
				f24 = 0;
			} else {
				var a24 = 0 % (2 * Math.PI);
				f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
			}
			var this26 = f24;
			var za12 = this26;
			var f25;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f25 = gamma1;
			} else {
				var a25 = gamma1 % (2 * Math.PI);
				f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
			}
			var this27 = f25;
			var zb12 = this27;
			var fa12 = za12;
			var fb12 = zb12;
			var theta12 = Math.abs(fa12 - fb12);
			var clockwise12 = fa12 < fb12;
			var dif16 = clockwise12 ? theta12 : -theta12;
			dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
			break;
		case 1:
			var f26;
			if(0 > Math.PI) {
				f26 = 0;
			} else {
				var a26 = 0 % (2 * Math.PI);
				f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
			}
			var this28 = f26;
			var za13 = this28;
			var f27;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f27 = gamma1;
			} else {
				var a27 = gamma1 % (2 * Math.PI);
				f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
			}
			var this29 = f27;
			var zb13 = this29;
			var fa13 = za13;
			var fb13 = zb13;
			var theta13 = Math.abs(fa13 - fb13);
			var clockwise13 = fa13 < fb13;
			var dif17 = clockwise13 ? theta13 : -theta13;
			dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
			break;
		case 2:
			var f28;
			if(0 > Math.PI) {
				f28 = 0;
			} else {
				var a28 = 0 % (2 * Math.PI);
				f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
			}
			var this30 = f28;
			var za14 = this30;
			var f29;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f29 = gamma1;
			} else {
				var a29 = gamma1 % (2 * Math.PI);
				f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
			}
			var this31 = f29;
			var zb14 = this31;
			var fa14 = za14;
			var fb14 = zb14;
			var theta14 = Math.abs(fa14 - fb14);
			var smallest3 = theta14 <= Math.PI;
			var clockwise14 = fa14 < fb14;
			var dif18 = clockwise14 ? theta14 : -theta14;
			dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
			break;
		case 3:
			var f30;
			if(0 > Math.PI) {
				f30 = 0;
			} else {
				var a30 = 0 % (2 * Math.PI);
				f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
			}
			var this32 = f30;
			var za15 = this32;
			var f31;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f31 = gamma1;
			} else {
				var a31 = gamma1 % (2 * Math.PI);
				f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
			}
			var this33 = f31;
			var zb15 = this33;
			var fa15 = za15;
			var fb15 = zb15;
			var theta15 = Math.abs(fa15 - fb15);
			var largest3 = theta15 > Math.PI;
			var clockwise15 = fa15 < fb15;
			var dif19 = clockwise15 ? theta15 : -theta15;
			dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
			break;
		}
		var positive3 = dif15 >= 0;
		var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
		var step7 = dif15 / totalSteps3;
		var angle3 = 0;
		var cx7;
		var cy7;
		var bx7 = 0;
		var by7 = 0;
		var _g4 = 0;
		var _g13 = totalSteps3 + 1;
		while(_g4 < _g13) {
			var i3 = _g4++;
			cx7 = dx + radius * Math.sin(angle3);
			cy7 = dy + radius * Math.cos(angle3);
			if(i3 != 0) {
				drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
				var m9 = trilateral2_Shaper.transformMatrix;
				if(m9 != null) {
					drawType.transform(m9);
				}
				drawType.next();
			}
			angle3 += step7;
			bx7 = cx7;
			by7 = cy7;
		}
		var len = count += totalSteps3;
		var color = rs.color;
		if(color == -1) {
			color = this1.currentColor;
		}
		this1.colorType.colorTriangles(color,len);
		var end = start + len - 1;
		var s0 = new trilateral2_IndexRange(start,end);
		var this34 = this.spots;
		var this35 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this36 = this35;
		var this37 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this34.dz / 2);
		var s = this37;
		var this38 = new geom_structure_Mat4x3(this36.a * s.a + this36.b * s.e + this36.c * s.i,this36.a * s.b + this36.b * s.f + this36.c * s.j,this36.a * s.c + this36.b * s.g + this36.c * s.k,this36.a * s.d + this36.b * s.h + this36.c * s.l + this36.d,this36.e * s.a + this36.f * s.e + this36.g * s.i,this36.e * s.b + this36.f * s.f + this36.g * s.j,this36.e * s.c + this36.f * s.g + this36.g * s.k,this36.e * s.d + this36.f * s.h + this36.g * s.l + this36.h,this36.i * s.a + this36.j * s.e + this36.k * s.i,this36.i * s.b + this36.j * s.f + this36.k * s.j,this36.i * s.c + this36.j * s.g + this36.k * s.k,this36.i * s.d + this36.j * s.h + this36.k * s.l + this36.l);
		var trans1 = this38;
		this34.drawType.transformRange(trans1,s0.start,s0.end);
		var this39 = this.spots;
		var rs1 = this.spotShape;
		var s01 = rs1.clone();
		s01.x += 20;
		s01.y -= 20;
		var start1 = this39.drawType.get_size();
		var drawType1 = this39.drawType;
		var ax4 = s01.x;
		var ay4 = s01.y;
		var radius1 = s01.radius;
		var sides = 36;
		if(sides == null) {
			sides = 36;
		}
		var pi5 = Math.PI;
		var theta16 = pi5 / 2;
		var step8 = pi5 * 2 / sides;
		var bx8;
		var by8;
		var cx8;
		var cy8;
		var _g5 = 0;
		var _g14 = sides;
		while(_g5 < _g14) {
			var i4 = _g5++;
			bx8 = ax4 + radius1 * Math.sin(theta16);
			by8 = ay4 + radius1 * Math.cos(theta16);
			theta16 += step8;
			cx8 = ax4 + radius1 * Math.sin(theta16);
			cy8 = ay4 + radius1 * Math.cos(theta16);
			drawType1.triangle(ax4,ay4,0,bx8,by8,0,cx8,cy8,0);
			var m10 = trilateral2_Shaper.transformMatrix;
			if(m10 != null) {
				drawType1.transform(m10);
			}
			drawType1.next();
		}
		var len1 = sides;
		var color1 = s01.color;
		if(color1 == -1) {
			color1 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color1,len1);
		var end1 = start1 + len1 - 1;
		var startEnd = new trilateral2_IndexRange(start1,end1);
		var c0 = startEnd;
		var s1 = rs1.clone();
		s1.x -= 20;
		s1.y += 20;
		var start2 = this39.drawType.get_size();
		var drawType2 = this39.drawType;
		var ax5 = s1.x;
		var ay5 = s1.y;
		var radius2 = s1.radius;
		var sides1 = 36;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi6 = Math.PI;
		var theta17 = pi6 / 2;
		var step9 = pi6 * 2 / sides1;
		var bx9;
		var by9;
		var cx9;
		var cy9;
		var _g6 = 0;
		var _g15 = sides1;
		while(_g6 < _g15) {
			var i5 = _g6++;
			bx9 = ax5 + radius2 * Math.sin(theta17);
			by9 = ay5 + radius2 * Math.cos(theta17);
			theta17 += step9;
			cx9 = ax5 + radius2 * Math.sin(theta17);
			cy9 = ay5 + radius2 * Math.cos(theta17);
			drawType2.triangle(ax5,ay5,0,bx9,by9,0,cx9,cy9,0);
			var m11 = trilateral2_Shaper.transformMatrix;
			if(m11 != null) {
				drawType2.transform(m11);
			}
			drawType2.next();
		}
		var len2 = sides1;
		var color2 = s1.color;
		if(color2 == -1) {
			color2 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color2,len2);
		var end2 = start2 + len2 - 1;
		var startEnd1 = new trilateral2_IndexRange(start2,end2);
		var c1 = startEnd1;
		var s11 = new trilateral2_IndexRange(c0.start,c1.end);
		var s2 = new trilateral2_IndexRange(s0.start,s11.end);
		this.spots.drawType.transformRange(trans,s2.start,s2.end);
		return s2;
	}
	,three: function(trans) {
		var this1 = this.spots;
		var rs = this.dieShape;
		var start = this1.drawType.get_size();
		var drawType = this1.drawType;
		var x = rs.x - rs.radius;
		var y = rs.y - rs.radius;
		var width = rs.radius * 2;
		var height = rs.radius * 2;
		var radius = this1.rounded;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x + radius;
		var ay = y + radius;
		var bx = x + width - radius;
		var by = y + radius;
		var cx = bx;
		var cy = y + height - radius;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y;
		var bx1 = ax + (width - radius * 2);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + height;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		count += 2;
		var dimY = height - 2 * radius;
		var ax2 = x;
		var ay2 = ay;
		var bx2 = x + radius;
		var by2 = ay2;
		var cx2 = bx2;
		var cy2 = ay2 + dimY;
		var dx2 = x;
		var dy2 = cy2;
		drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType.transform(m3);
		}
		drawType.next();
		count += 2;
		var ax3 = bx;
		var ay3 = by;
		var bx3 = bx + radius;
		var by3 = ay3;
		var cx3 = bx3;
		var cy3 = ay3 + dimY;
		var dx3 = bx;
		var dy3 = cy3;
		drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType.transform(m4);
		}
		drawType.next();
		drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType.transform(m5);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this2 = f;
			var za = this2;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this3 = f1;
			var zb = this3;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this4 = f2;
			var za1 = this4;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this5 = f3;
			var zb1 = this5;
			var fa1 = za1;
			var fb1 = zb1;
			var theta1 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta1 : -theta1;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this6 = f4;
			var za2 = this6;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this7 = f5;
			var zb2 = this7;
			var fa2 = za2;
			var fb2 = zb2;
			var theta2 = Math.abs(fa2 - fb2);
			var smallest = theta2 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta2 : -theta2;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this8 = f6;
			var za3 = this8;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this9 = f7;
			var zb3 = this9;
			var fa3 = za3;
			var fb3 = zb3;
			var theta3 = Math.abs(fa3 - fb3);
			var largest = theta3 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta3 : -theta3;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx4;
		var cy4;
		var bx4 = 0;
		var by4 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx4 = ax + radius * Math.sin(angle);
			cy4 = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
				var m6 = trilateral2_Shaper.transformMatrix;
				if(m6 != null) {
					drawType.transform(m6);
				}
				drawType.next();
			}
			angle += step1;
			bx4 = cx4;
			by4 = cy4;
		}
		count += totalSteps;
		var pi2 = Math.PI;
		var step2 = pi2 * 2 / 36;
		var dif5;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f8;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f8 = pi_2;
			} else {
				var a8 = pi_2 % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
			}
			var this10 = f8;
			var za4 = this10;
			var f9;
			if(pi >= 0 && pi > Math.PI) {
				f9 = pi;
			} else {
				var a9 = pi % (2 * Math.PI);
				f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
			}
			var this11 = f9;
			var zb4 = this11;
			var fa4 = za4;
			var fb4 = zb4;
			var theta4 = Math.abs(fa4 - fb4);
			var clockwise4 = fa4 < fb4;
			var dif6 = clockwise4 ? theta4 : -theta4;
			dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
			break;
		case 1:
			var f10;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f10 = pi_2;
			} else {
				var a10 = pi_2 % (2 * Math.PI);
				f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
			}
			var this12 = f10;
			var za5 = this12;
			var f11;
			if(pi >= 0 && pi > Math.PI) {
				f11 = pi;
			} else {
				var a11 = pi % (2 * Math.PI);
				f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
			}
			var this13 = f11;
			var zb5 = this13;
			var fa5 = za5;
			var fb5 = zb5;
			var theta5 = Math.abs(fa5 - fb5);
			var clockwise5 = fa5 < fb5;
			var dif7 = clockwise5 ? theta5 : -theta5;
			dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
			break;
		case 2:
			var f12;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f12 = pi_2;
			} else {
				var a12 = pi_2 % (2 * Math.PI);
				f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
			}
			var this14 = f12;
			var za6 = this14;
			var f13;
			if(pi >= 0 && pi > Math.PI) {
				f13 = pi;
			} else {
				var a13 = pi % (2 * Math.PI);
				f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
			}
			var this15 = f13;
			var zb6 = this15;
			var fa6 = za6;
			var fb6 = zb6;
			var theta6 = Math.abs(fa6 - fb6);
			var smallest1 = theta6 <= Math.PI;
			var clockwise6 = fa6 < fb6;
			var dif8 = clockwise6 ? theta6 : -theta6;
			dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
			break;
		case 3:
			var f14;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f14 = pi_2;
			} else {
				var a14 = pi_2 % (2 * Math.PI);
				f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
			}
			var this16 = f14;
			var za7 = this16;
			var f15;
			if(pi >= 0 && pi > Math.PI) {
				f15 = pi;
			} else {
				var a15 = pi % (2 * Math.PI);
				f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
			}
			var this17 = f15;
			var zb7 = this17;
			var fa7 = za7;
			var fb7 = zb7;
			var theta7 = Math.abs(fa7 - fb7);
			var largest1 = theta7 > Math.PI;
			var clockwise7 = fa7 < fb7;
			var dif9 = clockwise7 ? theta7 : -theta7;
			dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
			break;
		}
		var positive1 = dif5 >= 0;
		var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
		var step3 = dif5 / totalSteps1;
		var angle1 = pi_2;
		var cx5;
		var cy5;
		var bx5 = 0;
		var by5 = 0;
		var _g2 = 0;
		var _g11 = totalSteps1 + 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			cx5 = bx + radius * Math.sin(angle1);
			cy5 = by + radius * Math.cos(angle1);
			if(i1 != 0) {
				drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
				var m7 = trilateral2_Shaper.transformMatrix;
				if(m7 != null) {
					drawType.transform(m7);
				}
				drawType.next();
			}
			angle1 += step3;
			bx5 = cx5;
			by5 = cy5;
		}
		count += totalSteps1;
		var pi3 = Math.PI;
		var step4 = pi3 * 2 / 36;
		var dif10;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f16;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f16 = pi_2;
			} else {
				var a16 = pi_2 % (2 * Math.PI);
				f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
			}
			var this18 = f16;
			var za8 = this18;
			var f17;
			if(0 > Math.PI) {
				f17 = 0;
			} else {
				var a17 = 0 % (2 * Math.PI);
				f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
			}
			var this19 = f17;
			var zb8 = this19;
			var fa8 = za8;
			var fb8 = zb8;
			var theta8 = Math.abs(fa8 - fb8);
			var clockwise8 = fa8 < fb8;
			var dif11 = clockwise8 ? theta8 : -theta8;
			dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
			break;
		case 1:
			var f18;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f18 = pi_2;
			} else {
				var a18 = pi_2 % (2 * Math.PI);
				f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
			}
			var this20 = f18;
			var za9 = this20;
			var f19;
			if(0 > Math.PI) {
				f19 = 0;
			} else {
				var a19 = 0 % (2 * Math.PI);
				f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
			}
			var this21 = f19;
			var zb9 = this21;
			var fa9 = za9;
			var fb9 = zb9;
			var theta9 = Math.abs(fa9 - fb9);
			var clockwise9 = fa9 < fb9;
			var dif12 = clockwise9 ? theta9 : -theta9;
			dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
			break;
		case 2:
			var f20;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f20 = pi_2;
			} else {
				var a20 = pi_2 % (2 * Math.PI);
				f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
			}
			var this22 = f20;
			var za10 = this22;
			var f21;
			if(0 > Math.PI) {
				f21 = 0;
			} else {
				var a21 = 0 % (2 * Math.PI);
				f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
			}
			var this23 = f21;
			var zb10 = this23;
			var fa10 = za10;
			var fb10 = zb10;
			var theta10 = Math.abs(fa10 - fb10);
			var smallest2 = theta10 <= Math.PI;
			var clockwise10 = fa10 < fb10;
			var dif13 = clockwise10 ? theta10 : -theta10;
			dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
			break;
		case 3:
			var f22;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f22 = pi_2;
			} else {
				var a22 = pi_2 % (2 * Math.PI);
				f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
			}
			var this24 = f22;
			var za11 = this24;
			var f23;
			if(0 > Math.PI) {
				f23 = 0;
			} else {
				var a23 = 0 % (2 * Math.PI);
				f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
			}
			var this25 = f23;
			var zb11 = this25;
			var fa11 = za11;
			var fb11 = zb11;
			var theta11 = Math.abs(fa11 - fb11);
			var largest2 = theta11 > Math.PI;
			var clockwise11 = fa11 < fb11;
			var dif14 = clockwise11 ? theta11 : -theta11;
			dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
			break;
		}
		var positive2 = dif10 >= 0;
		var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
		var step5 = dif10 / totalSteps2;
		var angle2 = pi_2;
		var cx6;
		var cy6;
		var bx6 = 0;
		var by6 = 0;
		var _g3 = 0;
		var _g12 = totalSteps2 + 1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			cx6 = cx + radius * Math.sin(angle2);
			cy6 = cy + radius * Math.cos(angle2);
			if(i2 != 0) {
				drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
				var m8 = trilateral2_Shaper.transformMatrix;
				if(m8 != null) {
					drawType.transform(m8);
				}
				drawType.next();
			}
			angle2 += step5;
			bx6 = cx6;
			by6 = cy6;
		}
		count += totalSteps2;
		var gamma1 = -pi_2;
		var pi4 = Math.PI;
		var step6 = pi4 * 2 / 36;
		var dif15;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f24;
			if(0 > Math.PI) {
				f24 = 0;
			} else {
				var a24 = 0 % (2 * Math.PI);
				f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
			}
			var this26 = f24;
			var za12 = this26;
			var f25;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f25 = gamma1;
			} else {
				var a25 = gamma1 % (2 * Math.PI);
				f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
			}
			var this27 = f25;
			var zb12 = this27;
			var fa12 = za12;
			var fb12 = zb12;
			var theta12 = Math.abs(fa12 - fb12);
			var clockwise12 = fa12 < fb12;
			var dif16 = clockwise12 ? theta12 : -theta12;
			dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
			break;
		case 1:
			var f26;
			if(0 > Math.PI) {
				f26 = 0;
			} else {
				var a26 = 0 % (2 * Math.PI);
				f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
			}
			var this28 = f26;
			var za13 = this28;
			var f27;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f27 = gamma1;
			} else {
				var a27 = gamma1 % (2 * Math.PI);
				f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
			}
			var this29 = f27;
			var zb13 = this29;
			var fa13 = za13;
			var fb13 = zb13;
			var theta13 = Math.abs(fa13 - fb13);
			var clockwise13 = fa13 < fb13;
			var dif17 = clockwise13 ? theta13 : -theta13;
			dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
			break;
		case 2:
			var f28;
			if(0 > Math.PI) {
				f28 = 0;
			} else {
				var a28 = 0 % (2 * Math.PI);
				f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
			}
			var this30 = f28;
			var za14 = this30;
			var f29;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f29 = gamma1;
			} else {
				var a29 = gamma1 % (2 * Math.PI);
				f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
			}
			var this31 = f29;
			var zb14 = this31;
			var fa14 = za14;
			var fb14 = zb14;
			var theta14 = Math.abs(fa14 - fb14);
			var smallest3 = theta14 <= Math.PI;
			var clockwise14 = fa14 < fb14;
			var dif18 = clockwise14 ? theta14 : -theta14;
			dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
			break;
		case 3:
			var f30;
			if(0 > Math.PI) {
				f30 = 0;
			} else {
				var a30 = 0 % (2 * Math.PI);
				f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
			}
			var this32 = f30;
			var za15 = this32;
			var f31;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f31 = gamma1;
			} else {
				var a31 = gamma1 % (2 * Math.PI);
				f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
			}
			var this33 = f31;
			var zb15 = this33;
			var fa15 = za15;
			var fb15 = zb15;
			var theta15 = Math.abs(fa15 - fb15);
			var largest3 = theta15 > Math.PI;
			var clockwise15 = fa15 < fb15;
			var dif19 = clockwise15 ? theta15 : -theta15;
			dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
			break;
		}
		var positive3 = dif15 >= 0;
		var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
		var step7 = dif15 / totalSteps3;
		var angle3 = 0;
		var cx7;
		var cy7;
		var bx7 = 0;
		var by7 = 0;
		var _g4 = 0;
		var _g13 = totalSteps3 + 1;
		while(_g4 < _g13) {
			var i3 = _g4++;
			cx7 = dx + radius * Math.sin(angle3);
			cy7 = dy + radius * Math.cos(angle3);
			if(i3 != 0) {
				drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
				var m9 = trilateral2_Shaper.transformMatrix;
				if(m9 != null) {
					drawType.transform(m9);
				}
				drawType.next();
			}
			angle3 += step7;
			bx7 = cx7;
			by7 = cy7;
		}
		var len = count += totalSteps3;
		var color = rs.color;
		if(color == -1) {
			color = this1.currentColor;
		}
		this1.colorType.colorTriangles(color,len);
		var end = start + len - 1;
		var s0 = new trilateral2_IndexRange(start,end);
		var this34 = this.spots;
		var this35 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this36 = this35;
		var this37 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this34.dz / 2);
		var s = this37;
		var this38 = new geom_structure_Mat4x3(this36.a * s.a + this36.b * s.e + this36.c * s.i,this36.a * s.b + this36.b * s.f + this36.c * s.j,this36.a * s.c + this36.b * s.g + this36.c * s.k,this36.a * s.d + this36.b * s.h + this36.c * s.l + this36.d,this36.e * s.a + this36.f * s.e + this36.g * s.i,this36.e * s.b + this36.f * s.f + this36.g * s.j,this36.e * s.c + this36.f * s.g + this36.g * s.k,this36.e * s.d + this36.f * s.h + this36.g * s.l + this36.h,this36.i * s.a + this36.j * s.e + this36.k * s.i,this36.i * s.b + this36.j * s.f + this36.k * s.j,this36.i * s.c + this36.j * s.g + this36.k * s.k,this36.i * s.d + this36.j * s.h + this36.k * s.l + this36.l);
		var trans1 = this38;
		this34.drawType.transformRange(trans1,s0.start,s0.end);
		var this39 = this.spots;
		var rs1 = this.spotShape;
		var s01 = rs1.clone();
		s01.x += 25;
		s01.y -= 25;
		var start1 = this39.drawType.get_size();
		var drawType1 = this39.drawType;
		var ax4 = s01.x;
		var ay4 = s01.y;
		var radius1 = s01.radius;
		var sides = 36;
		if(sides == null) {
			sides = 36;
		}
		var pi5 = Math.PI;
		var theta16 = pi5 / 2;
		var step8 = pi5 * 2 / sides;
		var bx8;
		var by8;
		var cx8;
		var cy8;
		var _g5 = 0;
		var _g14 = sides;
		while(_g5 < _g14) {
			var i4 = _g5++;
			bx8 = ax4 + radius1 * Math.sin(theta16);
			by8 = ay4 + radius1 * Math.cos(theta16);
			theta16 += step8;
			cx8 = ax4 + radius1 * Math.sin(theta16);
			cy8 = ay4 + radius1 * Math.cos(theta16);
			drawType1.triangle(ax4,ay4,0,bx8,by8,0,cx8,cy8,0);
			var m10 = trilateral2_Shaper.transformMatrix;
			if(m10 != null) {
				drawType1.transform(m10);
			}
			drawType1.next();
		}
		var len1 = sides;
		var color1 = s01.color;
		if(color1 == -1) {
			color1 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color1,len1);
		var end1 = start1 + len1 - 1;
		var startEnd = new trilateral2_IndexRange(start1,end1);
		var c0 = startEnd;
		var s1 = rs1.clone();
		s1.x -= 25;
		s1.y += 25;
		var start2 = this39.drawType.get_size();
		var drawType2 = this39.drawType;
		var ax5 = s1.x;
		var ay5 = s1.y;
		var radius2 = s1.radius;
		var sides1 = 36;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi6 = Math.PI;
		var theta17 = pi6 / 2;
		var step9 = pi6 * 2 / sides1;
		var bx9;
		var by9;
		var cx9;
		var cy9;
		var _g6 = 0;
		var _g15 = sides1;
		while(_g6 < _g15) {
			var i5 = _g6++;
			bx9 = ax5 + radius2 * Math.sin(theta17);
			by9 = ay5 + radius2 * Math.cos(theta17);
			theta17 += step9;
			cx9 = ax5 + radius2 * Math.sin(theta17);
			cy9 = ay5 + radius2 * Math.cos(theta17);
			drawType2.triangle(ax5,ay5,0,bx9,by9,0,cx9,cy9,0);
			var m11 = trilateral2_Shaper.transformMatrix;
			if(m11 != null) {
				drawType2.transform(m11);
			}
			drawType2.next();
		}
		var len2 = sides1;
		var color2 = s1.color;
		if(color2 == -1) {
			color2 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color2,len2);
		var end2 = start2 + len2 - 1;
		var startEnd1 = new trilateral2_IndexRange(start2,end2);
		var c1 = startEnd1;
		var s2 = rs1.clone();
		var start3 = this39.drawType.get_size();
		var drawType3 = this39.drawType;
		var ax6 = s2.x;
		var ay6 = s2.y;
		var radius3 = s2.radius;
		var sides2 = 36;
		if(sides2 == null) {
			sides2 = 36;
		}
		var pi7 = Math.PI;
		var theta18 = pi7 / 2;
		var step10 = pi7 * 2 / sides2;
		var bx10;
		var by10;
		var cx10;
		var cy10;
		var _g7 = 0;
		var _g16 = sides2;
		while(_g7 < _g16) {
			var i6 = _g7++;
			bx10 = ax6 + radius3 * Math.sin(theta18);
			by10 = ay6 + radius3 * Math.cos(theta18);
			theta18 += step10;
			cx10 = ax6 + radius3 * Math.sin(theta18);
			cy10 = ay6 + radius3 * Math.cos(theta18);
			drawType3.triangle(ax6,ay6,0,bx10,by10,0,cx10,cy10,0);
			var m12 = trilateral2_Shaper.transformMatrix;
			if(m12 != null) {
				drawType3.transform(m12);
			}
			drawType3.next();
		}
		var len3 = sides2;
		var color3 = s2.color;
		if(color3 == -1) {
			color3 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color3,len3);
		var end3 = start3 + len3 - 1;
		var startEnd2 = new trilateral2_IndexRange(start3,end3);
		var c2 = startEnd2;
		var s11 = new trilateral2_IndexRange(c0.start,c2.end);
		var s21 = new trilateral2_IndexRange(s0.start,s11.end);
		this.spots.drawType.transformRange(trans,s21.start,s21.end);
		return s21;
	}
	,four: function(trans) {
		var this1 = this.spots;
		var rs = this.dieShape;
		var start = this1.drawType.get_size();
		var drawType = this1.drawType;
		var x = rs.x - rs.radius;
		var y = rs.y - rs.radius;
		var width = rs.radius * 2;
		var height = rs.radius * 2;
		var radius = this1.rounded;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x + radius;
		var ay = y + radius;
		var bx = x + width - radius;
		var by = y + radius;
		var cx = bx;
		var cy = y + height - radius;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y;
		var bx1 = ax + (width - radius * 2);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + height;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		count += 2;
		var dimY = height - 2 * radius;
		var ax2 = x;
		var ay2 = ay;
		var bx2 = x + radius;
		var by2 = ay2;
		var cx2 = bx2;
		var cy2 = ay2 + dimY;
		var dx2 = x;
		var dy2 = cy2;
		drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType.transform(m3);
		}
		drawType.next();
		count += 2;
		var ax3 = bx;
		var ay3 = by;
		var bx3 = bx + radius;
		var by3 = ay3;
		var cx3 = bx3;
		var cy3 = ay3 + dimY;
		var dx3 = bx;
		var dy3 = cy3;
		drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType.transform(m4);
		}
		drawType.next();
		drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType.transform(m5);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this2 = f;
			var za = this2;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this3 = f1;
			var zb = this3;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this4 = f2;
			var za1 = this4;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this5 = f3;
			var zb1 = this5;
			var fa1 = za1;
			var fb1 = zb1;
			var theta1 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta1 : -theta1;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this6 = f4;
			var za2 = this6;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this7 = f5;
			var zb2 = this7;
			var fa2 = za2;
			var fb2 = zb2;
			var theta2 = Math.abs(fa2 - fb2);
			var smallest = theta2 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta2 : -theta2;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this8 = f6;
			var za3 = this8;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this9 = f7;
			var zb3 = this9;
			var fa3 = za3;
			var fb3 = zb3;
			var theta3 = Math.abs(fa3 - fb3);
			var largest = theta3 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta3 : -theta3;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx4;
		var cy4;
		var bx4 = 0;
		var by4 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx4 = ax + radius * Math.sin(angle);
			cy4 = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
				var m6 = trilateral2_Shaper.transformMatrix;
				if(m6 != null) {
					drawType.transform(m6);
				}
				drawType.next();
			}
			angle += step1;
			bx4 = cx4;
			by4 = cy4;
		}
		count += totalSteps;
		var pi2 = Math.PI;
		var step2 = pi2 * 2 / 36;
		var dif5;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f8;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f8 = pi_2;
			} else {
				var a8 = pi_2 % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
			}
			var this10 = f8;
			var za4 = this10;
			var f9;
			if(pi >= 0 && pi > Math.PI) {
				f9 = pi;
			} else {
				var a9 = pi % (2 * Math.PI);
				f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
			}
			var this11 = f9;
			var zb4 = this11;
			var fa4 = za4;
			var fb4 = zb4;
			var theta4 = Math.abs(fa4 - fb4);
			var clockwise4 = fa4 < fb4;
			var dif6 = clockwise4 ? theta4 : -theta4;
			dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
			break;
		case 1:
			var f10;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f10 = pi_2;
			} else {
				var a10 = pi_2 % (2 * Math.PI);
				f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
			}
			var this12 = f10;
			var za5 = this12;
			var f11;
			if(pi >= 0 && pi > Math.PI) {
				f11 = pi;
			} else {
				var a11 = pi % (2 * Math.PI);
				f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
			}
			var this13 = f11;
			var zb5 = this13;
			var fa5 = za5;
			var fb5 = zb5;
			var theta5 = Math.abs(fa5 - fb5);
			var clockwise5 = fa5 < fb5;
			var dif7 = clockwise5 ? theta5 : -theta5;
			dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
			break;
		case 2:
			var f12;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f12 = pi_2;
			} else {
				var a12 = pi_2 % (2 * Math.PI);
				f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
			}
			var this14 = f12;
			var za6 = this14;
			var f13;
			if(pi >= 0 && pi > Math.PI) {
				f13 = pi;
			} else {
				var a13 = pi % (2 * Math.PI);
				f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
			}
			var this15 = f13;
			var zb6 = this15;
			var fa6 = za6;
			var fb6 = zb6;
			var theta6 = Math.abs(fa6 - fb6);
			var smallest1 = theta6 <= Math.PI;
			var clockwise6 = fa6 < fb6;
			var dif8 = clockwise6 ? theta6 : -theta6;
			dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
			break;
		case 3:
			var f14;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f14 = pi_2;
			} else {
				var a14 = pi_2 % (2 * Math.PI);
				f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
			}
			var this16 = f14;
			var za7 = this16;
			var f15;
			if(pi >= 0 && pi > Math.PI) {
				f15 = pi;
			} else {
				var a15 = pi % (2 * Math.PI);
				f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
			}
			var this17 = f15;
			var zb7 = this17;
			var fa7 = za7;
			var fb7 = zb7;
			var theta7 = Math.abs(fa7 - fb7);
			var largest1 = theta7 > Math.PI;
			var clockwise7 = fa7 < fb7;
			var dif9 = clockwise7 ? theta7 : -theta7;
			dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
			break;
		}
		var positive1 = dif5 >= 0;
		var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
		var step3 = dif5 / totalSteps1;
		var angle1 = pi_2;
		var cx5;
		var cy5;
		var bx5 = 0;
		var by5 = 0;
		var _g2 = 0;
		var _g11 = totalSteps1 + 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			cx5 = bx + radius * Math.sin(angle1);
			cy5 = by + radius * Math.cos(angle1);
			if(i1 != 0) {
				drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
				var m7 = trilateral2_Shaper.transformMatrix;
				if(m7 != null) {
					drawType.transform(m7);
				}
				drawType.next();
			}
			angle1 += step3;
			bx5 = cx5;
			by5 = cy5;
		}
		count += totalSteps1;
		var pi3 = Math.PI;
		var step4 = pi3 * 2 / 36;
		var dif10;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f16;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f16 = pi_2;
			} else {
				var a16 = pi_2 % (2 * Math.PI);
				f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
			}
			var this18 = f16;
			var za8 = this18;
			var f17;
			if(0 > Math.PI) {
				f17 = 0;
			} else {
				var a17 = 0 % (2 * Math.PI);
				f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
			}
			var this19 = f17;
			var zb8 = this19;
			var fa8 = za8;
			var fb8 = zb8;
			var theta8 = Math.abs(fa8 - fb8);
			var clockwise8 = fa8 < fb8;
			var dif11 = clockwise8 ? theta8 : -theta8;
			dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
			break;
		case 1:
			var f18;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f18 = pi_2;
			} else {
				var a18 = pi_2 % (2 * Math.PI);
				f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
			}
			var this20 = f18;
			var za9 = this20;
			var f19;
			if(0 > Math.PI) {
				f19 = 0;
			} else {
				var a19 = 0 % (2 * Math.PI);
				f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
			}
			var this21 = f19;
			var zb9 = this21;
			var fa9 = za9;
			var fb9 = zb9;
			var theta9 = Math.abs(fa9 - fb9);
			var clockwise9 = fa9 < fb9;
			var dif12 = clockwise9 ? theta9 : -theta9;
			dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
			break;
		case 2:
			var f20;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f20 = pi_2;
			} else {
				var a20 = pi_2 % (2 * Math.PI);
				f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
			}
			var this22 = f20;
			var za10 = this22;
			var f21;
			if(0 > Math.PI) {
				f21 = 0;
			} else {
				var a21 = 0 % (2 * Math.PI);
				f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
			}
			var this23 = f21;
			var zb10 = this23;
			var fa10 = za10;
			var fb10 = zb10;
			var theta10 = Math.abs(fa10 - fb10);
			var smallest2 = theta10 <= Math.PI;
			var clockwise10 = fa10 < fb10;
			var dif13 = clockwise10 ? theta10 : -theta10;
			dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
			break;
		case 3:
			var f22;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f22 = pi_2;
			} else {
				var a22 = pi_2 % (2 * Math.PI);
				f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
			}
			var this24 = f22;
			var za11 = this24;
			var f23;
			if(0 > Math.PI) {
				f23 = 0;
			} else {
				var a23 = 0 % (2 * Math.PI);
				f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
			}
			var this25 = f23;
			var zb11 = this25;
			var fa11 = za11;
			var fb11 = zb11;
			var theta11 = Math.abs(fa11 - fb11);
			var largest2 = theta11 > Math.PI;
			var clockwise11 = fa11 < fb11;
			var dif14 = clockwise11 ? theta11 : -theta11;
			dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
			break;
		}
		var positive2 = dif10 >= 0;
		var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
		var step5 = dif10 / totalSteps2;
		var angle2 = pi_2;
		var cx6;
		var cy6;
		var bx6 = 0;
		var by6 = 0;
		var _g3 = 0;
		var _g12 = totalSteps2 + 1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			cx6 = cx + radius * Math.sin(angle2);
			cy6 = cy + radius * Math.cos(angle2);
			if(i2 != 0) {
				drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
				var m8 = trilateral2_Shaper.transformMatrix;
				if(m8 != null) {
					drawType.transform(m8);
				}
				drawType.next();
			}
			angle2 += step5;
			bx6 = cx6;
			by6 = cy6;
		}
		count += totalSteps2;
		var gamma1 = -pi_2;
		var pi4 = Math.PI;
		var step6 = pi4 * 2 / 36;
		var dif15;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f24;
			if(0 > Math.PI) {
				f24 = 0;
			} else {
				var a24 = 0 % (2 * Math.PI);
				f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
			}
			var this26 = f24;
			var za12 = this26;
			var f25;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f25 = gamma1;
			} else {
				var a25 = gamma1 % (2 * Math.PI);
				f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
			}
			var this27 = f25;
			var zb12 = this27;
			var fa12 = za12;
			var fb12 = zb12;
			var theta12 = Math.abs(fa12 - fb12);
			var clockwise12 = fa12 < fb12;
			var dif16 = clockwise12 ? theta12 : -theta12;
			dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
			break;
		case 1:
			var f26;
			if(0 > Math.PI) {
				f26 = 0;
			} else {
				var a26 = 0 % (2 * Math.PI);
				f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
			}
			var this28 = f26;
			var za13 = this28;
			var f27;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f27 = gamma1;
			} else {
				var a27 = gamma1 % (2 * Math.PI);
				f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
			}
			var this29 = f27;
			var zb13 = this29;
			var fa13 = za13;
			var fb13 = zb13;
			var theta13 = Math.abs(fa13 - fb13);
			var clockwise13 = fa13 < fb13;
			var dif17 = clockwise13 ? theta13 : -theta13;
			dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
			break;
		case 2:
			var f28;
			if(0 > Math.PI) {
				f28 = 0;
			} else {
				var a28 = 0 % (2 * Math.PI);
				f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
			}
			var this30 = f28;
			var za14 = this30;
			var f29;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f29 = gamma1;
			} else {
				var a29 = gamma1 % (2 * Math.PI);
				f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
			}
			var this31 = f29;
			var zb14 = this31;
			var fa14 = za14;
			var fb14 = zb14;
			var theta14 = Math.abs(fa14 - fb14);
			var smallest3 = theta14 <= Math.PI;
			var clockwise14 = fa14 < fb14;
			var dif18 = clockwise14 ? theta14 : -theta14;
			dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
			break;
		case 3:
			var f30;
			if(0 > Math.PI) {
				f30 = 0;
			} else {
				var a30 = 0 % (2 * Math.PI);
				f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
			}
			var this32 = f30;
			var za15 = this32;
			var f31;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f31 = gamma1;
			} else {
				var a31 = gamma1 % (2 * Math.PI);
				f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
			}
			var this33 = f31;
			var zb15 = this33;
			var fa15 = za15;
			var fb15 = zb15;
			var theta15 = Math.abs(fa15 - fb15);
			var largest3 = theta15 > Math.PI;
			var clockwise15 = fa15 < fb15;
			var dif19 = clockwise15 ? theta15 : -theta15;
			dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
			break;
		}
		var positive3 = dif15 >= 0;
		var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
		var step7 = dif15 / totalSteps3;
		var angle3 = 0;
		var cx7;
		var cy7;
		var bx7 = 0;
		var by7 = 0;
		var _g4 = 0;
		var _g13 = totalSteps3 + 1;
		while(_g4 < _g13) {
			var i3 = _g4++;
			cx7 = dx + radius * Math.sin(angle3);
			cy7 = dy + radius * Math.cos(angle3);
			if(i3 != 0) {
				drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
				var m9 = trilateral2_Shaper.transformMatrix;
				if(m9 != null) {
					drawType.transform(m9);
				}
				drawType.next();
			}
			angle3 += step7;
			bx7 = cx7;
			by7 = cy7;
		}
		var len = count += totalSteps3;
		var color = rs.color;
		if(color == -1) {
			color = this1.currentColor;
		}
		this1.colorType.colorTriangles(color,len);
		var end = start + len - 1;
		var s0 = new trilateral2_IndexRange(start,end);
		var this34 = this.spots;
		var this35 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this36 = this35;
		var this37 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this34.dz / 2);
		var s = this37;
		var this38 = new geom_structure_Mat4x3(this36.a * s.a + this36.b * s.e + this36.c * s.i,this36.a * s.b + this36.b * s.f + this36.c * s.j,this36.a * s.c + this36.b * s.g + this36.c * s.k,this36.a * s.d + this36.b * s.h + this36.c * s.l + this36.d,this36.e * s.a + this36.f * s.e + this36.g * s.i,this36.e * s.b + this36.f * s.f + this36.g * s.j,this36.e * s.c + this36.f * s.g + this36.g * s.k,this36.e * s.d + this36.f * s.h + this36.g * s.l + this36.h,this36.i * s.a + this36.j * s.e + this36.k * s.i,this36.i * s.b + this36.j * s.f + this36.k * s.j,this36.i * s.c + this36.j * s.g + this36.k * s.k,this36.i * s.d + this36.j * s.h + this36.k * s.l + this36.l);
		var trans1 = this38;
		this34.drawType.transformRange(trans1,s0.start,s0.end);
		var this39 = this.spots;
		var rs1 = this.spotShape;
		var s01 = rs1.clone();
		s01.x -= 30;
		s01.y -= 30;
		var start1 = this39.drawType.get_size();
		var drawType1 = this39.drawType;
		var ax4 = s01.x;
		var ay4 = s01.y;
		var radius1 = s01.radius;
		var sides = 36;
		if(sides == null) {
			sides = 36;
		}
		var pi5 = Math.PI;
		var theta16 = pi5 / 2;
		var step8 = pi5 * 2 / sides;
		var bx8;
		var by8;
		var cx8;
		var cy8;
		var _g5 = 0;
		var _g14 = sides;
		while(_g5 < _g14) {
			var i4 = _g5++;
			bx8 = ax4 + radius1 * Math.sin(theta16);
			by8 = ay4 + radius1 * Math.cos(theta16);
			theta16 += step8;
			cx8 = ax4 + radius1 * Math.sin(theta16);
			cy8 = ay4 + radius1 * Math.cos(theta16);
			drawType1.triangle(ax4,ay4,0,bx8,by8,0,cx8,cy8,0);
			var m10 = trilateral2_Shaper.transformMatrix;
			if(m10 != null) {
				drawType1.transform(m10);
			}
			drawType1.next();
		}
		var len1 = sides;
		var color1 = s01.color;
		if(color1 == -1) {
			color1 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color1,len1);
		var end1 = start1 + len1 - 1;
		var startEnd = new trilateral2_IndexRange(start1,end1);
		var c0 = startEnd;
		var s1 = rs1.clone();
		s1.x += 30;
		s1.y -= 30;
		var start2 = this39.drawType.get_size();
		var drawType2 = this39.drawType;
		var ax5 = s1.x;
		var ay5 = s1.y;
		var radius2 = s1.radius;
		var sides1 = 36;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi6 = Math.PI;
		var theta17 = pi6 / 2;
		var step9 = pi6 * 2 / sides1;
		var bx9;
		var by9;
		var cx9;
		var cy9;
		var _g6 = 0;
		var _g15 = sides1;
		while(_g6 < _g15) {
			var i5 = _g6++;
			bx9 = ax5 + radius2 * Math.sin(theta17);
			by9 = ay5 + radius2 * Math.cos(theta17);
			theta17 += step9;
			cx9 = ax5 + radius2 * Math.sin(theta17);
			cy9 = ay5 + radius2 * Math.cos(theta17);
			drawType2.triangle(ax5,ay5,0,bx9,by9,0,cx9,cy9,0);
			var m11 = trilateral2_Shaper.transformMatrix;
			if(m11 != null) {
				drawType2.transform(m11);
			}
			drawType2.next();
		}
		var len2 = sides1;
		var color2 = s1.color;
		if(color2 == -1) {
			color2 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color2,len2);
		var end2 = start2 + len2 - 1;
		var startEnd1 = new trilateral2_IndexRange(start2,end2);
		var c1 = startEnd1;
		var s2 = rs1.clone();
		s2.x -= 30;
		s2.y += 30;
		var start3 = this39.drawType.get_size();
		var drawType3 = this39.drawType;
		var ax6 = s2.x;
		var ay6 = s2.y;
		var radius3 = s2.radius;
		var sides2 = 36;
		if(sides2 == null) {
			sides2 = 36;
		}
		var pi7 = Math.PI;
		var theta18 = pi7 / 2;
		var step10 = pi7 * 2 / sides2;
		var bx10;
		var by10;
		var cx10;
		var cy10;
		var _g7 = 0;
		var _g16 = sides2;
		while(_g7 < _g16) {
			var i6 = _g7++;
			bx10 = ax6 + radius3 * Math.sin(theta18);
			by10 = ay6 + radius3 * Math.cos(theta18);
			theta18 += step10;
			cx10 = ax6 + radius3 * Math.sin(theta18);
			cy10 = ay6 + radius3 * Math.cos(theta18);
			drawType3.triangle(ax6,ay6,0,bx10,by10,0,cx10,cy10,0);
			var m12 = trilateral2_Shaper.transformMatrix;
			if(m12 != null) {
				drawType3.transform(m12);
			}
			drawType3.next();
		}
		var len3 = sides2;
		var color3 = s2.color;
		if(color3 == -1) {
			color3 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color3,len3);
		var end3 = start3 + len3 - 1;
		var startEnd2 = new trilateral2_IndexRange(start3,end3);
		var c2 = startEnd2;
		var s3 = rs1.clone();
		s3.x += 30;
		s3.y += 30;
		var start4 = this39.drawType.get_size();
		var drawType4 = this39.drawType;
		var ax7 = s3.x;
		var ay7 = s3.y;
		var radius4 = s3.radius;
		var sides3 = 36;
		if(sides3 == null) {
			sides3 = 36;
		}
		var pi8 = Math.PI;
		var theta19 = pi8 / 2;
		var step11 = pi8 * 2 / sides3;
		var bx11;
		var by11;
		var cx11;
		var cy11;
		var _g8 = 0;
		var _g17 = sides3;
		while(_g8 < _g17) {
			var i7 = _g8++;
			bx11 = ax7 + radius4 * Math.sin(theta19);
			by11 = ay7 + radius4 * Math.cos(theta19);
			theta19 += step11;
			cx11 = ax7 + radius4 * Math.sin(theta19);
			cy11 = ay7 + radius4 * Math.cos(theta19);
			drawType4.triangle(ax7,ay7,0,bx11,by11,0,cx11,cy11,0);
			var m13 = trilateral2_Shaper.transformMatrix;
			if(m13 != null) {
				drawType4.transform(m13);
			}
			drawType4.next();
		}
		var len4 = sides3;
		var color4 = s3.color;
		if(color4 == -1) {
			color4 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color4,len4);
		var end4 = start4 + len4 - 1;
		var startEnd3 = new trilateral2_IndexRange(start4,end4);
		var c3 = startEnd3;
		var s11 = new trilateral2_IndexRange(c0.start,c3.end);
		var s21 = new trilateral2_IndexRange(s0.start,s11.end);
		this.spots.drawType.transformRange(trans,s21.start,s21.end);
		return s21;
	}
	,five: function(trans) {
		var this1 = this.spots;
		var rs = this.dieShape;
		var start = this1.drawType.get_size();
		var drawType = this1.drawType;
		var x = rs.x - rs.radius;
		var y = rs.y - rs.radius;
		var width = rs.radius * 2;
		var height = rs.radius * 2;
		var radius = this1.rounded;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x + radius;
		var ay = y + radius;
		var bx = x + width - radius;
		var by = y + radius;
		var cx = bx;
		var cy = y + height - radius;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y;
		var bx1 = ax + (width - radius * 2);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + height;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		count += 2;
		var dimY = height - 2 * radius;
		var ax2 = x;
		var ay2 = ay;
		var bx2 = x + radius;
		var by2 = ay2;
		var cx2 = bx2;
		var cy2 = ay2 + dimY;
		var dx2 = x;
		var dy2 = cy2;
		drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType.transform(m3);
		}
		drawType.next();
		count += 2;
		var ax3 = bx;
		var ay3 = by;
		var bx3 = bx + radius;
		var by3 = ay3;
		var cx3 = bx3;
		var cy3 = ay3 + dimY;
		var dx3 = bx;
		var dy3 = cy3;
		drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType.transform(m4);
		}
		drawType.next();
		drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType.transform(m5);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this2 = f;
			var za = this2;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this3 = f1;
			var zb = this3;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this4 = f2;
			var za1 = this4;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this5 = f3;
			var zb1 = this5;
			var fa1 = za1;
			var fb1 = zb1;
			var theta1 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta1 : -theta1;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this6 = f4;
			var za2 = this6;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this7 = f5;
			var zb2 = this7;
			var fa2 = za2;
			var fb2 = zb2;
			var theta2 = Math.abs(fa2 - fb2);
			var smallest = theta2 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta2 : -theta2;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this8 = f6;
			var za3 = this8;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this9 = f7;
			var zb3 = this9;
			var fa3 = za3;
			var fb3 = zb3;
			var theta3 = Math.abs(fa3 - fb3);
			var largest = theta3 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta3 : -theta3;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx4;
		var cy4;
		var bx4 = 0;
		var by4 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx4 = ax + radius * Math.sin(angle);
			cy4 = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
				var m6 = trilateral2_Shaper.transformMatrix;
				if(m6 != null) {
					drawType.transform(m6);
				}
				drawType.next();
			}
			angle += step1;
			bx4 = cx4;
			by4 = cy4;
		}
		count += totalSteps;
		var pi2 = Math.PI;
		var step2 = pi2 * 2 / 36;
		var dif5;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f8;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f8 = pi_2;
			} else {
				var a8 = pi_2 % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
			}
			var this10 = f8;
			var za4 = this10;
			var f9;
			if(pi >= 0 && pi > Math.PI) {
				f9 = pi;
			} else {
				var a9 = pi % (2 * Math.PI);
				f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
			}
			var this11 = f9;
			var zb4 = this11;
			var fa4 = za4;
			var fb4 = zb4;
			var theta4 = Math.abs(fa4 - fb4);
			var clockwise4 = fa4 < fb4;
			var dif6 = clockwise4 ? theta4 : -theta4;
			dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
			break;
		case 1:
			var f10;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f10 = pi_2;
			} else {
				var a10 = pi_2 % (2 * Math.PI);
				f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
			}
			var this12 = f10;
			var za5 = this12;
			var f11;
			if(pi >= 0 && pi > Math.PI) {
				f11 = pi;
			} else {
				var a11 = pi % (2 * Math.PI);
				f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
			}
			var this13 = f11;
			var zb5 = this13;
			var fa5 = za5;
			var fb5 = zb5;
			var theta5 = Math.abs(fa5 - fb5);
			var clockwise5 = fa5 < fb5;
			var dif7 = clockwise5 ? theta5 : -theta5;
			dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
			break;
		case 2:
			var f12;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f12 = pi_2;
			} else {
				var a12 = pi_2 % (2 * Math.PI);
				f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
			}
			var this14 = f12;
			var za6 = this14;
			var f13;
			if(pi >= 0 && pi > Math.PI) {
				f13 = pi;
			} else {
				var a13 = pi % (2 * Math.PI);
				f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
			}
			var this15 = f13;
			var zb6 = this15;
			var fa6 = za6;
			var fb6 = zb6;
			var theta6 = Math.abs(fa6 - fb6);
			var smallest1 = theta6 <= Math.PI;
			var clockwise6 = fa6 < fb6;
			var dif8 = clockwise6 ? theta6 : -theta6;
			dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
			break;
		case 3:
			var f14;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f14 = pi_2;
			} else {
				var a14 = pi_2 % (2 * Math.PI);
				f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
			}
			var this16 = f14;
			var za7 = this16;
			var f15;
			if(pi >= 0 && pi > Math.PI) {
				f15 = pi;
			} else {
				var a15 = pi % (2 * Math.PI);
				f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
			}
			var this17 = f15;
			var zb7 = this17;
			var fa7 = za7;
			var fb7 = zb7;
			var theta7 = Math.abs(fa7 - fb7);
			var largest1 = theta7 > Math.PI;
			var clockwise7 = fa7 < fb7;
			var dif9 = clockwise7 ? theta7 : -theta7;
			dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
			break;
		}
		var positive1 = dif5 >= 0;
		var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
		var step3 = dif5 / totalSteps1;
		var angle1 = pi_2;
		var cx5;
		var cy5;
		var bx5 = 0;
		var by5 = 0;
		var _g2 = 0;
		var _g11 = totalSteps1 + 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			cx5 = bx + radius * Math.sin(angle1);
			cy5 = by + radius * Math.cos(angle1);
			if(i1 != 0) {
				drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
				var m7 = trilateral2_Shaper.transformMatrix;
				if(m7 != null) {
					drawType.transform(m7);
				}
				drawType.next();
			}
			angle1 += step3;
			bx5 = cx5;
			by5 = cy5;
		}
		count += totalSteps1;
		var pi3 = Math.PI;
		var step4 = pi3 * 2 / 36;
		var dif10;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f16;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f16 = pi_2;
			} else {
				var a16 = pi_2 % (2 * Math.PI);
				f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
			}
			var this18 = f16;
			var za8 = this18;
			var f17;
			if(0 > Math.PI) {
				f17 = 0;
			} else {
				var a17 = 0 % (2 * Math.PI);
				f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
			}
			var this19 = f17;
			var zb8 = this19;
			var fa8 = za8;
			var fb8 = zb8;
			var theta8 = Math.abs(fa8 - fb8);
			var clockwise8 = fa8 < fb8;
			var dif11 = clockwise8 ? theta8 : -theta8;
			dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
			break;
		case 1:
			var f18;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f18 = pi_2;
			} else {
				var a18 = pi_2 % (2 * Math.PI);
				f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
			}
			var this20 = f18;
			var za9 = this20;
			var f19;
			if(0 > Math.PI) {
				f19 = 0;
			} else {
				var a19 = 0 % (2 * Math.PI);
				f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
			}
			var this21 = f19;
			var zb9 = this21;
			var fa9 = za9;
			var fb9 = zb9;
			var theta9 = Math.abs(fa9 - fb9);
			var clockwise9 = fa9 < fb9;
			var dif12 = clockwise9 ? theta9 : -theta9;
			dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
			break;
		case 2:
			var f20;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f20 = pi_2;
			} else {
				var a20 = pi_2 % (2 * Math.PI);
				f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
			}
			var this22 = f20;
			var za10 = this22;
			var f21;
			if(0 > Math.PI) {
				f21 = 0;
			} else {
				var a21 = 0 % (2 * Math.PI);
				f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
			}
			var this23 = f21;
			var zb10 = this23;
			var fa10 = za10;
			var fb10 = zb10;
			var theta10 = Math.abs(fa10 - fb10);
			var smallest2 = theta10 <= Math.PI;
			var clockwise10 = fa10 < fb10;
			var dif13 = clockwise10 ? theta10 : -theta10;
			dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
			break;
		case 3:
			var f22;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f22 = pi_2;
			} else {
				var a22 = pi_2 % (2 * Math.PI);
				f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
			}
			var this24 = f22;
			var za11 = this24;
			var f23;
			if(0 > Math.PI) {
				f23 = 0;
			} else {
				var a23 = 0 % (2 * Math.PI);
				f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
			}
			var this25 = f23;
			var zb11 = this25;
			var fa11 = za11;
			var fb11 = zb11;
			var theta11 = Math.abs(fa11 - fb11);
			var largest2 = theta11 > Math.PI;
			var clockwise11 = fa11 < fb11;
			var dif14 = clockwise11 ? theta11 : -theta11;
			dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
			break;
		}
		var positive2 = dif10 >= 0;
		var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
		var step5 = dif10 / totalSteps2;
		var angle2 = pi_2;
		var cx6;
		var cy6;
		var bx6 = 0;
		var by6 = 0;
		var _g3 = 0;
		var _g12 = totalSteps2 + 1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			cx6 = cx + radius * Math.sin(angle2);
			cy6 = cy + radius * Math.cos(angle2);
			if(i2 != 0) {
				drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
				var m8 = trilateral2_Shaper.transformMatrix;
				if(m8 != null) {
					drawType.transform(m8);
				}
				drawType.next();
			}
			angle2 += step5;
			bx6 = cx6;
			by6 = cy6;
		}
		count += totalSteps2;
		var gamma1 = -pi_2;
		var pi4 = Math.PI;
		var step6 = pi4 * 2 / 36;
		var dif15;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f24;
			if(0 > Math.PI) {
				f24 = 0;
			} else {
				var a24 = 0 % (2 * Math.PI);
				f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
			}
			var this26 = f24;
			var za12 = this26;
			var f25;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f25 = gamma1;
			} else {
				var a25 = gamma1 % (2 * Math.PI);
				f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
			}
			var this27 = f25;
			var zb12 = this27;
			var fa12 = za12;
			var fb12 = zb12;
			var theta12 = Math.abs(fa12 - fb12);
			var clockwise12 = fa12 < fb12;
			var dif16 = clockwise12 ? theta12 : -theta12;
			dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
			break;
		case 1:
			var f26;
			if(0 > Math.PI) {
				f26 = 0;
			} else {
				var a26 = 0 % (2 * Math.PI);
				f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
			}
			var this28 = f26;
			var za13 = this28;
			var f27;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f27 = gamma1;
			} else {
				var a27 = gamma1 % (2 * Math.PI);
				f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
			}
			var this29 = f27;
			var zb13 = this29;
			var fa13 = za13;
			var fb13 = zb13;
			var theta13 = Math.abs(fa13 - fb13);
			var clockwise13 = fa13 < fb13;
			var dif17 = clockwise13 ? theta13 : -theta13;
			dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
			break;
		case 2:
			var f28;
			if(0 > Math.PI) {
				f28 = 0;
			} else {
				var a28 = 0 % (2 * Math.PI);
				f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
			}
			var this30 = f28;
			var za14 = this30;
			var f29;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f29 = gamma1;
			} else {
				var a29 = gamma1 % (2 * Math.PI);
				f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
			}
			var this31 = f29;
			var zb14 = this31;
			var fa14 = za14;
			var fb14 = zb14;
			var theta14 = Math.abs(fa14 - fb14);
			var smallest3 = theta14 <= Math.PI;
			var clockwise14 = fa14 < fb14;
			var dif18 = clockwise14 ? theta14 : -theta14;
			dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
			break;
		case 3:
			var f30;
			if(0 > Math.PI) {
				f30 = 0;
			} else {
				var a30 = 0 % (2 * Math.PI);
				f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
			}
			var this32 = f30;
			var za15 = this32;
			var f31;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f31 = gamma1;
			} else {
				var a31 = gamma1 % (2 * Math.PI);
				f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
			}
			var this33 = f31;
			var zb15 = this33;
			var fa15 = za15;
			var fb15 = zb15;
			var theta15 = Math.abs(fa15 - fb15);
			var largest3 = theta15 > Math.PI;
			var clockwise15 = fa15 < fb15;
			var dif19 = clockwise15 ? theta15 : -theta15;
			dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
			break;
		}
		var positive3 = dif15 >= 0;
		var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
		var step7 = dif15 / totalSteps3;
		var angle3 = 0;
		var cx7;
		var cy7;
		var bx7 = 0;
		var by7 = 0;
		var _g4 = 0;
		var _g13 = totalSteps3 + 1;
		while(_g4 < _g13) {
			var i3 = _g4++;
			cx7 = dx + radius * Math.sin(angle3);
			cy7 = dy + radius * Math.cos(angle3);
			if(i3 != 0) {
				drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
				var m9 = trilateral2_Shaper.transformMatrix;
				if(m9 != null) {
					drawType.transform(m9);
				}
				drawType.next();
			}
			angle3 += step7;
			bx7 = cx7;
			by7 = cy7;
		}
		var len = count += totalSteps3;
		var color = rs.color;
		if(color == -1) {
			color = this1.currentColor;
		}
		this1.colorType.colorTriangles(color,len);
		var end = start + len - 1;
		var s0 = new trilateral2_IndexRange(start,end);
		var this34 = this.spots;
		var this35 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this36 = this35;
		var this37 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this34.dz / 2);
		var s = this37;
		var this38 = new geom_structure_Mat4x3(this36.a * s.a + this36.b * s.e + this36.c * s.i,this36.a * s.b + this36.b * s.f + this36.c * s.j,this36.a * s.c + this36.b * s.g + this36.c * s.k,this36.a * s.d + this36.b * s.h + this36.c * s.l + this36.d,this36.e * s.a + this36.f * s.e + this36.g * s.i,this36.e * s.b + this36.f * s.f + this36.g * s.j,this36.e * s.c + this36.f * s.g + this36.g * s.k,this36.e * s.d + this36.f * s.h + this36.g * s.l + this36.h,this36.i * s.a + this36.j * s.e + this36.k * s.i,this36.i * s.b + this36.j * s.f + this36.k * s.j,this36.i * s.c + this36.j * s.g + this36.k * s.k,this36.i * s.d + this36.j * s.h + this36.k * s.l + this36.l);
		var trans1 = this38;
		this34.drawType.transformRange(trans1,s0.start,s0.end);
		var this39 = this.spots;
		var rs1 = this.spotShape;
		var s01 = rs1.clone();
		s01.x -= 30;
		s01.y -= 30;
		var start1 = this39.drawType.get_size();
		var drawType1 = this39.drawType;
		var ax4 = s01.x;
		var ay4 = s01.y;
		var radius1 = s01.radius;
		var sides = 36;
		if(sides == null) {
			sides = 36;
		}
		var pi5 = Math.PI;
		var theta16 = pi5 / 2;
		var step8 = pi5 * 2 / sides;
		var bx8;
		var by8;
		var cx8;
		var cy8;
		var _g5 = 0;
		var _g14 = sides;
		while(_g5 < _g14) {
			var i4 = _g5++;
			bx8 = ax4 + radius1 * Math.sin(theta16);
			by8 = ay4 + radius1 * Math.cos(theta16);
			theta16 += step8;
			cx8 = ax4 + radius1 * Math.sin(theta16);
			cy8 = ay4 + radius1 * Math.cos(theta16);
			drawType1.triangle(ax4,ay4,0,bx8,by8,0,cx8,cy8,0);
			var m10 = trilateral2_Shaper.transformMatrix;
			if(m10 != null) {
				drawType1.transform(m10);
			}
			drawType1.next();
		}
		var len1 = sides;
		var color1 = s01.color;
		if(color1 == -1) {
			color1 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color1,len1);
		var end1 = start1 + len1 - 1;
		var startEnd = new trilateral2_IndexRange(start1,end1);
		var c0 = startEnd;
		var s1 = rs1.clone();
		s1.x += 30;
		s1.y -= 30;
		var start2 = this39.drawType.get_size();
		var drawType2 = this39.drawType;
		var ax5 = s1.x;
		var ay5 = s1.y;
		var radius2 = s1.radius;
		var sides1 = 36;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi6 = Math.PI;
		var theta17 = pi6 / 2;
		var step9 = pi6 * 2 / sides1;
		var bx9;
		var by9;
		var cx9;
		var cy9;
		var _g6 = 0;
		var _g15 = sides1;
		while(_g6 < _g15) {
			var i5 = _g6++;
			bx9 = ax5 + radius2 * Math.sin(theta17);
			by9 = ay5 + radius2 * Math.cos(theta17);
			theta17 += step9;
			cx9 = ax5 + radius2 * Math.sin(theta17);
			cy9 = ay5 + radius2 * Math.cos(theta17);
			drawType2.triangle(ax5,ay5,0,bx9,by9,0,cx9,cy9,0);
			var m11 = trilateral2_Shaper.transformMatrix;
			if(m11 != null) {
				drawType2.transform(m11);
			}
			drawType2.next();
		}
		var len2 = sides1;
		var color2 = s1.color;
		if(color2 == -1) {
			color2 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color2,len2);
		var end2 = start2 + len2 - 1;
		var startEnd1 = new trilateral2_IndexRange(start2,end2);
		var c1 = startEnd1;
		var s2 = rs1.clone();
		s2.x -= 30;
		s2.y += 30;
		var start3 = this39.drawType.get_size();
		var drawType3 = this39.drawType;
		var ax6 = s2.x;
		var ay6 = s2.y;
		var radius3 = s2.radius;
		var sides2 = 36;
		if(sides2 == null) {
			sides2 = 36;
		}
		var pi7 = Math.PI;
		var theta18 = pi7 / 2;
		var step10 = pi7 * 2 / sides2;
		var bx10;
		var by10;
		var cx10;
		var cy10;
		var _g7 = 0;
		var _g16 = sides2;
		while(_g7 < _g16) {
			var i6 = _g7++;
			bx10 = ax6 + radius3 * Math.sin(theta18);
			by10 = ay6 + radius3 * Math.cos(theta18);
			theta18 += step10;
			cx10 = ax6 + radius3 * Math.sin(theta18);
			cy10 = ay6 + radius3 * Math.cos(theta18);
			drawType3.triangle(ax6,ay6,0,bx10,by10,0,cx10,cy10,0);
			var m12 = trilateral2_Shaper.transformMatrix;
			if(m12 != null) {
				drawType3.transform(m12);
			}
			drawType3.next();
		}
		var len3 = sides2;
		var color3 = s2.color;
		if(color3 == -1) {
			color3 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color3,len3);
		var end3 = start3 + len3 - 1;
		var startEnd2 = new trilateral2_IndexRange(start3,end3);
		var c2 = startEnd2;
		var s3 = rs1.clone();
		s3.x += 30;
		s3.y += 30;
		var start4 = this39.drawType.get_size();
		var drawType4 = this39.drawType;
		var ax7 = s3.x;
		var ay7 = s3.y;
		var radius4 = s3.radius;
		var sides3 = 36;
		if(sides3 == null) {
			sides3 = 36;
		}
		var pi8 = Math.PI;
		var theta19 = pi8 / 2;
		var step11 = pi8 * 2 / sides3;
		var bx11;
		var by11;
		var cx11;
		var cy11;
		var _g8 = 0;
		var _g17 = sides3;
		while(_g8 < _g17) {
			var i7 = _g8++;
			bx11 = ax7 + radius4 * Math.sin(theta19);
			by11 = ay7 + radius4 * Math.cos(theta19);
			theta19 += step11;
			cx11 = ax7 + radius4 * Math.sin(theta19);
			cy11 = ay7 + radius4 * Math.cos(theta19);
			drawType4.triangle(ax7,ay7,0,bx11,by11,0,cx11,cy11,0);
			var m13 = trilateral2_Shaper.transformMatrix;
			if(m13 != null) {
				drawType4.transform(m13);
			}
			drawType4.next();
		}
		var len4 = sides3;
		var color4 = s3.color;
		if(color4 == -1) {
			color4 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color4,len4);
		var end4 = start4 + len4 - 1;
		var startEnd3 = new trilateral2_IndexRange(start4,end4);
		var c3 = startEnd3;
		var s4 = rs1.clone();
		var start5 = this39.drawType.get_size();
		var drawType5 = this39.drawType;
		var ax8 = s4.x;
		var ay8 = s4.y;
		var radius5 = s4.radius;
		var sides4 = 36;
		if(sides4 == null) {
			sides4 = 36;
		}
		var pi9 = Math.PI;
		var theta20 = pi9 / 2;
		var step12 = pi9 * 2 / sides4;
		var bx12;
		var by12;
		var cx12;
		var cy12;
		var _g9 = 0;
		var _g18 = sides4;
		while(_g9 < _g18) {
			var i8 = _g9++;
			bx12 = ax8 + radius5 * Math.sin(theta20);
			by12 = ay8 + radius5 * Math.cos(theta20);
			theta20 += step12;
			cx12 = ax8 + radius5 * Math.sin(theta20);
			cy12 = ay8 + radius5 * Math.cos(theta20);
			drawType5.triangle(ax8,ay8,0,bx12,by12,0,cx12,cy12,0);
			var m14 = trilateral2_Shaper.transformMatrix;
			if(m14 != null) {
				drawType5.transform(m14);
			}
			drawType5.next();
		}
		var len5 = sides4;
		var color5 = s4.color;
		if(color5 == -1) {
			color5 = this39.currentColor;
		}
		this39.colorType.colorTriangles(color5,len5);
		var end5 = start5 + len5 - 1;
		var startEnd4 = new trilateral2_IndexRange(start5,end5);
		var c4 = startEnd4;
		var s11 = new trilateral2_IndexRange(c0.start,c4.end);
		var s21 = new trilateral2_IndexRange(s0.start,s11.end);
		this.spots.drawType.transformRange(trans,s21.start,s21.end);
		return s21;
	}
	,six: function(trans) {
		var this1 = this.spots;
		var rs = this.dieShape;
		var start = this1.drawType.get_size();
		var drawType = this1.drawType;
		var x = rs.x - rs.radius;
		var y = rs.y - rs.radius;
		var width = rs.radius * 2;
		var height = rs.radius * 2;
		var radius = this1.rounded;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x + radius;
		var ay = y + radius;
		var bx = x + width - radius;
		var by = y + radius;
		var cx = bx;
		var cy = y + height - radius;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y;
		var bx1 = ax + (width - radius * 2);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + height;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		count += 2;
		var dimY = height - 2 * radius;
		var ax2 = x;
		var ay2 = ay;
		var bx2 = x + radius;
		var by2 = ay2;
		var cx2 = bx2;
		var cy2 = ay2 + dimY;
		var dx2 = x;
		var dy2 = cy2;
		drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType.transform(m3);
		}
		drawType.next();
		count += 2;
		var ax3 = bx;
		var ay3 = by;
		var bx3 = bx + radius;
		var by3 = ay3;
		var cx3 = bx3;
		var cy3 = ay3 + dimY;
		var dx3 = bx;
		var dy3 = cy3;
		drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType.transform(m4);
		}
		drawType.next();
		drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType.transform(m5);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this2 = f;
			var za = this2;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this3 = f1;
			var zb = this3;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this4 = f2;
			var za1 = this4;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this5 = f3;
			var zb1 = this5;
			var fa1 = za1;
			var fb1 = zb1;
			var theta1 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta1 : -theta1;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this6 = f4;
			var za2 = this6;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this7 = f5;
			var zb2 = this7;
			var fa2 = za2;
			var fb2 = zb2;
			var theta2 = Math.abs(fa2 - fb2);
			var smallest = theta2 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta2 : -theta2;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta2) : 2 * Math.PI - theta2;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this8 = f6;
			var za3 = this8;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this9 = f7;
			var zb3 = this9;
			var fa3 = za3;
			var fb3 = zb3;
			var theta3 = Math.abs(fa3 - fb3);
			var largest = theta3 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta3 : -theta3;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta3) : 2 * Math.PI - theta3;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx4;
		var cy4;
		var bx4 = 0;
		var by4 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx4 = ax + radius * Math.sin(angle);
			cy4 = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
				var m6 = trilateral2_Shaper.transformMatrix;
				if(m6 != null) {
					drawType.transform(m6);
				}
				drawType.next();
			}
			angle += step1;
			bx4 = cx4;
			by4 = cy4;
		}
		count += totalSteps;
		var pi2 = Math.PI;
		var step2 = pi2 * 2 / 36;
		var dif5;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f8;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f8 = pi_2;
			} else {
				var a8 = pi_2 % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
			}
			var this10 = f8;
			var za4 = this10;
			var f9;
			if(pi >= 0 && pi > Math.PI) {
				f9 = pi;
			} else {
				var a9 = pi % (2 * Math.PI);
				f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
			}
			var this11 = f9;
			var zb4 = this11;
			var fa4 = za4;
			var fb4 = zb4;
			var theta4 = Math.abs(fa4 - fb4);
			var clockwise4 = fa4 < fb4;
			var dif6 = clockwise4 ? theta4 : -theta4;
			dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
			break;
		case 1:
			var f10;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f10 = pi_2;
			} else {
				var a10 = pi_2 % (2 * Math.PI);
				f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
			}
			var this12 = f10;
			var za5 = this12;
			var f11;
			if(pi >= 0 && pi > Math.PI) {
				f11 = pi;
			} else {
				var a11 = pi % (2 * Math.PI);
				f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
			}
			var this13 = f11;
			var zb5 = this13;
			var fa5 = za5;
			var fb5 = zb5;
			var theta5 = Math.abs(fa5 - fb5);
			var clockwise5 = fa5 < fb5;
			var dif7 = clockwise5 ? theta5 : -theta5;
			dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
			break;
		case 2:
			var f12;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f12 = pi_2;
			} else {
				var a12 = pi_2 % (2 * Math.PI);
				f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
			}
			var this14 = f12;
			var za6 = this14;
			var f13;
			if(pi >= 0 && pi > Math.PI) {
				f13 = pi;
			} else {
				var a13 = pi % (2 * Math.PI);
				f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
			}
			var this15 = f13;
			var zb6 = this15;
			var fa6 = za6;
			var fb6 = zb6;
			var theta6 = Math.abs(fa6 - fb6);
			var smallest1 = theta6 <= Math.PI;
			var clockwise6 = fa6 < fb6;
			var dif8 = clockwise6 ? theta6 : -theta6;
			dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta6) : 2 * Math.PI - theta6;
			break;
		case 3:
			var f14;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f14 = pi_2;
			} else {
				var a14 = pi_2 % (2 * Math.PI);
				f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
			}
			var this16 = f14;
			var za7 = this16;
			var f15;
			if(pi >= 0 && pi > Math.PI) {
				f15 = pi;
			} else {
				var a15 = pi % (2 * Math.PI);
				f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
			}
			var this17 = f15;
			var zb7 = this17;
			var fa7 = za7;
			var fb7 = zb7;
			var theta7 = Math.abs(fa7 - fb7);
			var largest1 = theta7 > Math.PI;
			var clockwise7 = fa7 < fb7;
			var dif9 = clockwise7 ? theta7 : -theta7;
			dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
			break;
		}
		var positive1 = dif5 >= 0;
		var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
		var step3 = dif5 / totalSteps1;
		var angle1 = pi_2;
		var cx5;
		var cy5;
		var bx5 = 0;
		var by5 = 0;
		var _g2 = 0;
		var _g11 = totalSteps1 + 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			cx5 = bx + radius * Math.sin(angle1);
			cy5 = by + radius * Math.cos(angle1);
			if(i1 != 0) {
				drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
				var m7 = trilateral2_Shaper.transformMatrix;
				if(m7 != null) {
					drawType.transform(m7);
				}
				drawType.next();
			}
			angle1 += step3;
			bx5 = cx5;
			by5 = cy5;
		}
		count += totalSteps1;
		var pi3 = Math.PI;
		var step4 = pi3 * 2 / 36;
		var dif10;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f16;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f16 = pi_2;
			} else {
				var a16 = pi_2 % (2 * Math.PI);
				f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
			}
			var this18 = f16;
			var za8 = this18;
			var f17;
			if(0 > Math.PI) {
				f17 = 0;
			} else {
				var a17 = 0 % (2 * Math.PI);
				f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
			}
			var this19 = f17;
			var zb8 = this19;
			var fa8 = za8;
			var fb8 = zb8;
			var theta8 = Math.abs(fa8 - fb8);
			var clockwise8 = fa8 < fb8;
			var dif11 = clockwise8 ? theta8 : -theta8;
			dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
			break;
		case 1:
			var f18;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f18 = pi_2;
			} else {
				var a18 = pi_2 % (2 * Math.PI);
				f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
			}
			var this20 = f18;
			var za9 = this20;
			var f19;
			if(0 > Math.PI) {
				f19 = 0;
			} else {
				var a19 = 0 % (2 * Math.PI);
				f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
			}
			var this21 = f19;
			var zb9 = this21;
			var fa9 = za9;
			var fb9 = zb9;
			var theta9 = Math.abs(fa9 - fb9);
			var clockwise9 = fa9 < fb9;
			var dif12 = clockwise9 ? theta9 : -theta9;
			dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
			break;
		case 2:
			var f20;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f20 = pi_2;
			} else {
				var a20 = pi_2 % (2 * Math.PI);
				f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
			}
			var this22 = f20;
			var za10 = this22;
			var f21;
			if(0 > Math.PI) {
				f21 = 0;
			} else {
				var a21 = 0 % (2 * Math.PI);
				f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
			}
			var this23 = f21;
			var zb10 = this23;
			var fa10 = za10;
			var fb10 = zb10;
			var theta10 = Math.abs(fa10 - fb10);
			var smallest2 = theta10 <= Math.PI;
			var clockwise10 = fa10 < fb10;
			var dif13 = clockwise10 ? theta10 : -theta10;
			dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta10) : 2 * Math.PI - theta10;
			break;
		case 3:
			var f22;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f22 = pi_2;
			} else {
				var a22 = pi_2 % (2 * Math.PI);
				f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
			}
			var this24 = f22;
			var za11 = this24;
			var f23;
			if(0 > Math.PI) {
				f23 = 0;
			} else {
				var a23 = 0 % (2 * Math.PI);
				f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
			}
			var this25 = f23;
			var zb11 = this25;
			var fa11 = za11;
			var fb11 = zb11;
			var theta11 = Math.abs(fa11 - fb11);
			var largest2 = theta11 > Math.PI;
			var clockwise11 = fa11 < fb11;
			var dif14 = clockwise11 ? theta11 : -theta11;
			dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
			break;
		}
		var positive2 = dif10 >= 0;
		var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
		var step5 = dif10 / totalSteps2;
		var angle2 = pi_2;
		var cx6;
		var cy6;
		var bx6 = 0;
		var by6 = 0;
		var _g3 = 0;
		var _g12 = totalSteps2 + 1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			cx6 = cx + radius * Math.sin(angle2);
			cy6 = cy + radius * Math.cos(angle2);
			if(i2 != 0) {
				drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
				var m8 = trilateral2_Shaper.transformMatrix;
				if(m8 != null) {
					drawType.transform(m8);
				}
				drawType.next();
			}
			angle2 += step5;
			bx6 = cx6;
			by6 = cy6;
		}
		count += totalSteps2;
		var gamma1 = -pi_2;
		var pi4 = Math.PI;
		var step6 = pi4 * 2 / 36;
		var dif15;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f24;
			if(0 > Math.PI) {
				f24 = 0;
			} else {
				var a24 = 0 % (2 * Math.PI);
				f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
			}
			var this26 = f24;
			var za12 = this26;
			var f25;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f25 = gamma1;
			} else {
				var a25 = gamma1 % (2 * Math.PI);
				f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
			}
			var this27 = f25;
			var zb12 = this27;
			var fa12 = za12;
			var fb12 = zb12;
			var theta12 = Math.abs(fa12 - fb12);
			var clockwise12 = fa12 < fb12;
			var dif16 = clockwise12 ? theta12 : -theta12;
			dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
			break;
		case 1:
			var f26;
			if(0 > Math.PI) {
				f26 = 0;
			} else {
				var a26 = 0 % (2 * Math.PI);
				f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
			}
			var this28 = f26;
			var za13 = this28;
			var f27;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f27 = gamma1;
			} else {
				var a27 = gamma1 % (2 * Math.PI);
				f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
			}
			var this29 = f27;
			var zb13 = this29;
			var fa13 = za13;
			var fb13 = zb13;
			var theta13 = Math.abs(fa13 - fb13);
			var clockwise13 = fa13 < fb13;
			var dif17 = clockwise13 ? theta13 : -theta13;
			dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
			break;
		case 2:
			var f28;
			if(0 > Math.PI) {
				f28 = 0;
			} else {
				var a28 = 0 % (2 * Math.PI);
				f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
			}
			var this30 = f28;
			var za14 = this30;
			var f29;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f29 = gamma1;
			} else {
				var a29 = gamma1 % (2 * Math.PI);
				f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
			}
			var this31 = f29;
			var zb14 = this31;
			var fa14 = za14;
			var fb14 = zb14;
			var theta14 = Math.abs(fa14 - fb14);
			var smallest3 = theta14 <= Math.PI;
			var clockwise14 = fa14 < fb14;
			var dif18 = clockwise14 ? theta14 : -theta14;
			dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta14) : 2 * Math.PI - theta14;
			break;
		case 3:
			var f30;
			if(0 > Math.PI) {
				f30 = 0;
			} else {
				var a30 = 0 % (2 * Math.PI);
				f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
			}
			var this32 = f30;
			var za15 = this32;
			var f31;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f31 = gamma1;
			} else {
				var a31 = gamma1 % (2 * Math.PI);
				f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
			}
			var this33 = f31;
			var zb15 = this33;
			var fa15 = za15;
			var fb15 = zb15;
			var theta15 = Math.abs(fa15 - fb15);
			var largest3 = theta15 > Math.PI;
			var clockwise15 = fa15 < fb15;
			var dif19 = clockwise15 ? theta15 : -theta15;
			dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
			break;
		}
		var positive3 = dif15 >= 0;
		var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
		var step7 = dif15 / totalSteps3;
		var angle3 = 0;
		var cx7;
		var cy7;
		var bx7 = 0;
		var by7 = 0;
		var _g4 = 0;
		var _g13 = totalSteps3 + 1;
		while(_g4 < _g13) {
			var i3 = _g4++;
			cx7 = dx + radius * Math.sin(angle3);
			cy7 = dy + radius * Math.cos(angle3);
			if(i3 != 0) {
				drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
				var m9 = trilateral2_Shaper.transformMatrix;
				if(m9 != null) {
					drawType.transform(m9);
				}
				drawType.next();
			}
			angle3 += step7;
			bx7 = cx7;
			by7 = cy7;
		}
		var len = count += totalSteps3;
		var color = rs.color;
		if(color == -1) {
			color = this1.currentColor;
		}
		this1.colorType.colorTriangles(color,len);
		var end = start + len - 1;
		var s0 = new trilateral2_IndexRange(start,end);
		var this34 = this.spots;
		var this35 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this36 = this35;
		var this37 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this34.dz / 2);
		var s = this37;
		var this38 = new geom_structure_Mat4x3(this36.a * s.a + this36.b * s.e + this36.c * s.i,this36.a * s.b + this36.b * s.f + this36.c * s.j,this36.a * s.c + this36.b * s.g + this36.c * s.k,this36.a * s.d + this36.b * s.h + this36.c * s.l + this36.d,this36.e * s.a + this36.f * s.e + this36.g * s.i,this36.e * s.b + this36.f * s.f + this36.g * s.j,this36.e * s.c + this36.f * s.g + this36.g * s.k,this36.e * s.d + this36.f * s.h + this36.g * s.l + this36.h,this36.i * s.a + this36.j * s.e + this36.k * s.i,this36.i * s.b + this36.j * s.f + this36.k * s.j,this36.i * s.c + this36.j * s.g + this36.k * s.k,this36.i * s.d + this36.j * s.h + this36.k * s.l + this36.l);
		var trans1 = this38;
		this34.drawType.transformRange(trans1,s0.start,s0.end);
		var this39 = this.spots;
		var rs1 = this.spotShape;
		var s01 = rs1.clone();
		s01.x -= 25;
		s01.y -= 35;
		var arr = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx = -0.25;
		var ry = 0.25;
		var sides = 47;
		if(sides == null) {
			sides = 36;
		}
		if(ry == null) {
			ry = 0;
		}
		if(rx == null) {
			rx = 0;
		}
		var start1 = this39.drawType.get_size();
		var drawType1 = this39.drawType;
		var x1 = s01.x;
		var y1 = s01.y;
		var radius1 = s01.radius;
		var len1;
		if((sides & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx1 = rx;
			var ry1 = ry;
			var sides1 = sides;
			var omega = 0.;
			if(omega == null) {
				omega = 0.;
			}
			if(sides1 == null) {
				sides1 = 36;
			}
			var pi5 = Math.PI;
			var theta16 = pi5 / 2 + omega;
			var step8 = pi5 * 2 / sides1;
			var bx8;
			var by8;
			var cx8;
			var cy8;
			if(rx1 > 1.) {
				rx1 = 1;
			}
			if(rx1 < -1.) {
				rx1 = -1;
			}
			if(ry1 > 1.) {
				ry1 = 1;
			}
			if(ry1 < -1.) {
				ry1 = -1;
			}
			var mx = x1 + rx1 * radius1;
			var my = y1 - ry1 * radius1;
			var _g5 = 0;
			var _g14 = sides1;
			while(_g5 < _g14) {
				var i4 = _g5++;
				bx8 = x1 + radius1 * Math.sin(theta16);
				by8 = y1 + radius1 * Math.cos(theta16);
				theta16 += step8;
				cx8 = x1 + radius1 * Math.sin(theta16);
				cy8 = y1 + radius1 * Math.cos(theta16);
				drawType1.triangle(mx,my,0,bx8,by8,0,cx8,cy8,0);
				var m10 = trilateral2_Shaper.transformMatrix;
				if(m10 != null) {
					drawType1.transform(m10);
				}
				drawType1.next();
			}
			len1 = sides1;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx2 = rx;
			var ry2 = ry;
			var sides2 = sides;
			var omega1 = 0.;
			if(omega1 == null) {
				omega1 = 0.;
			}
			if(sides2 == null) {
				sides2 = 36;
			}
			var pi6 = Math.PI;
			var theta17 = pi6 / 2;
			var step9 = pi6 * 2 / sides2;
			theta17 -= step9 / 2 + omega1;
			var bx9 = 0;
			var by9 = 0;
			var cx9 = 0;
			var cy9 = 0;
			if(rx2 > 1.) {
				rx2 = 1;
			}
			if(rx2 < -1.) {
				rx2 = -1;
			}
			if(ry2 > 1.) {
				ry2 = 1;
			}
			if(ry2 < -1.) {
				ry2 = -1;
			}
			var mx1 = x1 + rx2 * radius1;
			var my1 = y1 - ry2 * radius1;
			var dx4 = x1 + radius1 * Math.sin(theta17);
			var dy4 = y1 + radius1 * Math.cos(theta17);
			var _g6 = 0;
			var _g15 = sides2 - 1;
			while(_g6 < _g15) {
				var i5 = _g6++;
				bx9 = x1 + radius1 * Math.sin(theta17);
				by9 = y1 + radius1 * Math.cos(theta17);
				theta17 += step9;
				cx9 = x1 + radius1 * Math.sin(theta17);
				cy9 = y1 + radius1 * Math.cos(theta17);
				drawType1.triangle(mx1,my1,0,bx9,by9,0,cx9,cy9,0);
				var m11 = trilateral2_Shaper.transformMatrix;
				if(m11 != null) {
					drawType1.transform(m11);
				}
				drawType1.next();
			}
			drawType1.triangle(mx1,my1,0,cx9,cy9,0,dx4,dy4,0);
			var m12 = trilateral2_Shaper.transformMatrix;
			if(m12 != null) {
				drawType1.transform(m12);
			}
			drawType1.next();
			len1 = sides2;
		}
		var k = 1;
		var arrEnd = arr.length - 1;
		var end1 = start1 + len1 - 1;
		var arr_ = arr.slice();
		var _g7 = 0;
		var _g16 = len1 - 1;
		while(_g7 < _g16) {
			var j = _g7++;
			this39.colorType.cornerColors(s01.color,arr_[k - 1],arr_[k]);
			++k;
			if(k > arrEnd) {
				k = 1;
				arr_.reverse();
			}
		}
		this39.colorType.cornerColors(s01.color,arr_[k - 1],arr[0]);
		var startEnd = new trilateral2_IndexRange(start1,end1);
		var c0 = startEnd;
		var s1 = rs1.clone();
		s1.x += 25;
		s1.y -= 35;
		var arr1 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx3 = -0.25;
		var ry3 = 0.25;
		var sides3 = 47;
		if(sides3 == null) {
			sides3 = 36;
		}
		if(ry3 == null) {
			ry3 = 0;
		}
		if(rx3 == null) {
			rx3 = 0;
		}
		var start2 = this39.drawType.get_size();
		var drawType2 = this39.drawType;
		var x2 = s1.x;
		var y2 = s1.y;
		var radius2 = s1.radius;
		var len2;
		if((sides3 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx4 = rx3;
			var ry4 = ry3;
			var sides4 = sides3;
			var omega2 = 0.;
			if(omega2 == null) {
				omega2 = 0.;
			}
			if(sides4 == null) {
				sides4 = 36;
			}
			var pi7 = Math.PI;
			var theta18 = pi7 / 2 + omega2;
			var step10 = pi7 * 2 / sides4;
			var bx10;
			var by10;
			var cx10;
			var cy10;
			if(rx4 > 1.) {
				rx4 = 1;
			}
			if(rx4 < -1.) {
				rx4 = -1;
			}
			if(ry4 > 1.) {
				ry4 = 1;
			}
			if(ry4 < -1.) {
				ry4 = -1;
			}
			var mx2 = x2 + rx4 * radius2;
			var my2 = y2 - ry4 * radius2;
			var _g8 = 0;
			var _g17 = sides4;
			while(_g8 < _g17) {
				var i6 = _g8++;
				bx10 = x2 + radius2 * Math.sin(theta18);
				by10 = y2 + radius2 * Math.cos(theta18);
				theta18 += step10;
				cx10 = x2 + radius2 * Math.sin(theta18);
				cy10 = y2 + radius2 * Math.cos(theta18);
				drawType2.triangle(mx2,my2,0,bx10,by10,0,cx10,cy10,0);
				var m13 = trilateral2_Shaper.transformMatrix;
				if(m13 != null) {
					drawType2.transform(m13);
				}
				drawType2.next();
			}
			len2 = sides4;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides3 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx5 = rx3;
			var ry5 = ry3;
			var sides5 = sides3;
			var omega3 = 0.;
			if(omega3 == null) {
				omega3 = 0.;
			}
			if(sides5 == null) {
				sides5 = 36;
			}
			var pi8 = Math.PI;
			var theta19 = pi8 / 2;
			var step11 = pi8 * 2 / sides5;
			theta19 -= step11 / 2 + omega3;
			var bx11 = 0;
			var by11 = 0;
			var cx11 = 0;
			var cy11 = 0;
			if(rx5 > 1.) {
				rx5 = 1;
			}
			if(rx5 < -1.) {
				rx5 = -1;
			}
			if(ry5 > 1.) {
				ry5 = 1;
			}
			if(ry5 < -1.) {
				ry5 = -1;
			}
			var mx3 = x2 + rx5 * radius2;
			var my3 = y2 - ry5 * radius2;
			var dx5 = x2 + radius2 * Math.sin(theta19);
			var dy5 = y2 + radius2 * Math.cos(theta19);
			var _g9 = 0;
			var _g18 = sides5 - 1;
			while(_g9 < _g18) {
				var i7 = _g9++;
				bx11 = x2 + radius2 * Math.sin(theta19);
				by11 = y2 + radius2 * Math.cos(theta19);
				theta19 += step11;
				cx11 = x2 + radius2 * Math.sin(theta19);
				cy11 = y2 + radius2 * Math.cos(theta19);
				drawType2.triangle(mx3,my3,0,bx11,by11,0,cx11,cy11,0);
				var m14 = trilateral2_Shaper.transformMatrix;
				if(m14 != null) {
					drawType2.transform(m14);
				}
				drawType2.next();
			}
			drawType2.triangle(mx3,my3,0,cx11,cy11,0,dx5,dy5,0);
			var m15 = trilateral2_Shaper.transformMatrix;
			if(m15 != null) {
				drawType2.transform(m15);
			}
			drawType2.next();
			len2 = sides5;
		}
		var k1 = 1;
		var arrEnd1 = arr1.length - 1;
		var end2 = start2 + len2 - 1;
		var arr_1 = arr1.slice();
		var _g10 = 0;
		var _g19 = len2 - 1;
		while(_g10 < _g19) {
			var j1 = _g10++;
			this39.colorType.cornerColors(s1.color,arr_1[k1 - 1],arr_1[k1]);
			++k1;
			if(k1 > arrEnd1) {
				k1 = 1;
				arr_1.reverse();
			}
		}
		this39.colorType.cornerColors(s1.color,arr_1[k1 - 1],arr1[0]);
		var startEnd1 = new trilateral2_IndexRange(start2,end2);
		var c1 = startEnd1;
		var s2 = rs1.clone();
		s2.x -= 25;
		s2.y += 35;
		var arr2 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx6 = -0.25;
		var ry6 = 0.25;
		var sides6 = 47;
		if(sides6 == null) {
			sides6 = 36;
		}
		if(ry6 == null) {
			ry6 = 0;
		}
		if(rx6 == null) {
			rx6 = 0;
		}
		var start3 = this39.drawType.get_size();
		var drawType3 = this39.drawType;
		var x3 = s2.x;
		var y3 = s2.y;
		var radius3 = s2.radius;
		var len3;
		if((sides6 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx7 = rx6;
			var ry7 = ry6;
			var sides7 = sides6;
			var omega4 = 0.;
			if(omega4 == null) {
				omega4 = 0.;
			}
			if(sides7 == null) {
				sides7 = 36;
			}
			var pi9 = Math.PI;
			var theta20 = pi9 / 2 + omega4;
			var step12 = pi9 * 2 / sides7;
			var bx12;
			var by12;
			var cx12;
			var cy12;
			if(rx7 > 1.) {
				rx7 = 1;
			}
			if(rx7 < -1.) {
				rx7 = -1;
			}
			if(ry7 > 1.) {
				ry7 = 1;
			}
			if(ry7 < -1.) {
				ry7 = -1;
			}
			var mx4 = x3 + rx7 * radius3;
			var my4 = y3 - ry7 * radius3;
			var _g20 = 0;
			var _g110 = sides7;
			while(_g20 < _g110) {
				var i8 = _g20++;
				bx12 = x3 + radius3 * Math.sin(theta20);
				by12 = y3 + radius3 * Math.cos(theta20);
				theta20 += step12;
				cx12 = x3 + radius3 * Math.sin(theta20);
				cy12 = y3 + radius3 * Math.cos(theta20);
				drawType3.triangle(mx4,my4,0,bx12,by12,0,cx12,cy12,0);
				var m16 = trilateral2_Shaper.transformMatrix;
				if(m16 != null) {
					drawType3.transform(m16);
				}
				drawType3.next();
			}
			len3 = sides7;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides6 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx8 = rx6;
			var ry8 = ry6;
			var sides8 = sides6;
			var omega5 = 0.;
			if(omega5 == null) {
				omega5 = 0.;
			}
			if(sides8 == null) {
				sides8 = 36;
			}
			var pi10 = Math.PI;
			var theta21 = pi10 / 2;
			var step13 = pi10 * 2 / sides8;
			theta21 -= step13 / 2 + omega5;
			var bx13 = 0;
			var by13 = 0;
			var cx13 = 0;
			var cy13 = 0;
			if(rx8 > 1.) {
				rx8 = 1;
			}
			if(rx8 < -1.) {
				rx8 = -1;
			}
			if(ry8 > 1.) {
				ry8 = 1;
			}
			if(ry8 < -1.) {
				ry8 = -1;
			}
			var mx5 = x3 + rx8 * radius3;
			var my5 = y3 - ry8 * radius3;
			var dx6 = x3 + radius3 * Math.sin(theta21);
			var dy6 = y3 + radius3 * Math.cos(theta21);
			var _g21 = 0;
			var _g111 = sides8 - 1;
			while(_g21 < _g111) {
				var i9 = _g21++;
				bx13 = x3 + radius3 * Math.sin(theta21);
				by13 = y3 + radius3 * Math.cos(theta21);
				theta21 += step13;
				cx13 = x3 + radius3 * Math.sin(theta21);
				cy13 = y3 + radius3 * Math.cos(theta21);
				drawType3.triangle(mx5,my5,0,bx13,by13,0,cx13,cy13,0);
				var m17 = trilateral2_Shaper.transformMatrix;
				if(m17 != null) {
					drawType3.transform(m17);
				}
				drawType3.next();
			}
			drawType3.triangle(mx5,my5,0,cx13,cy13,0,dx6,dy6,0);
			var m18 = trilateral2_Shaper.transformMatrix;
			if(m18 != null) {
				drawType3.transform(m18);
			}
			drawType3.next();
			len3 = sides8;
		}
		var k2 = 1;
		var arrEnd2 = arr2.length - 1;
		var end3 = start3 + len3 - 1;
		var arr_2 = arr2.slice();
		var _g22 = 0;
		var _g112 = len3 - 1;
		while(_g22 < _g112) {
			var j2 = _g22++;
			this39.colorType.cornerColors(s2.color,arr_2[k2 - 1],arr_2[k2]);
			++k2;
			if(k2 > arrEnd2) {
				k2 = 1;
				arr_2.reverse();
			}
		}
		this39.colorType.cornerColors(s2.color,arr_2[k2 - 1],arr2[0]);
		var startEnd2 = new trilateral2_IndexRange(start3,end3);
		var c2 = startEnd2;
		var s3 = rs1.clone();
		s3.x += 25;
		s3.y += 35;
		var arr3 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx9 = -0.25;
		var ry9 = 0.25;
		var sides9 = 47;
		if(sides9 == null) {
			sides9 = 36;
		}
		if(ry9 == null) {
			ry9 = 0;
		}
		if(rx9 == null) {
			rx9 = 0;
		}
		var start4 = this39.drawType.get_size();
		var drawType4 = this39.drawType;
		var x4 = s3.x;
		var y4 = s3.y;
		var radius4 = s3.radius;
		var len4;
		if((sides9 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx10 = rx9;
			var ry10 = ry9;
			var sides10 = sides9;
			var omega6 = 0.;
			if(omega6 == null) {
				omega6 = 0.;
			}
			if(sides10 == null) {
				sides10 = 36;
			}
			var pi11 = Math.PI;
			var theta22 = pi11 / 2 + omega6;
			var step14 = pi11 * 2 / sides10;
			var bx14;
			var by14;
			var cx14;
			var cy14;
			if(rx10 > 1.) {
				rx10 = 1;
			}
			if(rx10 < -1.) {
				rx10 = -1;
			}
			if(ry10 > 1.) {
				ry10 = 1;
			}
			if(ry10 < -1.) {
				ry10 = -1;
			}
			var mx6 = x4 + rx10 * radius4;
			var my6 = y4 - ry10 * radius4;
			var _g23 = 0;
			var _g113 = sides10;
			while(_g23 < _g113) {
				var i10 = _g23++;
				bx14 = x4 + radius4 * Math.sin(theta22);
				by14 = y4 + radius4 * Math.cos(theta22);
				theta22 += step14;
				cx14 = x4 + radius4 * Math.sin(theta22);
				cy14 = y4 + radius4 * Math.cos(theta22);
				drawType4.triangle(mx6,my6,0,bx14,by14,0,cx14,cy14,0);
				var m19 = trilateral2_Shaper.transformMatrix;
				if(m19 != null) {
					drawType4.transform(m19);
				}
				drawType4.next();
			}
			len4 = sides10;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides9 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx11 = rx9;
			var ry11 = ry9;
			var sides11 = sides9;
			var omega7 = 0.;
			if(omega7 == null) {
				omega7 = 0.;
			}
			if(sides11 == null) {
				sides11 = 36;
			}
			var pi12 = Math.PI;
			var theta23 = pi12 / 2;
			var step15 = pi12 * 2 / sides11;
			theta23 -= step15 / 2 + omega7;
			var bx15 = 0;
			var by15 = 0;
			var cx15 = 0;
			var cy15 = 0;
			if(rx11 > 1.) {
				rx11 = 1;
			}
			if(rx11 < -1.) {
				rx11 = -1;
			}
			if(ry11 > 1.) {
				ry11 = 1;
			}
			if(ry11 < -1.) {
				ry11 = -1;
			}
			var mx7 = x4 + rx11 * radius4;
			var my7 = y4 - ry11 * radius4;
			var dx7 = x4 + radius4 * Math.sin(theta23);
			var dy7 = y4 + radius4 * Math.cos(theta23);
			var _g24 = 0;
			var _g114 = sides11 - 1;
			while(_g24 < _g114) {
				var i11 = _g24++;
				bx15 = x4 + radius4 * Math.sin(theta23);
				by15 = y4 + radius4 * Math.cos(theta23);
				theta23 += step15;
				cx15 = x4 + radius4 * Math.sin(theta23);
				cy15 = y4 + radius4 * Math.cos(theta23);
				drawType4.triangle(mx7,my7,0,bx15,by15,0,cx15,cy15,0);
				var m20 = trilateral2_Shaper.transformMatrix;
				if(m20 != null) {
					drawType4.transform(m20);
				}
				drawType4.next();
			}
			drawType4.triangle(mx7,my7,0,cx15,cy15,0,dx7,dy7,0);
			var m21 = trilateral2_Shaper.transformMatrix;
			if(m21 != null) {
				drawType4.transform(m21);
			}
			drawType4.next();
			len4 = sides11;
		}
		var k3 = 1;
		var arrEnd3 = arr3.length - 1;
		var end4 = start4 + len4 - 1;
		var arr_3 = arr3.slice();
		var _g25 = 0;
		var _g115 = len4 - 1;
		while(_g25 < _g115) {
			var j3 = _g25++;
			this39.colorType.cornerColors(s3.color,arr_3[k3 - 1],arr_3[k3]);
			++k3;
			if(k3 > arrEnd3) {
				k3 = 1;
				arr_3.reverse();
			}
		}
		this39.colorType.cornerColors(s3.color,arr_3[k3 - 1],arr3[0]);
		var startEnd3 = new trilateral2_IndexRange(start4,end4);
		var c3 = startEnd3;
		var s4 = rs1.clone();
		s4.x -= 25;
		var arr4 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx12 = -0.25;
		var ry12 = 0.25;
		var sides12 = 47;
		if(sides12 == null) {
			sides12 = 36;
		}
		if(ry12 == null) {
			ry12 = 0;
		}
		if(rx12 == null) {
			rx12 = 0;
		}
		var start5 = this39.drawType.get_size();
		var drawType5 = this39.drawType;
		var x5 = s4.x;
		var y5 = s4.y;
		var radius5 = s4.radius;
		var len5;
		if((sides12 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx13 = rx12;
			var ry13 = ry12;
			var sides13 = sides12;
			var omega8 = 0.;
			if(omega8 == null) {
				omega8 = 0.;
			}
			if(sides13 == null) {
				sides13 = 36;
			}
			var pi13 = Math.PI;
			var theta24 = pi13 / 2 + omega8;
			var step16 = pi13 * 2 / sides13;
			var bx16;
			var by16;
			var cx16;
			var cy16;
			if(rx13 > 1.) {
				rx13 = 1;
			}
			if(rx13 < -1.) {
				rx13 = -1;
			}
			if(ry13 > 1.) {
				ry13 = 1;
			}
			if(ry13 < -1.) {
				ry13 = -1;
			}
			var mx8 = x5 + rx13 * radius5;
			var my8 = y5 - ry13 * radius5;
			var _g26 = 0;
			var _g116 = sides13;
			while(_g26 < _g116) {
				var i12 = _g26++;
				bx16 = x5 + radius5 * Math.sin(theta24);
				by16 = y5 + radius5 * Math.cos(theta24);
				theta24 += step16;
				cx16 = x5 + radius5 * Math.sin(theta24);
				cy16 = y5 + radius5 * Math.cos(theta24);
				drawType5.triangle(mx8,my8,0,bx16,by16,0,cx16,cy16,0);
				var m22 = trilateral2_Shaper.transformMatrix;
				if(m22 != null) {
					drawType5.transform(m22);
				}
				drawType5.next();
			}
			len5 = sides13;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides12 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx14 = rx12;
			var ry14 = ry12;
			var sides14 = sides12;
			var omega9 = 0.;
			if(omega9 == null) {
				omega9 = 0.;
			}
			if(sides14 == null) {
				sides14 = 36;
			}
			var pi14 = Math.PI;
			var theta25 = pi14 / 2;
			var step17 = pi14 * 2 / sides14;
			theta25 -= step17 / 2 + omega9;
			var bx17 = 0;
			var by17 = 0;
			var cx17 = 0;
			var cy17 = 0;
			if(rx14 > 1.) {
				rx14 = 1;
			}
			if(rx14 < -1.) {
				rx14 = -1;
			}
			if(ry14 > 1.) {
				ry14 = 1;
			}
			if(ry14 < -1.) {
				ry14 = -1;
			}
			var mx9 = x5 + rx14 * radius5;
			var my9 = y5 - ry14 * radius5;
			var dx8 = x5 + radius5 * Math.sin(theta25);
			var dy8 = y5 + radius5 * Math.cos(theta25);
			var _g27 = 0;
			var _g117 = sides14 - 1;
			while(_g27 < _g117) {
				var i13 = _g27++;
				bx17 = x5 + radius5 * Math.sin(theta25);
				by17 = y5 + radius5 * Math.cos(theta25);
				theta25 += step17;
				cx17 = x5 + radius5 * Math.sin(theta25);
				cy17 = y5 + radius5 * Math.cos(theta25);
				drawType5.triangle(mx9,my9,0,bx17,by17,0,cx17,cy17,0);
				var m23 = trilateral2_Shaper.transformMatrix;
				if(m23 != null) {
					drawType5.transform(m23);
				}
				drawType5.next();
			}
			drawType5.triangle(mx9,my9,0,cx17,cy17,0,dx8,dy8,0);
			var m24 = trilateral2_Shaper.transformMatrix;
			if(m24 != null) {
				drawType5.transform(m24);
			}
			drawType5.next();
			len5 = sides14;
		}
		var k4 = 1;
		var arrEnd4 = arr4.length - 1;
		var end5 = start5 + len5 - 1;
		var arr_4 = arr4.slice();
		var _g28 = 0;
		var _g118 = len5 - 1;
		while(_g28 < _g118) {
			var j4 = _g28++;
			this39.colorType.cornerColors(s4.color,arr_4[k4 - 1],arr_4[k4]);
			++k4;
			if(k4 > arrEnd4) {
				k4 = 1;
				arr_4.reverse();
			}
		}
		this39.colorType.cornerColors(s4.color,arr_4[k4 - 1],arr4[0]);
		var startEnd4 = new trilateral2_IndexRange(start5,end5);
		var c4 = startEnd4;
		var s5 = rs1.clone();
		s5.x += 25;
		var arr5 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx15 = -0.25;
		var ry15 = 0.25;
		var sides15 = 47;
		if(sides15 == null) {
			sides15 = 36;
		}
		if(ry15 == null) {
			ry15 = 0;
		}
		if(rx15 == null) {
			rx15 = 0;
		}
		var start6 = this39.drawType.get_size();
		var drawType6 = this39.drawType;
		var x6 = s5.x;
		var y6 = s5.y;
		var radius6 = s5.radius;
		var len6;
		if((sides15 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx16 = rx15;
			var ry16 = ry15;
			var sides16 = sides15;
			var omega10 = 0.;
			if(omega10 == null) {
				omega10 = 0.;
			}
			if(sides16 == null) {
				sides16 = 36;
			}
			var pi15 = Math.PI;
			var theta26 = pi15 / 2 + omega10;
			var step18 = pi15 * 2 / sides16;
			var bx18;
			var by18;
			var cx18;
			var cy18;
			if(rx16 > 1.) {
				rx16 = 1;
			}
			if(rx16 < -1.) {
				rx16 = -1;
			}
			if(ry16 > 1.) {
				ry16 = 1;
			}
			if(ry16 < -1.) {
				ry16 = -1;
			}
			var mx10 = x6 + rx16 * radius6;
			var my10 = y6 - ry16 * radius6;
			var _g29 = 0;
			var _g119 = sides16;
			while(_g29 < _g119) {
				var i14 = _g29++;
				bx18 = x6 + radius6 * Math.sin(theta26);
				by18 = y6 + radius6 * Math.cos(theta26);
				theta26 += step18;
				cx18 = x6 + radius6 * Math.sin(theta26);
				cy18 = y6 + radius6 * Math.cos(theta26);
				drawType6.triangle(mx10,my10,0,bx18,by18,0,cx18,cy18,0);
				var m25 = trilateral2_Shaper.transformMatrix;
				if(m25 != null) {
					drawType6.transform(m25);
				}
				drawType6.next();
			}
			len6 = sides16;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides15 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx17 = rx15;
			var ry17 = ry15;
			var sides17 = sides15;
			var omega11 = 0.;
			if(omega11 == null) {
				omega11 = 0.;
			}
			if(sides17 == null) {
				sides17 = 36;
			}
			var pi16 = Math.PI;
			var theta27 = pi16 / 2;
			var step19 = pi16 * 2 / sides17;
			theta27 -= step19 / 2 + omega11;
			var bx19 = 0;
			var by19 = 0;
			var cx19 = 0;
			var cy19 = 0;
			if(rx17 > 1.) {
				rx17 = 1;
			}
			if(rx17 < -1.) {
				rx17 = -1;
			}
			if(ry17 > 1.) {
				ry17 = 1;
			}
			if(ry17 < -1.) {
				ry17 = -1;
			}
			var mx11 = x6 + rx17 * radius6;
			var my11 = y6 - ry17 * radius6;
			var dx9 = x6 + radius6 * Math.sin(theta27);
			var dy9 = y6 + radius6 * Math.cos(theta27);
			var _g30 = 0;
			var _g120 = sides17 - 1;
			while(_g30 < _g120) {
				var i15 = _g30++;
				bx19 = x6 + radius6 * Math.sin(theta27);
				by19 = y6 + radius6 * Math.cos(theta27);
				theta27 += step19;
				cx19 = x6 + radius6 * Math.sin(theta27);
				cy19 = y6 + radius6 * Math.cos(theta27);
				drawType6.triangle(mx11,my11,0,bx19,by19,0,cx19,cy19,0);
				var m26 = trilateral2_Shaper.transformMatrix;
				if(m26 != null) {
					drawType6.transform(m26);
				}
				drawType6.next();
			}
			drawType6.triangle(mx11,my11,0,cx19,cy19,0,dx9,dy9,0);
			var m27 = trilateral2_Shaper.transformMatrix;
			if(m27 != null) {
				drawType6.transform(m27);
			}
			drawType6.next();
			len6 = sides17;
		}
		var k5 = 1;
		var arrEnd5 = arr5.length - 1;
		var end6 = start6 + len6 - 1;
		var arr_5 = arr5.slice();
		var _g31 = 0;
		var _g121 = len6 - 1;
		while(_g31 < _g121) {
			var j5 = _g31++;
			this39.colorType.cornerColors(s5.color,arr_5[k5 - 1],arr_5[k5]);
			++k5;
			if(k5 > arrEnd5) {
				k5 = 1;
				arr_5.reverse();
			}
		}
		this39.colorType.cornerColors(s5.color,arr_5[k5 - 1],arr5[0]);
		var startEnd5 = new trilateral2_IndexRange(start6,end6);
		var c5 = startEnd5;
		var s11 = new trilateral2_IndexRange(c0.start,c5.end);
		var s21 = new trilateral2_IndexRange(s0.start,s11.end);
		this.spots.drawType.transformRange(trans,s21.start,s21.end);
		return s21;
	}
	,create: function(x,y) {
		this.spotShape.x = x;
		this.spotShape.y = y;
		this.dieShape.x = x;
		this.dieShape.y = y;
		var diceRadius = this.dieShape.radius / 600;
		var layout = new geom_obj_DieLayout(diceRadius,this.left);
		var z = layout.radius;
		var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this2 = this1;
		var this3 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z);
		var s = this3;
		var this4 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
		var t1 = this4;
		var theta = Math.PI / 2;
		var this5 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this6 = this5;
		var c = Math.cos(theta);
		var s1 = Math.sin(theta);
		var this7 = new geom_structure_Mat4x3(c,0.,s1,0.,0.,1.,0.,0.,-s1,0.,c,0.);
		var s2 = this7;
		var this8 = new geom_structure_Mat4x3(this6.a * s2.a + this6.b * s2.e + this6.c * s2.i,this6.a * s2.b + this6.b * s2.f + this6.c * s2.j,this6.a * s2.c + this6.b * s2.g + this6.c * s2.k,this6.a * s2.d + this6.b * s2.h + this6.c * s2.l + this6.d,this6.e * s2.a + this6.f * s2.e + this6.g * s2.i,this6.e * s2.b + this6.f * s2.f + this6.g * s2.j,this6.e * s2.c + this6.f * s2.g + this6.g * s2.k,this6.e * s2.d + this6.f * s2.h + this6.g * s2.l + this6.h,this6.i * s2.a + this6.j * s2.e + this6.k * s2.i,this6.i * s2.b + this6.j * s2.f + this6.k * s2.j,this6.i * s2.c + this6.j * s2.g + this6.k * s2.k,this6.i * s2.d + this6.j * s2.h + this6.k * s2.l + this6.l);
		var r = this8;
		var z1 = layout.radius;
		var this9 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this10 = this9;
		var this11 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z1);
		var s3 = this11;
		var this12 = new geom_structure_Mat4x3(this10.a * s3.a + this10.b * s3.e + this10.c * s3.i,this10.a * s3.b + this10.b * s3.f + this10.c * s3.j,this10.a * s3.c + this10.b * s3.g + this10.c * s3.k,this10.a * s3.d + this10.b * s3.h + this10.c * s3.l + this10.d,this10.e * s3.a + this10.f * s3.e + this10.g * s3.i,this10.e * s3.b + this10.f * s3.f + this10.g * s3.j,this10.e * s3.c + this10.f * s3.g + this10.g * s3.k,this10.e * s3.d + this10.f * s3.h + this10.g * s3.l + this10.h,this10.i * s3.a + this10.j * s3.e + this10.k * s3.i,this10.i * s3.b + this10.j * s3.f + this10.k * s3.j,this10.i * s3.c + this10.j * s3.g + this10.k * s3.k,this10.i * s3.d + this10.j * s3.h + this10.k * s3.l + this10.l);
		var s4 = this12;
		var this13 = new geom_structure_Mat4x3(r.a * s4.a + r.b * s4.e + r.c * s4.i,r.a * s4.b + r.b * s4.f + r.c * s4.j,r.a * s4.c + r.b * s4.g + r.c * s4.k,r.a * s4.d + r.b * s4.h + r.c * s4.l + r.d,r.e * s4.a + r.f * s4.e + r.g * s4.i,r.e * s4.b + r.f * s4.f + r.g * s4.j,r.e * s4.c + r.f * s4.g + r.g * s4.k,r.e * s4.d + r.f * s4.h + r.g * s4.l + r.h,r.i * s4.a + r.j * s4.e + r.k * s4.i,r.i * s4.b + r.j * s4.f + r.k * s4.j,r.i * s4.c + r.j * s4.g + r.k * s4.k,r.i * s4.d + r.j * s4.h + r.k * s4.l + r.l);
		var t2 = this13;
		var theta1 = Math.PI / 2;
		var this14 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this15 = this14;
		var c1 = Math.cos(theta1);
		var s5 = Math.sin(theta1);
		var this16 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c1,-s5,0.,0.,s5,c1,0.);
		var s6 = this16;
		var this17 = new geom_structure_Mat4x3(this15.a * s6.a + this15.b * s6.e + this15.c * s6.i,this15.a * s6.b + this15.b * s6.f + this15.c * s6.j,this15.a * s6.c + this15.b * s6.g + this15.c * s6.k,this15.a * s6.d + this15.b * s6.h + this15.c * s6.l + this15.d,this15.e * s6.a + this15.f * s6.e + this15.g * s6.i,this15.e * s6.b + this15.f * s6.f + this15.g * s6.j,this15.e * s6.c + this15.f * s6.g + this15.g * s6.k,this15.e * s6.d + this15.f * s6.h + this15.g * s6.l + this15.h,this15.i * s6.a + this15.j * s6.e + this15.k * s6.i,this15.i * s6.b + this15.j * s6.f + this15.k * s6.j,this15.i * s6.c + this15.j * s6.g + this15.k * s6.k,this15.i * s6.d + this15.j * s6.h + this15.k * s6.l + this15.l);
		var r1 = this17;
		var z2 = layout.radius;
		var this18 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this19 = this18;
		var this20 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z2);
		var s7 = this20;
		var this21 = new geom_structure_Mat4x3(this19.a * s7.a + this19.b * s7.e + this19.c * s7.i,this19.a * s7.b + this19.b * s7.f + this19.c * s7.j,this19.a * s7.c + this19.b * s7.g + this19.c * s7.k,this19.a * s7.d + this19.b * s7.h + this19.c * s7.l + this19.d,this19.e * s7.a + this19.f * s7.e + this19.g * s7.i,this19.e * s7.b + this19.f * s7.f + this19.g * s7.j,this19.e * s7.c + this19.f * s7.g + this19.g * s7.k,this19.e * s7.d + this19.f * s7.h + this19.g * s7.l + this19.h,this19.i * s7.a + this19.j * s7.e + this19.k * s7.i,this19.i * s7.b + this19.j * s7.f + this19.k * s7.j,this19.i * s7.c + this19.j * s7.g + this19.k * s7.k,this19.i * s7.d + this19.j * s7.h + this19.k * s7.l + this19.l);
		var s8 = this21;
		var this22 = new geom_structure_Mat4x3(r1.a * s8.a + r1.b * s8.e + r1.c * s8.i,r1.a * s8.b + r1.b * s8.f + r1.c * s8.j,r1.a * s8.c + r1.b * s8.g + r1.c * s8.k,r1.a * s8.d + r1.b * s8.h + r1.c * s8.l + r1.d,r1.e * s8.a + r1.f * s8.e + r1.g * s8.i,r1.e * s8.b + r1.f * s8.f + r1.g * s8.j,r1.e * s8.c + r1.f * s8.g + r1.g * s8.k,r1.e * s8.d + r1.f * s8.h + r1.g * s8.l + r1.h,r1.i * s8.a + r1.j * s8.e + r1.k * s8.i,r1.i * s8.b + r1.j * s8.f + r1.k * s8.j,r1.i * s8.c + r1.j * s8.g + r1.k * s8.k,r1.i * s8.d + r1.j * s8.h + r1.k * s8.l + r1.l);
		var t3 = this22;
		var theta2 = -Math.PI / 2;
		var this23 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this24 = this23;
		var c2 = Math.cos(theta2);
		var s9 = Math.sin(theta2);
		var this25 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c2,-s9,0.,0.,s9,c2,0.);
		var s10 = this25;
		var this26 = new geom_structure_Mat4x3(this24.a * s10.a + this24.b * s10.e + this24.c * s10.i,this24.a * s10.b + this24.b * s10.f + this24.c * s10.j,this24.a * s10.c + this24.b * s10.g + this24.c * s10.k,this24.a * s10.d + this24.b * s10.h + this24.c * s10.l + this24.d,this24.e * s10.a + this24.f * s10.e + this24.g * s10.i,this24.e * s10.b + this24.f * s10.f + this24.g * s10.j,this24.e * s10.c + this24.f * s10.g + this24.g * s10.k,this24.e * s10.d + this24.f * s10.h + this24.g * s10.l + this24.h,this24.i * s10.a + this24.j * s10.e + this24.k * s10.i,this24.i * s10.b + this24.j * s10.f + this24.k * s10.j,this24.i * s10.c + this24.j * s10.g + this24.k * s10.k,this24.i * s10.d + this24.j * s10.h + this24.k * s10.l + this24.l);
		var r2 = this26;
		var z3 = layout.radius;
		var this27 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this28 = this27;
		var this29 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z3);
		var s11 = this29;
		var this30 = new geom_structure_Mat4x3(this28.a * s11.a + this28.b * s11.e + this28.c * s11.i,this28.a * s11.b + this28.b * s11.f + this28.c * s11.j,this28.a * s11.c + this28.b * s11.g + this28.c * s11.k,this28.a * s11.d + this28.b * s11.h + this28.c * s11.l + this28.d,this28.e * s11.a + this28.f * s11.e + this28.g * s11.i,this28.e * s11.b + this28.f * s11.f + this28.g * s11.j,this28.e * s11.c + this28.f * s11.g + this28.g * s11.k,this28.e * s11.d + this28.f * s11.h + this28.g * s11.l + this28.h,this28.i * s11.a + this28.j * s11.e + this28.k * s11.i,this28.i * s11.b + this28.j * s11.f + this28.k * s11.j,this28.i * s11.c + this28.j * s11.g + this28.k * s11.k,this28.i * s11.d + this28.j * s11.h + this28.k * s11.l + this28.l);
		var s12 = this30;
		var this31 = new geom_structure_Mat4x3(r2.a * s12.a + r2.b * s12.e + r2.c * s12.i,r2.a * s12.b + r2.b * s12.f + r2.c * s12.j,r2.a * s12.c + r2.b * s12.g + r2.c * s12.k,r2.a * s12.d + r2.b * s12.h + r2.c * s12.l + r2.d,r2.e * s12.a + r2.f * s12.e + r2.g * s12.i,r2.e * s12.b + r2.f * s12.f + r2.g * s12.j,r2.e * s12.c + r2.f * s12.g + r2.g * s12.k,r2.e * s12.d + r2.f * s12.h + r2.g * s12.l + r2.h,r2.i * s12.a + r2.j * s12.e + r2.k * s12.i,r2.i * s12.b + r2.j * s12.f + r2.k * s12.j,r2.i * s12.c + r2.j * s12.g + r2.k * s12.k,r2.i * s12.d + r2.j * s12.h + r2.k * s12.l + r2.l);
		var t4 = this31;
		var theta3 = -Math.PI / 2;
		var this32 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this33 = this32;
		var c3 = Math.cos(theta3);
		var s13 = Math.sin(theta3);
		var this34 = new geom_structure_Mat4x3(c3,0.,s13,0.,0.,1.,0.,0.,-s13,0.,c3,0.);
		var s14 = this34;
		var this35 = new geom_structure_Mat4x3(this33.a * s14.a + this33.b * s14.e + this33.c * s14.i,this33.a * s14.b + this33.b * s14.f + this33.c * s14.j,this33.a * s14.c + this33.b * s14.g + this33.c * s14.k,this33.a * s14.d + this33.b * s14.h + this33.c * s14.l + this33.d,this33.e * s14.a + this33.f * s14.e + this33.g * s14.i,this33.e * s14.b + this33.f * s14.f + this33.g * s14.j,this33.e * s14.c + this33.f * s14.g + this33.g * s14.k,this33.e * s14.d + this33.f * s14.h + this33.g * s14.l + this33.h,this33.i * s14.a + this33.j * s14.e + this33.k * s14.i,this33.i * s14.b + this33.j * s14.f + this33.k * s14.j,this33.i * s14.c + this33.j * s14.g + this33.k * s14.k,this33.i * s14.d + this33.j * s14.h + this33.k * s14.l + this33.l);
		var r3 = this35;
		var z4 = layout.radius;
		var this36 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this37 = this36;
		var this38 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z4);
		var s15 = this38;
		var this39 = new geom_structure_Mat4x3(this37.a * s15.a + this37.b * s15.e + this37.c * s15.i,this37.a * s15.b + this37.b * s15.f + this37.c * s15.j,this37.a * s15.c + this37.b * s15.g + this37.c * s15.k,this37.a * s15.d + this37.b * s15.h + this37.c * s15.l + this37.d,this37.e * s15.a + this37.f * s15.e + this37.g * s15.i,this37.e * s15.b + this37.f * s15.f + this37.g * s15.j,this37.e * s15.c + this37.f * s15.g + this37.g * s15.k,this37.e * s15.d + this37.f * s15.h + this37.g * s15.l + this37.h,this37.i * s15.a + this37.j * s15.e + this37.k * s15.i,this37.i * s15.b + this37.j * s15.f + this37.k * s15.j,this37.i * s15.c + this37.j * s15.g + this37.k * s15.k,this37.i * s15.d + this37.j * s15.h + this37.k * s15.l + this37.l);
		var s16 = this39;
		var this40 = new geom_structure_Mat4x3(r3.a * s16.a + r3.b * s16.e + r3.c * s16.i,r3.a * s16.b + r3.b * s16.f + r3.c * s16.j,r3.a * s16.c + r3.b * s16.g + r3.c * s16.k,r3.a * s16.d + r3.b * s16.h + r3.c * s16.l + r3.d,r3.e * s16.a + r3.f * s16.e + r3.g * s16.i,r3.e * s16.b + r3.f * s16.f + r3.g * s16.j,r3.e * s16.c + r3.f * s16.g + r3.g * s16.k,r3.e * s16.d + r3.f * s16.h + r3.g * s16.l + r3.h,r3.i * s16.a + r3.j * s16.e + r3.k * s16.i,r3.i * s16.b + r3.j * s16.f + r3.k * s16.j,r3.i * s16.c + r3.j * s16.g + r3.k * s16.k,r3.i * s16.d + r3.j * s16.h + r3.k * s16.l + r3.l);
		var t5 = this40;
		var theta4 = Math.PI;
		var this41 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this42 = this41;
		var c4 = Math.cos(theta4);
		var s17 = Math.sin(theta4);
		var this43 = new geom_structure_Mat4x3(c4,0.,s17,0.,0.,1.,0.,0.,-s17,0.,c4,0.);
		var s18 = this43;
		var this44 = new geom_structure_Mat4x3(this42.a * s18.a + this42.b * s18.e + this42.c * s18.i,this42.a * s18.b + this42.b * s18.f + this42.c * s18.j,this42.a * s18.c + this42.b * s18.g + this42.c * s18.k,this42.a * s18.d + this42.b * s18.h + this42.c * s18.l + this42.d,this42.e * s18.a + this42.f * s18.e + this42.g * s18.i,this42.e * s18.b + this42.f * s18.f + this42.g * s18.j,this42.e * s18.c + this42.f * s18.g + this42.g * s18.k,this42.e * s18.d + this42.f * s18.h + this42.g * s18.l + this42.h,this42.i * s18.a + this42.j * s18.e + this42.k * s18.i,this42.i * s18.b + this42.j * s18.f + this42.k * s18.j,this42.i * s18.c + this42.j * s18.g + this42.k * s18.k,this42.i * s18.d + this42.j * s18.h + this42.k * s18.l + this42.l);
		var r4 = this44;
		var z5 = layout.radius;
		var this45 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this46 = this45;
		var this47 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z5);
		var s19 = this47;
		var this48 = new geom_structure_Mat4x3(this46.a * s19.a + this46.b * s19.e + this46.c * s19.i,this46.a * s19.b + this46.b * s19.f + this46.c * s19.j,this46.a * s19.c + this46.b * s19.g + this46.c * s19.k,this46.a * s19.d + this46.b * s19.h + this46.c * s19.l + this46.d,this46.e * s19.a + this46.f * s19.e + this46.g * s19.i,this46.e * s19.b + this46.f * s19.f + this46.g * s19.j,this46.e * s19.c + this46.f * s19.g + this46.g * s19.k,this46.e * s19.d + this46.f * s19.h + this46.g * s19.l + this46.h,this46.i * s19.a + this46.j * s19.e + this46.k * s19.i,this46.i * s19.b + this46.j * s19.f + this46.k * s19.j,this46.i * s19.c + this46.j * s19.g + this46.k * s19.k,this46.i * s19.d + this46.j * s19.h + this46.k * s19.l + this46.l);
		var s20 = this48;
		var this49 = new geom_structure_Mat4x3(r4.a * s20.a + r4.b * s20.e + r4.c * s20.i,r4.a * s20.b + r4.b * s20.f + r4.c * s20.j,r4.a * s20.c + r4.b * s20.g + r4.c * s20.k,r4.a * s20.d + r4.b * s20.h + r4.c * s20.l + r4.d,r4.e * s20.a + r4.f * s20.e + r4.g * s20.i,r4.e * s20.b + r4.f * s20.f + r4.g * s20.j,r4.e * s20.c + r4.f * s20.g + r4.g * s20.k,r4.e * s20.d + r4.f * s20.h + r4.g * s20.l + r4.h,r4.i * s20.a + r4.j * s20.e + r4.k * s20.i,r4.i * s20.b + r4.j * s20.f + r4.k * s20.j,r4.i * s20.c + r4.j * s20.g + r4.k * s20.k,r4.i * s20.d + r4.j * s20.h + r4.k * s20.l + r4.l);
		var t6 = this49;
		var tt2 = layout.isLeft == true ? t3 : t2;
		var tt3 = layout.isLeft == true ? t2 : t3;
		var tt4 = layout.isLeft == true ? t5 : t4;
		var tt5 = layout.isLeft == true ? t4 : t5;
		var trans_0 = t1;
		var trans_1 = tt2;
		var trans_2 = tt3;
		var trans_3 = tt4;
		var trans_4 = tt5;
		var trans_5 = t6;
		var this50 = this.spots;
		var rs = this.dieShape;
		var start = this50.drawType.get_size();
		var drawType = this50.drawType;
		var x1 = rs.x - rs.radius;
		var y1 = rs.y - rs.radius;
		var width = rs.radius * 2;
		var height = rs.radius * 2;
		var radius = this50.rounded;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x1 + radius;
		var ay = y1 + radius;
		var bx = x1 + width - radius;
		var by = y1 + radius;
		var cx = bx;
		var cy = y1 + height - radius;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y1;
		var bx1 = ax + (width - radius * 2);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + height;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		count += 2;
		var dimY = height - 2 * radius;
		var ax2 = x1;
		var ay2 = ay;
		var bx2 = x1 + radius;
		var by2 = ay2;
		var cx2 = bx2;
		var cy2 = ay2 + dimY;
		var dx2 = x1;
		var dy2 = cy2;
		drawType.triangle(ax2,ay2,0,bx2,by2,0,dx2,dy2,0);
		var m2 = trilateral2_Shaper.transformMatrix;
		if(m2 != null) {
			drawType.transform(m2);
		}
		drawType.next();
		drawType.triangle(bx2,by2,0,cx2,cy2,0,dx2,dy2,0);
		var m3 = trilateral2_Shaper.transformMatrix;
		if(m3 != null) {
			drawType.transform(m3);
		}
		drawType.next();
		count += 2;
		var ax3 = bx;
		var ay3 = by;
		var bx3 = bx + radius;
		var by3 = ay3;
		var cx3 = bx3;
		var cy3 = ay3 + dimY;
		var dx3 = bx;
		var dy3 = cy3;
		drawType.triangle(ax3,ay3,0,bx3,by3,0,dx3,dy3,0);
		var m4 = trilateral2_Shaper.transformMatrix;
		if(m4 != null) {
			drawType.transform(m4);
		}
		drawType.next();
		drawType.triangle(bx3,by3,0,cx3,cy3,0,dx3,dy3,0);
		var m5 = trilateral2_Shaper.transformMatrix;
		if(m5 != null) {
			drawType.transform(m5);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this51 = f;
			var za = this51;
			var f1;
			if(gamma >= 0 && gamma > Math.PI) {
				f1 = gamma;
			} else {
				var a1 = gamma % (2 * Math.PI);
				f1 = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
			}
			var this52 = f1;
			var zb = this52;
			var fa = za;
			var fb = zb;
			var theta5 = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta5 : -theta5;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f2;
			if(beta >= 0 && beta > Math.PI) {
				f2 = beta;
			} else {
				var a2 = beta % (2 * Math.PI);
				f2 = a2 >= 0 ? a2 : a2 + 2 * Math.PI;
			}
			var this53 = f2;
			var za1 = this53;
			var f3;
			if(gamma >= 0 && gamma > Math.PI) {
				f3 = gamma;
			} else {
				var a3 = gamma % (2 * Math.PI);
				f3 = a3 >= 0 ? a3 : a3 + 2 * Math.PI;
			}
			var this54 = f3;
			var zb1 = this54;
			var fa1 = za1;
			var fb1 = zb1;
			var theta6 = Math.abs(fa1 - fb1);
			var clockwise1 = fa1 < fb1;
			var dif2 = clockwise1 ? theta6 : -theta6;
			dif = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
			break;
		case 2:
			var f4;
			if(beta >= 0 && beta > Math.PI) {
				f4 = beta;
			} else {
				var a4 = beta % (2 * Math.PI);
				f4 = a4 >= 0 ? a4 : a4 + 2 * Math.PI;
			}
			var this55 = f4;
			var za2 = this55;
			var f5;
			if(gamma >= 0 && gamma > Math.PI) {
				f5 = gamma;
			} else {
				var a5 = gamma % (2 * Math.PI);
				f5 = a5 >= 0 ? a5 : a5 + 2 * Math.PI;
			}
			var this56 = f5;
			var zb2 = this56;
			var fa2 = za2;
			var fb2 = zb2;
			var theta7 = Math.abs(fa2 - fb2);
			var smallest = theta7 <= Math.PI;
			var clockwise2 = fa2 < fb2;
			var dif3 = clockwise2 ? theta7 : -theta7;
			dif = smallest ? dif3 : clockwise2 ? -(2 * Math.PI - theta7) : 2 * Math.PI - theta7;
			break;
		case 3:
			var f6;
			if(beta >= 0 && beta > Math.PI) {
				f6 = beta;
			} else {
				var a6 = beta % (2 * Math.PI);
				f6 = a6 >= 0 ? a6 : a6 + 2 * Math.PI;
			}
			var this57 = f6;
			var za3 = this57;
			var f7;
			if(gamma >= 0 && gamma > Math.PI) {
				f7 = gamma;
			} else {
				var a7 = gamma % (2 * Math.PI);
				f7 = a7 >= 0 ? a7 : a7 + 2 * Math.PI;
			}
			var this58 = f7;
			var zb3 = this58;
			var fa3 = za3;
			var fb3 = zb3;
			var theta8 = Math.abs(fa3 - fb3);
			var largest = theta8 > Math.PI;
			var clockwise3 = fa3 < fb3;
			var dif4 = clockwise3 ? theta8 : -theta8;
			dif = largest ? dif4 : clockwise3 ? -(2 * Math.PI - theta8) : 2 * Math.PI - theta8;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step1 = dif / totalSteps;
		var angle = beta;
		var cx4;
		var cy4;
		var bx4 = 0;
		var by4 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx4 = ax + radius * Math.sin(angle);
			cy4 = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx4,by4,0,cx4,cy4,0);
				var m6 = trilateral2_Shaper.transformMatrix;
				if(m6 != null) {
					drawType.transform(m6);
				}
				drawType.next();
			}
			angle += step1;
			bx4 = cx4;
			by4 = cy4;
		}
		count += totalSteps;
		var pi2 = Math.PI;
		var step2 = pi2 * 2 / 36;
		var dif5;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f8;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f8 = pi_2;
			} else {
				var a8 = pi_2 % (2 * Math.PI);
				f8 = a8 >= 0 ? a8 : a8 + 2 * Math.PI;
			}
			var this59 = f8;
			var za4 = this59;
			var f9;
			if(pi >= 0 && pi > Math.PI) {
				f9 = pi;
			} else {
				var a9 = pi % (2 * Math.PI);
				f9 = a9 >= 0 ? a9 : a9 + 2 * Math.PI;
			}
			var this60 = f9;
			var zb4 = this60;
			var fa4 = za4;
			var fb4 = zb4;
			var theta9 = Math.abs(fa4 - fb4);
			var clockwise4 = fa4 < fb4;
			var dif6 = clockwise4 ? theta9 : -theta9;
			dif5 = dif6 > 0 ? dif6 : 2 * Math.PI + dif6;
			break;
		case 1:
			var f10;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f10 = pi_2;
			} else {
				var a10 = pi_2 % (2 * Math.PI);
				f10 = a10 >= 0 ? a10 : a10 + 2 * Math.PI;
			}
			var this61 = f10;
			var za5 = this61;
			var f11;
			if(pi >= 0 && pi > Math.PI) {
				f11 = pi;
			} else {
				var a11 = pi % (2 * Math.PI);
				f11 = a11 >= 0 ? a11 : a11 + 2 * Math.PI;
			}
			var this62 = f11;
			var zb5 = this62;
			var fa5 = za5;
			var fb5 = zb5;
			var theta10 = Math.abs(fa5 - fb5);
			var clockwise5 = fa5 < fb5;
			var dif7 = clockwise5 ? theta10 : -theta10;
			dif5 = dif7 < 0 ? dif7 : -2 * Math.PI + dif7;
			break;
		case 2:
			var f12;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f12 = pi_2;
			} else {
				var a12 = pi_2 % (2 * Math.PI);
				f12 = a12 >= 0 ? a12 : a12 + 2 * Math.PI;
			}
			var this63 = f12;
			var za6 = this63;
			var f13;
			if(pi >= 0 && pi > Math.PI) {
				f13 = pi;
			} else {
				var a13 = pi % (2 * Math.PI);
				f13 = a13 >= 0 ? a13 : a13 + 2 * Math.PI;
			}
			var this64 = f13;
			var zb6 = this64;
			var fa6 = za6;
			var fb6 = zb6;
			var theta11 = Math.abs(fa6 - fb6);
			var smallest1 = theta11 <= Math.PI;
			var clockwise6 = fa6 < fb6;
			var dif8 = clockwise6 ? theta11 : -theta11;
			dif5 = smallest1 ? dif8 : clockwise6 ? -(2 * Math.PI - theta11) : 2 * Math.PI - theta11;
			break;
		case 3:
			var f14;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f14 = pi_2;
			} else {
				var a14 = pi_2 % (2 * Math.PI);
				f14 = a14 >= 0 ? a14 : a14 + 2 * Math.PI;
			}
			var this65 = f14;
			var za7 = this65;
			var f15;
			if(pi >= 0 && pi > Math.PI) {
				f15 = pi;
			} else {
				var a15 = pi % (2 * Math.PI);
				f15 = a15 >= 0 ? a15 : a15 + 2 * Math.PI;
			}
			var this66 = f15;
			var zb7 = this66;
			var fa7 = za7;
			var fb7 = zb7;
			var theta12 = Math.abs(fa7 - fb7);
			var largest1 = theta12 > Math.PI;
			var clockwise7 = fa7 < fb7;
			var dif9 = clockwise7 ? theta12 : -theta12;
			dif5 = largest1 ? dif9 : clockwise7 ? -(2 * Math.PI - theta12) : 2 * Math.PI - theta12;
			break;
		}
		var positive1 = dif5 >= 0;
		var totalSteps1 = Math.ceil(Math.abs(dif5) / step2);
		var step3 = dif5 / totalSteps1;
		var angle1 = pi_2;
		var cx5;
		var cy5;
		var bx5 = 0;
		var by5 = 0;
		var _g2 = 0;
		var _g11 = totalSteps1 + 1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			cx5 = bx + radius * Math.sin(angle1);
			cy5 = by + radius * Math.cos(angle1);
			if(i1 != 0) {
				drawType.triangle(bx,by,0,bx5,by5,0,cx5,cy5,0);
				var m7 = trilateral2_Shaper.transformMatrix;
				if(m7 != null) {
					drawType.transform(m7);
				}
				drawType.next();
			}
			angle1 += step3;
			bx5 = cx5;
			by5 = cy5;
		}
		count += totalSteps1;
		var pi3 = Math.PI;
		var step4 = pi3 * 2 / 36;
		var dif10;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f16;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f16 = pi_2;
			} else {
				var a16 = pi_2 % (2 * Math.PI);
				f16 = a16 >= 0 ? a16 : a16 + 2 * Math.PI;
			}
			var this67 = f16;
			var za8 = this67;
			var f17;
			if(0 > Math.PI) {
				f17 = 0;
			} else {
				var a17 = 0 % (2 * Math.PI);
				f17 = a17 >= 0 ? a17 : a17 + 2 * Math.PI;
			}
			var this68 = f17;
			var zb8 = this68;
			var fa8 = za8;
			var fb8 = zb8;
			var theta13 = Math.abs(fa8 - fb8);
			var clockwise8 = fa8 < fb8;
			var dif11 = clockwise8 ? theta13 : -theta13;
			dif10 = dif11 > 0 ? dif11 : 2 * Math.PI + dif11;
			break;
		case 1:
			var f18;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f18 = pi_2;
			} else {
				var a18 = pi_2 % (2 * Math.PI);
				f18 = a18 >= 0 ? a18 : a18 + 2 * Math.PI;
			}
			var this69 = f18;
			var za9 = this69;
			var f19;
			if(0 > Math.PI) {
				f19 = 0;
			} else {
				var a19 = 0 % (2 * Math.PI);
				f19 = a19 >= 0 ? a19 : a19 + 2 * Math.PI;
			}
			var this70 = f19;
			var zb9 = this70;
			var fa9 = za9;
			var fb9 = zb9;
			var theta14 = Math.abs(fa9 - fb9);
			var clockwise9 = fa9 < fb9;
			var dif12 = clockwise9 ? theta14 : -theta14;
			dif10 = dif12 < 0 ? dif12 : -2 * Math.PI + dif12;
			break;
		case 2:
			var f20;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f20 = pi_2;
			} else {
				var a20 = pi_2 % (2 * Math.PI);
				f20 = a20 >= 0 ? a20 : a20 + 2 * Math.PI;
			}
			var this71 = f20;
			var za10 = this71;
			var f21;
			if(0 > Math.PI) {
				f21 = 0;
			} else {
				var a21 = 0 % (2 * Math.PI);
				f21 = a21 >= 0 ? a21 : a21 + 2 * Math.PI;
			}
			var this72 = f21;
			var zb10 = this72;
			var fa10 = za10;
			var fb10 = zb10;
			var theta15 = Math.abs(fa10 - fb10);
			var smallest2 = theta15 <= Math.PI;
			var clockwise10 = fa10 < fb10;
			var dif13 = clockwise10 ? theta15 : -theta15;
			dif10 = smallest2 ? dif13 : clockwise10 ? -(2 * Math.PI - theta15) : 2 * Math.PI - theta15;
			break;
		case 3:
			var f22;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f22 = pi_2;
			} else {
				var a22 = pi_2 % (2 * Math.PI);
				f22 = a22 >= 0 ? a22 : a22 + 2 * Math.PI;
			}
			var this73 = f22;
			var za11 = this73;
			var f23;
			if(0 > Math.PI) {
				f23 = 0;
			} else {
				var a23 = 0 % (2 * Math.PI);
				f23 = a23 >= 0 ? a23 : a23 + 2 * Math.PI;
			}
			var this74 = f23;
			var zb11 = this74;
			var fa11 = za11;
			var fb11 = zb11;
			var theta16 = Math.abs(fa11 - fb11);
			var largest2 = theta16 > Math.PI;
			var clockwise11 = fa11 < fb11;
			var dif14 = clockwise11 ? theta16 : -theta16;
			dif10 = largest2 ? dif14 : clockwise11 ? -(2 * Math.PI - theta16) : 2 * Math.PI - theta16;
			break;
		}
		var positive2 = dif10 >= 0;
		var totalSteps2 = Math.ceil(Math.abs(dif10) / step4);
		var step5 = dif10 / totalSteps2;
		var angle2 = pi_2;
		var cx6;
		var cy6;
		var bx6 = 0;
		var by6 = 0;
		var _g3 = 0;
		var _g12 = totalSteps2 + 1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			cx6 = cx + radius * Math.sin(angle2);
			cy6 = cy + radius * Math.cos(angle2);
			if(i2 != 0) {
				drawType.triangle(cx,cy,0,bx6,by6,0,cx6,cy6,0);
				var m8 = trilateral2_Shaper.transformMatrix;
				if(m8 != null) {
					drawType.transform(m8);
				}
				drawType.next();
			}
			angle2 += step5;
			bx6 = cx6;
			by6 = cy6;
		}
		count += totalSteps2;
		var gamma1 = -pi_2;
		var pi4 = Math.PI;
		var step6 = pi4 * 2 / 36;
		var dif15;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f24;
			if(0 > Math.PI) {
				f24 = 0;
			} else {
				var a24 = 0 % (2 * Math.PI);
				f24 = a24 >= 0 ? a24 : a24 + 2 * Math.PI;
			}
			var this75 = f24;
			var za12 = this75;
			var f25;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f25 = gamma1;
			} else {
				var a25 = gamma1 % (2 * Math.PI);
				f25 = a25 >= 0 ? a25 : a25 + 2 * Math.PI;
			}
			var this76 = f25;
			var zb12 = this76;
			var fa12 = za12;
			var fb12 = zb12;
			var theta17 = Math.abs(fa12 - fb12);
			var clockwise12 = fa12 < fb12;
			var dif16 = clockwise12 ? theta17 : -theta17;
			dif15 = dif16 > 0 ? dif16 : 2 * Math.PI + dif16;
			break;
		case 1:
			var f26;
			if(0 > Math.PI) {
				f26 = 0;
			} else {
				var a26 = 0 % (2 * Math.PI);
				f26 = a26 >= 0 ? a26 : a26 + 2 * Math.PI;
			}
			var this77 = f26;
			var za13 = this77;
			var f27;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f27 = gamma1;
			} else {
				var a27 = gamma1 % (2 * Math.PI);
				f27 = a27 >= 0 ? a27 : a27 + 2 * Math.PI;
			}
			var this78 = f27;
			var zb13 = this78;
			var fa13 = za13;
			var fb13 = zb13;
			var theta18 = Math.abs(fa13 - fb13);
			var clockwise13 = fa13 < fb13;
			var dif17 = clockwise13 ? theta18 : -theta18;
			dif15 = dif17 < 0 ? dif17 : -2 * Math.PI + dif17;
			break;
		case 2:
			var f28;
			if(0 > Math.PI) {
				f28 = 0;
			} else {
				var a28 = 0 % (2 * Math.PI);
				f28 = a28 >= 0 ? a28 : a28 + 2 * Math.PI;
			}
			var this79 = f28;
			var za14 = this79;
			var f29;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f29 = gamma1;
			} else {
				var a29 = gamma1 % (2 * Math.PI);
				f29 = a29 >= 0 ? a29 : a29 + 2 * Math.PI;
			}
			var this80 = f29;
			var zb14 = this80;
			var fa14 = za14;
			var fb14 = zb14;
			var theta19 = Math.abs(fa14 - fb14);
			var smallest3 = theta19 <= Math.PI;
			var clockwise14 = fa14 < fb14;
			var dif18 = clockwise14 ? theta19 : -theta19;
			dif15 = smallest3 ? dif18 : clockwise14 ? -(2 * Math.PI - theta19) : 2 * Math.PI - theta19;
			break;
		case 3:
			var f30;
			if(0 > Math.PI) {
				f30 = 0;
			} else {
				var a30 = 0 % (2 * Math.PI);
				f30 = a30 >= 0 ? a30 : a30 + 2 * Math.PI;
			}
			var this81 = f30;
			var za15 = this81;
			var f31;
			if(gamma1 >= 0 && gamma1 > Math.PI) {
				f31 = gamma1;
			} else {
				var a31 = gamma1 % (2 * Math.PI);
				f31 = a31 >= 0 ? a31 : a31 + 2 * Math.PI;
			}
			var this82 = f31;
			var zb15 = this82;
			var fa15 = za15;
			var fb15 = zb15;
			var theta20 = Math.abs(fa15 - fb15);
			var largest3 = theta20 > Math.PI;
			var clockwise15 = fa15 < fb15;
			var dif19 = clockwise15 ? theta20 : -theta20;
			dif15 = largest3 ? dif19 : clockwise15 ? -(2 * Math.PI - theta20) : 2 * Math.PI - theta20;
			break;
		}
		var positive3 = dif15 >= 0;
		var totalSteps3 = Math.ceil(Math.abs(dif15) / step6);
		var step7 = dif15 / totalSteps3;
		var angle3 = 0;
		var cx7;
		var cy7;
		var bx7 = 0;
		var by7 = 0;
		var _g4 = 0;
		var _g13 = totalSteps3 + 1;
		while(_g4 < _g13) {
			var i3 = _g4++;
			cx7 = dx + radius * Math.sin(angle3);
			cy7 = dy + radius * Math.cos(angle3);
			if(i3 != 0) {
				drawType.triangle(dx,dy,0,bx7,by7,0,cx7,cy7,0);
				var m9 = trilateral2_Shaper.transformMatrix;
				if(m9 != null) {
					drawType.transform(m9);
				}
				drawType.next();
			}
			angle3 += step7;
			bx7 = cx7;
			by7 = cy7;
		}
		var len = count += totalSteps3;
		var color = rs.color;
		if(color == -1) {
			color = this50.currentColor;
		}
		this50.colorType.colorTriangles(color,len);
		var end = start + len - 1;
		var s0 = new trilateral2_IndexRange(start,end);
		var this83 = this.spots;
		var this84 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this85 = this84;
		var this86 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this83.dz / 2);
		var s21 = this86;
		var this87 = new geom_structure_Mat4x3(this85.a * s21.a + this85.b * s21.e + this85.c * s21.i,this85.a * s21.b + this85.b * s21.f + this85.c * s21.j,this85.a * s21.c + this85.b * s21.g + this85.c * s21.k,this85.a * s21.d + this85.b * s21.h + this85.c * s21.l + this85.d,this85.e * s21.a + this85.f * s21.e + this85.g * s21.i,this85.e * s21.b + this85.f * s21.f + this85.g * s21.j,this85.e * s21.c + this85.f * s21.g + this85.g * s21.k,this85.e * s21.d + this85.f * s21.h + this85.g * s21.l + this85.h,this85.i * s21.a + this85.j * s21.e + this85.k * s21.i,this85.i * s21.b + this85.j * s21.f + this85.k * s21.j,this85.i * s21.c + this85.j * s21.g + this85.k * s21.k,this85.i * s21.d + this85.j * s21.h + this85.k * s21.l + this85.l);
		var trans = this87;
		this83.drawType.transformRange(trans,s0.start,s0.end);
		var this88 = this.spots;
		var rs1 = this.spotShape;
		var s01 = rs1.clone();
		s01.x -= 25;
		s01.y -= 35;
		var arr = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx = -0.25;
		var ry = 0.25;
		var sides = 47;
		if(sides == null) {
			sides = 36;
		}
		if(ry == null) {
			ry = 0;
		}
		if(rx == null) {
			rx = 0;
		}
		var start1 = this88.drawType.get_size();
		var drawType1 = this88.drawType;
		var x2 = s01.x;
		var y2 = s01.y;
		var radius1 = s01.radius;
		var len1;
		if((sides & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx1 = rx;
			var ry1 = ry;
			var sides1 = sides;
			var omega = 0.;
			if(omega == null) {
				omega = 0.;
			}
			if(sides1 == null) {
				sides1 = 36;
			}
			var pi5 = Math.PI;
			var theta21 = pi5 / 2 + omega;
			var step8 = pi5 * 2 / sides1;
			var bx8;
			var by8;
			var cx8;
			var cy8;
			if(rx1 > 1.) {
				rx1 = 1;
			}
			if(rx1 < -1.) {
				rx1 = -1;
			}
			if(ry1 > 1.) {
				ry1 = 1;
			}
			if(ry1 < -1.) {
				ry1 = -1;
			}
			var mx = x2 + rx1 * radius1;
			var my = y2 - ry1 * radius1;
			var _g5 = 0;
			var _g14 = sides1;
			while(_g5 < _g14) {
				var i4 = _g5++;
				bx8 = x2 + radius1 * Math.sin(theta21);
				by8 = y2 + radius1 * Math.cos(theta21);
				theta21 += step8;
				cx8 = x2 + radius1 * Math.sin(theta21);
				cy8 = y2 + radius1 * Math.cos(theta21);
				drawType1.triangle(mx,my,0,bx8,by8,0,cx8,cy8,0);
				var m10 = trilateral2_Shaper.transformMatrix;
				if(m10 != null) {
					drawType1.transform(m10);
				}
				drawType1.next();
			}
			len1 = sides1;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx2 = rx;
			var ry2 = ry;
			var sides2 = sides;
			var omega1 = 0.;
			if(omega1 == null) {
				omega1 = 0.;
			}
			if(sides2 == null) {
				sides2 = 36;
			}
			var pi6 = Math.PI;
			var theta22 = pi6 / 2;
			var step9 = pi6 * 2 / sides2;
			theta22 -= step9 / 2 + omega1;
			var bx9 = 0;
			var by9 = 0;
			var cx9 = 0;
			var cy9 = 0;
			if(rx2 > 1.) {
				rx2 = 1;
			}
			if(rx2 < -1.) {
				rx2 = -1;
			}
			if(ry2 > 1.) {
				ry2 = 1;
			}
			if(ry2 < -1.) {
				ry2 = -1;
			}
			var mx1 = x2 + rx2 * radius1;
			var my1 = y2 - ry2 * radius1;
			var dx4 = x2 + radius1 * Math.sin(theta22);
			var dy4 = y2 + radius1 * Math.cos(theta22);
			var _g6 = 0;
			var _g15 = sides2 - 1;
			while(_g6 < _g15) {
				var i5 = _g6++;
				bx9 = x2 + radius1 * Math.sin(theta22);
				by9 = y2 + radius1 * Math.cos(theta22);
				theta22 += step9;
				cx9 = x2 + radius1 * Math.sin(theta22);
				cy9 = y2 + radius1 * Math.cos(theta22);
				drawType1.triangle(mx1,my1,0,bx9,by9,0,cx9,cy9,0);
				var m11 = trilateral2_Shaper.transformMatrix;
				if(m11 != null) {
					drawType1.transform(m11);
				}
				drawType1.next();
			}
			drawType1.triangle(mx1,my1,0,cx9,cy9,0,dx4,dy4,0);
			var m12 = trilateral2_Shaper.transformMatrix;
			if(m12 != null) {
				drawType1.transform(m12);
			}
			drawType1.next();
			len1 = sides2;
		}
		var k = 1;
		var arrEnd = arr.length - 1;
		var end1 = start1 + len1 - 1;
		var arr_ = arr.slice();
		var _g7 = 0;
		var _g16 = len1 - 1;
		while(_g7 < _g16) {
			var j = _g7++;
			this88.colorType.cornerColors(s01.color,arr_[k - 1],arr_[k]);
			++k;
			if(k > arrEnd) {
				k = 1;
				arr_.reverse();
			}
		}
		this88.colorType.cornerColors(s01.color,arr_[k - 1],arr[0]);
		var startEnd = new trilateral2_IndexRange(start1,end1);
		var c0 = startEnd;
		var s110 = rs1.clone();
		s110.x += 25;
		s110.y -= 35;
		var arr1 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx3 = -0.25;
		var ry3 = 0.25;
		var sides3 = 47;
		if(sides3 == null) {
			sides3 = 36;
		}
		if(ry3 == null) {
			ry3 = 0;
		}
		if(rx3 == null) {
			rx3 = 0;
		}
		var start2 = this88.drawType.get_size();
		var drawType2 = this88.drawType;
		var x3 = s110.x;
		var y3 = s110.y;
		var radius2 = s110.radius;
		var len2;
		if((sides3 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx4 = rx3;
			var ry4 = ry3;
			var sides4 = sides3;
			var omega2 = 0.;
			if(omega2 == null) {
				omega2 = 0.;
			}
			if(sides4 == null) {
				sides4 = 36;
			}
			var pi7 = Math.PI;
			var theta23 = pi7 / 2 + omega2;
			var step10 = pi7 * 2 / sides4;
			var bx10;
			var by10;
			var cx10;
			var cy10;
			if(rx4 > 1.) {
				rx4 = 1;
			}
			if(rx4 < -1.) {
				rx4 = -1;
			}
			if(ry4 > 1.) {
				ry4 = 1;
			}
			if(ry4 < -1.) {
				ry4 = -1;
			}
			var mx2 = x3 + rx4 * radius2;
			var my2 = y3 - ry4 * radius2;
			var _g8 = 0;
			var _g17 = sides4;
			while(_g8 < _g17) {
				var i6 = _g8++;
				bx10 = x3 + radius2 * Math.sin(theta23);
				by10 = y3 + radius2 * Math.cos(theta23);
				theta23 += step10;
				cx10 = x3 + radius2 * Math.sin(theta23);
				cy10 = y3 + radius2 * Math.cos(theta23);
				drawType2.triangle(mx2,my2,0,bx10,by10,0,cx10,cy10,0);
				var m13 = trilateral2_Shaper.transformMatrix;
				if(m13 != null) {
					drawType2.transform(m13);
				}
				drawType2.next();
			}
			len2 = sides4;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides3 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx5 = rx3;
			var ry5 = ry3;
			var sides5 = sides3;
			var omega3 = 0.;
			if(omega3 == null) {
				omega3 = 0.;
			}
			if(sides5 == null) {
				sides5 = 36;
			}
			var pi8 = Math.PI;
			var theta24 = pi8 / 2;
			var step11 = pi8 * 2 / sides5;
			theta24 -= step11 / 2 + omega3;
			var bx11 = 0;
			var by11 = 0;
			var cx11 = 0;
			var cy11 = 0;
			if(rx5 > 1.) {
				rx5 = 1;
			}
			if(rx5 < -1.) {
				rx5 = -1;
			}
			if(ry5 > 1.) {
				ry5 = 1;
			}
			if(ry5 < -1.) {
				ry5 = -1;
			}
			var mx3 = x3 + rx5 * radius2;
			var my3 = y3 - ry5 * radius2;
			var dx5 = x3 + radius2 * Math.sin(theta24);
			var dy5 = y3 + radius2 * Math.cos(theta24);
			var _g9 = 0;
			var _g18 = sides5 - 1;
			while(_g9 < _g18) {
				var i7 = _g9++;
				bx11 = x3 + radius2 * Math.sin(theta24);
				by11 = y3 + radius2 * Math.cos(theta24);
				theta24 += step11;
				cx11 = x3 + radius2 * Math.sin(theta24);
				cy11 = y3 + radius2 * Math.cos(theta24);
				drawType2.triangle(mx3,my3,0,bx11,by11,0,cx11,cy11,0);
				var m14 = trilateral2_Shaper.transformMatrix;
				if(m14 != null) {
					drawType2.transform(m14);
				}
				drawType2.next();
			}
			drawType2.triangle(mx3,my3,0,cx11,cy11,0,dx5,dy5,0);
			var m15 = trilateral2_Shaper.transformMatrix;
			if(m15 != null) {
				drawType2.transform(m15);
			}
			drawType2.next();
			len2 = sides5;
		}
		var k1 = 1;
		var arrEnd1 = arr1.length - 1;
		var end2 = start2 + len2 - 1;
		var arr_1 = arr1.slice();
		var _g10 = 0;
		var _g19 = len2 - 1;
		while(_g10 < _g19) {
			var j1 = _g10++;
			this88.colorType.cornerColors(s110.color,arr_1[k1 - 1],arr_1[k1]);
			++k1;
			if(k1 > arrEnd1) {
				k1 = 1;
				arr_1.reverse();
			}
		}
		this88.colorType.cornerColors(s110.color,arr_1[k1 - 1],arr1[0]);
		var startEnd1 = new trilateral2_IndexRange(start2,end2);
		var c11 = startEnd1;
		var s22 = rs1.clone();
		s22.x -= 25;
		s22.y += 35;
		var arr2 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx6 = -0.25;
		var ry6 = 0.25;
		var sides6 = 47;
		if(sides6 == null) {
			sides6 = 36;
		}
		if(ry6 == null) {
			ry6 = 0;
		}
		if(rx6 == null) {
			rx6 = 0;
		}
		var start3 = this88.drawType.get_size();
		var drawType3 = this88.drawType;
		var x4 = s22.x;
		var y4 = s22.y;
		var radius3 = s22.radius;
		var len3;
		if((sides6 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx7 = rx6;
			var ry7 = ry6;
			var sides7 = sides6;
			var omega4 = 0.;
			if(omega4 == null) {
				omega4 = 0.;
			}
			if(sides7 == null) {
				sides7 = 36;
			}
			var pi9 = Math.PI;
			var theta25 = pi9 / 2 + omega4;
			var step12 = pi9 * 2 / sides7;
			var bx12;
			var by12;
			var cx12;
			var cy12;
			if(rx7 > 1.) {
				rx7 = 1;
			}
			if(rx7 < -1.) {
				rx7 = -1;
			}
			if(ry7 > 1.) {
				ry7 = 1;
			}
			if(ry7 < -1.) {
				ry7 = -1;
			}
			var mx4 = x4 + rx7 * radius3;
			var my4 = y4 - ry7 * radius3;
			var _g20 = 0;
			var _g110 = sides7;
			while(_g20 < _g110) {
				var i8 = _g20++;
				bx12 = x4 + radius3 * Math.sin(theta25);
				by12 = y4 + radius3 * Math.cos(theta25);
				theta25 += step12;
				cx12 = x4 + radius3 * Math.sin(theta25);
				cy12 = y4 + radius3 * Math.cos(theta25);
				drawType3.triangle(mx4,my4,0,bx12,by12,0,cx12,cy12,0);
				var m16 = trilateral2_Shaper.transformMatrix;
				if(m16 != null) {
					drawType3.transform(m16);
				}
				drawType3.next();
			}
			len3 = sides7;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides6 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx8 = rx6;
			var ry8 = ry6;
			var sides8 = sides6;
			var omega5 = 0.;
			if(omega5 == null) {
				omega5 = 0.;
			}
			if(sides8 == null) {
				sides8 = 36;
			}
			var pi10 = Math.PI;
			var theta26 = pi10 / 2;
			var step13 = pi10 * 2 / sides8;
			theta26 -= step13 / 2 + omega5;
			var bx13 = 0;
			var by13 = 0;
			var cx13 = 0;
			var cy13 = 0;
			if(rx8 > 1.) {
				rx8 = 1;
			}
			if(rx8 < -1.) {
				rx8 = -1;
			}
			if(ry8 > 1.) {
				ry8 = 1;
			}
			if(ry8 < -1.) {
				ry8 = -1;
			}
			var mx5 = x4 + rx8 * radius3;
			var my5 = y4 - ry8 * radius3;
			var dx6 = x4 + radius3 * Math.sin(theta26);
			var dy6 = y4 + radius3 * Math.cos(theta26);
			var _g21 = 0;
			var _g111 = sides8 - 1;
			while(_g21 < _g111) {
				var i9 = _g21++;
				bx13 = x4 + radius3 * Math.sin(theta26);
				by13 = y4 + radius3 * Math.cos(theta26);
				theta26 += step13;
				cx13 = x4 + radius3 * Math.sin(theta26);
				cy13 = y4 + radius3 * Math.cos(theta26);
				drawType3.triangle(mx5,my5,0,bx13,by13,0,cx13,cy13,0);
				var m17 = trilateral2_Shaper.transformMatrix;
				if(m17 != null) {
					drawType3.transform(m17);
				}
				drawType3.next();
			}
			drawType3.triangle(mx5,my5,0,cx13,cy13,0,dx6,dy6,0);
			var m18 = trilateral2_Shaper.transformMatrix;
			if(m18 != null) {
				drawType3.transform(m18);
			}
			drawType3.next();
			len3 = sides8;
		}
		var k2 = 1;
		var arrEnd2 = arr2.length - 1;
		var end3 = start3 + len3 - 1;
		var arr_2 = arr2.slice();
		var _g22 = 0;
		var _g112 = len3 - 1;
		while(_g22 < _g112) {
			var j2 = _g22++;
			this88.colorType.cornerColors(s22.color,arr_2[k2 - 1],arr_2[k2]);
			++k2;
			if(k2 > arrEnd2) {
				k2 = 1;
				arr_2.reverse();
			}
		}
		this88.colorType.cornerColors(s22.color,arr_2[k2 - 1],arr2[0]);
		var startEnd2 = new trilateral2_IndexRange(start3,end3);
		var c21 = startEnd2;
		var s31 = rs1.clone();
		s31.x += 25;
		s31.y += 35;
		var arr3 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx9 = -0.25;
		var ry9 = 0.25;
		var sides9 = 47;
		if(sides9 == null) {
			sides9 = 36;
		}
		if(ry9 == null) {
			ry9 = 0;
		}
		if(rx9 == null) {
			rx9 = 0;
		}
		var start4 = this88.drawType.get_size();
		var drawType4 = this88.drawType;
		var x5 = s31.x;
		var y5 = s31.y;
		var radius4 = s31.radius;
		var len4;
		if((sides9 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx10 = rx9;
			var ry10 = ry9;
			var sides10 = sides9;
			var omega6 = 0.;
			if(omega6 == null) {
				omega6 = 0.;
			}
			if(sides10 == null) {
				sides10 = 36;
			}
			var pi11 = Math.PI;
			var theta27 = pi11 / 2 + omega6;
			var step14 = pi11 * 2 / sides10;
			var bx14;
			var by14;
			var cx14;
			var cy14;
			if(rx10 > 1.) {
				rx10 = 1;
			}
			if(rx10 < -1.) {
				rx10 = -1;
			}
			if(ry10 > 1.) {
				ry10 = 1;
			}
			if(ry10 < -1.) {
				ry10 = -1;
			}
			var mx6 = x5 + rx10 * radius4;
			var my6 = y5 - ry10 * radius4;
			var _g23 = 0;
			var _g113 = sides10;
			while(_g23 < _g113) {
				var i10 = _g23++;
				bx14 = x5 + radius4 * Math.sin(theta27);
				by14 = y5 + radius4 * Math.cos(theta27);
				theta27 += step14;
				cx14 = x5 + radius4 * Math.sin(theta27);
				cy14 = y5 + radius4 * Math.cos(theta27);
				drawType4.triangle(mx6,my6,0,bx14,by14,0,cx14,cy14,0);
				var m19 = trilateral2_Shaper.transformMatrix;
				if(m19 != null) {
					drawType4.transform(m19);
				}
				drawType4.next();
			}
			len4 = sides10;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides9 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx11 = rx9;
			var ry11 = ry9;
			var sides11 = sides9;
			var omega7 = 0.;
			if(omega7 == null) {
				omega7 = 0.;
			}
			if(sides11 == null) {
				sides11 = 36;
			}
			var pi12 = Math.PI;
			var theta28 = pi12 / 2;
			var step15 = pi12 * 2 / sides11;
			theta28 -= step15 / 2 + omega7;
			var bx15 = 0;
			var by15 = 0;
			var cx15 = 0;
			var cy15 = 0;
			if(rx11 > 1.) {
				rx11 = 1;
			}
			if(rx11 < -1.) {
				rx11 = -1;
			}
			if(ry11 > 1.) {
				ry11 = 1;
			}
			if(ry11 < -1.) {
				ry11 = -1;
			}
			var mx7 = x5 + rx11 * radius4;
			var my7 = y5 - ry11 * radius4;
			var dx7 = x5 + radius4 * Math.sin(theta28);
			var dy7 = y5 + radius4 * Math.cos(theta28);
			var _g24 = 0;
			var _g114 = sides11 - 1;
			while(_g24 < _g114) {
				var i11 = _g24++;
				bx15 = x5 + radius4 * Math.sin(theta28);
				by15 = y5 + radius4 * Math.cos(theta28);
				theta28 += step15;
				cx15 = x5 + radius4 * Math.sin(theta28);
				cy15 = y5 + radius4 * Math.cos(theta28);
				drawType4.triangle(mx7,my7,0,bx15,by15,0,cx15,cy15,0);
				var m20 = trilateral2_Shaper.transformMatrix;
				if(m20 != null) {
					drawType4.transform(m20);
				}
				drawType4.next();
			}
			drawType4.triangle(mx7,my7,0,cx15,cy15,0,dx7,dy7,0);
			var m21 = trilateral2_Shaper.transformMatrix;
			if(m21 != null) {
				drawType4.transform(m21);
			}
			drawType4.next();
			len4 = sides11;
		}
		var k3 = 1;
		var arrEnd3 = arr3.length - 1;
		var end4 = start4 + len4 - 1;
		var arr_3 = arr3.slice();
		var _g25 = 0;
		var _g115 = len4 - 1;
		while(_g25 < _g115) {
			var j3 = _g25++;
			this88.colorType.cornerColors(s31.color,arr_3[k3 - 1],arr_3[k3]);
			++k3;
			if(k3 > arrEnd3) {
				k3 = 1;
				arr_3.reverse();
			}
		}
		this88.colorType.cornerColors(s31.color,arr_3[k3 - 1],arr3[0]);
		var startEnd3 = new trilateral2_IndexRange(start4,end4);
		var c31 = startEnd3;
		var s41 = rs1.clone();
		s41.x -= 25;
		var arr4 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx12 = -0.25;
		var ry12 = 0.25;
		var sides12 = 47;
		if(sides12 == null) {
			sides12 = 36;
		}
		if(ry12 == null) {
			ry12 = 0;
		}
		if(rx12 == null) {
			rx12 = 0;
		}
		var start5 = this88.drawType.get_size();
		var drawType5 = this88.drawType;
		var x6 = s41.x;
		var y6 = s41.y;
		var radius5 = s41.radius;
		var len5;
		if((sides12 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx13 = rx12;
			var ry13 = ry12;
			var sides13 = sides12;
			var omega8 = 0.;
			if(omega8 == null) {
				omega8 = 0.;
			}
			if(sides13 == null) {
				sides13 = 36;
			}
			var pi13 = Math.PI;
			var theta29 = pi13 / 2 + omega8;
			var step16 = pi13 * 2 / sides13;
			var bx16;
			var by16;
			var cx16;
			var cy16;
			if(rx13 > 1.) {
				rx13 = 1;
			}
			if(rx13 < -1.) {
				rx13 = -1;
			}
			if(ry13 > 1.) {
				ry13 = 1;
			}
			if(ry13 < -1.) {
				ry13 = -1;
			}
			var mx8 = x6 + rx13 * radius5;
			var my8 = y6 - ry13 * radius5;
			var _g26 = 0;
			var _g116 = sides13;
			while(_g26 < _g116) {
				var i12 = _g26++;
				bx16 = x6 + radius5 * Math.sin(theta29);
				by16 = y6 + radius5 * Math.cos(theta29);
				theta29 += step16;
				cx16 = x6 + radius5 * Math.sin(theta29);
				cy16 = y6 + radius5 * Math.cos(theta29);
				drawType5.triangle(mx8,my8,0,bx16,by16,0,cx16,cy16,0);
				var m22 = trilateral2_Shaper.transformMatrix;
				if(m22 != null) {
					drawType5.transform(m22);
				}
				drawType5.next();
			}
			len5 = sides13;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides12 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx14 = rx12;
			var ry14 = ry12;
			var sides14 = sides12;
			var omega9 = 0.;
			if(omega9 == null) {
				omega9 = 0.;
			}
			if(sides14 == null) {
				sides14 = 36;
			}
			var pi14 = Math.PI;
			var theta30 = pi14 / 2;
			var step17 = pi14 * 2 / sides14;
			theta30 -= step17 / 2 + omega9;
			var bx17 = 0;
			var by17 = 0;
			var cx17 = 0;
			var cy17 = 0;
			if(rx14 > 1.) {
				rx14 = 1;
			}
			if(rx14 < -1.) {
				rx14 = -1;
			}
			if(ry14 > 1.) {
				ry14 = 1;
			}
			if(ry14 < -1.) {
				ry14 = -1;
			}
			var mx9 = x6 + rx14 * radius5;
			var my9 = y6 - ry14 * radius5;
			var dx8 = x6 + radius5 * Math.sin(theta30);
			var dy8 = y6 + radius5 * Math.cos(theta30);
			var _g27 = 0;
			var _g117 = sides14 - 1;
			while(_g27 < _g117) {
				var i13 = _g27++;
				bx17 = x6 + radius5 * Math.sin(theta30);
				by17 = y6 + radius5 * Math.cos(theta30);
				theta30 += step17;
				cx17 = x6 + radius5 * Math.sin(theta30);
				cy17 = y6 + radius5 * Math.cos(theta30);
				drawType5.triangle(mx9,my9,0,bx17,by17,0,cx17,cy17,0);
				var m23 = trilateral2_Shaper.transformMatrix;
				if(m23 != null) {
					drawType5.transform(m23);
				}
				drawType5.next();
			}
			drawType5.triangle(mx9,my9,0,cx17,cy17,0,dx8,dy8,0);
			var m24 = trilateral2_Shaper.transformMatrix;
			if(m24 != null) {
				drawType5.transform(m24);
			}
			drawType5.next();
			len5 = sides14;
		}
		var k4 = 1;
		var arrEnd4 = arr4.length - 1;
		var end5 = start5 + len5 - 1;
		var arr_4 = arr4.slice();
		var _g28 = 0;
		var _g118 = len5 - 1;
		while(_g28 < _g118) {
			var j4 = _g28++;
			this88.colorType.cornerColors(s41.color,arr_4[k4 - 1],arr_4[k4]);
			++k4;
			if(k4 > arrEnd4) {
				k4 = 1;
				arr_4.reverse();
			}
		}
		this88.colorType.cornerColors(s41.color,arr_4[k4 - 1],arr4[0]);
		var startEnd4 = new trilateral2_IndexRange(start5,end5);
		var c41 = startEnd4;
		var s51 = rs1.clone();
		s51.x += 25;
		var arr5 = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
		var rx15 = -0.25;
		var ry15 = 0.25;
		var sides15 = 47;
		if(sides15 == null) {
			sides15 = 36;
		}
		if(ry15 == null) {
			ry15 = 0;
		}
		if(rx15 == null) {
			rx15 = 0;
		}
		var start6 = this88.drawType.get_size();
		var drawType6 = this88.drawType;
		var x7 = s51.x;
		var y7 = s51.y;
		var radius6 = s51.radius;
		var len6;
		if((sides15 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx16 = rx15;
			var ry16 = ry15;
			var sides16 = sides15;
			var omega10 = 0.;
			if(omega10 == null) {
				omega10 = 0.;
			}
			if(sides16 == null) {
				sides16 = 36;
			}
			var pi15 = Math.PI;
			var theta31 = pi15 / 2 + omega10;
			var step18 = pi15 * 2 / sides16;
			var bx18;
			var by18;
			var cx18;
			var cy18;
			if(rx16 > 1.) {
				rx16 = 1;
			}
			if(rx16 < -1.) {
				rx16 = -1;
			}
			if(ry16 > 1.) {
				ry16 = 1;
			}
			if(ry16 < -1.) {
				ry16 = -1;
			}
			var mx10 = x7 + rx16 * radius6;
			var my10 = y7 - ry16 * radius6;
			var _g29 = 0;
			var _g119 = sides16;
			while(_g29 < _g119) {
				var i14 = _g29++;
				bx18 = x7 + radius6 * Math.sin(theta31);
				by18 = y7 + radius6 * Math.cos(theta31);
				theta31 += step18;
				cx18 = x7 + radius6 * Math.sin(theta31);
				cy18 = y7 + radius6 * Math.cos(theta31);
				drawType6.triangle(mx10,my10,0,bx18,by18,0,cx18,cy18,0);
				var m25 = trilateral2_Shaper.transformMatrix;
				if(m25 != null) {
					drawType6.transform(m25);
				}
				drawType6.next();
			}
			len6 = sides16;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides15 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx17 = rx15;
			var ry17 = ry15;
			var sides17 = sides15;
			var omega11 = 0.;
			if(omega11 == null) {
				omega11 = 0.;
			}
			if(sides17 == null) {
				sides17 = 36;
			}
			var pi16 = Math.PI;
			var theta32 = pi16 / 2;
			var step19 = pi16 * 2 / sides17;
			theta32 -= step19 / 2 + omega11;
			var bx19 = 0;
			var by19 = 0;
			var cx19 = 0;
			var cy19 = 0;
			if(rx17 > 1.) {
				rx17 = 1;
			}
			if(rx17 < -1.) {
				rx17 = -1;
			}
			if(ry17 > 1.) {
				ry17 = 1;
			}
			if(ry17 < -1.) {
				ry17 = -1;
			}
			var mx11 = x7 + rx17 * radius6;
			var my11 = y7 - ry17 * radius6;
			var dx9 = x7 + radius6 * Math.sin(theta32);
			var dy9 = y7 + radius6 * Math.cos(theta32);
			var _g30 = 0;
			var _g120 = sides17 - 1;
			while(_g30 < _g120) {
				var i15 = _g30++;
				bx19 = x7 + radius6 * Math.sin(theta32);
				by19 = y7 + radius6 * Math.cos(theta32);
				theta32 += step19;
				cx19 = x7 + radius6 * Math.sin(theta32);
				cy19 = y7 + radius6 * Math.cos(theta32);
				drawType6.triangle(mx11,my11,0,bx19,by19,0,cx19,cy19,0);
				var m26 = trilateral2_Shaper.transformMatrix;
				if(m26 != null) {
					drawType6.transform(m26);
				}
				drawType6.next();
			}
			drawType6.triangle(mx11,my11,0,cx19,cy19,0,dx9,dy9,0);
			var m27 = trilateral2_Shaper.transformMatrix;
			if(m27 != null) {
				drawType6.transform(m27);
			}
			drawType6.next();
			len6 = sides17;
		}
		var k5 = 1;
		var arrEnd5 = arr5.length - 1;
		var end6 = start6 + len6 - 1;
		var arr_5 = arr5.slice();
		var _g31 = 0;
		var _g121 = len6 - 1;
		while(_g31 < _g121) {
			var j5 = _g31++;
			this88.colorType.cornerColors(s51.color,arr_5[k5 - 1],arr_5[k5]);
			++k5;
			if(k5 > arrEnd5) {
				k5 = 1;
				arr_5.reverse();
			}
		}
		this88.colorType.cornerColors(s51.color,arr_5[k5 - 1],arr5[0]);
		var startEnd5 = new trilateral2_IndexRange(start6,end6);
		var c5 = startEnd5;
		var s111 = new trilateral2_IndexRange(c0.start,c5.end);
		var s23 = new trilateral2_IndexRange(s0.start,s111.end);
		this.spots.drawType.transformRange(trans_5,s23.start,s23.end);
		var s61 = s23;
		var this89 = this.spots;
		var rs2 = this.dieShape;
		var start7 = this89.drawType.get_size();
		var drawType7 = this89.drawType;
		var x8 = rs2.x - rs2.radius;
		var y8 = rs2.y - rs2.radius;
		var width1 = rs2.radius * 2;
		var height1 = rs2.radius * 2;
		var radius7 = this89.rounded;
		var pi17 = Math.PI;
		var pi_21 = Math.PI / 2;
		var ax4 = x8 + radius7;
		var ay4 = y8 + radius7;
		var bx20 = x8 + width1 - radius7;
		var by20 = y8 + radius7;
		var cx20 = bx20;
		var cy20 = y8 + height1 - radius7;
		var dx10 = ax4;
		var dy10 = cy20;
		var count1 = 0;
		var ax5 = ax4;
		var ay5 = y8;
		var bx21 = ax4 + (width1 - radius7 * 2);
		var by21 = ay5;
		var cx21 = bx21;
		var cy21 = ay5 + height1;
		var dx11 = ax4;
		var dy11 = cy21;
		drawType7.triangle(ax5,ay5,0,bx21,by21,0,dx11,dy11,0);
		var m28 = trilateral2_Shaper.transformMatrix;
		if(m28 != null) {
			drawType7.transform(m28);
		}
		drawType7.next();
		drawType7.triangle(bx21,by21,0,cx21,cy21,0,dx11,dy11,0);
		var m29 = trilateral2_Shaper.transformMatrix;
		if(m29 != null) {
			drawType7.transform(m29);
		}
		drawType7.next();
		count1 += 2;
		var dimY1 = height1 - 2 * radius7;
		var ax6 = x8;
		var ay6 = ay4;
		var bx22 = x8 + radius7;
		var by22 = ay6;
		var cx22 = bx22;
		var cy22 = ay6 + dimY1;
		var dx12 = x8;
		var dy12 = cy22;
		drawType7.triangle(ax6,ay6,0,bx22,by22,0,dx12,dy12,0);
		var m30 = trilateral2_Shaper.transformMatrix;
		if(m30 != null) {
			drawType7.transform(m30);
		}
		drawType7.next();
		drawType7.triangle(bx22,by22,0,cx22,cy22,0,dx12,dy12,0);
		var m31 = trilateral2_Shaper.transformMatrix;
		if(m31 != null) {
			drawType7.transform(m31);
		}
		drawType7.next();
		count1 += 2;
		var ax7 = bx20;
		var ay7 = by20;
		var bx23 = bx20 + radius7;
		var by23 = ay7;
		var cx23 = bx23;
		var cy23 = ay7 + dimY1;
		var dx13 = bx20;
		var dy13 = cy23;
		drawType7.triangle(ax7,ay7,0,bx23,by23,0,dx13,dy13,0);
		var m32 = trilateral2_Shaper.transformMatrix;
		if(m32 != null) {
			drawType7.transform(m32);
		}
		drawType7.next();
		drawType7.triangle(bx23,by23,0,cx23,cy23,0,dx13,dy13,0);
		var m33 = trilateral2_Shaper.transformMatrix;
		if(m33 != null) {
			drawType7.transform(m33);
		}
		drawType7.next();
		count1 += 2;
		var beta1 = -pi17;
		var gamma2 = -pi_21;
		var pi18 = Math.PI;
		var step20 = pi18 * 2 / 36;
		var dif20;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f32;
			if(beta1 >= 0 && beta1 > Math.PI) {
				f32 = beta1;
			} else {
				var a32 = beta1 % (2 * Math.PI);
				f32 = a32 >= 0 ? a32 : a32 + 2 * Math.PI;
			}
			var this90 = f32;
			var za16 = this90;
			var f33;
			if(gamma2 >= 0 && gamma2 > Math.PI) {
				f33 = gamma2;
			} else {
				var a33 = gamma2 % (2 * Math.PI);
				f33 = a33 >= 0 ? a33 : a33 + 2 * Math.PI;
			}
			var this91 = f33;
			var zb16 = this91;
			var fa16 = za16;
			var fb16 = zb16;
			var theta33 = Math.abs(fa16 - fb16);
			var clockwise16 = fa16 < fb16;
			var dif21 = clockwise16 ? theta33 : -theta33;
			dif20 = dif21 > 0 ? dif21 : 2 * Math.PI + dif21;
			break;
		case 1:
			var f34;
			if(beta1 >= 0 && beta1 > Math.PI) {
				f34 = beta1;
			} else {
				var a34 = beta1 % (2 * Math.PI);
				f34 = a34 >= 0 ? a34 : a34 + 2 * Math.PI;
			}
			var this92 = f34;
			var za17 = this92;
			var f35;
			if(gamma2 >= 0 && gamma2 > Math.PI) {
				f35 = gamma2;
			} else {
				var a35 = gamma2 % (2 * Math.PI);
				f35 = a35 >= 0 ? a35 : a35 + 2 * Math.PI;
			}
			var this93 = f35;
			var zb17 = this93;
			var fa17 = za17;
			var fb17 = zb17;
			var theta34 = Math.abs(fa17 - fb17);
			var clockwise17 = fa17 < fb17;
			var dif22 = clockwise17 ? theta34 : -theta34;
			dif20 = dif22 < 0 ? dif22 : -2 * Math.PI + dif22;
			break;
		case 2:
			var f36;
			if(beta1 >= 0 && beta1 > Math.PI) {
				f36 = beta1;
			} else {
				var a36 = beta1 % (2 * Math.PI);
				f36 = a36 >= 0 ? a36 : a36 + 2 * Math.PI;
			}
			var this94 = f36;
			var za18 = this94;
			var f37;
			if(gamma2 >= 0 && gamma2 > Math.PI) {
				f37 = gamma2;
			} else {
				var a37 = gamma2 % (2 * Math.PI);
				f37 = a37 >= 0 ? a37 : a37 + 2 * Math.PI;
			}
			var this95 = f37;
			var zb18 = this95;
			var fa18 = za18;
			var fb18 = zb18;
			var theta35 = Math.abs(fa18 - fb18);
			var smallest4 = theta35 <= Math.PI;
			var clockwise18 = fa18 < fb18;
			var dif23 = clockwise18 ? theta35 : -theta35;
			dif20 = smallest4 ? dif23 : clockwise18 ? -(2 * Math.PI - theta35) : 2 * Math.PI - theta35;
			break;
		case 3:
			var f38;
			if(beta1 >= 0 && beta1 > Math.PI) {
				f38 = beta1;
			} else {
				var a38 = beta1 % (2 * Math.PI);
				f38 = a38 >= 0 ? a38 : a38 + 2 * Math.PI;
			}
			var this96 = f38;
			var za19 = this96;
			var f39;
			if(gamma2 >= 0 && gamma2 > Math.PI) {
				f39 = gamma2;
			} else {
				var a39 = gamma2 % (2 * Math.PI);
				f39 = a39 >= 0 ? a39 : a39 + 2 * Math.PI;
			}
			var this97 = f39;
			var zb19 = this97;
			var fa19 = za19;
			var fb19 = zb19;
			var theta36 = Math.abs(fa19 - fb19);
			var largest4 = theta36 > Math.PI;
			var clockwise19 = fa19 < fb19;
			var dif24 = clockwise19 ? theta36 : -theta36;
			dif20 = largest4 ? dif24 : clockwise19 ? -(2 * Math.PI - theta36) : 2 * Math.PI - theta36;
			break;
		}
		var positive4 = dif20 >= 0;
		var totalSteps4 = Math.ceil(Math.abs(dif20) / step20);
		var step21 = dif20 / totalSteps4;
		var angle4 = beta1;
		var cx24;
		var cy24;
		var bx24 = 0;
		var by24 = 0;
		var _g32 = 0;
		var _g122 = totalSteps4 + 1;
		while(_g32 < _g122) {
			var i16 = _g32++;
			cx24 = ax4 + radius7 * Math.sin(angle4);
			cy24 = ay4 + radius7 * Math.cos(angle4);
			if(i16 != 0) {
				drawType7.triangle(ax4,ay4,0,bx24,by24,0,cx24,cy24,0);
				var m34 = trilateral2_Shaper.transformMatrix;
				if(m34 != null) {
					drawType7.transform(m34);
				}
				drawType7.next();
			}
			angle4 += step21;
			bx24 = cx24;
			by24 = cy24;
		}
		count1 += totalSteps4;
		var pi19 = Math.PI;
		var step22 = pi19 * 2 / 36;
		var dif25;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f40;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f40 = pi_21;
			} else {
				var a40 = pi_21 % (2 * Math.PI);
				f40 = a40 >= 0 ? a40 : a40 + 2 * Math.PI;
			}
			var this98 = f40;
			var za20 = this98;
			var f41;
			if(pi17 >= 0 && pi17 > Math.PI) {
				f41 = pi17;
			} else {
				var a41 = pi17 % (2 * Math.PI);
				f41 = a41 >= 0 ? a41 : a41 + 2 * Math.PI;
			}
			var this99 = f41;
			var zb20 = this99;
			var fa20 = za20;
			var fb20 = zb20;
			var theta37 = Math.abs(fa20 - fb20);
			var clockwise20 = fa20 < fb20;
			var dif26 = clockwise20 ? theta37 : -theta37;
			dif25 = dif26 > 0 ? dif26 : 2 * Math.PI + dif26;
			break;
		case 1:
			var f42;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f42 = pi_21;
			} else {
				var a42 = pi_21 % (2 * Math.PI);
				f42 = a42 >= 0 ? a42 : a42 + 2 * Math.PI;
			}
			var this100 = f42;
			var za21 = this100;
			var f43;
			if(pi17 >= 0 && pi17 > Math.PI) {
				f43 = pi17;
			} else {
				var a43 = pi17 % (2 * Math.PI);
				f43 = a43 >= 0 ? a43 : a43 + 2 * Math.PI;
			}
			var this101 = f43;
			var zb21 = this101;
			var fa21 = za21;
			var fb21 = zb21;
			var theta38 = Math.abs(fa21 - fb21);
			var clockwise21 = fa21 < fb21;
			var dif27 = clockwise21 ? theta38 : -theta38;
			dif25 = dif27 < 0 ? dif27 : -2 * Math.PI + dif27;
			break;
		case 2:
			var f44;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f44 = pi_21;
			} else {
				var a44 = pi_21 % (2 * Math.PI);
				f44 = a44 >= 0 ? a44 : a44 + 2 * Math.PI;
			}
			var this102 = f44;
			var za22 = this102;
			var f45;
			if(pi17 >= 0 && pi17 > Math.PI) {
				f45 = pi17;
			} else {
				var a45 = pi17 % (2 * Math.PI);
				f45 = a45 >= 0 ? a45 : a45 + 2 * Math.PI;
			}
			var this103 = f45;
			var zb22 = this103;
			var fa22 = za22;
			var fb22 = zb22;
			var theta39 = Math.abs(fa22 - fb22);
			var smallest5 = theta39 <= Math.PI;
			var clockwise22 = fa22 < fb22;
			var dif28 = clockwise22 ? theta39 : -theta39;
			dif25 = smallest5 ? dif28 : clockwise22 ? -(2 * Math.PI - theta39) : 2 * Math.PI - theta39;
			break;
		case 3:
			var f46;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f46 = pi_21;
			} else {
				var a46 = pi_21 % (2 * Math.PI);
				f46 = a46 >= 0 ? a46 : a46 + 2 * Math.PI;
			}
			var this104 = f46;
			var za23 = this104;
			var f47;
			if(pi17 >= 0 && pi17 > Math.PI) {
				f47 = pi17;
			} else {
				var a47 = pi17 % (2 * Math.PI);
				f47 = a47 >= 0 ? a47 : a47 + 2 * Math.PI;
			}
			var this105 = f47;
			var zb23 = this105;
			var fa23 = za23;
			var fb23 = zb23;
			var theta40 = Math.abs(fa23 - fb23);
			var largest5 = theta40 > Math.PI;
			var clockwise23 = fa23 < fb23;
			var dif29 = clockwise23 ? theta40 : -theta40;
			dif25 = largest5 ? dif29 : clockwise23 ? -(2 * Math.PI - theta40) : 2 * Math.PI - theta40;
			break;
		}
		var positive5 = dif25 >= 0;
		var totalSteps5 = Math.ceil(Math.abs(dif25) / step22);
		var step23 = dif25 / totalSteps5;
		var angle5 = pi_21;
		var cx25;
		var cy25;
		var bx25 = 0;
		var by25 = 0;
		var _g33 = 0;
		var _g123 = totalSteps5 + 1;
		while(_g33 < _g123) {
			var i17 = _g33++;
			cx25 = bx20 + radius7 * Math.sin(angle5);
			cy25 = by20 + radius7 * Math.cos(angle5);
			if(i17 != 0) {
				drawType7.triangle(bx20,by20,0,bx25,by25,0,cx25,cy25,0);
				var m35 = trilateral2_Shaper.transformMatrix;
				if(m35 != null) {
					drawType7.transform(m35);
				}
				drawType7.next();
			}
			angle5 += step23;
			bx25 = cx25;
			by25 = cy25;
		}
		count1 += totalSteps5;
		var pi20 = Math.PI;
		var step24 = pi20 * 2 / 36;
		var dif30;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f48;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f48 = pi_21;
			} else {
				var a48 = pi_21 % (2 * Math.PI);
				f48 = a48 >= 0 ? a48 : a48 + 2 * Math.PI;
			}
			var this106 = f48;
			var za24 = this106;
			var f49;
			if(0 > Math.PI) {
				f49 = 0;
			} else {
				var a49 = 0 % (2 * Math.PI);
				f49 = a49 >= 0 ? a49 : a49 + 2 * Math.PI;
			}
			var this107 = f49;
			var zb24 = this107;
			var fa24 = za24;
			var fb24 = zb24;
			var theta41 = Math.abs(fa24 - fb24);
			var clockwise24 = fa24 < fb24;
			var dif31 = clockwise24 ? theta41 : -theta41;
			dif30 = dif31 > 0 ? dif31 : 2 * Math.PI + dif31;
			break;
		case 1:
			var f50;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f50 = pi_21;
			} else {
				var a50 = pi_21 % (2 * Math.PI);
				f50 = a50 >= 0 ? a50 : a50 + 2 * Math.PI;
			}
			var this108 = f50;
			var za25 = this108;
			var f51;
			if(0 > Math.PI) {
				f51 = 0;
			} else {
				var a51 = 0 % (2 * Math.PI);
				f51 = a51 >= 0 ? a51 : a51 + 2 * Math.PI;
			}
			var this109 = f51;
			var zb25 = this109;
			var fa25 = za25;
			var fb25 = zb25;
			var theta42 = Math.abs(fa25 - fb25);
			var clockwise25 = fa25 < fb25;
			var dif32 = clockwise25 ? theta42 : -theta42;
			dif30 = dif32 < 0 ? dif32 : -2 * Math.PI + dif32;
			break;
		case 2:
			var f52;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f52 = pi_21;
			} else {
				var a52 = pi_21 % (2 * Math.PI);
				f52 = a52 >= 0 ? a52 : a52 + 2 * Math.PI;
			}
			var this110 = f52;
			var za26 = this110;
			var f53;
			if(0 > Math.PI) {
				f53 = 0;
			} else {
				var a53 = 0 % (2 * Math.PI);
				f53 = a53 >= 0 ? a53 : a53 + 2 * Math.PI;
			}
			var this111 = f53;
			var zb26 = this111;
			var fa26 = za26;
			var fb26 = zb26;
			var theta43 = Math.abs(fa26 - fb26);
			var smallest6 = theta43 <= Math.PI;
			var clockwise26 = fa26 < fb26;
			var dif33 = clockwise26 ? theta43 : -theta43;
			dif30 = smallest6 ? dif33 : clockwise26 ? -(2 * Math.PI - theta43) : 2 * Math.PI - theta43;
			break;
		case 3:
			var f54;
			if(pi_21 >= 0 && pi_21 > Math.PI) {
				f54 = pi_21;
			} else {
				var a54 = pi_21 % (2 * Math.PI);
				f54 = a54 >= 0 ? a54 : a54 + 2 * Math.PI;
			}
			var this112 = f54;
			var za27 = this112;
			var f55;
			if(0 > Math.PI) {
				f55 = 0;
			} else {
				var a55 = 0 % (2 * Math.PI);
				f55 = a55 >= 0 ? a55 : a55 + 2 * Math.PI;
			}
			var this113 = f55;
			var zb27 = this113;
			var fa27 = za27;
			var fb27 = zb27;
			var theta44 = Math.abs(fa27 - fb27);
			var largest6 = theta44 > Math.PI;
			var clockwise27 = fa27 < fb27;
			var dif34 = clockwise27 ? theta44 : -theta44;
			dif30 = largest6 ? dif34 : clockwise27 ? -(2 * Math.PI - theta44) : 2 * Math.PI - theta44;
			break;
		}
		var positive6 = dif30 >= 0;
		var totalSteps6 = Math.ceil(Math.abs(dif30) / step24);
		var step25 = dif30 / totalSteps6;
		var angle6 = pi_21;
		var cx26;
		var cy26;
		var bx26 = 0;
		var by26 = 0;
		var _g34 = 0;
		var _g124 = totalSteps6 + 1;
		while(_g34 < _g124) {
			var i18 = _g34++;
			cx26 = cx20 + radius7 * Math.sin(angle6);
			cy26 = cy20 + radius7 * Math.cos(angle6);
			if(i18 != 0) {
				drawType7.triangle(cx20,cy20,0,bx26,by26,0,cx26,cy26,0);
				var m36 = trilateral2_Shaper.transformMatrix;
				if(m36 != null) {
					drawType7.transform(m36);
				}
				drawType7.next();
			}
			angle6 += step25;
			bx26 = cx26;
			by26 = cy26;
		}
		count1 += totalSteps6;
		var gamma3 = -pi_21;
		var pi21 = Math.PI;
		var step26 = pi21 * 2 / 36;
		var dif35;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f56;
			if(0 > Math.PI) {
				f56 = 0;
			} else {
				var a56 = 0 % (2 * Math.PI);
				f56 = a56 >= 0 ? a56 : a56 + 2 * Math.PI;
			}
			var this114 = f56;
			var za28 = this114;
			var f57;
			if(gamma3 >= 0 && gamma3 > Math.PI) {
				f57 = gamma3;
			} else {
				var a57 = gamma3 % (2 * Math.PI);
				f57 = a57 >= 0 ? a57 : a57 + 2 * Math.PI;
			}
			var this115 = f57;
			var zb28 = this115;
			var fa28 = za28;
			var fb28 = zb28;
			var theta45 = Math.abs(fa28 - fb28);
			var clockwise28 = fa28 < fb28;
			var dif36 = clockwise28 ? theta45 : -theta45;
			dif35 = dif36 > 0 ? dif36 : 2 * Math.PI + dif36;
			break;
		case 1:
			var f58;
			if(0 > Math.PI) {
				f58 = 0;
			} else {
				var a58 = 0 % (2 * Math.PI);
				f58 = a58 >= 0 ? a58 : a58 + 2 * Math.PI;
			}
			var this116 = f58;
			var za29 = this116;
			var f59;
			if(gamma3 >= 0 && gamma3 > Math.PI) {
				f59 = gamma3;
			} else {
				var a59 = gamma3 % (2 * Math.PI);
				f59 = a59 >= 0 ? a59 : a59 + 2 * Math.PI;
			}
			var this117 = f59;
			var zb29 = this117;
			var fa29 = za29;
			var fb29 = zb29;
			var theta46 = Math.abs(fa29 - fb29);
			var clockwise29 = fa29 < fb29;
			var dif37 = clockwise29 ? theta46 : -theta46;
			dif35 = dif37 < 0 ? dif37 : -2 * Math.PI + dif37;
			break;
		case 2:
			var f60;
			if(0 > Math.PI) {
				f60 = 0;
			} else {
				var a60 = 0 % (2 * Math.PI);
				f60 = a60 >= 0 ? a60 : a60 + 2 * Math.PI;
			}
			var this118 = f60;
			var za30 = this118;
			var f61;
			if(gamma3 >= 0 && gamma3 > Math.PI) {
				f61 = gamma3;
			} else {
				var a61 = gamma3 % (2 * Math.PI);
				f61 = a61 >= 0 ? a61 : a61 + 2 * Math.PI;
			}
			var this119 = f61;
			var zb30 = this119;
			var fa30 = za30;
			var fb30 = zb30;
			var theta47 = Math.abs(fa30 - fb30);
			var smallest7 = theta47 <= Math.PI;
			var clockwise30 = fa30 < fb30;
			var dif38 = clockwise30 ? theta47 : -theta47;
			dif35 = smallest7 ? dif38 : clockwise30 ? -(2 * Math.PI - theta47) : 2 * Math.PI - theta47;
			break;
		case 3:
			var f62;
			if(0 > Math.PI) {
				f62 = 0;
			} else {
				var a62 = 0 % (2 * Math.PI);
				f62 = a62 >= 0 ? a62 : a62 + 2 * Math.PI;
			}
			var this120 = f62;
			var za31 = this120;
			var f63;
			if(gamma3 >= 0 && gamma3 > Math.PI) {
				f63 = gamma3;
			} else {
				var a63 = gamma3 % (2 * Math.PI);
				f63 = a63 >= 0 ? a63 : a63 + 2 * Math.PI;
			}
			var this121 = f63;
			var zb31 = this121;
			var fa31 = za31;
			var fb31 = zb31;
			var theta48 = Math.abs(fa31 - fb31);
			var largest7 = theta48 > Math.PI;
			var clockwise31 = fa31 < fb31;
			var dif39 = clockwise31 ? theta48 : -theta48;
			dif35 = largest7 ? dif39 : clockwise31 ? -(2 * Math.PI - theta48) : 2 * Math.PI - theta48;
			break;
		}
		var positive7 = dif35 >= 0;
		var totalSteps7 = Math.ceil(Math.abs(dif35) / step26);
		var step27 = dif35 / totalSteps7;
		var angle7 = 0;
		var cx27;
		var cy27;
		var bx27 = 0;
		var by27 = 0;
		var _g35 = 0;
		var _g125 = totalSteps7 + 1;
		while(_g35 < _g125) {
			var i19 = _g35++;
			cx27 = dx10 + radius7 * Math.sin(angle7);
			cy27 = dy10 + radius7 * Math.cos(angle7);
			if(i19 != 0) {
				drawType7.triangle(dx10,dy10,0,bx27,by27,0,cx27,cy27,0);
				var m37 = trilateral2_Shaper.transformMatrix;
				if(m37 != null) {
					drawType7.transform(m37);
				}
				drawType7.next();
			}
			angle7 += step27;
			bx27 = cx27;
			by27 = cy27;
		}
		var len7 = count1 += totalSteps7;
		var color1 = rs2.color;
		if(color1 == -1) {
			color1 = this89.currentColor;
		}
		this89.colorType.colorTriangles(color1,len7);
		var end7 = start7 + len7 - 1;
		var s02 = new trilateral2_IndexRange(start7,end7);
		var this122 = this.spots;
		var this123 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this124 = this123;
		var this125 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this122.dz / 2);
		var s24 = this125;
		var this126 = new geom_structure_Mat4x3(this124.a * s24.a + this124.b * s24.e + this124.c * s24.i,this124.a * s24.b + this124.b * s24.f + this124.c * s24.j,this124.a * s24.c + this124.b * s24.g + this124.c * s24.k,this124.a * s24.d + this124.b * s24.h + this124.c * s24.l + this124.d,this124.e * s24.a + this124.f * s24.e + this124.g * s24.i,this124.e * s24.b + this124.f * s24.f + this124.g * s24.j,this124.e * s24.c + this124.f * s24.g + this124.g * s24.k,this124.e * s24.d + this124.f * s24.h + this124.g * s24.l + this124.h,this124.i * s24.a + this124.j * s24.e + this124.k * s24.i,this124.i * s24.b + this124.j * s24.f + this124.k * s24.j,this124.i * s24.c + this124.j * s24.g + this124.k * s24.k,this124.i * s24.d + this124.j * s24.h + this124.k * s24.l + this124.l);
		var trans1 = this126;
		this122.drawType.transformRange(trans1,s02.start,s02.end);
		var this127 = this.spots;
		var rs3 = this.spotShape;
		var s03 = rs3.clone();
		s03.x += 20;
		s03.y -= 20;
		var start8 = this127.drawType.get_size();
		var drawType8 = this127.drawType;
		var ax8 = s03.x;
		var ay8 = s03.y;
		var radius8 = s03.radius;
		var sides18 = 36;
		if(sides18 == null) {
			sides18 = 36;
		}
		var pi22 = Math.PI;
		var theta49 = pi22 / 2;
		var step28 = pi22 * 2 / sides18;
		var bx28;
		var by28;
		var cx28;
		var cy28;
		var _g36 = 0;
		var _g126 = sides18;
		while(_g36 < _g126) {
			var i20 = _g36++;
			bx28 = ax8 + radius8 * Math.sin(theta49);
			by28 = ay8 + radius8 * Math.cos(theta49);
			theta49 += step28;
			cx28 = ax8 + radius8 * Math.sin(theta49);
			cy28 = ay8 + radius8 * Math.cos(theta49);
			drawType8.triangle(ax8,ay8,0,bx28,by28,0,cx28,cy28,0);
			var m38 = trilateral2_Shaper.transformMatrix;
			if(m38 != null) {
				drawType8.transform(m38);
			}
			drawType8.next();
		}
		var len8 = sides18;
		var color2 = s03.color;
		if(color2 == -1) {
			color2 = this127.currentColor;
		}
		this127.colorType.colorTriangles(color2,len8);
		var end8 = start8 + len8 - 1;
		var startEnd6 = new trilateral2_IndexRange(start8,end8);
		var c01 = startEnd6;
		var s112 = rs3.clone();
		s112.x -= 20;
		s112.y += 20;
		var start9 = this127.drawType.get_size();
		var drawType9 = this127.drawType;
		var ax9 = s112.x;
		var ay9 = s112.y;
		var radius9 = s112.radius;
		var sides19 = 36;
		if(sides19 == null) {
			sides19 = 36;
		}
		var pi23 = Math.PI;
		var theta50 = pi23 / 2;
		var step29 = pi23 * 2 / sides19;
		var bx29;
		var by29;
		var cx29;
		var cy29;
		var _g37 = 0;
		var _g127 = sides19;
		while(_g37 < _g127) {
			var i21 = _g37++;
			bx29 = ax9 + radius9 * Math.sin(theta50);
			by29 = ay9 + radius9 * Math.cos(theta50);
			theta50 += step29;
			cx29 = ax9 + radius9 * Math.sin(theta50);
			cy29 = ay9 + radius9 * Math.cos(theta50);
			drawType9.triangle(ax9,ay9,0,bx29,by29,0,cx29,cy29,0);
			var m39 = trilateral2_Shaper.transformMatrix;
			if(m39 != null) {
				drawType9.transform(m39);
			}
			drawType9.next();
		}
		var len9 = sides19;
		var color3 = s112.color;
		if(color3 == -1) {
			color3 = this127.currentColor;
		}
		this127.colorType.colorTriangles(color3,len9);
		var end9 = start9 + len9 - 1;
		var startEnd7 = new trilateral2_IndexRange(start9,end9);
		var c12 = startEnd7;
		var s113 = new trilateral2_IndexRange(c01.start,c12.end);
		var s25 = new trilateral2_IndexRange(s02.start,s113.end);
		this.spots.drawType.transformRange(trans_1,s25.start,s25.end);
		var s26 = s25;
		var this128 = this.spots;
		var rs4 = this.dieShape;
		var start10 = this128.drawType.get_size();
		var drawType10 = this128.drawType;
		var x9 = rs4.x - rs4.radius;
		var y9 = rs4.y - rs4.radius;
		var width2 = rs4.radius * 2;
		var height2 = rs4.radius * 2;
		var radius10 = this128.rounded;
		var pi24 = Math.PI;
		var pi_22 = Math.PI / 2;
		var ax10 = x9 + radius10;
		var ay10 = y9 + radius10;
		var bx30 = x9 + width2 - radius10;
		var by30 = y9 + radius10;
		var cx30 = bx30;
		var cy30 = y9 + height2 - radius10;
		var dx14 = ax10;
		var dy14 = cy30;
		var count2 = 0;
		var ax11 = ax10;
		var ay11 = y9;
		var bx31 = ax10 + (width2 - radius10 * 2);
		var by31 = ay11;
		var cx31 = bx31;
		var cy31 = ay11 + height2;
		var dx15 = ax10;
		var dy15 = cy31;
		drawType10.triangle(ax11,ay11,0,bx31,by31,0,dx15,dy15,0);
		var m40 = trilateral2_Shaper.transformMatrix;
		if(m40 != null) {
			drawType10.transform(m40);
		}
		drawType10.next();
		drawType10.triangle(bx31,by31,0,cx31,cy31,0,dx15,dy15,0);
		var m41 = trilateral2_Shaper.transformMatrix;
		if(m41 != null) {
			drawType10.transform(m41);
		}
		drawType10.next();
		count2 += 2;
		var dimY2 = height2 - 2 * radius10;
		var ax12 = x9;
		var ay12 = ay10;
		var bx32 = x9 + radius10;
		var by32 = ay12;
		var cx32 = bx32;
		var cy32 = ay12 + dimY2;
		var dx16 = x9;
		var dy16 = cy32;
		drawType10.triangle(ax12,ay12,0,bx32,by32,0,dx16,dy16,0);
		var m42 = trilateral2_Shaper.transformMatrix;
		if(m42 != null) {
			drawType10.transform(m42);
		}
		drawType10.next();
		drawType10.triangle(bx32,by32,0,cx32,cy32,0,dx16,dy16,0);
		var m43 = trilateral2_Shaper.transformMatrix;
		if(m43 != null) {
			drawType10.transform(m43);
		}
		drawType10.next();
		count2 += 2;
		var ax13 = bx30;
		var ay13 = by30;
		var bx33 = bx30 + radius10;
		var by33 = ay13;
		var cx33 = bx33;
		var cy33 = ay13 + dimY2;
		var dx17 = bx30;
		var dy17 = cy33;
		drawType10.triangle(ax13,ay13,0,bx33,by33,0,dx17,dy17,0);
		var m44 = trilateral2_Shaper.transformMatrix;
		if(m44 != null) {
			drawType10.transform(m44);
		}
		drawType10.next();
		drawType10.triangle(bx33,by33,0,cx33,cy33,0,dx17,dy17,0);
		var m45 = trilateral2_Shaper.transformMatrix;
		if(m45 != null) {
			drawType10.transform(m45);
		}
		drawType10.next();
		count2 += 2;
		var beta2 = -pi24;
		var gamma4 = -pi_22;
		var pi25 = Math.PI;
		var step30 = pi25 * 2 / 36;
		var dif40;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f64;
			if(beta2 >= 0 && beta2 > Math.PI) {
				f64 = beta2;
			} else {
				var a64 = beta2 % (2 * Math.PI);
				f64 = a64 >= 0 ? a64 : a64 + 2 * Math.PI;
			}
			var this129 = f64;
			var za32 = this129;
			var f65;
			if(gamma4 >= 0 && gamma4 > Math.PI) {
				f65 = gamma4;
			} else {
				var a65 = gamma4 % (2 * Math.PI);
				f65 = a65 >= 0 ? a65 : a65 + 2 * Math.PI;
			}
			var this130 = f65;
			var zb32 = this130;
			var fa32 = za32;
			var fb32 = zb32;
			var theta51 = Math.abs(fa32 - fb32);
			var clockwise32 = fa32 < fb32;
			var dif41 = clockwise32 ? theta51 : -theta51;
			dif40 = dif41 > 0 ? dif41 : 2 * Math.PI + dif41;
			break;
		case 1:
			var f66;
			if(beta2 >= 0 && beta2 > Math.PI) {
				f66 = beta2;
			} else {
				var a66 = beta2 % (2 * Math.PI);
				f66 = a66 >= 0 ? a66 : a66 + 2 * Math.PI;
			}
			var this131 = f66;
			var za33 = this131;
			var f67;
			if(gamma4 >= 0 && gamma4 > Math.PI) {
				f67 = gamma4;
			} else {
				var a67 = gamma4 % (2 * Math.PI);
				f67 = a67 >= 0 ? a67 : a67 + 2 * Math.PI;
			}
			var this132 = f67;
			var zb33 = this132;
			var fa33 = za33;
			var fb33 = zb33;
			var theta52 = Math.abs(fa33 - fb33);
			var clockwise33 = fa33 < fb33;
			var dif42 = clockwise33 ? theta52 : -theta52;
			dif40 = dif42 < 0 ? dif42 : -2 * Math.PI + dif42;
			break;
		case 2:
			var f68;
			if(beta2 >= 0 && beta2 > Math.PI) {
				f68 = beta2;
			} else {
				var a68 = beta2 % (2 * Math.PI);
				f68 = a68 >= 0 ? a68 : a68 + 2 * Math.PI;
			}
			var this133 = f68;
			var za34 = this133;
			var f69;
			if(gamma4 >= 0 && gamma4 > Math.PI) {
				f69 = gamma4;
			} else {
				var a69 = gamma4 % (2 * Math.PI);
				f69 = a69 >= 0 ? a69 : a69 + 2 * Math.PI;
			}
			var this134 = f69;
			var zb34 = this134;
			var fa34 = za34;
			var fb34 = zb34;
			var theta53 = Math.abs(fa34 - fb34);
			var smallest8 = theta53 <= Math.PI;
			var clockwise34 = fa34 < fb34;
			var dif43 = clockwise34 ? theta53 : -theta53;
			dif40 = smallest8 ? dif43 : clockwise34 ? -(2 * Math.PI - theta53) : 2 * Math.PI - theta53;
			break;
		case 3:
			var f70;
			if(beta2 >= 0 && beta2 > Math.PI) {
				f70 = beta2;
			} else {
				var a70 = beta2 % (2 * Math.PI);
				f70 = a70 >= 0 ? a70 : a70 + 2 * Math.PI;
			}
			var this135 = f70;
			var za35 = this135;
			var f71;
			if(gamma4 >= 0 && gamma4 > Math.PI) {
				f71 = gamma4;
			} else {
				var a71 = gamma4 % (2 * Math.PI);
				f71 = a71 >= 0 ? a71 : a71 + 2 * Math.PI;
			}
			var this136 = f71;
			var zb35 = this136;
			var fa35 = za35;
			var fb35 = zb35;
			var theta54 = Math.abs(fa35 - fb35);
			var largest8 = theta54 > Math.PI;
			var clockwise35 = fa35 < fb35;
			var dif44 = clockwise35 ? theta54 : -theta54;
			dif40 = largest8 ? dif44 : clockwise35 ? -(2 * Math.PI - theta54) : 2 * Math.PI - theta54;
			break;
		}
		var positive8 = dif40 >= 0;
		var totalSteps8 = Math.ceil(Math.abs(dif40) / step30);
		var step31 = dif40 / totalSteps8;
		var angle8 = beta2;
		var cx34;
		var cy34;
		var bx34 = 0;
		var by34 = 0;
		var _g38 = 0;
		var _g128 = totalSteps8 + 1;
		while(_g38 < _g128) {
			var i22 = _g38++;
			cx34 = ax10 + radius10 * Math.sin(angle8);
			cy34 = ay10 + radius10 * Math.cos(angle8);
			if(i22 != 0) {
				drawType10.triangle(ax10,ay10,0,bx34,by34,0,cx34,cy34,0);
				var m46 = trilateral2_Shaper.transformMatrix;
				if(m46 != null) {
					drawType10.transform(m46);
				}
				drawType10.next();
			}
			angle8 += step31;
			bx34 = cx34;
			by34 = cy34;
		}
		count2 += totalSteps8;
		var pi26 = Math.PI;
		var step32 = pi26 * 2 / 36;
		var dif45;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f72;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f72 = pi_22;
			} else {
				var a72 = pi_22 % (2 * Math.PI);
				f72 = a72 >= 0 ? a72 : a72 + 2 * Math.PI;
			}
			var this137 = f72;
			var za36 = this137;
			var f73;
			if(pi24 >= 0 && pi24 > Math.PI) {
				f73 = pi24;
			} else {
				var a73 = pi24 % (2 * Math.PI);
				f73 = a73 >= 0 ? a73 : a73 + 2 * Math.PI;
			}
			var this138 = f73;
			var zb36 = this138;
			var fa36 = za36;
			var fb36 = zb36;
			var theta55 = Math.abs(fa36 - fb36);
			var clockwise36 = fa36 < fb36;
			var dif46 = clockwise36 ? theta55 : -theta55;
			dif45 = dif46 > 0 ? dif46 : 2 * Math.PI + dif46;
			break;
		case 1:
			var f74;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f74 = pi_22;
			} else {
				var a74 = pi_22 % (2 * Math.PI);
				f74 = a74 >= 0 ? a74 : a74 + 2 * Math.PI;
			}
			var this139 = f74;
			var za37 = this139;
			var f75;
			if(pi24 >= 0 && pi24 > Math.PI) {
				f75 = pi24;
			} else {
				var a75 = pi24 % (2 * Math.PI);
				f75 = a75 >= 0 ? a75 : a75 + 2 * Math.PI;
			}
			var this140 = f75;
			var zb37 = this140;
			var fa37 = za37;
			var fb37 = zb37;
			var theta56 = Math.abs(fa37 - fb37);
			var clockwise37 = fa37 < fb37;
			var dif47 = clockwise37 ? theta56 : -theta56;
			dif45 = dif47 < 0 ? dif47 : -2 * Math.PI + dif47;
			break;
		case 2:
			var f76;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f76 = pi_22;
			} else {
				var a76 = pi_22 % (2 * Math.PI);
				f76 = a76 >= 0 ? a76 : a76 + 2 * Math.PI;
			}
			var this141 = f76;
			var za38 = this141;
			var f77;
			if(pi24 >= 0 && pi24 > Math.PI) {
				f77 = pi24;
			} else {
				var a77 = pi24 % (2 * Math.PI);
				f77 = a77 >= 0 ? a77 : a77 + 2 * Math.PI;
			}
			var this142 = f77;
			var zb38 = this142;
			var fa38 = za38;
			var fb38 = zb38;
			var theta57 = Math.abs(fa38 - fb38);
			var smallest9 = theta57 <= Math.PI;
			var clockwise38 = fa38 < fb38;
			var dif48 = clockwise38 ? theta57 : -theta57;
			dif45 = smallest9 ? dif48 : clockwise38 ? -(2 * Math.PI - theta57) : 2 * Math.PI - theta57;
			break;
		case 3:
			var f78;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f78 = pi_22;
			} else {
				var a78 = pi_22 % (2 * Math.PI);
				f78 = a78 >= 0 ? a78 : a78 + 2 * Math.PI;
			}
			var this143 = f78;
			var za39 = this143;
			var f79;
			if(pi24 >= 0 && pi24 > Math.PI) {
				f79 = pi24;
			} else {
				var a79 = pi24 % (2 * Math.PI);
				f79 = a79 >= 0 ? a79 : a79 + 2 * Math.PI;
			}
			var this144 = f79;
			var zb39 = this144;
			var fa39 = za39;
			var fb39 = zb39;
			var theta58 = Math.abs(fa39 - fb39);
			var largest9 = theta58 > Math.PI;
			var clockwise39 = fa39 < fb39;
			var dif49 = clockwise39 ? theta58 : -theta58;
			dif45 = largest9 ? dif49 : clockwise39 ? -(2 * Math.PI - theta58) : 2 * Math.PI - theta58;
			break;
		}
		var positive9 = dif45 >= 0;
		var totalSteps9 = Math.ceil(Math.abs(dif45) / step32);
		var step33 = dif45 / totalSteps9;
		var angle9 = pi_22;
		var cx35;
		var cy35;
		var bx35 = 0;
		var by35 = 0;
		var _g39 = 0;
		var _g129 = totalSteps9 + 1;
		while(_g39 < _g129) {
			var i23 = _g39++;
			cx35 = bx30 + radius10 * Math.sin(angle9);
			cy35 = by30 + radius10 * Math.cos(angle9);
			if(i23 != 0) {
				drawType10.triangle(bx30,by30,0,bx35,by35,0,cx35,cy35,0);
				var m47 = trilateral2_Shaper.transformMatrix;
				if(m47 != null) {
					drawType10.transform(m47);
				}
				drawType10.next();
			}
			angle9 += step33;
			bx35 = cx35;
			by35 = cy35;
		}
		count2 += totalSteps9;
		var pi27 = Math.PI;
		var step34 = pi27 * 2 / 36;
		var dif50;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f80;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f80 = pi_22;
			} else {
				var a80 = pi_22 % (2 * Math.PI);
				f80 = a80 >= 0 ? a80 : a80 + 2 * Math.PI;
			}
			var this145 = f80;
			var za40 = this145;
			var f81;
			if(0 > Math.PI) {
				f81 = 0;
			} else {
				var a81 = 0 % (2 * Math.PI);
				f81 = a81 >= 0 ? a81 : a81 + 2 * Math.PI;
			}
			var this146 = f81;
			var zb40 = this146;
			var fa40 = za40;
			var fb40 = zb40;
			var theta59 = Math.abs(fa40 - fb40);
			var clockwise40 = fa40 < fb40;
			var dif51 = clockwise40 ? theta59 : -theta59;
			dif50 = dif51 > 0 ? dif51 : 2 * Math.PI + dif51;
			break;
		case 1:
			var f82;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f82 = pi_22;
			} else {
				var a82 = pi_22 % (2 * Math.PI);
				f82 = a82 >= 0 ? a82 : a82 + 2 * Math.PI;
			}
			var this147 = f82;
			var za41 = this147;
			var f83;
			if(0 > Math.PI) {
				f83 = 0;
			} else {
				var a83 = 0 % (2 * Math.PI);
				f83 = a83 >= 0 ? a83 : a83 + 2 * Math.PI;
			}
			var this148 = f83;
			var zb41 = this148;
			var fa41 = za41;
			var fb41 = zb41;
			var theta60 = Math.abs(fa41 - fb41);
			var clockwise41 = fa41 < fb41;
			var dif52 = clockwise41 ? theta60 : -theta60;
			dif50 = dif52 < 0 ? dif52 : -2 * Math.PI + dif52;
			break;
		case 2:
			var f84;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f84 = pi_22;
			} else {
				var a84 = pi_22 % (2 * Math.PI);
				f84 = a84 >= 0 ? a84 : a84 + 2 * Math.PI;
			}
			var this149 = f84;
			var za42 = this149;
			var f85;
			if(0 > Math.PI) {
				f85 = 0;
			} else {
				var a85 = 0 % (2 * Math.PI);
				f85 = a85 >= 0 ? a85 : a85 + 2 * Math.PI;
			}
			var this150 = f85;
			var zb42 = this150;
			var fa42 = za42;
			var fb42 = zb42;
			var theta61 = Math.abs(fa42 - fb42);
			var smallest10 = theta61 <= Math.PI;
			var clockwise42 = fa42 < fb42;
			var dif53 = clockwise42 ? theta61 : -theta61;
			dif50 = smallest10 ? dif53 : clockwise42 ? -(2 * Math.PI - theta61) : 2 * Math.PI - theta61;
			break;
		case 3:
			var f86;
			if(pi_22 >= 0 && pi_22 > Math.PI) {
				f86 = pi_22;
			} else {
				var a86 = pi_22 % (2 * Math.PI);
				f86 = a86 >= 0 ? a86 : a86 + 2 * Math.PI;
			}
			var this151 = f86;
			var za43 = this151;
			var f87;
			if(0 > Math.PI) {
				f87 = 0;
			} else {
				var a87 = 0 % (2 * Math.PI);
				f87 = a87 >= 0 ? a87 : a87 + 2 * Math.PI;
			}
			var this152 = f87;
			var zb43 = this152;
			var fa43 = za43;
			var fb43 = zb43;
			var theta62 = Math.abs(fa43 - fb43);
			var largest10 = theta62 > Math.PI;
			var clockwise43 = fa43 < fb43;
			var dif54 = clockwise43 ? theta62 : -theta62;
			dif50 = largest10 ? dif54 : clockwise43 ? -(2 * Math.PI - theta62) : 2 * Math.PI - theta62;
			break;
		}
		var positive10 = dif50 >= 0;
		var totalSteps10 = Math.ceil(Math.abs(dif50) / step34);
		var step35 = dif50 / totalSteps10;
		var angle10 = pi_22;
		var cx36;
		var cy36;
		var bx36 = 0;
		var by36 = 0;
		var _g40 = 0;
		var _g130 = totalSteps10 + 1;
		while(_g40 < _g130) {
			var i24 = _g40++;
			cx36 = cx30 + radius10 * Math.sin(angle10);
			cy36 = cy30 + radius10 * Math.cos(angle10);
			if(i24 != 0) {
				drawType10.triangle(cx30,cy30,0,bx36,by36,0,cx36,cy36,0);
				var m48 = trilateral2_Shaper.transformMatrix;
				if(m48 != null) {
					drawType10.transform(m48);
				}
				drawType10.next();
			}
			angle10 += step35;
			bx36 = cx36;
			by36 = cy36;
		}
		count2 += totalSteps10;
		var gamma5 = -pi_22;
		var pi28 = Math.PI;
		var step36 = pi28 * 2 / 36;
		var dif55;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f88;
			if(0 > Math.PI) {
				f88 = 0;
			} else {
				var a88 = 0 % (2 * Math.PI);
				f88 = a88 >= 0 ? a88 : a88 + 2 * Math.PI;
			}
			var this153 = f88;
			var za44 = this153;
			var f89;
			if(gamma5 >= 0 && gamma5 > Math.PI) {
				f89 = gamma5;
			} else {
				var a89 = gamma5 % (2 * Math.PI);
				f89 = a89 >= 0 ? a89 : a89 + 2 * Math.PI;
			}
			var this154 = f89;
			var zb44 = this154;
			var fa44 = za44;
			var fb44 = zb44;
			var theta63 = Math.abs(fa44 - fb44);
			var clockwise44 = fa44 < fb44;
			var dif56 = clockwise44 ? theta63 : -theta63;
			dif55 = dif56 > 0 ? dif56 : 2 * Math.PI + dif56;
			break;
		case 1:
			var f90;
			if(0 > Math.PI) {
				f90 = 0;
			} else {
				var a90 = 0 % (2 * Math.PI);
				f90 = a90 >= 0 ? a90 : a90 + 2 * Math.PI;
			}
			var this155 = f90;
			var za45 = this155;
			var f91;
			if(gamma5 >= 0 && gamma5 > Math.PI) {
				f91 = gamma5;
			} else {
				var a91 = gamma5 % (2 * Math.PI);
				f91 = a91 >= 0 ? a91 : a91 + 2 * Math.PI;
			}
			var this156 = f91;
			var zb45 = this156;
			var fa45 = za45;
			var fb45 = zb45;
			var theta64 = Math.abs(fa45 - fb45);
			var clockwise45 = fa45 < fb45;
			var dif57 = clockwise45 ? theta64 : -theta64;
			dif55 = dif57 < 0 ? dif57 : -2 * Math.PI + dif57;
			break;
		case 2:
			var f92;
			if(0 > Math.PI) {
				f92 = 0;
			} else {
				var a92 = 0 % (2 * Math.PI);
				f92 = a92 >= 0 ? a92 : a92 + 2 * Math.PI;
			}
			var this157 = f92;
			var za46 = this157;
			var f93;
			if(gamma5 >= 0 && gamma5 > Math.PI) {
				f93 = gamma5;
			} else {
				var a93 = gamma5 % (2 * Math.PI);
				f93 = a93 >= 0 ? a93 : a93 + 2 * Math.PI;
			}
			var this158 = f93;
			var zb46 = this158;
			var fa46 = za46;
			var fb46 = zb46;
			var theta65 = Math.abs(fa46 - fb46);
			var smallest11 = theta65 <= Math.PI;
			var clockwise46 = fa46 < fb46;
			var dif58 = clockwise46 ? theta65 : -theta65;
			dif55 = smallest11 ? dif58 : clockwise46 ? -(2 * Math.PI - theta65) : 2 * Math.PI - theta65;
			break;
		case 3:
			var f94;
			if(0 > Math.PI) {
				f94 = 0;
			} else {
				var a94 = 0 % (2 * Math.PI);
				f94 = a94 >= 0 ? a94 : a94 + 2 * Math.PI;
			}
			var this159 = f94;
			var za47 = this159;
			var f95;
			if(gamma5 >= 0 && gamma5 > Math.PI) {
				f95 = gamma5;
			} else {
				var a95 = gamma5 % (2 * Math.PI);
				f95 = a95 >= 0 ? a95 : a95 + 2 * Math.PI;
			}
			var this160 = f95;
			var zb47 = this160;
			var fa47 = za47;
			var fb47 = zb47;
			var theta66 = Math.abs(fa47 - fb47);
			var largest11 = theta66 > Math.PI;
			var clockwise47 = fa47 < fb47;
			var dif59 = clockwise47 ? theta66 : -theta66;
			dif55 = largest11 ? dif59 : clockwise47 ? -(2 * Math.PI - theta66) : 2 * Math.PI - theta66;
			break;
		}
		var positive11 = dif55 >= 0;
		var totalSteps11 = Math.ceil(Math.abs(dif55) / step36);
		var step37 = dif55 / totalSteps11;
		var angle11 = 0;
		var cx37;
		var cy37;
		var bx37 = 0;
		var by37 = 0;
		var _g41 = 0;
		var _g131 = totalSteps11 + 1;
		while(_g41 < _g131) {
			var i25 = _g41++;
			cx37 = dx14 + radius10 * Math.sin(angle11);
			cy37 = dy14 + radius10 * Math.cos(angle11);
			if(i25 != 0) {
				drawType10.triangle(dx14,dy14,0,bx37,by37,0,cx37,cy37,0);
				var m49 = trilateral2_Shaper.transformMatrix;
				if(m49 != null) {
					drawType10.transform(m49);
				}
				drawType10.next();
			}
			angle11 += step37;
			bx37 = cx37;
			by37 = cy37;
		}
		var len10 = count2 += totalSteps11;
		var color4 = rs4.color;
		if(color4 == -1) {
			color4 = this128.currentColor;
		}
		this128.colorType.colorTriangles(color4,len10);
		var end10 = start10 + len10 - 1;
		var s04 = new trilateral2_IndexRange(start10,end10);
		var this161 = this.spots;
		var this162 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this163 = this162;
		var this164 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this161.dz / 2);
		var s27 = this164;
		var this165 = new geom_structure_Mat4x3(this163.a * s27.a + this163.b * s27.e + this163.c * s27.i,this163.a * s27.b + this163.b * s27.f + this163.c * s27.j,this163.a * s27.c + this163.b * s27.g + this163.c * s27.k,this163.a * s27.d + this163.b * s27.h + this163.c * s27.l + this163.d,this163.e * s27.a + this163.f * s27.e + this163.g * s27.i,this163.e * s27.b + this163.f * s27.f + this163.g * s27.j,this163.e * s27.c + this163.f * s27.g + this163.g * s27.k,this163.e * s27.d + this163.f * s27.h + this163.g * s27.l + this163.h,this163.i * s27.a + this163.j * s27.e + this163.k * s27.i,this163.i * s27.b + this163.j * s27.f + this163.k * s27.j,this163.i * s27.c + this163.j * s27.g + this163.k * s27.k,this163.i * s27.d + this163.j * s27.h + this163.k * s27.l + this163.l);
		var trans2 = this165;
		this161.drawType.transformRange(trans2,s04.start,s04.end);
		var this166 = this.spots;
		var rs5 = this.spotShape;
		var s05 = rs5.clone();
		s05.x += 25;
		s05.y -= 25;
		var start11 = this166.drawType.get_size();
		var drawType11 = this166.drawType;
		var ax14 = s05.x;
		var ay14 = s05.y;
		var radius11 = s05.radius;
		var sides20 = 36;
		if(sides20 == null) {
			sides20 = 36;
		}
		var pi29 = Math.PI;
		var theta67 = pi29 / 2;
		var step38 = pi29 * 2 / sides20;
		var bx38;
		var by38;
		var cx38;
		var cy38;
		var _g42 = 0;
		var _g132 = sides20;
		while(_g42 < _g132) {
			var i26 = _g42++;
			bx38 = ax14 + radius11 * Math.sin(theta67);
			by38 = ay14 + radius11 * Math.cos(theta67);
			theta67 += step38;
			cx38 = ax14 + radius11 * Math.sin(theta67);
			cy38 = ay14 + radius11 * Math.cos(theta67);
			drawType11.triangle(ax14,ay14,0,bx38,by38,0,cx38,cy38,0);
			var m50 = trilateral2_Shaper.transformMatrix;
			if(m50 != null) {
				drawType11.transform(m50);
			}
			drawType11.next();
		}
		var len11 = sides20;
		var color5 = s05.color;
		if(color5 == -1) {
			color5 = this166.currentColor;
		}
		this166.colorType.colorTriangles(color5,len11);
		var end11 = start11 + len11 - 1;
		var startEnd8 = new trilateral2_IndexRange(start11,end11);
		var c02 = startEnd8;
		var s114 = rs5.clone();
		s114.x -= 25;
		s114.y += 25;
		var start12 = this166.drawType.get_size();
		var drawType12 = this166.drawType;
		var ax15 = s114.x;
		var ay15 = s114.y;
		var radius12 = s114.radius;
		var sides21 = 36;
		if(sides21 == null) {
			sides21 = 36;
		}
		var pi30 = Math.PI;
		var theta68 = pi30 / 2;
		var step39 = pi30 * 2 / sides21;
		var bx39;
		var by39;
		var cx39;
		var cy39;
		var _g43 = 0;
		var _g133 = sides21;
		while(_g43 < _g133) {
			var i27 = _g43++;
			bx39 = ax15 + radius12 * Math.sin(theta68);
			by39 = ay15 + radius12 * Math.cos(theta68);
			theta68 += step39;
			cx39 = ax15 + radius12 * Math.sin(theta68);
			cy39 = ay15 + radius12 * Math.cos(theta68);
			drawType12.triangle(ax15,ay15,0,bx39,by39,0,cx39,cy39,0);
			var m51 = trilateral2_Shaper.transformMatrix;
			if(m51 != null) {
				drawType12.transform(m51);
			}
			drawType12.next();
		}
		var len12 = sides21;
		var color6 = s114.color;
		if(color6 == -1) {
			color6 = this166.currentColor;
		}
		this166.colorType.colorTriangles(color6,len12);
		var end12 = start12 + len12 - 1;
		var startEnd9 = new trilateral2_IndexRange(start12,end12);
		var c13 = startEnd9;
		var s28 = rs5.clone();
		var start13 = this166.drawType.get_size();
		var drawType13 = this166.drawType;
		var ax16 = s28.x;
		var ay16 = s28.y;
		var radius13 = s28.radius;
		var sides22 = 36;
		if(sides22 == null) {
			sides22 = 36;
		}
		var pi31 = Math.PI;
		var theta69 = pi31 / 2;
		var step40 = pi31 * 2 / sides22;
		var bx40;
		var by40;
		var cx40;
		var cy40;
		var _g44 = 0;
		var _g134 = sides22;
		while(_g44 < _g134) {
			var i28 = _g44++;
			bx40 = ax16 + radius13 * Math.sin(theta69);
			by40 = ay16 + radius13 * Math.cos(theta69);
			theta69 += step40;
			cx40 = ax16 + radius13 * Math.sin(theta69);
			cy40 = ay16 + radius13 * Math.cos(theta69);
			drawType13.triangle(ax16,ay16,0,bx40,by40,0,cx40,cy40,0);
			var m52 = trilateral2_Shaper.transformMatrix;
			if(m52 != null) {
				drawType13.transform(m52);
			}
			drawType13.next();
		}
		var len13 = sides22;
		var color7 = s28.color;
		if(color7 == -1) {
			color7 = this166.currentColor;
		}
		this166.colorType.colorTriangles(color7,len13);
		var end13 = start13 + len13 - 1;
		var startEnd10 = new trilateral2_IndexRange(start13,end13);
		var c22 = startEnd10;
		var s115 = new trilateral2_IndexRange(c02.start,c22.end);
		var s29 = new trilateral2_IndexRange(s04.start,s115.end);
		this.spots.drawType.transformRange(trans_2,s29.start,s29.end);
		var s32 = s29;
		var this167 = this.spots;
		var rs6 = this.dieShape;
		var start14 = this167.drawType.get_size();
		var drawType14 = this167.drawType;
		var x10 = rs6.x - rs6.radius;
		var y10 = rs6.y - rs6.radius;
		var width3 = rs6.radius * 2;
		var height3 = rs6.radius * 2;
		var radius14 = this167.rounded;
		var pi32 = Math.PI;
		var pi_23 = Math.PI / 2;
		var ax17 = x10 + radius14;
		var ay17 = y10 + radius14;
		var bx41 = x10 + width3 - radius14;
		var by41 = y10 + radius14;
		var cx41 = bx41;
		var cy41 = y10 + height3 - radius14;
		var dx18 = ax17;
		var dy18 = cy41;
		var count3 = 0;
		var ax18 = ax17;
		var ay18 = y10;
		var bx42 = ax17 + (width3 - radius14 * 2);
		var by42 = ay18;
		var cx42 = bx42;
		var cy42 = ay18 + height3;
		var dx19 = ax17;
		var dy19 = cy42;
		drawType14.triangle(ax18,ay18,0,bx42,by42,0,dx19,dy19,0);
		var m53 = trilateral2_Shaper.transformMatrix;
		if(m53 != null) {
			drawType14.transform(m53);
		}
		drawType14.next();
		drawType14.triangle(bx42,by42,0,cx42,cy42,0,dx19,dy19,0);
		var m54 = trilateral2_Shaper.transformMatrix;
		if(m54 != null) {
			drawType14.transform(m54);
		}
		drawType14.next();
		count3 += 2;
		var dimY3 = height3 - 2 * radius14;
		var ax19 = x10;
		var ay19 = ay17;
		var bx43 = x10 + radius14;
		var by43 = ay19;
		var cx43 = bx43;
		var cy43 = ay19 + dimY3;
		var dx20 = x10;
		var dy20 = cy43;
		drawType14.triangle(ax19,ay19,0,bx43,by43,0,dx20,dy20,0);
		var m55 = trilateral2_Shaper.transformMatrix;
		if(m55 != null) {
			drawType14.transform(m55);
		}
		drawType14.next();
		drawType14.triangle(bx43,by43,0,cx43,cy43,0,dx20,dy20,0);
		var m56 = trilateral2_Shaper.transformMatrix;
		if(m56 != null) {
			drawType14.transform(m56);
		}
		drawType14.next();
		count3 += 2;
		var ax20 = bx41;
		var ay20 = by41;
		var bx44 = bx41 + radius14;
		var by44 = ay20;
		var cx44 = bx44;
		var cy44 = ay20 + dimY3;
		var dx21 = bx41;
		var dy21 = cy44;
		drawType14.triangle(ax20,ay20,0,bx44,by44,0,dx21,dy21,0);
		var m57 = trilateral2_Shaper.transformMatrix;
		if(m57 != null) {
			drawType14.transform(m57);
		}
		drawType14.next();
		drawType14.triangle(bx44,by44,0,cx44,cy44,0,dx21,dy21,0);
		var m58 = trilateral2_Shaper.transformMatrix;
		if(m58 != null) {
			drawType14.transform(m58);
		}
		drawType14.next();
		count3 += 2;
		var beta3 = -pi32;
		var gamma6 = -pi_23;
		var pi33 = Math.PI;
		var step41 = pi33 * 2 / 36;
		var dif60;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f96;
			if(beta3 >= 0 && beta3 > Math.PI) {
				f96 = beta3;
			} else {
				var a96 = beta3 % (2 * Math.PI);
				f96 = a96 >= 0 ? a96 : a96 + 2 * Math.PI;
			}
			var this168 = f96;
			var za48 = this168;
			var f97;
			if(gamma6 >= 0 && gamma6 > Math.PI) {
				f97 = gamma6;
			} else {
				var a97 = gamma6 % (2 * Math.PI);
				f97 = a97 >= 0 ? a97 : a97 + 2 * Math.PI;
			}
			var this169 = f97;
			var zb48 = this169;
			var fa48 = za48;
			var fb48 = zb48;
			var theta70 = Math.abs(fa48 - fb48);
			var clockwise48 = fa48 < fb48;
			var dif61 = clockwise48 ? theta70 : -theta70;
			dif60 = dif61 > 0 ? dif61 : 2 * Math.PI + dif61;
			break;
		case 1:
			var f98;
			if(beta3 >= 0 && beta3 > Math.PI) {
				f98 = beta3;
			} else {
				var a98 = beta3 % (2 * Math.PI);
				f98 = a98 >= 0 ? a98 : a98 + 2 * Math.PI;
			}
			var this170 = f98;
			var za49 = this170;
			var f99;
			if(gamma6 >= 0 && gamma6 > Math.PI) {
				f99 = gamma6;
			} else {
				var a99 = gamma6 % (2 * Math.PI);
				f99 = a99 >= 0 ? a99 : a99 + 2 * Math.PI;
			}
			var this171 = f99;
			var zb49 = this171;
			var fa49 = za49;
			var fb49 = zb49;
			var theta71 = Math.abs(fa49 - fb49);
			var clockwise49 = fa49 < fb49;
			var dif62 = clockwise49 ? theta71 : -theta71;
			dif60 = dif62 < 0 ? dif62 : -2 * Math.PI + dif62;
			break;
		case 2:
			var f100;
			if(beta3 >= 0 && beta3 > Math.PI) {
				f100 = beta3;
			} else {
				var a100 = beta3 % (2 * Math.PI);
				f100 = a100 >= 0 ? a100 : a100 + 2 * Math.PI;
			}
			var this172 = f100;
			var za50 = this172;
			var f101;
			if(gamma6 >= 0 && gamma6 > Math.PI) {
				f101 = gamma6;
			} else {
				var a101 = gamma6 % (2 * Math.PI);
				f101 = a101 >= 0 ? a101 : a101 + 2 * Math.PI;
			}
			var this173 = f101;
			var zb50 = this173;
			var fa50 = za50;
			var fb50 = zb50;
			var theta72 = Math.abs(fa50 - fb50);
			var smallest12 = theta72 <= Math.PI;
			var clockwise50 = fa50 < fb50;
			var dif63 = clockwise50 ? theta72 : -theta72;
			dif60 = smallest12 ? dif63 : clockwise50 ? -(2 * Math.PI - theta72) : 2 * Math.PI - theta72;
			break;
		case 3:
			var f102;
			if(beta3 >= 0 && beta3 > Math.PI) {
				f102 = beta3;
			} else {
				var a102 = beta3 % (2 * Math.PI);
				f102 = a102 >= 0 ? a102 : a102 + 2 * Math.PI;
			}
			var this174 = f102;
			var za51 = this174;
			var f103;
			if(gamma6 >= 0 && gamma6 > Math.PI) {
				f103 = gamma6;
			} else {
				var a103 = gamma6 % (2 * Math.PI);
				f103 = a103 >= 0 ? a103 : a103 + 2 * Math.PI;
			}
			var this175 = f103;
			var zb51 = this175;
			var fa51 = za51;
			var fb51 = zb51;
			var theta73 = Math.abs(fa51 - fb51);
			var largest12 = theta73 > Math.PI;
			var clockwise51 = fa51 < fb51;
			var dif64 = clockwise51 ? theta73 : -theta73;
			dif60 = largest12 ? dif64 : clockwise51 ? -(2 * Math.PI - theta73) : 2 * Math.PI - theta73;
			break;
		}
		var positive12 = dif60 >= 0;
		var totalSteps12 = Math.ceil(Math.abs(dif60) / step41);
		var step42 = dif60 / totalSteps12;
		var angle12 = beta3;
		var cx45;
		var cy45;
		var bx45 = 0;
		var by45 = 0;
		var _g45 = 0;
		var _g135 = totalSteps12 + 1;
		while(_g45 < _g135) {
			var i29 = _g45++;
			cx45 = ax17 + radius14 * Math.sin(angle12);
			cy45 = ay17 + radius14 * Math.cos(angle12);
			if(i29 != 0) {
				drawType14.triangle(ax17,ay17,0,bx45,by45,0,cx45,cy45,0);
				var m59 = trilateral2_Shaper.transformMatrix;
				if(m59 != null) {
					drawType14.transform(m59);
				}
				drawType14.next();
			}
			angle12 += step42;
			bx45 = cx45;
			by45 = cy45;
		}
		count3 += totalSteps12;
		var pi34 = Math.PI;
		var step43 = pi34 * 2 / 36;
		var dif65;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f104;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f104 = pi_23;
			} else {
				var a104 = pi_23 % (2 * Math.PI);
				f104 = a104 >= 0 ? a104 : a104 + 2 * Math.PI;
			}
			var this176 = f104;
			var za52 = this176;
			var f105;
			if(pi32 >= 0 && pi32 > Math.PI) {
				f105 = pi32;
			} else {
				var a105 = pi32 % (2 * Math.PI);
				f105 = a105 >= 0 ? a105 : a105 + 2 * Math.PI;
			}
			var this177 = f105;
			var zb52 = this177;
			var fa52 = za52;
			var fb52 = zb52;
			var theta74 = Math.abs(fa52 - fb52);
			var clockwise52 = fa52 < fb52;
			var dif66 = clockwise52 ? theta74 : -theta74;
			dif65 = dif66 > 0 ? dif66 : 2 * Math.PI + dif66;
			break;
		case 1:
			var f106;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f106 = pi_23;
			} else {
				var a106 = pi_23 % (2 * Math.PI);
				f106 = a106 >= 0 ? a106 : a106 + 2 * Math.PI;
			}
			var this178 = f106;
			var za53 = this178;
			var f107;
			if(pi32 >= 0 && pi32 > Math.PI) {
				f107 = pi32;
			} else {
				var a107 = pi32 % (2 * Math.PI);
				f107 = a107 >= 0 ? a107 : a107 + 2 * Math.PI;
			}
			var this179 = f107;
			var zb53 = this179;
			var fa53 = za53;
			var fb53 = zb53;
			var theta75 = Math.abs(fa53 - fb53);
			var clockwise53 = fa53 < fb53;
			var dif67 = clockwise53 ? theta75 : -theta75;
			dif65 = dif67 < 0 ? dif67 : -2 * Math.PI + dif67;
			break;
		case 2:
			var f108;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f108 = pi_23;
			} else {
				var a108 = pi_23 % (2 * Math.PI);
				f108 = a108 >= 0 ? a108 : a108 + 2 * Math.PI;
			}
			var this180 = f108;
			var za54 = this180;
			var f109;
			if(pi32 >= 0 && pi32 > Math.PI) {
				f109 = pi32;
			} else {
				var a109 = pi32 % (2 * Math.PI);
				f109 = a109 >= 0 ? a109 : a109 + 2 * Math.PI;
			}
			var this181 = f109;
			var zb54 = this181;
			var fa54 = za54;
			var fb54 = zb54;
			var theta76 = Math.abs(fa54 - fb54);
			var smallest13 = theta76 <= Math.PI;
			var clockwise54 = fa54 < fb54;
			var dif68 = clockwise54 ? theta76 : -theta76;
			dif65 = smallest13 ? dif68 : clockwise54 ? -(2 * Math.PI - theta76) : 2 * Math.PI - theta76;
			break;
		case 3:
			var f110;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f110 = pi_23;
			} else {
				var a110 = pi_23 % (2 * Math.PI);
				f110 = a110 >= 0 ? a110 : a110 + 2 * Math.PI;
			}
			var this182 = f110;
			var za55 = this182;
			var f111;
			if(pi32 >= 0 && pi32 > Math.PI) {
				f111 = pi32;
			} else {
				var a111 = pi32 % (2 * Math.PI);
				f111 = a111 >= 0 ? a111 : a111 + 2 * Math.PI;
			}
			var this183 = f111;
			var zb55 = this183;
			var fa55 = za55;
			var fb55 = zb55;
			var theta77 = Math.abs(fa55 - fb55);
			var largest13 = theta77 > Math.PI;
			var clockwise55 = fa55 < fb55;
			var dif69 = clockwise55 ? theta77 : -theta77;
			dif65 = largest13 ? dif69 : clockwise55 ? -(2 * Math.PI - theta77) : 2 * Math.PI - theta77;
			break;
		}
		var positive13 = dif65 >= 0;
		var totalSteps13 = Math.ceil(Math.abs(dif65) / step43);
		var step44 = dif65 / totalSteps13;
		var angle13 = pi_23;
		var cx46;
		var cy46;
		var bx46 = 0;
		var by46 = 0;
		var _g46 = 0;
		var _g136 = totalSteps13 + 1;
		while(_g46 < _g136) {
			var i30 = _g46++;
			cx46 = bx41 + radius14 * Math.sin(angle13);
			cy46 = by41 + radius14 * Math.cos(angle13);
			if(i30 != 0) {
				drawType14.triangle(bx41,by41,0,bx46,by46,0,cx46,cy46,0);
				var m60 = trilateral2_Shaper.transformMatrix;
				if(m60 != null) {
					drawType14.transform(m60);
				}
				drawType14.next();
			}
			angle13 += step44;
			bx46 = cx46;
			by46 = cy46;
		}
		count3 += totalSteps13;
		var pi35 = Math.PI;
		var step45 = pi35 * 2 / 36;
		var dif70;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f112;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f112 = pi_23;
			} else {
				var a112 = pi_23 % (2 * Math.PI);
				f112 = a112 >= 0 ? a112 : a112 + 2 * Math.PI;
			}
			var this184 = f112;
			var za56 = this184;
			var f113;
			if(0 > Math.PI) {
				f113 = 0;
			} else {
				var a113 = 0 % (2 * Math.PI);
				f113 = a113 >= 0 ? a113 : a113 + 2 * Math.PI;
			}
			var this185 = f113;
			var zb56 = this185;
			var fa56 = za56;
			var fb56 = zb56;
			var theta78 = Math.abs(fa56 - fb56);
			var clockwise56 = fa56 < fb56;
			var dif71 = clockwise56 ? theta78 : -theta78;
			dif70 = dif71 > 0 ? dif71 : 2 * Math.PI + dif71;
			break;
		case 1:
			var f114;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f114 = pi_23;
			} else {
				var a114 = pi_23 % (2 * Math.PI);
				f114 = a114 >= 0 ? a114 : a114 + 2 * Math.PI;
			}
			var this186 = f114;
			var za57 = this186;
			var f115;
			if(0 > Math.PI) {
				f115 = 0;
			} else {
				var a115 = 0 % (2 * Math.PI);
				f115 = a115 >= 0 ? a115 : a115 + 2 * Math.PI;
			}
			var this187 = f115;
			var zb57 = this187;
			var fa57 = za57;
			var fb57 = zb57;
			var theta79 = Math.abs(fa57 - fb57);
			var clockwise57 = fa57 < fb57;
			var dif72 = clockwise57 ? theta79 : -theta79;
			dif70 = dif72 < 0 ? dif72 : -2 * Math.PI + dif72;
			break;
		case 2:
			var f116;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f116 = pi_23;
			} else {
				var a116 = pi_23 % (2 * Math.PI);
				f116 = a116 >= 0 ? a116 : a116 + 2 * Math.PI;
			}
			var this188 = f116;
			var za58 = this188;
			var f117;
			if(0 > Math.PI) {
				f117 = 0;
			} else {
				var a117 = 0 % (2 * Math.PI);
				f117 = a117 >= 0 ? a117 : a117 + 2 * Math.PI;
			}
			var this189 = f117;
			var zb58 = this189;
			var fa58 = za58;
			var fb58 = zb58;
			var theta80 = Math.abs(fa58 - fb58);
			var smallest14 = theta80 <= Math.PI;
			var clockwise58 = fa58 < fb58;
			var dif73 = clockwise58 ? theta80 : -theta80;
			dif70 = smallest14 ? dif73 : clockwise58 ? -(2 * Math.PI - theta80) : 2 * Math.PI - theta80;
			break;
		case 3:
			var f118;
			if(pi_23 >= 0 && pi_23 > Math.PI) {
				f118 = pi_23;
			} else {
				var a118 = pi_23 % (2 * Math.PI);
				f118 = a118 >= 0 ? a118 : a118 + 2 * Math.PI;
			}
			var this190 = f118;
			var za59 = this190;
			var f119;
			if(0 > Math.PI) {
				f119 = 0;
			} else {
				var a119 = 0 % (2 * Math.PI);
				f119 = a119 >= 0 ? a119 : a119 + 2 * Math.PI;
			}
			var this191 = f119;
			var zb59 = this191;
			var fa59 = za59;
			var fb59 = zb59;
			var theta81 = Math.abs(fa59 - fb59);
			var largest14 = theta81 > Math.PI;
			var clockwise59 = fa59 < fb59;
			var dif74 = clockwise59 ? theta81 : -theta81;
			dif70 = largest14 ? dif74 : clockwise59 ? -(2 * Math.PI - theta81) : 2 * Math.PI - theta81;
			break;
		}
		var positive14 = dif70 >= 0;
		var totalSteps14 = Math.ceil(Math.abs(dif70) / step45);
		var step46 = dif70 / totalSteps14;
		var angle14 = pi_23;
		var cx47;
		var cy47;
		var bx47 = 0;
		var by47 = 0;
		var _g47 = 0;
		var _g137 = totalSteps14 + 1;
		while(_g47 < _g137) {
			var i31 = _g47++;
			cx47 = cx41 + radius14 * Math.sin(angle14);
			cy47 = cy41 + radius14 * Math.cos(angle14);
			if(i31 != 0) {
				drawType14.triangle(cx41,cy41,0,bx47,by47,0,cx47,cy47,0);
				var m61 = trilateral2_Shaper.transformMatrix;
				if(m61 != null) {
					drawType14.transform(m61);
				}
				drawType14.next();
			}
			angle14 += step46;
			bx47 = cx47;
			by47 = cy47;
		}
		count3 += totalSteps14;
		var gamma7 = -pi_23;
		var pi36 = Math.PI;
		var step47 = pi36 * 2 / 36;
		var dif75;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f120;
			if(0 > Math.PI) {
				f120 = 0;
			} else {
				var a120 = 0 % (2 * Math.PI);
				f120 = a120 >= 0 ? a120 : a120 + 2 * Math.PI;
			}
			var this192 = f120;
			var za60 = this192;
			var f121;
			if(gamma7 >= 0 && gamma7 > Math.PI) {
				f121 = gamma7;
			} else {
				var a121 = gamma7 % (2 * Math.PI);
				f121 = a121 >= 0 ? a121 : a121 + 2 * Math.PI;
			}
			var this193 = f121;
			var zb60 = this193;
			var fa60 = za60;
			var fb60 = zb60;
			var theta82 = Math.abs(fa60 - fb60);
			var clockwise60 = fa60 < fb60;
			var dif76 = clockwise60 ? theta82 : -theta82;
			dif75 = dif76 > 0 ? dif76 : 2 * Math.PI + dif76;
			break;
		case 1:
			var f122;
			if(0 > Math.PI) {
				f122 = 0;
			} else {
				var a122 = 0 % (2 * Math.PI);
				f122 = a122 >= 0 ? a122 : a122 + 2 * Math.PI;
			}
			var this194 = f122;
			var za61 = this194;
			var f123;
			if(gamma7 >= 0 && gamma7 > Math.PI) {
				f123 = gamma7;
			} else {
				var a123 = gamma7 % (2 * Math.PI);
				f123 = a123 >= 0 ? a123 : a123 + 2 * Math.PI;
			}
			var this195 = f123;
			var zb61 = this195;
			var fa61 = za61;
			var fb61 = zb61;
			var theta83 = Math.abs(fa61 - fb61);
			var clockwise61 = fa61 < fb61;
			var dif77 = clockwise61 ? theta83 : -theta83;
			dif75 = dif77 < 0 ? dif77 : -2 * Math.PI + dif77;
			break;
		case 2:
			var f124;
			if(0 > Math.PI) {
				f124 = 0;
			} else {
				var a124 = 0 % (2 * Math.PI);
				f124 = a124 >= 0 ? a124 : a124 + 2 * Math.PI;
			}
			var this196 = f124;
			var za62 = this196;
			var f125;
			if(gamma7 >= 0 && gamma7 > Math.PI) {
				f125 = gamma7;
			} else {
				var a125 = gamma7 % (2 * Math.PI);
				f125 = a125 >= 0 ? a125 : a125 + 2 * Math.PI;
			}
			var this197 = f125;
			var zb62 = this197;
			var fa62 = za62;
			var fb62 = zb62;
			var theta84 = Math.abs(fa62 - fb62);
			var smallest15 = theta84 <= Math.PI;
			var clockwise62 = fa62 < fb62;
			var dif78 = clockwise62 ? theta84 : -theta84;
			dif75 = smallest15 ? dif78 : clockwise62 ? -(2 * Math.PI - theta84) : 2 * Math.PI - theta84;
			break;
		case 3:
			var f126;
			if(0 > Math.PI) {
				f126 = 0;
			} else {
				var a126 = 0 % (2 * Math.PI);
				f126 = a126 >= 0 ? a126 : a126 + 2 * Math.PI;
			}
			var this198 = f126;
			var za63 = this198;
			var f127;
			if(gamma7 >= 0 && gamma7 > Math.PI) {
				f127 = gamma7;
			} else {
				var a127 = gamma7 % (2 * Math.PI);
				f127 = a127 >= 0 ? a127 : a127 + 2 * Math.PI;
			}
			var this199 = f127;
			var zb63 = this199;
			var fa63 = za63;
			var fb63 = zb63;
			var theta85 = Math.abs(fa63 - fb63);
			var largest15 = theta85 > Math.PI;
			var clockwise63 = fa63 < fb63;
			var dif79 = clockwise63 ? theta85 : -theta85;
			dif75 = largest15 ? dif79 : clockwise63 ? -(2 * Math.PI - theta85) : 2 * Math.PI - theta85;
			break;
		}
		var positive15 = dif75 >= 0;
		var totalSteps15 = Math.ceil(Math.abs(dif75) / step47);
		var step48 = dif75 / totalSteps15;
		var angle15 = 0;
		var cx48;
		var cy48;
		var bx48 = 0;
		var by48 = 0;
		var _g48 = 0;
		var _g138 = totalSteps15 + 1;
		while(_g48 < _g138) {
			var i32 = _g48++;
			cx48 = dx18 + radius14 * Math.sin(angle15);
			cy48 = dy18 + radius14 * Math.cos(angle15);
			if(i32 != 0) {
				drawType14.triangle(dx18,dy18,0,bx48,by48,0,cx48,cy48,0);
				var m62 = trilateral2_Shaper.transformMatrix;
				if(m62 != null) {
					drawType14.transform(m62);
				}
				drawType14.next();
			}
			angle15 += step48;
			bx48 = cx48;
			by48 = cy48;
		}
		var len14 = count3 += totalSteps15;
		var color8 = rs6.color;
		if(color8 == -1) {
			color8 = this167.currentColor;
		}
		this167.colorType.colorTriangles(color8,len14);
		var end14 = start14 + len14 - 1;
		var s06 = new trilateral2_IndexRange(start14,end14);
		var this200 = this.spots;
		var this201 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this202 = this201;
		var this203 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this200.dz / 2);
		var s30 = this203;
		var this204 = new geom_structure_Mat4x3(this202.a * s30.a + this202.b * s30.e + this202.c * s30.i,this202.a * s30.b + this202.b * s30.f + this202.c * s30.j,this202.a * s30.c + this202.b * s30.g + this202.c * s30.k,this202.a * s30.d + this202.b * s30.h + this202.c * s30.l + this202.d,this202.e * s30.a + this202.f * s30.e + this202.g * s30.i,this202.e * s30.b + this202.f * s30.f + this202.g * s30.j,this202.e * s30.c + this202.f * s30.g + this202.g * s30.k,this202.e * s30.d + this202.f * s30.h + this202.g * s30.l + this202.h,this202.i * s30.a + this202.j * s30.e + this202.k * s30.i,this202.i * s30.b + this202.j * s30.f + this202.k * s30.j,this202.i * s30.c + this202.j * s30.g + this202.k * s30.k,this202.i * s30.d + this202.j * s30.h + this202.k * s30.l + this202.l);
		var trans3 = this204;
		this200.drawType.transformRange(trans3,s06.start,s06.end);
		var this205 = this.spots;
		var rs7 = this.spotShape;
		var s07 = rs7.clone();
		s07.x -= 30;
		s07.y -= 30;
		var start15 = this205.drawType.get_size();
		var drawType15 = this205.drawType;
		var ax21 = s07.x;
		var ay21 = s07.y;
		var radius15 = s07.radius;
		var sides23 = 36;
		if(sides23 == null) {
			sides23 = 36;
		}
		var pi37 = Math.PI;
		var theta86 = pi37 / 2;
		var step49 = pi37 * 2 / sides23;
		var bx49;
		var by49;
		var cx49;
		var cy49;
		var _g49 = 0;
		var _g139 = sides23;
		while(_g49 < _g139) {
			var i33 = _g49++;
			bx49 = ax21 + radius15 * Math.sin(theta86);
			by49 = ay21 + radius15 * Math.cos(theta86);
			theta86 += step49;
			cx49 = ax21 + radius15 * Math.sin(theta86);
			cy49 = ay21 + radius15 * Math.cos(theta86);
			drawType15.triangle(ax21,ay21,0,bx49,by49,0,cx49,cy49,0);
			var m63 = trilateral2_Shaper.transformMatrix;
			if(m63 != null) {
				drawType15.transform(m63);
			}
			drawType15.next();
		}
		var len15 = sides23;
		var color9 = s07.color;
		if(color9 == -1) {
			color9 = this205.currentColor;
		}
		this205.colorType.colorTriangles(color9,len15);
		var end15 = start15 + len15 - 1;
		var startEnd11 = new trilateral2_IndexRange(start15,end15);
		var c03 = startEnd11;
		var s116 = rs7.clone();
		s116.x += 30;
		s116.y -= 30;
		var start16 = this205.drawType.get_size();
		var drawType16 = this205.drawType;
		var ax22 = s116.x;
		var ay22 = s116.y;
		var radius16 = s116.radius;
		var sides24 = 36;
		if(sides24 == null) {
			sides24 = 36;
		}
		var pi38 = Math.PI;
		var theta87 = pi38 / 2;
		var step50 = pi38 * 2 / sides24;
		var bx50;
		var by50;
		var cx50;
		var cy50;
		var _g50 = 0;
		var _g140 = sides24;
		while(_g50 < _g140) {
			var i34 = _g50++;
			bx50 = ax22 + radius16 * Math.sin(theta87);
			by50 = ay22 + radius16 * Math.cos(theta87);
			theta87 += step50;
			cx50 = ax22 + radius16 * Math.sin(theta87);
			cy50 = ay22 + radius16 * Math.cos(theta87);
			drawType16.triangle(ax22,ay22,0,bx50,by50,0,cx50,cy50,0);
			var m64 = trilateral2_Shaper.transformMatrix;
			if(m64 != null) {
				drawType16.transform(m64);
			}
			drawType16.next();
		}
		var len16 = sides24;
		var color10 = s116.color;
		if(color10 == -1) {
			color10 = this205.currentColor;
		}
		this205.colorType.colorTriangles(color10,len16);
		var end16 = start16 + len16 - 1;
		var startEnd12 = new trilateral2_IndexRange(start16,end16);
		var c14 = startEnd12;
		var s210 = rs7.clone();
		s210.x -= 30;
		s210.y += 30;
		var start17 = this205.drawType.get_size();
		var drawType17 = this205.drawType;
		var ax23 = s210.x;
		var ay23 = s210.y;
		var radius17 = s210.radius;
		var sides25 = 36;
		if(sides25 == null) {
			sides25 = 36;
		}
		var pi39 = Math.PI;
		var theta88 = pi39 / 2;
		var step51 = pi39 * 2 / sides25;
		var bx51;
		var by51;
		var cx51;
		var cy51;
		var _g51 = 0;
		var _g141 = sides25;
		while(_g51 < _g141) {
			var i35 = _g51++;
			bx51 = ax23 + radius17 * Math.sin(theta88);
			by51 = ay23 + radius17 * Math.cos(theta88);
			theta88 += step51;
			cx51 = ax23 + radius17 * Math.sin(theta88);
			cy51 = ay23 + radius17 * Math.cos(theta88);
			drawType17.triangle(ax23,ay23,0,bx51,by51,0,cx51,cy51,0);
			var m65 = trilateral2_Shaper.transformMatrix;
			if(m65 != null) {
				drawType17.transform(m65);
			}
			drawType17.next();
		}
		var len17 = sides25;
		var color11 = s210.color;
		if(color11 == -1) {
			color11 = this205.currentColor;
		}
		this205.colorType.colorTriangles(color11,len17);
		var end17 = start17 + len17 - 1;
		var startEnd13 = new trilateral2_IndexRange(start17,end17);
		var c23 = startEnd13;
		var s33 = rs7.clone();
		s33.x += 30;
		s33.y += 30;
		var start18 = this205.drawType.get_size();
		var drawType18 = this205.drawType;
		var ax24 = s33.x;
		var ay24 = s33.y;
		var radius18 = s33.radius;
		var sides26 = 36;
		if(sides26 == null) {
			sides26 = 36;
		}
		var pi40 = Math.PI;
		var theta89 = pi40 / 2;
		var step52 = pi40 * 2 / sides26;
		var bx52;
		var by52;
		var cx52;
		var cy52;
		var _g52 = 0;
		var _g142 = sides26;
		while(_g52 < _g142) {
			var i36 = _g52++;
			bx52 = ax24 + radius18 * Math.sin(theta89);
			by52 = ay24 + radius18 * Math.cos(theta89);
			theta89 += step52;
			cx52 = ax24 + radius18 * Math.sin(theta89);
			cy52 = ay24 + radius18 * Math.cos(theta89);
			drawType18.triangle(ax24,ay24,0,bx52,by52,0,cx52,cy52,0);
			var m66 = trilateral2_Shaper.transformMatrix;
			if(m66 != null) {
				drawType18.transform(m66);
			}
			drawType18.next();
		}
		var len18 = sides26;
		var color12 = s33.color;
		if(color12 == -1) {
			color12 = this205.currentColor;
		}
		this205.colorType.colorTriangles(color12,len18);
		var end18 = start18 + len18 - 1;
		var startEnd14 = new trilateral2_IndexRange(start18,end18);
		var c32 = startEnd14;
		var s117 = new trilateral2_IndexRange(c03.start,c32.end);
		var s211 = new trilateral2_IndexRange(s06.start,s117.end);
		this.spots.drawType.transformRange(trans_3,s211.start,s211.end);
		var s42 = s211;
		var this206 = this.spots;
		var rs8 = this.dieShape;
		var start19 = this206.drawType.get_size();
		var drawType19 = this206.drawType;
		var x11 = rs8.x - rs8.radius;
		var y11 = rs8.y - rs8.radius;
		var width4 = rs8.radius * 2;
		var height4 = rs8.radius * 2;
		var radius19 = this206.rounded;
		var pi41 = Math.PI;
		var pi_24 = Math.PI / 2;
		var ax25 = x11 + radius19;
		var ay25 = y11 + radius19;
		var bx53 = x11 + width4 - radius19;
		var by53 = y11 + radius19;
		var cx53 = bx53;
		var cy53 = y11 + height4 - radius19;
		var dx22 = ax25;
		var dy22 = cy53;
		var count4 = 0;
		var ax26 = ax25;
		var ay26 = y11;
		var bx54 = ax25 + (width4 - radius19 * 2);
		var by54 = ay26;
		var cx54 = bx54;
		var cy54 = ay26 + height4;
		var dx23 = ax25;
		var dy23 = cy54;
		drawType19.triangle(ax26,ay26,0,bx54,by54,0,dx23,dy23,0);
		var m67 = trilateral2_Shaper.transformMatrix;
		if(m67 != null) {
			drawType19.transform(m67);
		}
		drawType19.next();
		drawType19.triangle(bx54,by54,0,cx54,cy54,0,dx23,dy23,0);
		var m68 = trilateral2_Shaper.transformMatrix;
		if(m68 != null) {
			drawType19.transform(m68);
		}
		drawType19.next();
		count4 += 2;
		var dimY4 = height4 - 2 * radius19;
		var ax27 = x11;
		var ay27 = ay25;
		var bx55 = x11 + radius19;
		var by55 = ay27;
		var cx55 = bx55;
		var cy55 = ay27 + dimY4;
		var dx24 = x11;
		var dy24 = cy55;
		drawType19.triangle(ax27,ay27,0,bx55,by55,0,dx24,dy24,0);
		var m69 = trilateral2_Shaper.transformMatrix;
		if(m69 != null) {
			drawType19.transform(m69);
		}
		drawType19.next();
		drawType19.triangle(bx55,by55,0,cx55,cy55,0,dx24,dy24,0);
		var m70 = trilateral2_Shaper.transformMatrix;
		if(m70 != null) {
			drawType19.transform(m70);
		}
		drawType19.next();
		count4 += 2;
		var ax28 = bx53;
		var ay28 = by53;
		var bx56 = bx53 + radius19;
		var by56 = ay28;
		var cx56 = bx56;
		var cy56 = ay28 + dimY4;
		var dx25 = bx53;
		var dy25 = cy56;
		drawType19.triangle(ax28,ay28,0,bx56,by56,0,dx25,dy25,0);
		var m71 = trilateral2_Shaper.transformMatrix;
		if(m71 != null) {
			drawType19.transform(m71);
		}
		drawType19.next();
		drawType19.triangle(bx56,by56,0,cx56,cy56,0,dx25,dy25,0);
		var m72 = trilateral2_Shaper.transformMatrix;
		if(m72 != null) {
			drawType19.transform(m72);
		}
		drawType19.next();
		count4 += 2;
		var beta4 = -pi41;
		var gamma8 = -pi_24;
		var pi42 = Math.PI;
		var step53 = pi42 * 2 / 36;
		var dif80;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f128;
			if(beta4 >= 0 && beta4 > Math.PI) {
				f128 = beta4;
			} else {
				var a128 = beta4 % (2 * Math.PI);
				f128 = a128 >= 0 ? a128 : a128 + 2 * Math.PI;
			}
			var this207 = f128;
			var za64 = this207;
			var f129;
			if(gamma8 >= 0 && gamma8 > Math.PI) {
				f129 = gamma8;
			} else {
				var a129 = gamma8 % (2 * Math.PI);
				f129 = a129 >= 0 ? a129 : a129 + 2 * Math.PI;
			}
			var this208 = f129;
			var zb64 = this208;
			var fa64 = za64;
			var fb64 = zb64;
			var theta90 = Math.abs(fa64 - fb64);
			var clockwise64 = fa64 < fb64;
			var dif81 = clockwise64 ? theta90 : -theta90;
			dif80 = dif81 > 0 ? dif81 : 2 * Math.PI + dif81;
			break;
		case 1:
			var f130;
			if(beta4 >= 0 && beta4 > Math.PI) {
				f130 = beta4;
			} else {
				var a130 = beta4 % (2 * Math.PI);
				f130 = a130 >= 0 ? a130 : a130 + 2 * Math.PI;
			}
			var this209 = f130;
			var za65 = this209;
			var f131;
			if(gamma8 >= 0 && gamma8 > Math.PI) {
				f131 = gamma8;
			} else {
				var a131 = gamma8 % (2 * Math.PI);
				f131 = a131 >= 0 ? a131 : a131 + 2 * Math.PI;
			}
			var this210 = f131;
			var zb65 = this210;
			var fa65 = za65;
			var fb65 = zb65;
			var theta91 = Math.abs(fa65 - fb65);
			var clockwise65 = fa65 < fb65;
			var dif82 = clockwise65 ? theta91 : -theta91;
			dif80 = dif82 < 0 ? dif82 : -2 * Math.PI + dif82;
			break;
		case 2:
			var f132;
			if(beta4 >= 0 && beta4 > Math.PI) {
				f132 = beta4;
			} else {
				var a132 = beta4 % (2 * Math.PI);
				f132 = a132 >= 0 ? a132 : a132 + 2 * Math.PI;
			}
			var this211 = f132;
			var za66 = this211;
			var f133;
			if(gamma8 >= 0 && gamma8 > Math.PI) {
				f133 = gamma8;
			} else {
				var a133 = gamma8 % (2 * Math.PI);
				f133 = a133 >= 0 ? a133 : a133 + 2 * Math.PI;
			}
			var this212 = f133;
			var zb66 = this212;
			var fa66 = za66;
			var fb66 = zb66;
			var theta92 = Math.abs(fa66 - fb66);
			var smallest16 = theta92 <= Math.PI;
			var clockwise66 = fa66 < fb66;
			var dif83 = clockwise66 ? theta92 : -theta92;
			dif80 = smallest16 ? dif83 : clockwise66 ? -(2 * Math.PI - theta92) : 2 * Math.PI - theta92;
			break;
		case 3:
			var f134;
			if(beta4 >= 0 && beta4 > Math.PI) {
				f134 = beta4;
			} else {
				var a134 = beta4 % (2 * Math.PI);
				f134 = a134 >= 0 ? a134 : a134 + 2 * Math.PI;
			}
			var this213 = f134;
			var za67 = this213;
			var f135;
			if(gamma8 >= 0 && gamma8 > Math.PI) {
				f135 = gamma8;
			} else {
				var a135 = gamma8 % (2 * Math.PI);
				f135 = a135 >= 0 ? a135 : a135 + 2 * Math.PI;
			}
			var this214 = f135;
			var zb67 = this214;
			var fa67 = za67;
			var fb67 = zb67;
			var theta93 = Math.abs(fa67 - fb67);
			var largest16 = theta93 > Math.PI;
			var clockwise67 = fa67 < fb67;
			var dif84 = clockwise67 ? theta93 : -theta93;
			dif80 = largest16 ? dif84 : clockwise67 ? -(2 * Math.PI - theta93) : 2 * Math.PI - theta93;
			break;
		}
		var positive16 = dif80 >= 0;
		var totalSteps16 = Math.ceil(Math.abs(dif80) / step53);
		var step54 = dif80 / totalSteps16;
		var angle16 = beta4;
		var cx57;
		var cy57;
		var bx57 = 0;
		var by57 = 0;
		var _g53 = 0;
		var _g143 = totalSteps16 + 1;
		while(_g53 < _g143) {
			var i37 = _g53++;
			cx57 = ax25 + radius19 * Math.sin(angle16);
			cy57 = ay25 + radius19 * Math.cos(angle16);
			if(i37 != 0) {
				drawType19.triangle(ax25,ay25,0,bx57,by57,0,cx57,cy57,0);
				var m73 = trilateral2_Shaper.transformMatrix;
				if(m73 != null) {
					drawType19.transform(m73);
				}
				drawType19.next();
			}
			angle16 += step54;
			bx57 = cx57;
			by57 = cy57;
		}
		count4 += totalSteps16;
		var pi43 = Math.PI;
		var step55 = pi43 * 2 / 36;
		var dif85;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f136;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f136 = pi_24;
			} else {
				var a136 = pi_24 % (2 * Math.PI);
				f136 = a136 >= 0 ? a136 : a136 + 2 * Math.PI;
			}
			var this215 = f136;
			var za68 = this215;
			var f137;
			if(pi41 >= 0 && pi41 > Math.PI) {
				f137 = pi41;
			} else {
				var a137 = pi41 % (2 * Math.PI);
				f137 = a137 >= 0 ? a137 : a137 + 2 * Math.PI;
			}
			var this216 = f137;
			var zb68 = this216;
			var fa68 = za68;
			var fb68 = zb68;
			var theta94 = Math.abs(fa68 - fb68);
			var clockwise68 = fa68 < fb68;
			var dif86 = clockwise68 ? theta94 : -theta94;
			dif85 = dif86 > 0 ? dif86 : 2 * Math.PI + dif86;
			break;
		case 1:
			var f138;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f138 = pi_24;
			} else {
				var a138 = pi_24 % (2 * Math.PI);
				f138 = a138 >= 0 ? a138 : a138 + 2 * Math.PI;
			}
			var this217 = f138;
			var za69 = this217;
			var f139;
			if(pi41 >= 0 && pi41 > Math.PI) {
				f139 = pi41;
			} else {
				var a139 = pi41 % (2 * Math.PI);
				f139 = a139 >= 0 ? a139 : a139 + 2 * Math.PI;
			}
			var this218 = f139;
			var zb69 = this218;
			var fa69 = za69;
			var fb69 = zb69;
			var theta95 = Math.abs(fa69 - fb69);
			var clockwise69 = fa69 < fb69;
			var dif87 = clockwise69 ? theta95 : -theta95;
			dif85 = dif87 < 0 ? dif87 : -2 * Math.PI + dif87;
			break;
		case 2:
			var f140;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f140 = pi_24;
			} else {
				var a140 = pi_24 % (2 * Math.PI);
				f140 = a140 >= 0 ? a140 : a140 + 2 * Math.PI;
			}
			var this219 = f140;
			var za70 = this219;
			var f141;
			if(pi41 >= 0 && pi41 > Math.PI) {
				f141 = pi41;
			} else {
				var a141 = pi41 % (2 * Math.PI);
				f141 = a141 >= 0 ? a141 : a141 + 2 * Math.PI;
			}
			var this220 = f141;
			var zb70 = this220;
			var fa70 = za70;
			var fb70 = zb70;
			var theta96 = Math.abs(fa70 - fb70);
			var smallest17 = theta96 <= Math.PI;
			var clockwise70 = fa70 < fb70;
			var dif88 = clockwise70 ? theta96 : -theta96;
			dif85 = smallest17 ? dif88 : clockwise70 ? -(2 * Math.PI - theta96) : 2 * Math.PI - theta96;
			break;
		case 3:
			var f142;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f142 = pi_24;
			} else {
				var a142 = pi_24 % (2 * Math.PI);
				f142 = a142 >= 0 ? a142 : a142 + 2 * Math.PI;
			}
			var this221 = f142;
			var za71 = this221;
			var f143;
			if(pi41 >= 0 && pi41 > Math.PI) {
				f143 = pi41;
			} else {
				var a143 = pi41 % (2 * Math.PI);
				f143 = a143 >= 0 ? a143 : a143 + 2 * Math.PI;
			}
			var this222 = f143;
			var zb71 = this222;
			var fa71 = za71;
			var fb71 = zb71;
			var theta97 = Math.abs(fa71 - fb71);
			var largest17 = theta97 > Math.PI;
			var clockwise71 = fa71 < fb71;
			var dif89 = clockwise71 ? theta97 : -theta97;
			dif85 = largest17 ? dif89 : clockwise71 ? -(2 * Math.PI - theta97) : 2 * Math.PI - theta97;
			break;
		}
		var positive17 = dif85 >= 0;
		var totalSteps17 = Math.ceil(Math.abs(dif85) / step55);
		var step56 = dif85 / totalSteps17;
		var angle17 = pi_24;
		var cx58;
		var cy58;
		var bx58 = 0;
		var by58 = 0;
		var _g54 = 0;
		var _g144 = totalSteps17 + 1;
		while(_g54 < _g144) {
			var i38 = _g54++;
			cx58 = bx53 + radius19 * Math.sin(angle17);
			cy58 = by53 + radius19 * Math.cos(angle17);
			if(i38 != 0) {
				drawType19.triangle(bx53,by53,0,bx58,by58,0,cx58,cy58,0);
				var m74 = trilateral2_Shaper.transformMatrix;
				if(m74 != null) {
					drawType19.transform(m74);
				}
				drawType19.next();
			}
			angle17 += step56;
			bx58 = cx58;
			by58 = cy58;
		}
		count4 += totalSteps17;
		var pi44 = Math.PI;
		var step57 = pi44 * 2 / 36;
		var dif90;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f144;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f144 = pi_24;
			} else {
				var a144 = pi_24 % (2 * Math.PI);
				f144 = a144 >= 0 ? a144 : a144 + 2 * Math.PI;
			}
			var this223 = f144;
			var za72 = this223;
			var f145;
			if(0 > Math.PI) {
				f145 = 0;
			} else {
				var a145 = 0 % (2 * Math.PI);
				f145 = a145 >= 0 ? a145 : a145 + 2 * Math.PI;
			}
			var this224 = f145;
			var zb72 = this224;
			var fa72 = za72;
			var fb72 = zb72;
			var theta98 = Math.abs(fa72 - fb72);
			var clockwise72 = fa72 < fb72;
			var dif91 = clockwise72 ? theta98 : -theta98;
			dif90 = dif91 > 0 ? dif91 : 2 * Math.PI + dif91;
			break;
		case 1:
			var f146;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f146 = pi_24;
			} else {
				var a146 = pi_24 % (2 * Math.PI);
				f146 = a146 >= 0 ? a146 : a146 + 2 * Math.PI;
			}
			var this225 = f146;
			var za73 = this225;
			var f147;
			if(0 > Math.PI) {
				f147 = 0;
			} else {
				var a147 = 0 % (2 * Math.PI);
				f147 = a147 >= 0 ? a147 : a147 + 2 * Math.PI;
			}
			var this226 = f147;
			var zb73 = this226;
			var fa73 = za73;
			var fb73 = zb73;
			var theta99 = Math.abs(fa73 - fb73);
			var clockwise73 = fa73 < fb73;
			var dif92 = clockwise73 ? theta99 : -theta99;
			dif90 = dif92 < 0 ? dif92 : -2 * Math.PI + dif92;
			break;
		case 2:
			var f148;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f148 = pi_24;
			} else {
				var a148 = pi_24 % (2 * Math.PI);
				f148 = a148 >= 0 ? a148 : a148 + 2 * Math.PI;
			}
			var this227 = f148;
			var za74 = this227;
			var f149;
			if(0 > Math.PI) {
				f149 = 0;
			} else {
				var a149 = 0 % (2 * Math.PI);
				f149 = a149 >= 0 ? a149 : a149 + 2 * Math.PI;
			}
			var this228 = f149;
			var zb74 = this228;
			var fa74 = za74;
			var fb74 = zb74;
			var theta100 = Math.abs(fa74 - fb74);
			var smallest18 = theta100 <= Math.PI;
			var clockwise74 = fa74 < fb74;
			var dif93 = clockwise74 ? theta100 : -theta100;
			dif90 = smallest18 ? dif93 : clockwise74 ? -(2 * Math.PI - theta100) : 2 * Math.PI - theta100;
			break;
		case 3:
			var f150;
			if(pi_24 >= 0 && pi_24 > Math.PI) {
				f150 = pi_24;
			} else {
				var a150 = pi_24 % (2 * Math.PI);
				f150 = a150 >= 0 ? a150 : a150 + 2 * Math.PI;
			}
			var this229 = f150;
			var za75 = this229;
			var f151;
			if(0 > Math.PI) {
				f151 = 0;
			} else {
				var a151 = 0 % (2 * Math.PI);
				f151 = a151 >= 0 ? a151 : a151 + 2 * Math.PI;
			}
			var this230 = f151;
			var zb75 = this230;
			var fa75 = za75;
			var fb75 = zb75;
			var theta101 = Math.abs(fa75 - fb75);
			var largest18 = theta101 > Math.PI;
			var clockwise75 = fa75 < fb75;
			var dif94 = clockwise75 ? theta101 : -theta101;
			dif90 = largest18 ? dif94 : clockwise75 ? -(2 * Math.PI - theta101) : 2 * Math.PI - theta101;
			break;
		}
		var positive18 = dif90 >= 0;
		var totalSteps18 = Math.ceil(Math.abs(dif90) / step57);
		var step58 = dif90 / totalSteps18;
		var angle18 = pi_24;
		var cx59;
		var cy59;
		var bx59 = 0;
		var by59 = 0;
		var _g55 = 0;
		var _g145 = totalSteps18 + 1;
		while(_g55 < _g145) {
			var i39 = _g55++;
			cx59 = cx53 + radius19 * Math.sin(angle18);
			cy59 = cy53 + radius19 * Math.cos(angle18);
			if(i39 != 0) {
				drawType19.triangle(cx53,cy53,0,bx59,by59,0,cx59,cy59,0);
				var m75 = trilateral2_Shaper.transformMatrix;
				if(m75 != null) {
					drawType19.transform(m75);
				}
				drawType19.next();
			}
			angle18 += step58;
			bx59 = cx59;
			by59 = cy59;
		}
		count4 += totalSteps18;
		var gamma9 = -pi_24;
		var pi45 = Math.PI;
		var step59 = pi45 * 2 / 36;
		var dif95;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f152;
			if(0 > Math.PI) {
				f152 = 0;
			} else {
				var a152 = 0 % (2 * Math.PI);
				f152 = a152 >= 0 ? a152 : a152 + 2 * Math.PI;
			}
			var this231 = f152;
			var za76 = this231;
			var f153;
			if(gamma9 >= 0 && gamma9 > Math.PI) {
				f153 = gamma9;
			} else {
				var a153 = gamma9 % (2 * Math.PI);
				f153 = a153 >= 0 ? a153 : a153 + 2 * Math.PI;
			}
			var this232 = f153;
			var zb76 = this232;
			var fa76 = za76;
			var fb76 = zb76;
			var theta102 = Math.abs(fa76 - fb76);
			var clockwise76 = fa76 < fb76;
			var dif96 = clockwise76 ? theta102 : -theta102;
			dif95 = dif96 > 0 ? dif96 : 2 * Math.PI + dif96;
			break;
		case 1:
			var f154;
			if(0 > Math.PI) {
				f154 = 0;
			} else {
				var a154 = 0 % (2 * Math.PI);
				f154 = a154 >= 0 ? a154 : a154 + 2 * Math.PI;
			}
			var this233 = f154;
			var za77 = this233;
			var f155;
			if(gamma9 >= 0 && gamma9 > Math.PI) {
				f155 = gamma9;
			} else {
				var a155 = gamma9 % (2 * Math.PI);
				f155 = a155 >= 0 ? a155 : a155 + 2 * Math.PI;
			}
			var this234 = f155;
			var zb77 = this234;
			var fa77 = za77;
			var fb77 = zb77;
			var theta103 = Math.abs(fa77 - fb77);
			var clockwise77 = fa77 < fb77;
			var dif97 = clockwise77 ? theta103 : -theta103;
			dif95 = dif97 < 0 ? dif97 : -2 * Math.PI + dif97;
			break;
		case 2:
			var f156;
			if(0 > Math.PI) {
				f156 = 0;
			} else {
				var a156 = 0 % (2 * Math.PI);
				f156 = a156 >= 0 ? a156 : a156 + 2 * Math.PI;
			}
			var this235 = f156;
			var za78 = this235;
			var f157;
			if(gamma9 >= 0 && gamma9 > Math.PI) {
				f157 = gamma9;
			} else {
				var a157 = gamma9 % (2 * Math.PI);
				f157 = a157 >= 0 ? a157 : a157 + 2 * Math.PI;
			}
			var this236 = f157;
			var zb78 = this236;
			var fa78 = za78;
			var fb78 = zb78;
			var theta104 = Math.abs(fa78 - fb78);
			var smallest19 = theta104 <= Math.PI;
			var clockwise78 = fa78 < fb78;
			var dif98 = clockwise78 ? theta104 : -theta104;
			dif95 = smallest19 ? dif98 : clockwise78 ? -(2 * Math.PI - theta104) : 2 * Math.PI - theta104;
			break;
		case 3:
			var f158;
			if(0 > Math.PI) {
				f158 = 0;
			} else {
				var a158 = 0 % (2 * Math.PI);
				f158 = a158 >= 0 ? a158 : a158 + 2 * Math.PI;
			}
			var this237 = f158;
			var za79 = this237;
			var f159;
			if(gamma9 >= 0 && gamma9 > Math.PI) {
				f159 = gamma9;
			} else {
				var a159 = gamma9 % (2 * Math.PI);
				f159 = a159 >= 0 ? a159 : a159 + 2 * Math.PI;
			}
			var this238 = f159;
			var zb79 = this238;
			var fa79 = za79;
			var fb79 = zb79;
			var theta105 = Math.abs(fa79 - fb79);
			var largest19 = theta105 > Math.PI;
			var clockwise79 = fa79 < fb79;
			var dif99 = clockwise79 ? theta105 : -theta105;
			dif95 = largest19 ? dif99 : clockwise79 ? -(2 * Math.PI - theta105) : 2 * Math.PI - theta105;
			break;
		}
		var positive19 = dif95 >= 0;
		var totalSteps19 = Math.ceil(Math.abs(dif95) / step59);
		var step60 = dif95 / totalSteps19;
		var angle19 = 0;
		var cx60;
		var cy60;
		var bx60 = 0;
		var by60 = 0;
		var _g56 = 0;
		var _g146 = totalSteps19 + 1;
		while(_g56 < _g146) {
			var i40 = _g56++;
			cx60 = dx22 + radius19 * Math.sin(angle19);
			cy60 = dy22 + radius19 * Math.cos(angle19);
			if(i40 != 0) {
				drawType19.triangle(dx22,dy22,0,bx60,by60,0,cx60,cy60,0);
				var m76 = trilateral2_Shaper.transformMatrix;
				if(m76 != null) {
					drawType19.transform(m76);
				}
				drawType19.next();
			}
			angle19 += step60;
			bx60 = cx60;
			by60 = cy60;
		}
		var len19 = count4 += totalSteps19;
		var color13 = rs8.color;
		if(color13 == -1) {
			color13 = this206.currentColor;
		}
		this206.colorType.colorTriangles(color13,len19);
		var end19 = start19 + len19 - 1;
		var s08 = new trilateral2_IndexRange(start19,end19);
		var this239 = this.spots;
		var this240 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this241 = this240;
		var this242 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this239.dz / 2);
		var s34 = this242;
		var this243 = new geom_structure_Mat4x3(this241.a * s34.a + this241.b * s34.e + this241.c * s34.i,this241.a * s34.b + this241.b * s34.f + this241.c * s34.j,this241.a * s34.c + this241.b * s34.g + this241.c * s34.k,this241.a * s34.d + this241.b * s34.h + this241.c * s34.l + this241.d,this241.e * s34.a + this241.f * s34.e + this241.g * s34.i,this241.e * s34.b + this241.f * s34.f + this241.g * s34.j,this241.e * s34.c + this241.f * s34.g + this241.g * s34.k,this241.e * s34.d + this241.f * s34.h + this241.g * s34.l + this241.h,this241.i * s34.a + this241.j * s34.e + this241.k * s34.i,this241.i * s34.b + this241.j * s34.f + this241.k * s34.j,this241.i * s34.c + this241.j * s34.g + this241.k * s34.k,this241.i * s34.d + this241.j * s34.h + this241.k * s34.l + this241.l);
		var trans4 = this243;
		this239.drawType.transformRange(trans4,s08.start,s08.end);
		var this244 = this.spots;
		var rs9 = this.spotShape;
		var s09 = rs9.clone();
		s09.x -= 30;
		s09.y -= 30;
		var start20 = this244.drawType.get_size();
		var drawType20 = this244.drawType;
		var ax29 = s09.x;
		var ay29 = s09.y;
		var radius20 = s09.radius;
		var sides27 = 36;
		if(sides27 == null) {
			sides27 = 36;
		}
		var pi46 = Math.PI;
		var theta106 = pi46 / 2;
		var step61 = pi46 * 2 / sides27;
		var bx61;
		var by61;
		var cx61;
		var cy61;
		var _g57 = 0;
		var _g147 = sides27;
		while(_g57 < _g147) {
			var i41 = _g57++;
			bx61 = ax29 + radius20 * Math.sin(theta106);
			by61 = ay29 + radius20 * Math.cos(theta106);
			theta106 += step61;
			cx61 = ax29 + radius20 * Math.sin(theta106);
			cy61 = ay29 + radius20 * Math.cos(theta106);
			drawType20.triangle(ax29,ay29,0,bx61,by61,0,cx61,cy61,0);
			var m77 = trilateral2_Shaper.transformMatrix;
			if(m77 != null) {
				drawType20.transform(m77);
			}
			drawType20.next();
		}
		var len20 = sides27;
		var color14 = s09.color;
		if(color14 == -1) {
			color14 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color14,len20);
		var end20 = start20 + len20 - 1;
		var startEnd15 = new trilateral2_IndexRange(start20,end20);
		var c04 = startEnd15;
		var s118 = rs9.clone();
		s118.x += 30;
		s118.y -= 30;
		var start21 = this244.drawType.get_size();
		var drawType21 = this244.drawType;
		var ax30 = s118.x;
		var ay30 = s118.y;
		var radius21 = s118.radius;
		var sides28 = 36;
		if(sides28 == null) {
			sides28 = 36;
		}
		var pi47 = Math.PI;
		var theta107 = pi47 / 2;
		var step62 = pi47 * 2 / sides28;
		var bx62;
		var by62;
		var cx62;
		var cy62;
		var _g58 = 0;
		var _g148 = sides28;
		while(_g58 < _g148) {
			var i42 = _g58++;
			bx62 = ax30 + radius21 * Math.sin(theta107);
			by62 = ay30 + radius21 * Math.cos(theta107);
			theta107 += step62;
			cx62 = ax30 + radius21 * Math.sin(theta107);
			cy62 = ay30 + radius21 * Math.cos(theta107);
			drawType21.triangle(ax30,ay30,0,bx62,by62,0,cx62,cy62,0);
			var m78 = trilateral2_Shaper.transformMatrix;
			if(m78 != null) {
				drawType21.transform(m78);
			}
			drawType21.next();
		}
		var len21 = sides28;
		var color15 = s118.color;
		if(color15 == -1) {
			color15 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color15,len21);
		var end21 = start21 + len21 - 1;
		var startEnd16 = new trilateral2_IndexRange(start21,end21);
		var c15 = startEnd16;
		var s212 = rs9.clone();
		s212.x -= 30;
		s212.y += 30;
		var start22 = this244.drawType.get_size();
		var drawType22 = this244.drawType;
		var ax31 = s212.x;
		var ay31 = s212.y;
		var radius22 = s212.radius;
		var sides29 = 36;
		if(sides29 == null) {
			sides29 = 36;
		}
		var pi48 = Math.PI;
		var theta108 = pi48 / 2;
		var step63 = pi48 * 2 / sides29;
		var bx63;
		var by63;
		var cx63;
		var cy63;
		var _g59 = 0;
		var _g149 = sides29;
		while(_g59 < _g149) {
			var i43 = _g59++;
			bx63 = ax31 + radius22 * Math.sin(theta108);
			by63 = ay31 + radius22 * Math.cos(theta108);
			theta108 += step63;
			cx63 = ax31 + radius22 * Math.sin(theta108);
			cy63 = ay31 + radius22 * Math.cos(theta108);
			drawType22.triangle(ax31,ay31,0,bx63,by63,0,cx63,cy63,0);
			var m79 = trilateral2_Shaper.transformMatrix;
			if(m79 != null) {
				drawType22.transform(m79);
			}
			drawType22.next();
		}
		var len22 = sides29;
		var color16 = s212.color;
		if(color16 == -1) {
			color16 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color16,len22);
		var end22 = start22 + len22 - 1;
		var startEnd17 = new trilateral2_IndexRange(start22,end22);
		var c24 = startEnd17;
		var s35 = rs9.clone();
		s35.x += 30;
		s35.y += 30;
		var start23 = this244.drawType.get_size();
		var drawType23 = this244.drawType;
		var ax32 = s35.x;
		var ay32 = s35.y;
		var radius23 = s35.radius;
		var sides30 = 36;
		if(sides30 == null) {
			sides30 = 36;
		}
		var pi49 = Math.PI;
		var theta109 = pi49 / 2;
		var step64 = pi49 * 2 / sides30;
		var bx64;
		var by64;
		var cx64;
		var cy64;
		var _g60 = 0;
		var _g150 = sides30;
		while(_g60 < _g150) {
			var i44 = _g60++;
			bx64 = ax32 + radius23 * Math.sin(theta109);
			by64 = ay32 + radius23 * Math.cos(theta109);
			theta109 += step64;
			cx64 = ax32 + radius23 * Math.sin(theta109);
			cy64 = ay32 + radius23 * Math.cos(theta109);
			drawType23.triangle(ax32,ay32,0,bx64,by64,0,cx64,cy64,0);
			var m80 = trilateral2_Shaper.transformMatrix;
			if(m80 != null) {
				drawType23.transform(m80);
			}
			drawType23.next();
		}
		var len23 = sides30;
		var color17 = s35.color;
		if(color17 == -1) {
			color17 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color17,len23);
		var end23 = start23 + len23 - 1;
		var startEnd18 = new trilateral2_IndexRange(start23,end23);
		var c33 = startEnd18;
		var s43 = rs9.clone();
		var start24 = this244.drawType.get_size();
		var drawType24 = this244.drawType;
		var ax33 = s43.x;
		var ay33 = s43.y;
		var radius24 = s43.radius;
		var sides31 = 36;
		if(sides31 == null) {
			sides31 = 36;
		}
		var pi50 = Math.PI;
		var theta110 = pi50 / 2;
		var step65 = pi50 * 2 / sides31;
		var bx65;
		var by65;
		var cx65;
		var cy65;
		var _g61 = 0;
		var _g151 = sides31;
		while(_g61 < _g151) {
			var i45 = _g61++;
			bx65 = ax33 + radius24 * Math.sin(theta110);
			by65 = ay33 + radius24 * Math.cos(theta110);
			theta110 += step65;
			cx65 = ax33 + radius24 * Math.sin(theta110);
			cy65 = ay33 + radius24 * Math.cos(theta110);
			drawType24.triangle(ax33,ay33,0,bx65,by65,0,cx65,cy65,0);
			var m81 = trilateral2_Shaper.transformMatrix;
			if(m81 != null) {
				drawType24.transform(m81);
			}
			drawType24.next();
		}
		var len24 = sides31;
		var color18 = s43.color;
		if(color18 == -1) {
			color18 = this244.currentColor;
		}
		this244.colorType.colorTriangles(color18,len24);
		var end24 = start24 + len24 - 1;
		var startEnd19 = new trilateral2_IndexRange(start24,end24);
		var c42 = startEnd19;
		var s119 = new trilateral2_IndexRange(c04.start,c42.end);
		var s213 = new trilateral2_IndexRange(s08.start,s119.end);
		this.spots.drawType.transformRange(trans_4,s213.start,s213.end);
		var s52 = s213;
		var this245 = this.spots;
		var rs10 = this.dieShape;
		var start25 = this245.drawType.get_size();
		var drawType25 = this245.drawType;
		var x12 = rs10.x - rs10.radius;
		var y12 = rs10.y - rs10.radius;
		var width5 = rs10.radius * 2;
		var height5 = rs10.radius * 2;
		var radius25 = this245.rounded;
		var pi51 = Math.PI;
		var pi_25 = Math.PI / 2;
		var ax34 = x12 + radius25;
		var ay34 = y12 + radius25;
		var bx66 = x12 + width5 - radius25;
		var by66 = y12 + radius25;
		var cx66 = bx66;
		var cy66 = y12 + height5 - radius25;
		var dx26 = ax34;
		var dy26 = cy66;
		var count5 = 0;
		var ax35 = ax34;
		var ay35 = y12;
		var bx67 = ax34 + (width5 - radius25 * 2);
		var by67 = ay35;
		var cx67 = bx67;
		var cy67 = ay35 + height5;
		var dx27 = ax34;
		var dy27 = cy67;
		drawType25.triangle(ax35,ay35,0,bx67,by67,0,dx27,dy27,0);
		var m82 = trilateral2_Shaper.transformMatrix;
		if(m82 != null) {
			drawType25.transform(m82);
		}
		drawType25.next();
		drawType25.triangle(bx67,by67,0,cx67,cy67,0,dx27,dy27,0);
		var m83 = trilateral2_Shaper.transformMatrix;
		if(m83 != null) {
			drawType25.transform(m83);
		}
		drawType25.next();
		count5 += 2;
		var dimY5 = height5 - 2 * radius25;
		var ax36 = x12;
		var ay36 = ay34;
		var bx68 = x12 + radius25;
		var by68 = ay36;
		var cx68 = bx68;
		var cy68 = ay36 + dimY5;
		var dx28 = x12;
		var dy28 = cy68;
		drawType25.triangle(ax36,ay36,0,bx68,by68,0,dx28,dy28,0);
		var m84 = trilateral2_Shaper.transformMatrix;
		if(m84 != null) {
			drawType25.transform(m84);
		}
		drawType25.next();
		drawType25.triangle(bx68,by68,0,cx68,cy68,0,dx28,dy28,0);
		var m85 = trilateral2_Shaper.transformMatrix;
		if(m85 != null) {
			drawType25.transform(m85);
		}
		drawType25.next();
		count5 += 2;
		var ax37 = bx66;
		var ay37 = by66;
		var bx69 = bx66 + radius25;
		var by69 = ay37;
		var cx69 = bx69;
		var cy69 = ay37 + dimY5;
		var dx29 = bx66;
		var dy29 = cy69;
		drawType25.triangle(ax37,ay37,0,bx69,by69,0,dx29,dy29,0);
		var m86 = trilateral2_Shaper.transformMatrix;
		if(m86 != null) {
			drawType25.transform(m86);
		}
		drawType25.next();
		drawType25.triangle(bx69,by69,0,cx69,cy69,0,dx29,dy29,0);
		var m87 = trilateral2_Shaper.transformMatrix;
		if(m87 != null) {
			drawType25.transform(m87);
		}
		drawType25.next();
		count5 += 2;
		var beta5 = -pi51;
		var gamma10 = -pi_25;
		var pi52 = Math.PI;
		var step66 = pi52 * 2 / 36;
		var dif100;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f160;
			if(beta5 >= 0 && beta5 > Math.PI) {
				f160 = beta5;
			} else {
				var a160 = beta5 % (2 * Math.PI);
				f160 = a160 >= 0 ? a160 : a160 + 2 * Math.PI;
			}
			var this246 = f160;
			var za80 = this246;
			var f161;
			if(gamma10 >= 0 && gamma10 > Math.PI) {
				f161 = gamma10;
			} else {
				var a161 = gamma10 % (2 * Math.PI);
				f161 = a161 >= 0 ? a161 : a161 + 2 * Math.PI;
			}
			var this247 = f161;
			var zb80 = this247;
			var fa80 = za80;
			var fb80 = zb80;
			var theta111 = Math.abs(fa80 - fb80);
			var clockwise80 = fa80 < fb80;
			var dif101 = clockwise80 ? theta111 : -theta111;
			dif100 = dif101 > 0 ? dif101 : 2 * Math.PI + dif101;
			break;
		case 1:
			var f162;
			if(beta5 >= 0 && beta5 > Math.PI) {
				f162 = beta5;
			} else {
				var a162 = beta5 % (2 * Math.PI);
				f162 = a162 >= 0 ? a162 : a162 + 2 * Math.PI;
			}
			var this248 = f162;
			var za81 = this248;
			var f163;
			if(gamma10 >= 0 && gamma10 > Math.PI) {
				f163 = gamma10;
			} else {
				var a163 = gamma10 % (2 * Math.PI);
				f163 = a163 >= 0 ? a163 : a163 + 2 * Math.PI;
			}
			var this249 = f163;
			var zb81 = this249;
			var fa81 = za81;
			var fb81 = zb81;
			var theta112 = Math.abs(fa81 - fb81);
			var clockwise81 = fa81 < fb81;
			var dif102 = clockwise81 ? theta112 : -theta112;
			dif100 = dif102 < 0 ? dif102 : -2 * Math.PI + dif102;
			break;
		case 2:
			var f164;
			if(beta5 >= 0 && beta5 > Math.PI) {
				f164 = beta5;
			} else {
				var a164 = beta5 % (2 * Math.PI);
				f164 = a164 >= 0 ? a164 : a164 + 2 * Math.PI;
			}
			var this250 = f164;
			var za82 = this250;
			var f165;
			if(gamma10 >= 0 && gamma10 > Math.PI) {
				f165 = gamma10;
			} else {
				var a165 = gamma10 % (2 * Math.PI);
				f165 = a165 >= 0 ? a165 : a165 + 2 * Math.PI;
			}
			var this251 = f165;
			var zb82 = this251;
			var fa82 = za82;
			var fb82 = zb82;
			var theta113 = Math.abs(fa82 - fb82);
			var smallest20 = theta113 <= Math.PI;
			var clockwise82 = fa82 < fb82;
			var dif103 = clockwise82 ? theta113 : -theta113;
			dif100 = smallest20 ? dif103 : clockwise82 ? -(2 * Math.PI - theta113) : 2 * Math.PI - theta113;
			break;
		case 3:
			var f166;
			if(beta5 >= 0 && beta5 > Math.PI) {
				f166 = beta5;
			} else {
				var a166 = beta5 % (2 * Math.PI);
				f166 = a166 >= 0 ? a166 : a166 + 2 * Math.PI;
			}
			var this252 = f166;
			var za83 = this252;
			var f167;
			if(gamma10 >= 0 && gamma10 > Math.PI) {
				f167 = gamma10;
			} else {
				var a167 = gamma10 % (2 * Math.PI);
				f167 = a167 >= 0 ? a167 : a167 + 2 * Math.PI;
			}
			var this253 = f167;
			var zb83 = this253;
			var fa83 = za83;
			var fb83 = zb83;
			var theta114 = Math.abs(fa83 - fb83);
			var largest20 = theta114 > Math.PI;
			var clockwise83 = fa83 < fb83;
			var dif104 = clockwise83 ? theta114 : -theta114;
			dif100 = largest20 ? dif104 : clockwise83 ? -(2 * Math.PI - theta114) : 2 * Math.PI - theta114;
			break;
		}
		var positive20 = dif100 >= 0;
		var totalSteps20 = Math.ceil(Math.abs(dif100) / step66);
		var step67 = dif100 / totalSteps20;
		var angle20 = beta5;
		var cx70;
		var cy70;
		var bx70 = 0;
		var by70 = 0;
		var _g62 = 0;
		var _g152 = totalSteps20 + 1;
		while(_g62 < _g152) {
			var i46 = _g62++;
			cx70 = ax34 + radius25 * Math.sin(angle20);
			cy70 = ay34 + radius25 * Math.cos(angle20);
			if(i46 != 0) {
				drawType25.triangle(ax34,ay34,0,bx70,by70,0,cx70,cy70,0);
				var m88 = trilateral2_Shaper.transformMatrix;
				if(m88 != null) {
					drawType25.transform(m88);
				}
				drawType25.next();
			}
			angle20 += step67;
			bx70 = cx70;
			by70 = cy70;
		}
		count5 += totalSteps20;
		var pi53 = Math.PI;
		var step68 = pi53 * 2 / 36;
		var dif105;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f168;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f168 = pi_25;
			} else {
				var a168 = pi_25 % (2 * Math.PI);
				f168 = a168 >= 0 ? a168 : a168 + 2 * Math.PI;
			}
			var this254 = f168;
			var za84 = this254;
			var f169;
			if(pi51 >= 0 && pi51 > Math.PI) {
				f169 = pi51;
			} else {
				var a169 = pi51 % (2 * Math.PI);
				f169 = a169 >= 0 ? a169 : a169 + 2 * Math.PI;
			}
			var this255 = f169;
			var zb84 = this255;
			var fa84 = za84;
			var fb84 = zb84;
			var theta115 = Math.abs(fa84 - fb84);
			var clockwise84 = fa84 < fb84;
			var dif106 = clockwise84 ? theta115 : -theta115;
			dif105 = dif106 > 0 ? dif106 : 2 * Math.PI + dif106;
			break;
		case 1:
			var f170;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f170 = pi_25;
			} else {
				var a170 = pi_25 % (2 * Math.PI);
				f170 = a170 >= 0 ? a170 : a170 + 2 * Math.PI;
			}
			var this256 = f170;
			var za85 = this256;
			var f171;
			if(pi51 >= 0 && pi51 > Math.PI) {
				f171 = pi51;
			} else {
				var a171 = pi51 % (2 * Math.PI);
				f171 = a171 >= 0 ? a171 : a171 + 2 * Math.PI;
			}
			var this257 = f171;
			var zb85 = this257;
			var fa85 = za85;
			var fb85 = zb85;
			var theta116 = Math.abs(fa85 - fb85);
			var clockwise85 = fa85 < fb85;
			var dif107 = clockwise85 ? theta116 : -theta116;
			dif105 = dif107 < 0 ? dif107 : -2 * Math.PI + dif107;
			break;
		case 2:
			var f172;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f172 = pi_25;
			} else {
				var a172 = pi_25 % (2 * Math.PI);
				f172 = a172 >= 0 ? a172 : a172 + 2 * Math.PI;
			}
			var this258 = f172;
			var za86 = this258;
			var f173;
			if(pi51 >= 0 && pi51 > Math.PI) {
				f173 = pi51;
			} else {
				var a173 = pi51 % (2 * Math.PI);
				f173 = a173 >= 0 ? a173 : a173 + 2 * Math.PI;
			}
			var this259 = f173;
			var zb86 = this259;
			var fa86 = za86;
			var fb86 = zb86;
			var theta117 = Math.abs(fa86 - fb86);
			var smallest21 = theta117 <= Math.PI;
			var clockwise86 = fa86 < fb86;
			var dif108 = clockwise86 ? theta117 : -theta117;
			dif105 = smallest21 ? dif108 : clockwise86 ? -(2 * Math.PI - theta117) : 2 * Math.PI - theta117;
			break;
		case 3:
			var f174;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f174 = pi_25;
			} else {
				var a174 = pi_25 % (2 * Math.PI);
				f174 = a174 >= 0 ? a174 : a174 + 2 * Math.PI;
			}
			var this260 = f174;
			var za87 = this260;
			var f175;
			if(pi51 >= 0 && pi51 > Math.PI) {
				f175 = pi51;
			} else {
				var a175 = pi51 % (2 * Math.PI);
				f175 = a175 >= 0 ? a175 : a175 + 2 * Math.PI;
			}
			var this261 = f175;
			var zb87 = this261;
			var fa87 = za87;
			var fb87 = zb87;
			var theta118 = Math.abs(fa87 - fb87);
			var largest21 = theta118 > Math.PI;
			var clockwise87 = fa87 < fb87;
			var dif109 = clockwise87 ? theta118 : -theta118;
			dif105 = largest21 ? dif109 : clockwise87 ? -(2 * Math.PI - theta118) : 2 * Math.PI - theta118;
			break;
		}
		var positive21 = dif105 >= 0;
		var totalSteps21 = Math.ceil(Math.abs(dif105) / step68);
		var step69 = dif105 / totalSteps21;
		var angle21 = pi_25;
		var cx71;
		var cy71;
		var bx71 = 0;
		var by71 = 0;
		var _g63 = 0;
		var _g153 = totalSteps21 + 1;
		while(_g63 < _g153) {
			var i47 = _g63++;
			cx71 = bx66 + radius25 * Math.sin(angle21);
			cy71 = by66 + radius25 * Math.cos(angle21);
			if(i47 != 0) {
				drawType25.triangle(bx66,by66,0,bx71,by71,0,cx71,cy71,0);
				var m89 = trilateral2_Shaper.transformMatrix;
				if(m89 != null) {
					drawType25.transform(m89);
				}
				drawType25.next();
			}
			angle21 += step69;
			bx71 = cx71;
			by71 = cy71;
		}
		count5 += totalSteps21;
		var pi54 = Math.PI;
		var step70 = pi54 * 2 / 36;
		var dif110;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f176;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f176 = pi_25;
			} else {
				var a176 = pi_25 % (2 * Math.PI);
				f176 = a176 >= 0 ? a176 : a176 + 2 * Math.PI;
			}
			var this262 = f176;
			var za88 = this262;
			var f177;
			if(0 > Math.PI) {
				f177 = 0;
			} else {
				var a177 = 0 % (2 * Math.PI);
				f177 = a177 >= 0 ? a177 : a177 + 2 * Math.PI;
			}
			var this263 = f177;
			var zb88 = this263;
			var fa88 = za88;
			var fb88 = zb88;
			var theta119 = Math.abs(fa88 - fb88);
			var clockwise88 = fa88 < fb88;
			var dif111 = clockwise88 ? theta119 : -theta119;
			dif110 = dif111 > 0 ? dif111 : 2 * Math.PI + dif111;
			break;
		case 1:
			var f178;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f178 = pi_25;
			} else {
				var a178 = pi_25 % (2 * Math.PI);
				f178 = a178 >= 0 ? a178 : a178 + 2 * Math.PI;
			}
			var this264 = f178;
			var za89 = this264;
			var f179;
			if(0 > Math.PI) {
				f179 = 0;
			} else {
				var a179 = 0 % (2 * Math.PI);
				f179 = a179 >= 0 ? a179 : a179 + 2 * Math.PI;
			}
			var this265 = f179;
			var zb89 = this265;
			var fa89 = za89;
			var fb89 = zb89;
			var theta120 = Math.abs(fa89 - fb89);
			var clockwise89 = fa89 < fb89;
			var dif112 = clockwise89 ? theta120 : -theta120;
			dif110 = dif112 < 0 ? dif112 : -2 * Math.PI + dif112;
			break;
		case 2:
			var f180;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f180 = pi_25;
			} else {
				var a180 = pi_25 % (2 * Math.PI);
				f180 = a180 >= 0 ? a180 : a180 + 2 * Math.PI;
			}
			var this266 = f180;
			var za90 = this266;
			var f181;
			if(0 > Math.PI) {
				f181 = 0;
			} else {
				var a181 = 0 % (2 * Math.PI);
				f181 = a181 >= 0 ? a181 : a181 + 2 * Math.PI;
			}
			var this267 = f181;
			var zb90 = this267;
			var fa90 = za90;
			var fb90 = zb90;
			var theta121 = Math.abs(fa90 - fb90);
			var smallest22 = theta121 <= Math.PI;
			var clockwise90 = fa90 < fb90;
			var dif113 = clockwise90 ? theta121 : -theta121;
			dif110 = smallest22 ? dif113 : clockwise90 ? -(2 * Math.PI - theta121) : 2 * Math.PI - theta121;
			break;
		case 3:
			var f182;
			if(pi_25 >= 0 && pi_25 > Math.PI) {
				f182 = pi_25;
			} else {
				var a182 = pi_25 % (2 * Math.PI);
				f182 = a182 >= 0 ? a182 : a182 + 2 * Math.PI;
			}
			var this268 = f182;
			var za91 = this268;
			var f183;
			if(0 > Math.PI) {
				f183 = 0;
			} else {
				var a183 = 0 % (2 * Math.PI);
				f183 = a183 >= 0 ? a183 : a183 + 2 * Math.PI;
			}
			var this269 = f183;
			var zb91 = this269;
			var fa91 = za91;
			var fb91 = zb91;
			var theta122 = Math.abs(fa91 - fb91);
			var largest22 = theta122 > Math.PI;
			var clockwise91 = fa91 < fb91;
			var dif114 = clockwise91 ? theta122 : -theta122;
			dif110 = largest22 ? dif114 : clockwise91 ? -(2 * Math.PI - theta122) : 2 * Math.PI - theta122;
			break;
		}
		var positive22 = dif110 >= 0;
		var totalSteps22 = Math.ceil(Math.abs(dif110) / step70);
		var step71 = dif110 / totalSteps22;
		var angle22 = pi_25;
		var cx72;
		var cy72;
		var bx72 = 0;
		var by72 = 0;
		var _g64 = 0;
		var _g154 = totalSteps22 + 1;
		while(_g64 < _g154) {
			var i48 = _g64++;
			cx72 = cx66 + radius25 * Math.sin(angle22);
			cy72 = cy66 + radius25 * Math.cos(angle22);
			if(i48 != 0) {
				drawType25.triangle(cx66,cy66,0,bx72,by72,0,cx72,cy72,0);
				var m90 = trilateral2_Shaper.transformMatrix;
				if(m90 != null) {
					drawType25.transform(m90);
				}
				drawType25.next();
			}
			angle22 += step71;
			bx72 = cx72;
			by72 = cy72;
		}
		count5 += totalSteps22;
		var gamma11 = -pi_25;
		var pi55 = Math.PI;
		var step72 = pi55 * 2 / 36;
		var dif115;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f184;
			if(0 > Math.PI) {
				f184 = 0;
			} else {
				var a184 = 0 % (2 * Math.PI);
				f184 = a184 >= 0 ? a184 : a184 + 2 * Math.PI;
			}
			var this270 = f184;
			var za92 = this270;
			var f185;
			if(gamma11 >= 0 && gamma11 > Math.PI) {
				f185 = gamma11;
			} else {
				var a185 = gamma11 % (2 * Math.PI);
				f185 = a185 >= 0 ? a185 : a185 + 2 * Math.PI;
			}
			var this271 = f185;
			var zb92 = this271;
			var fa92 = za92;
			var fb92 = zb92;
			var theta123 = Math.abs(fa92 - fb92);
			var clockwise92 = fa92 < fb92;
			var dif116 = clockwise92 ? theta123 : -theta123;
			dif115 = dif116 > 0 ? dif116 : 2 * Math.PI + dif116;
			break;
		case 1:
			var f186;
			if(0 > Math.PI) {
				f186 = 0;
			} else {
				var a186 = 0 % (2 * Math.PI);
				f186 = a186 >= 0 ? a186 : a186 + 2 * Math.PI;
			}
			var this272 = f186;
			var za93 = this272;
			var f187;
			if(gamma11 >= 0 && gamma11 > Math.PI) {
				f187 = gamma11;
			} else {
				var a187 = gamma11 % (2 * Math.PI);
				f187 = a187 >= 0 ? a187 : a187 + 2 * Math.PI;
			}
			var this273 = f187;
			var zb93 = this273;
			var fa93 = za93;
			var fb93 = zb93;
			var theta124 = Math.abs(fa93 - fb93);
			var clockwise93 = fa93 < fb93;
			var dif117 = clockwise93 ? theta124 : -theta124;
			dif115 = dif117 < 0 ? dif117 : -2 * Math.PI + dif117;
			break;
		case 2:
			var f188;
			if(0 > Math.PI) {
				f188 = 0;
			} else {
				var a188 = 0 % (2 * Math.PI);
				f188 = a188 >= 0 ? a188 : a188 + 2 * Math.PI;
			}
			var this274 = f188;
			var za94 = this274;
			var f189;
			if(gamma11 >= 0 && gamma11 > Math.PI) {
				f189 = gamma11;
			} else {
				var a189 = gamma11 % (2 * Math.PI);
				f189 = a189 >= 0 ? a189 : a189 + 2 * Math.PI;
			}
			var this275 = f189;
			var zb94 = this275;
			var fa94 = za94;
			var fb94 = zb94;
			var theta125 = Math.abs(fa94 - fb94);
			var smallest23 = theta125 <= Math.PI;
			var clockwise94 = fa94 < fb94;
			var dif118 = clockwise94 ? theta125 : -theta125;
			dif115 = smallest23 ? dif118 : clockwise94 ? -(2 * Math.PI - theta125) : 2 * Math.PI - theta125;
			break;
		case 3:
			var f190;
			if(0 > Math.PI) {
				f190 = 0;
			} else {
				var a190 = 0 % (2 * Math.PI);
				f190 = a190 >= 0 ? a190 : a190 + 2 * Math.PI;
			}
			var this276 = f190;
			var za95 = this276;
			var f191;
			if(gamma11 >= 0 && gamma11 > Math.PI) {
				f191 = gamma11;
			} else {
				var a191 = gamma11 % (2 * Math.PI);
				f191 = a191 >= 0 ? a191 : a191 + 2 * Math.PI;
			}
			var this277 = f191;
			var zb95 = this277;
			var fa95 = za95;
			var fb95 = zb95;
			var theta126 = Math.abs(fa95 - fb95);
			var largest23 = theta126 > Math.PI;
			var clockwise95 = fa95 < fb95;
			var dif119 = clockwise95 ? theta126 : -theta126;
			dif115 = largest23 ? dif119 : clockwise95 ? -(2 * Math.PI - theta126) : 2 * Math.PI - theta126;
			break;
		}
		var positive23 = dif115 >= 0;
		var totalSteps23 = Math.ceil(Math.abs(dif115) / step72);
		var step73 = dif115 / totalSteps23;
		var angle23 = 0;
		var cx73;
		var cy73;
		var bx73 = 0;
		var by73 = 0;
		var _g65 = 0;
		var _g155 = totalSteps23 + 1;
		while(_g65 < _g155) {
			var i49 = _g65++;
			cx73 = dx26 + radius25 * Math.sin(angle23);
			cy73 = dy26 + radius25 * Math.cos(angle23);
			if(i49 != 0) {
				drawType25.triangle(dx26,dy26,0,bx73,by73,0,cx73,cy73,0);
				var m91 = trilateral2_Shaper.transformMatrix;
				if(m91 != null) {
					drawType25.transform(m91);
				}
				drawType25.next();
			}
			angle23 += step73;
			bx73 = cx73;
			by73 = cy73;
		}
		var len25 = count5 += totalSteps23;
		var color19 = rs10.color;
		if(color19 == -1) {
			color19 = this245.currentColor;
		}
		this245.colorType.colorTriangles(color19,len25);
		var end25 = start25 + len25 - 1;
		var s010 = new trilateral2_IndexRange(start25,end25);
		var this278 = this.spots;
		var this279 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this280 = this279;
		var this281 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,-this278.dz / 2);
		var s36 = this281;
		var this282 = new geom_structure_Mat4x3(this280.a * s36.a + this280.b * s36.e + this280.c * s36.i,this280.a * s36.b + this280.b * s36.f + this280.c * s36.j,this280.a * s36.c + this280.b * s36.g + this280.c * s36.k,this280.a * s36.d + this280.b * s36.h + this280.c * s36.l + this280.d,this280.e * s36.a + this280.f * s36.e + this280.g * s36.i,this280.e * s36.b + this280.f * s36.f + this280.g * s36.j,this280.e * s36.c + this280.f * s36.g + this280.g * s36.k,this280.e * s36.d + this280.f * s36.h + this280.g * s36.l + this280.h,this280.i * s36.a + this280.j * s36.e + this280.k * s36.i,this280.i * s36.b + this280.j * s36.f + this280.k * s36.j,this280.i * s36.c + this280.j * s36.g + this280.k * s36.k,this280.i * s36.d + this280.j * s36.h + this280.k * s36.l + this280.l);
		var trans5 = this282;
		this278.drawType.transformRange(trans5,s010.start,s010.end);
		var this283 = this.spots;
		var s011 = this.spotShape.clone();
		var arr6 = [-6062548,-2774968,-1788035,-2838729,-8448,-212480,-14809,-13312,-162539,-3763446,-12032,-935891,-1655158,-13261,-2453248,-2448096,-3820712,-3432139,-6724331];
		var rx18 = 0.5;
		var ry18 = 0.5;
		var sides32 = 47;
		if(sides32 == null) {
			sides32 = 36;
		}
		if(ry18 == null) {
			ry18 = 0;
		}
		if(rx18 == null) {
			rx18 = 0;
		}
		var start26 = this283.drawType.get_size();
		var drawType26 = this283.drawType;
		var x13 = s011.x;
		var y13 = s011.y;
		var radius26 = s011.radius;
		var len26;
		if((sides32 & 1) == 0) {
			haxe_Log.trace("even",{ fileName : "trilateral2/Shaper.hx", lineNumber : 684, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx19 = rx18;
			var ry19 = ry18;
			var sides33 = sides32;
			var omega12 = 0.;
			if(omega12 == null) {
				omega12 = 0.;
			}
			if(sides33 == null) {
				sides33 = 36;
			}
			var pi56 = Math.PI;
			var theta127 = pi56 / 2 + omega12;
			var step74 = pi56 * 2 / sides33;
			var bx74;
			var by74;
			var cx74;
			var cy74;
			if(rx19 > 1.) {
				rx19 = 1;
			}
			if(rx19 < -1.) {
				rx19 = -1;
			}
			if(ry19 > 1.) {
				ry19 = 1;
			}
			if(ry19 < -1.) {
				ry19 = -1;
			}
			var mx12 = x13 + rx19 * radius26;
			var my12 = y13 - ry19 * radius26;
			var _g66 = 0;
			var _g156 = sides33;
			while(_g66 < _g156) {
				var i50 = _g66++;
				bx74 = x13 + radius26 * Math.sin(theta127);
				by74 = y13 + radius26 * Math.cos(theta127);
				theta127 += step74;
				cx74 = x13 + radius26 * Math.sin(theta127);
				cy74 = y13 + radius26 * Math.cos(theta127);
				drawType26.triangle(mx12,my12,0,bx74,by74,0,cx74,cy74,0);
				var m92 = trilateral2_Shaper.transformMatrix;
				if(m92 != null) {
					drawType26.transform(m92);
				}
				drawType26.next();
			}
			len26 = sides33;
		} else {
			haxe_Log.trace("odd",{ fileName : "trilateral2/Shaper.hx", lineNumber : 687, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			haxe_Log.trace(sides32 & 1,{ fileName : "trilateral2/Shaper.hx", lineNumber : 688, className : "trilateral2.Shaper", methodName : "shapeRadial"});
			var rx20 = rx18;
			var ry20 = ry18;
			var sides34 = sides32;
			var omega13 = 0.;
			if(omega13 == null) {
				omega13 = 0.;
			}
			if(sides34 == null) {
				sides34 = 36;
			}
			var pi57 = Math.PI;
			var theta128 = pi57 / 2;
			var step75 = pi57 * 2 / sides34;
			theta128 -= step75 / 2 + omega13;
			var bx75 = 0;
			var by75 = 0;
			var cx75 = 0;
			var cy75 = 0;
			if(rx20 > 1.) {
				rx20 = 1;
			}
			if(rx20 < -1.) {
				rx20 = -1;
			}
			if(ry20 > 1.) {
				ry20 = 1;
			}
			if(ry20 < -1.) {
				ry20 = -1;
			}
			var mx13 = x13 + rx20 * radius26;
			var my13 = y13 - ry20 * radius26;
			var dx30 = x13 + radius26 * Math.sin(theta128);
			var dy30 = y13 + radius26 * Math.cos(theta128);
			var _g67 = 0;
			var _g157 = sides34 - 1;
			while(_g67 < _g157) {
				var i51 = _g67++;
				bx75 = x13 + radius26 * Math.sin(theta128);
				by75 = y13 + radius26 * Math.cos(theta128);
				theta128 += step75;
				cx75 = x13 + radius26 * Math.sin(theta128);
				cy75 = y13 + radius26 * Math.cos(theta128);
				drawType26.triangle(mx13,my13,0,bx75,by75,0,cx75,cy75,0);
				var m93 = trilateral2_Shaper.transformMatrix;
				if(m93 != null) {
					drawType26.transform(m93);
				}
				drawType26.next();
			}
			drawType26.triangle(mx13,my13,0,cx75,cy75,0,dx30,dy30,0);
			var m94 = trilateral2_Shaper.transformMatrix;
			if(m94 != null) {
				drawType26.transform(m94);
			}
			drawType26.next();
			len26 = sides34;
		}
		var k6 = 1;
		var arrEnd6 = arr6.length - 1;
		var end26 = start26 + len26 - 1;
		var arr_6 = arr6.slice();
		var _g68 = 0;
		var _g158 = len26 - 1;
		while(_g68 < _g158) {
			var j6 = _g68++;
			this283.colorType.cornerColors(s011.color,arr_6[k6 - 1],arr_6[k6]);
			++k6;
			if(k6 > arrEnd6) {
				k6 = 1;
				arr_6.reverse();
			}
		}
		this283.colorType.cornerColors(s011.color,arr_6[k6 - 1],arr6[0]);
		var startEnd20 = new trilateral2_IndexRange(start26,end26);
		var c05 = startEnd20;
		var s120 = new trilateral2_IndexRange(c05.start,c05.end);
		var s214 = new trilateral2_IndexRange(s010.start,s120.end);
		this.spots.drawType.transformRange(trans_0,s214.start,s214.end);
		var s121 = s214;
		var startEnd21 = new trilateral2_IndexRange(s61.start,s121.end);
		return startEnd21;
	}
	,__class__: trilateral2Lime_Die
};
var trilateral2Lime_GridLines = function(pen,stageRadius) {
	this.pen = pen;
	this.stageRadius = stageRadius;
};
$hxClasses["trilateral2Lime.GridLines"] = trilateral2Lime_GridLines;
trilateral2Lime_GridLines.__name__ = "trilateral2Lime.GridLines";
trilateral2Lime_GridLines.prototype = {
	draw: function(spacing,colorA,colorB) {
		var gap = 15;
		var len = Math.ceil((this.stageRadius * 2 - 2 * gap) / spacing);
		this.pen.currentColor = colorB;
		var sketch = new trilateral2_Sketch(this.pen,trilateral2_SketchForm.Crude,3);
		sketch.width = spacing / 4;
		var delta = 0.;
		sketch.moveTo(0,0);
		var _g = 1;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var delta1 = i * spacing;
			if(i % 10 == 0) {
				this.pen.currentColor = colorA;
			} else {
				this.pen.currentColor = colorB;
			}
			sketch.moveTo(gap,delta1 + gap);
			var x_ = this.stageRadius * 2 - gap;
			var y_ = delta1 + gap;
			var repeat = sketch.x == x_ && sketch.y == y_;
			if(!repeat) {
				if(sketch.widthFunction != null) {
					sketch.width = sketch.widthFunction(sketch.width,sketch.x,sketch.y,x_,y_);
				}
				if(sketch.colourFunction != null) {
					sketch.pen.currentColor = sketch.colourFunction(sketch.pen.currentColor,sketch.x,sketch.y,x_,y_);
				}
				sketch.line(x_,y_);
				var l = sketch.points.length;
				var p = sketch.points[l - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = sketch.dim[sketch.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				sketch.x = x_;
				sketch.y = y_;
			}
			sketch.moveTo(delta1 + gap,gap);
			var x_1 = delta1 + gap;
			var y_1 = this.stageRadius * 2 - gap;
			var repeat1 = sketch.x == x_1 && sketch.y == y_1;
			if(!repeat1) {
				if(sketch.widthFunction != null) {
					sketch.width = sketch.widthFunction(sketch.width,sketch.x,sketch.y,x_1,y_1);
				}
				if(sketch.colourFunction != null) {
					sketch.pen.currentColor = sketch.colourFunction(sketch.pen.currentColor,sketch.x,sketch.y,x_1,y_1);
				}
				sketch.line(x_1,y_1);
				var l1 = sketch.points.length;
				var p1 = sketch.points[l1 - 1];
				var l21 = p1.length;
				p1[l21] = x_1;
				p1[l21 + 1] = y_1;
				var d1 = sketch.dim[sketch.dim.length - 1];
				if(x_1 < d1.minX) {
					d1.minX = x_1;
				}
				if(x_1 > d1.maxX) {
					d1.maxX = x_1;
				}
				if(y_1 < d1.minY) {
					d1.minY = y_1;
				}
				if(y_1 > d1.maxY) {
					d1.maxY = y_1;
				}
				sketch.x = x_1;
				sketch.y = y_1;
			}
		}
	}
	,__class__: trilateral2Lime_GridLines
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
hxGeomAlgo_PolyTools.exposeEnum(hxGeomAlgo_WindingRule);
hxGeomAlgo_PolyTools.exposeEnum(hxGeomAlgo_ResultType);
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
var array = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint32Array(256);
lime_math__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.003921568627447);
}
var array1 = null;
var view1 = null;
var buffer1 = null;
var len1 = null;
var this2 = new Uint8Array(511);
lime_math__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g2 = 255;
var _g3 = 511;
while(_g2 < _g3) {
	var i2 = _g2++;
	lime_math__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
Main.vertexColor = "attribute vec3 pos;" + "attribute vec4 color;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(pos, 1.);" + " vcol = color;" + "}";
Main.fragmentColor = "precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}";
Main.stageRadius = 600;
Main.largeEnough = 2000000;
Main.posName = "pos";
Main.colorName = "color";
Main.textureName = "aTexture";
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.rows = 1;
geom_matrix__$Matrix1x2_Matrix1x2_$Impl_$.columns = 2;
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.rows = 1;
geom_matrix__$Matrix1x3_Matrix1x3_$Impl_$.columns = 3;
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.rows = 1;
geom_matrix__$Matrix1x4_Matrix1x4_$Impl_$.columns = 4;
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.row = 2;
geom_matrix__$Matrix2x2_Matrix2x2_$Impl_$.col = 2;
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.rows = 3;
geom_matrix__$Matrix3x3_Matrix3x3_$Impl_$.columns = 3;
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.rows = 4;
geom_matrix__$Matrix4x3_Matrix4x3_$Impl_$.columns = 3;
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.rows = 4;
geom_matrix__$Matrix4x4_Matrix4x4_$Impl_$.columns = 4;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxGeomAlgo_HomogCoord.INFINITY = new hxGeomAlgo_HomogCoord();
hxGeomAlgo__$HxPoint_HxPoint_$Impl_$.EMPTY = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(NaN,NaN);
hxGeomAlgo_PolyTools.point = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new();
hxGeomAlgo_PolyTools.zero = hxGeomAlgo__$HxPoint_HxPoint_$Impl_$._new(0,0);
hxGeomAlgo_PolyTools.EPSILON = .00000001;
hxPolyK_PolyK.small = 0.0000000001;
lime__$internal_backend_html5_HTML5HTTPRequest.OPTION_REVOKE_URL = 1;
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 17;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new haxe_ds_List();
lime__$internal_backend_html5_HTML5Window.dummyCharacter = "";
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime__$internal_format_Base64.DICTIONARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
lime__$internal_format_Base64.EXTENDED_DICTIONARY = (function($this) {
	var $r;
	var result = [];
	{
		var _g = 0;
		var _g1 = lime__$internal_format_Base64.DICTIONARY;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = lime__$internal_format_Base64.DICTIONARY;
			while(_g2 < _g11.length) {
				var b = _g11[_g2];
				++_g2;
				result.push(a + b);
			}
		}
	}
	$r = result;
	return $r;
}(this));
lime__$internal_graphics_StackBlur.MUL_TABLE = [1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1];
lime__$internal_graphics_StackBlur.SHG_TABLE = [0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9];
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.EXTENSIONS = 7939;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_graphics_opengl_GL.READ_BUFFER = 3074;
lime_graphics_opengl_GL.UNPACK_ROW_LENGTH = 3314;
lime_graphics_opengl_GL.UNPACK_SKIP_ROWS = 3315;
lime_graphics_opengl_GL.UNPACK_SKIP_PIXELS = 3316;
lime_graphics_opengl_GL.PACK_ROW_LENGTH = 3330;
lime_graphics_opengl_GL.PACK_SKIP_ROWS = 3331;
lime_graphics_opengl_GL.PACK_SKIP_PIXELS = 3332;
lime_graphics_opengl_GL.TEXTURE_BINDING_3D = 32874;
lime_graphics_opengl_GL.UNPACK_SKIP_IMAGES = 32877;
lime_graphics_opengl_GL.UNPACK_IMAGE_HEIGHT = 32878;
lime_graphics_opengl_GL.MAX_3D_TEXTURE_SIZE = 32883;
lime_graphics_opengl_GL.MAX_ELEMENTS_VERTICES = 33000;
lime_graphics_opengl_GL.MAX_ELEMENTS_INDICES = 33001;
lime_graphics_opengl_GL.MAX_TEXTURE_LOD_BIAS = 34045;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
lime_graphics_opengl_GL.MAX_ARRAY_TEXTURE_LAYERS = 35071;
lime_graphics_opengl_GL.MIN_PROGRAM_TEXEL_OFFSET = 35076;
lime_graphics_opengl_GL.MAX_PROGRAM_TEXEL_OFFSET = 35077;
lime_graphics_opengl_GL.MAX_VARYING_COMPONENTS = 35659;
lime_graphics_opengl_GL.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
lime_graphics_opengl_GL.RASTERIZER_DISCARD = 35977;
lime_graphics_opengl_GL.VERTEX_ARRAY_BINDING = 34229;
lime_graphics_opengl_GL.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
lime_graphics_opengl_GL.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
lime_graphics_opengl_GL.MAX_SERVER_WAIT_TIMEOUT = 37137;
lime_graphics_opengl_GL.MAX_ELEMENT_INDEX = 36203;
lime_graphics_opengl_GL.RED = 6403;
lime_graphics_opengl_GL.RGB8 = 32849;
lime_graphics_opengl_GL.RGBA8 = 32856;
lime_graphics_opengl_GL.RGB10_A2 = 32857;
lime_graphics_opengl_GL.TEXTURE_3D = 32879;
lime_graphics_opengl_GL.TEXTURE_WRAP_R = 32882;
lime_graphics_opengl_GL.TEXTURE_MIN_LOD = 33082;
lime_graphics_opengl_GL.TEXTURE_MAX_LOD = 33083;
lime_graphics_opengl_GL.TEXTURE_BASE_LEVEL = 33084;
lime_graphics_opengl_GL.TEXTURE_MAX_LEVEL = 33085;
lime_graphics_opengl_GL.TEXTURE_COMPARE_MODE = 34892;
lime_graphics_opengl_GL.TEXTURE_COMPARE_FUNC = 34893;
lime_graphics_opengl_GL.SRGB = 35904;
lime_graphics_opengl_GL.SRGB8 = 35905;
lime_graphics_opengl_GL.SRGB8_ALPHA8 = 35907;
lime_graphics_opengl_GL.COMPARE_REF_TO_TEXTURE = 34894;
lime_graphics_opengl_GL.RGBA32F = 34836;
lime_graphics_opengl_GL.RGB32F = 34837;
lime_graphics_opengl_GL.RGBA16F = 34842;
lime_graphics_opengl_GL.RGB16F = 34843;
lime_graphics_opengl_GL.TEXTURE_2D_ARRAY = 35866;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D_ARRAY = 35869;
lime_graphics_opengl_GL.R11F_G11F_B10F = 35898;
lime_graphics_opengl_GL.RGB9_E5 = 35901;
lime_graphics_opengl_GL.RGBA32UI = 36208;
lime_graphics_opengl_GL.RGB32UI = 36209;
lime_graphics_opengl_GL.RGBA16UI = 36214;
lime_graphics_opengl_GL.RGB16UI = 36215;
lime_graphics_opengl_GL.RGBA8UI = 36220;
lime_graphics_opengl_GL.RGB8UI = 36221;
lime_graphics_opengl_GL.RGBA32I = 36226;
lime_graphics_opengl_GL.RGB32I = 36227;
lime_graphics_opengl_GL.RGBA16I = 36232;
lime_graphics_opengl_GL.RGB16I = 36233;
lime_graphics_opengl_GL.RGBA8I = 36238;
lime_graphics_opengl_GL.RGB8I = 36239;
lime_graphics_opengl_GL.RED_INTEGER = 36244;
lime_graphics_opengl_GL.RGB_INTEGER = 36248;
lime_graphics_opengl_GL.RGBA_INTEGER = 36249;
lime_graphics_opengl_GL.R8 = 33321;
lime_graphics_opengl_GL.RG8 = 33323;
lime_graphics_opengl_GL.R16F = 33325;
lime_graphics_opengl_GL.R32F = 33326;
lime_graphics_opengl_GL.RG16F = 33327;
lime_graphics_opengl_GL.RG32F = 33328;
lime_graphics_opengl_GL.R8I = 33329;
lime_graphics_opengl_GL.R8UI = 33330;
lime_graphics_opengl_GL.R16I = 33331;
lime_graphics_opengl_GL.R16UI = 33332;
lime_graphics_opengl_GL.R32I = 33333;
lime_graphics_opengl_GL.R32UI = 33334;
lime_graphics_opengl_GL.RG8I = 33335;
lime_graphics_opengl_GL.RG8UI = 33336;
lime_graphics_opengl_GL.RG16I = 33337;
lime_graphics_opengl_GL.RG16UI = 33338;
lime_graphics_opengl_GL.RG32I = 33339;
lime_graphics_opengl_GL.RG32UI = 33340;
lime_graphics_opengl_GL.R8_SNORM = 36756;
lime_graphics_opengl_GL.RG8_SNORM = 36757;
lime_graphics_opengl_GL.RGB8_SNORM = 36758;
lime_graphics_opengl_GL.RGBA8_SNORM = 36759;
lime_graphics_opengl_GL.RGB10_A2UI = 36975;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_FORMAT = 37167;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_LEVELS = 33503;
lime_graphics_opengl_GL.UNSIGNED_INT_2_10_10_10_REV = 33640;
lime_graphics_opengl_GL.UNSIGNED_INT_10F_11F_11F_REV = 35899;
lime_graphics_opengl_GL.UNSIGNED_INT_5_9_9_9_REV = 35902;
lime_graphics_opengl_GL.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
lime_graphics_opengl_GL.UNSIGNED_INT_24_8 = 34042;
lime_graphics_opengl_GL.HALF_FLOAT = 5131;
lime_graphics_opengl_GL.RG = 33319;
lime_graphics_opengl_GL.RG_INTEGER = 33320;
lime_graphics_opengl_GL.INT_2_10_10_10_REV = 36255;
lime_graphics_opengl_GL.CURRENT_QUERY = 34917;
lime_graphics_opengl_GL.QUERY_RESULT = 34918;
lime_graphics_opengl_GL.QUERY_RESULT_AVAILABLE = 34919;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED = 35887;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
lime_graphics_opengl_GL.MAX_DRAW_BUFFERS = 34852;
lime_graphics_opengl_GL.DRAW_BUFFER0 = 34853;
lime_graphics_opengl_GL.DRAW_BUFFER1 = 34854;
lime_graphics_opengl_GL.DRAW_BUFFER2 = 34855;
lime_graphics_opengl_GL.DRAW_BUFFER3 = 34856;
lime_graphics_opengl_GL.DRAW_BUFFER4 = 34857;
lime_graphics_opengl_GL.DRAW_BUFFER5 = 34858;
lime_graphics_opengl_GL.DRAW_BUFFER6 = 34859;
lime_graphics_opengl_GL.DRAW_BUFFER7 = 34860;
lime_graphics_opengl_GL.DRAW_BUFFER8 = 34861;
lime_graphics_opengl_GL.DRAW_BUFFER9 = 34862;
lime_graphics_opengl_GL.DRAW_BUFFER10 = 34863;
lime_graphics_opengl_GL.DRAW_BUFFER11 = 34864;
lime_graphics_opengl_GL.DRAW_BUFFER12 = 34865;
lime_graphics_opengl_GL.DRAW_BUFFER13 = 34866;
lime_graphics_opengl_GL.DRAW_BUFFER14 = 34867;
lime_graphics_opengl_GL.DRAW_BUFFER15 = 34868;
lime_graphics_opengl_GL.MAX_COLOR_ATTACHMENTS = 36063;
lime_graphics_opengl_GL.COLOR_ATTACHMENT1 = 36065;
lime_graphics_opengl_GL.COLOR_ATTACHMENT2 = 36066;
lime_graphics_opengl_GL.COLOR_ATTACHMENT3 = 36067;
lime_graphics_opengl_GL.COLOR_ATTACHMENT4 = 36068;
lime_graphics_opengl_GL.COLOR_ATTACHMENT5 = 36069;
lime_graphics_opengl_GL.COLOR_ATTACHMENT6 = 36070;
lime_graphics_opengl_GL.COLOR_ATTACHMENT7 = 36071;
lime_graphics_opengl_GL.COLOR_ATTACHMENT8 = 36072;
lime_graphics_opengl_GL.COLOR_ATTACHMENT9 = 36073;
lime_graphics_opengl_GL.COLOR_ATTACHMENT10 = 36074;
lime_graphics_opengl_GL.COLOR_ATTACHMENT11 = 36075;
lime_graphics_opengl_GL.COLOR_ATTACHMENT12 = 36076;
lime_graphics_opengl_GL.COLOR_ATTACHMENT13 = 36077;
lime_graphics_opengl_GL.COLOR_ATTACHMENT14 = 36078;
lime_graphics_opengl_GL.COLOR_ATTACHMENT15 = 36079;
lime_graphics_opengl_GL.SAMPLER_3D = 35679;
lime_graphics_opengl_GL.SAMPLER_2D_SHADOW = 35682;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY = 36289;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY_SHADOW = 36292;
lime_graphics_opengl_GL.SAMPLER_CUBE_SHADOW = 36293;
lime_graphics_opengl_GL.INT_SAMPLER_2D = 36298;
lime_graphics_opengl_GL.INT_SAMPLER_3D = 36299;
lime_graphics_opengl_GL.INT_SAMPLER_CUBE = 36300;
lime_graphics_opengl_GL.INT_SAMPLER_2D_ARRAY = 36303;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D = 36306;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_3D = 36307;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_CUBE = 36308;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
lime_graphics_opengl_GL.MAX_SAMPLES = 36183;
lime_graphics_opengl_GL.SAMPLER_BINDING = 35097;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER = 35051;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER = 35052;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER_BINDING = 35053;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER_BINDING = 35055;
lime_graphics_opengl_GL.COPY_READ_BUFFER = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER = 36663;
lime_graphics_opengl_GL.COPY_READ_BUFFER_BINDING = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER_BINDING = 36663;
lime_graphics_opengl_GL.FLOAT_MAT2x3 = 35685;
lime_graphics_opengl_GL.FLOAT_MAT2x4 = 35686;
lime_graphics_opengl_GL.FLOAT_MAT3x2 = 35687;
lime_graphics_opengl_GL.FLOAT_MAT3x4 = 35688;
lime_graphics_opengl_GL.FLOAT_MAT4x2 = 35689;
lime_graphics_opengl_GL.FLOAT_MAT4x3 = 35690;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC2 = 36294;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC3 = 36295;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC4 = 36296;
lime_graphics_opengl_GL.UNSIGNED_NORMALIZED = 35863;
lime_graphics_opengl_GL.SIGNED_NORMALIZED = 36764;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_VARYINGS = 35971;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
lime_graphics_opengl_GL.INTERLEAVED_ATTRIBS = 35980;
lime_graphics_opengl_GL.SEPARATE_ATTRIBS = 35981;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER = 35982;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK = 36386;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PAUSED = 36387;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_ACTIVE = 36388;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BINDING = 36389;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
lime_graphics_opengl_GL.FRAMEBUFFER_DEFAULT = 33304;
lime_graphics_opengl_GL.DEPTH24_STENCIL8 = 35056;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.READ_FRAMEBUFFER = 36008;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER = 36009;
lime_graphics_opengl_GL.READ_FRAMEBUFFER_BINDING = 36010;
lime_graphics_opengl_GL.RENDERBUFFER_SAMPLES = 36011;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
lime_graphics_opengl_GL.UNIFORM_BUFFER = 35345;
lime_graphics_opengl_GL.UNIFORM_BUFFER_BINDING = 35368;
lime_graphics_opengl_GL.UNIFORM_BUFFER_START = 35369;
lime_graphics_opengl_GL.UNIFORM_BUFFER_SIZE = 35370;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
lime_graphics_opengl_GL.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
lime_graphics_opengl_GL.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
lime_graphics_opengl_GL.MAX_UNIFORM_BLOCK_SIZE = 35376;
lime_graphics_opengl_GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
lime_graphics_opengl_GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
lime_graphics_opengl_GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
lime_graphics_opengl_GL.ACTIVE_UNIFORM_BLOCKS = 35382;
lime_graphics_opengl_GL.UNIFORM_TYPE = 35383;
lime_graphics_opengl_GL.UNIFORM_SIZE = 35384;
lime_graphics_opengl_GL.UNIFORM_BLOCK_INDEX = 35386;
lime_graphics_opengl_GL.UNIFORM_OFFSET = 35387;
lime_graphics_opengl_GL.UNIFORM_ARRAY_STRIDE = 35388;
lime_graphics_opengl_GL.UNIFORM_MATRIX_STRIDE = 35389;
lime_graphics_opengl_GL.UNIFORM_IS_ROW_MAJOR = 35390;
lime_graphics_opengl_GL.UNIFORM_BLOCK_BINDING = 35391;
lime_graphics_opengl_GL.UNIFORM_BLOCK_DATA_SIZE = 35392;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
lime_graphics_opengl_GL.OBJECT_TYPE = 37138;
lime_graphics_opengl_GL.SYNC_CONDITION = 37139;
lime_graphics_opengl_GL.SYNC_STATUS = 37140;
lime_graphics_opengl_GL.SYNC_FLAGS = 37141;
lime_graphics_opengl_GL.SYNC_FENCE = 37142;
lime_graphics_opengl_GL.SYNC_GPU_COMMANDS_COMPLETE = 37143;
lime_graphics_opengl_GL.UNSIGNALED = 37144;
lime_graphics_opengl_GL.SIGNALED = 37145;
lime_graphics_opengl_GL.ALREADY_SIGNALED = 37146;
lime_graphics_opengl_GL.TIMEOUT_EXPIRED = 37147;
lime_graphics_opengl_GL.CONDITION_SATISFIED = 37148;
lime_graphics_opengl_GL.WAIT_FAILED = 37149;
lime_graphics_opengl_GL.SYNC_FLUSH_COMMANDS_BIT = 1;
lime_graphics_opengl_GL.COLOR = 6144;
lime_graphics_opengl_GL.DEPTH = 6145;
lime_graphics_opengl_GL.STENCIL = 6146;
lime_graphics_opengl_GL.MIN = 32775;
lime_graphics_opengl_GL.MAX = 32776;
lime_graphics_opengl_GL.DEPTH_COMPONENT24 = 33190;
lime_graphics_opengl_GL.STREAM_READ = 35041;
lime_graphics_opengl_GL.STREAM_COPY = 35042;
lime_graphics_opengl_GL.STATIC_READ = 35045;
lime_graphics_opengl_GL.STATIC_COPY = 35046;
lime_graphics_opengl_GL.DYNAMIC_READ = 35049;
lime_graphics_opengl_GL.DYNAMIC_COPY = 35050;
lime_graphics_opengl_GL.DEPTH_COMPONENT32F = 36012;
lime_graphics_opengl_GL.DEPTH32F_STENCIL8 = 36013;
lime_graphics_opengl_GL.INVALID_INDEX = -1;
lime_graphics_opengl_GL.TIMEOUT_IGNORED = -1;
lime_graphics_opengl_GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_media_openal_AL.NONE = 0;
lime_media_openal_AL.FALSE = 0;
lime_media_openal_AL.TRUE = 1;
lime_media_openal_AL.SOURCE_RELATIVE = 514;
lime_media_openal_AL.CONE_INNER_ANGLE = 4097;
lime_media_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_media_openal_AL.PITCH = 4099;
lime_media_openal_AL.POSITION = 4100;
lime_media_openal_AL.DIRECTION = 4101;
lime_media_openal_AL.VELOCITY = 4102;
lime_media_openal_AL.LOOPING = 4103;
lime_media_openal_AL.BUFFER = 4105;
lime_media_openal_AL.GAIN = 4106;
lime_media_openal_AL.MIN_GAIN = 4109;
lime_media_openal_AL.MAX_GAIN = 4110;
lime_media_openal_AL.ORIENTATION = 4111;
lime_media_openal_AL.SOURCE_STATE = 4112;
lime_media_openal_AL.INITIAL = 4113;
lime_media_openal_AL.PLAYING = 4114;
lime_media_openal_AL.PAUSED = 4115;
lime_media_openal_AL.STOPPED = 4116;
lime_media_openal_AL.BUFFERS_QUEUED = 4117;
lime_media_openal_AL.BUFFERS_PROCESSED = 4118;
lime_media_openal_AL.REFERENCE_DISTANCE = 4128;
lime_media_openal_AL.ROLLOFF_FACTOR = 4129;
lime_media_openal_AL.CONE_OUTER_GAIN = 4130;
lime_media_openal_AL.MAX_DISTANCE = 4131;
lime_media_openal_AL.SEC_OFFSET = 4132;
lime_media_openal_AL.SAMPLE_OFFSET = 4133;
lime_media_openal_AL.BYTE_OFFSET = 4134;
lime_media_openal_AL.SOURCE_TYPE = 4135;
lime_media_openal_AL.STATIC = 4136;
lime_media_openal_AL.STREAMING = 4137;
lime_media_openal_AL.UNDETERMINED = 4144;
lime_media_openal_AL.FORMAT_MONO8 = 4352;
lime_media_openal_AL.FORMAT_MONO16 = 4353;
lime_media_openal_AL.FORMAT_STEREO8 = 4354;
lime_media_openal_AL.FORMAT_STEREO16 = 4355;
lime_media_openal_AL.FREQUENCY = 8193;
lime_media_openal_AL.BITS = 8194;
lime_media_openal_AL.CHANNELS = 8195;
lime_media_openal_AL.SIZE = 8196;
lime_media_openal_AL.NO_ERROR = 0;
lime_media_openal_AL.INVALID_NAME = 40961;
lime_media_openal_AL.INVALID_ENUM = 40962;
lime_media_openal_AL.INVALID_VALUE = 40963;
lime_media_openal_AL.INVALID_OPERATION = 40964;
lime_media_openal_AL.OUT_OF_MEMORY = 40965;
lime_media_openal_AL.VENDOR = 45057;
lime_media_openal_AL.VERSION = 45058;
lime_media_openal_AL.RENDERER = 45059;
lime_media_openal_AL.EXTENSIONS = 45060;
lime_media_openal_AL.DOPPLER_FACTOR = 49152;
lime_media_openal_AL.SPEED_OF_SOUND = 49155;
lime_media_openal_AL.DOPPLER_VELOCITY = 49153;
lime_media_openal_AL.DISTANCE_MODEL = 53248;
lime_media_openal_AL.INVERSE_DISTANCE = 53249;
lime_media_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_media_openal_AL.LINEAR_DISTANCE = 53251;
lime_media_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_media_openal_AL.EXPONENT_DISTANCE = 53253;
lime_media_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_media_openal_AL.METERS_PER_UNIT = 131076;
lime_media_openal_AL.DIRECT_FILTER = 131077;
lime_media_openal_AL.AUXILIARY_SEND_FILTER = 131078;
lime_media_openal_AL.AIR_ABSORPTION_FACTOR = 131079;
lime_media_openal_AL.ROOM_ROLLOFF_FACTOR = 131080;
lime_media_openal_AL.CONE_OUTER_GAINHF = 131081;
lime_media_openal_AL.DIRECT_FILTER_GAINHF_AUTO = 131082;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAIN_AUTO = 131083;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAINHF_AUTO = 131084;
lime_media_openal_AL.REVERB_DENSITY = 1;
lime_media_openal_AL.REVERB_DIFFUSION = 2;
lime_media_openal_AL.REVERB_GAIN = 3;
lime_media_openal_AL.REVERB_GAINHF = 4;
lime_media_openal_AL.REVERB_DECAY_TIME = 5;
lime_media_openal_AL.REVERB_DECAY_HFRATIO = 6;
lime_media_openal_AL.REVERB_REFLECTIONS_GAIN = 7;
lime_media_openal_AL.REVERB_REFLECTIONS_DELAY = 8;
lime_media_openal_AL.REVERB_LATE_REVERB_GAIN = 9;
lime_media_openal_AL.REVERB_LATE_REVERB_DELAY = 10;
lime_media_openal_AL.REVERB_AIR_ABSORPTION_GAINHF = 11;
lime_media_openal_AL.REVERB_ROOM_ROLLOFF_FACTOR = 12;
lime_media_openal_AL.REVERB_DECAY_HFLIMIT = 13;
lime_media_openal_AL.EAXREVERB_DENSITY = 1;
lime_media_openal_AL.EAXREVERB_DIFFUSION = 2;
lime_media_openal_AL.EAXREVERB_GAIN = 3;
lime_media_openal_AL.EAXREVERB_GAINHF = 4;
lime_media_openal_AL.EAXREVERB_GAINLF = 5;
lime_media_openal_AL.EAXREVERB_DECAY_TIME = 6;
lime_media_openal_AL.EAXREVERB_DECAY_HFRATIO = 7;
lime_media_openal_AL.EAXREVERB_DECAY_LFRATIO = 8;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_GAIN = 9;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_DELAY = 10;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_PAN = 11;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_GAIN = 12;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_DELAY = 13;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_PAN = 14;
lime_media_openal_AL.EAXREVERB_ECHO_TIME = 15;
lime_media_openal_AL.EAXREVERB_ECHO_DEPTH = 16;
lime_media_openal_AL.EAXREVERB_MODULATION_TIME = 17;
lime_media_openal_AL.EAXREVERB_MODULATION_DEPTH = 18;
lime_media_openal_AL.EAXREVERB_AIR_ABSORPTION_GAINHF = 19;
lime_media_openal_AL.EAXREVERB_HFREFERENCE = 20;
lime_media_openal_AL.EAXREVERB_LFREFERENCE = 21;
lime_media_openal_AL.EAXREVERB_ROOM_ROLLOFF_FACTOR = 22;
lime_media_openal_AL.EAXREVERB_DECAY_HFLIMIT = 23;
lime_media_openal_AL.CHORUS_WAVEFORM = 1;
lime_media_openal_AL.CHORUS_PHASE = 2;
lime_media_openal_AL.CHORUS_RATE = 3;
lime_media_openal_AL.CHORUS_DEPTH = 4;
lime_media_openal_AL.CHORUS_FEEDBACK = 5;
lime_media_openal_AL.CHORUS_DELAY = 6;
lime_media_openal_AL.DISTORTION_EDGE = 1;
lime_media_openal_AL.DISTORTION_GAIN = 2;
lime_media_openal_AL.DISTORTION_LOWPASS_CUTOFF = 3;
lime_media_openal_AL.DISTORTION_EQCENTER = 4;
lime_media_openal_AL.DISTORTION_EQBANDWIDTH = 5;
lime_media_openal_AL.ECHO_DELAY = 1;
lime_media_openal_AL.ECHO_LRDELAY = 2;
lime_media_openal_AL.ECHO_DAMPING = 3;
lime_media_openal_AL.ECHO_FEEDBACK = 4;
lime_media_openal_AL.ECHO_SPREAD = 5;
lime_media_openal_AL.FLANGER_WAVEFORM = 1;
lime_media_openal_AL.FLANGER_PHASE = 2;
lime_media_openal_AL.FLANGER_RATE = 3;
lime_media_openal_AL.FLANGER_DEPTH = 4;
lime_media_openal_AL.FLANGER_FEEDBACK = 5;
lime_media_openal_AL.FLANGER_DELAY = 6;
lime_media_openal_AL.FREQUENCY_SHIFTER_FREQUENCY = 1;
lime_media_openal_AL.FREQUENCY_SHIFTER_LEFT_DIRECTION = 2;
lime_media_openal_AL.FREQUENCY_SHIFTER_RIGHT_DIRECTION = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA = 1;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA_COARSE_TUNING = 2;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB_COARSE_TUNING = 4;
lime_media_openal_AL.VOCAL_MORPHER_WAVEFORM = 5;
lime_media_openal_AL.VOCAL_MORPHER_RATE = 6;
lime_media_openal_AL.PITCH_SHIFTER_COARSE_TUNE = 1;
lime_media_openal_AL.PITCH_SHIFTER_FINE_TUNE = 2;
lime_media_openal_AL.RING_MODULATOR_FREQUENCY = 1;
lime_media_openal_AL.RING_MODULATOR_HIGHPASS_CUTOFF = 2;
lime_media_openal_AL.RING_MODULATOR_WAVEFORM = 3;
lime_media_openal_AL.AUTOWAH_ATTACK_TIME = 1;
lime_media_openal_AL.AUTOWAH_RELEASE_TIME = 2;
lime_media_openal_AL.AUTOWAH_RESONANCE = 3;
lime_media_openal_AL.AUTOWAH_PEAK_GAIN = 4;
lime_media_openal_AL.COMPRESSOR_ONOFF = 1;
lime_media_openal_AL.EQUALIZER_LOW_GAIN = 1;
lime_media_openal_AL.EQUALIZER_LOW_CUTOFF = 2;
lime_media_openal_AL.EQUALIZER_MID1_GAIN = 3;
lime_media_openal_AL.EQUALIZER_MID1_CENTER = 4;
lime_media_openal_AL.EQUALIZER_MID1_WIDTH = 5;
lime_media_openal_AL.EQUALIZER_MID2_GAIN = 6;
lime_media_openal_AL.EQUALIZER_MID2_CENTER = 7;
lime_media_openal_AL.EQUALIZER_MID2_WIDTH = 8;
lime_media_openal_AL.EQUALIZER_HIGH_GAIN = 9;
lime_media_openal_AL.EQUALIZER_HIGH_CUTOFF = 10;
lime_media_openal_AL.EFFECT_FIRST_PARAMETER = 0;
lime_media_openal_AL.EFFECT_LAST_PARAMETER = 32768;
lime_media_openal_AL.EFFECT_TYPE = 32769;
lime_media_openal_AL.EFFECT_NULL = 0;
lime_media_openal_AL.EFFECT_EAXREVERB = 32768;
lime_media_openal_AL.EFFECT_REVERB = 1;
lime_media_openal_AL.EFFECT_CHORUS = 2;
lime_media_openal_AL.EFFECT_DISTORTION = 3;
lime_media_openal_AL.EFFECT_ECHO = 4;
lime_media_openal_AL.EFFECT_FLANGER = 5;
lime_media_openal_AL.EFFECT_FREQUENCY_SHIFTER = 6;
lime_media_openal_AL.EFFECT_VOCAL_MORPHER = 7;
lime_media_openal_AL.EFFECT_PITCH_SHIFTER = 8;
lime_media_openal_AL.EFFECT_RING_MODULATOR = 9;
lime_media_openal_AL.FFECT_AUTOWAH = 10;
lime_media_openal_AL.EFFECT_COMPRESSOR = 11;
lime_media_openal_AL.EFFECT_EQUALIZER = 12;
lime_media_openal_AL.EFFECTSLOT_EFFECT = 1;
lime_media_openal_AL.EFFECTSLOT_GAIN = 2;
lime_media_openal_AL.EFFECTSLOT_AUXILIARY_SEND_AUTO = 3;
lime_media_openal_AL.LOWPASS_GAIN = 1;
lime_media_openal_AL.LOWPASS_GAINHF = 2;
lime_media_openal_AL.HIGHPASS_GAIN = 1;
lime_media_openal_AL.HIGHPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAIN = 1;
lime_media_openal_AL.BANDPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAINHF = 3;
lime_media_openal_AL.FILTER_FIRST_PARAMETER = 0;
lime_media_openal_AL.FILTER_LAST_PARAMETER = 32768;
lime_media_openal_AL.FILTER_TYPE = 32769;
lime_media_openal_AL.FILTER_NULL = 0;
lime_media_openal_AL.FILTER_LOWPASS = 1;
lime_media_openal_AL.FILTER_HIGHPASS = 2;
lime_media_openal_AL.FILTER_BANDPASS = 3;
lime_media_openal_ALC.FALSE = 0;
lime_media_openal_ALC.TRUE = 1;
lime_media_openal_ALC.FREQUENCY = 4103;
lime_media_openal_ALC.REFRESH = 4104;
lime_media_openal_ALC.SYNC = 4105;
lime_media_openal_ALC.MONO_SOURCES = 4112;
lime_media_openal_ALC.STEREO_SOURCES = 4113;
lime_media_openal_ALC.NO_ERROR = 0;
lime_media_openal_ALC.INVALID_DEVICE = 40961;
lime_media_openal_ALC.INVALID_CONTEXT = 40962;
lime_media_openal_ALC.INVALID_ENUM = 40963;
lime_media_openal_ALC.INVALID_VALUE = 40964;
lime_media_openal_ALC.OUT_OF_MEMORY = 40965;
lime_media_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_media_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_media_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_media_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_media_openal_ALC.EXTENSIONS = 4102;
lime_media_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_media_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_media_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_system_System.__directories = new haxe_ds_IntMap();
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui__$ScanCode_ScanCode_$Impl_$.UNKNOWN = 0;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSPACE = 42;
lime_ui__$ScanCode_ScanCode_$Impl_$.TAB = 43;
lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN = 40;
lime_ui__$ScanCode_ScanCode_$Impl_$.ESCAPE = 41;
lime_ui__$ScanCode_ScanCode_$Impl_$.SPACE = 44;
lime_ui__$ScanCode_ScanCode_$Impl_$.SINGLE_QUOTE = 52;
lime_ui__$ScanCode_ScanCode_$Impl_$.COMMA = 54;
lime_ui__$ScanCode_ScanCode_$Impl_$.MINUS = 45;
lime_ui__$ScanCode_ScanCode_$Impl_$.PERIOD = 55;
lime_ui__$ScanCode_ScanCode_$Impl_$.SLASH = 56;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_0 = 39;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_1 = 30;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_2 = 31;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_3 = 32;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_4 = 33;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_5 = 34;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_6 = 35;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_7 = 36;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_8 = 37;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_9 = 38;
lime_ui__$ScanCode_ScanCode_$Impl_$.SEMICOLON = 51;
lime_ui__$ScanCode_ScanCode_$Impl_$.EQUALS = 46;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_BRACKET = 47;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSLASH = 49;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_BRACKET = 48;
lime_ui__$ScanCode_ScanCode_$Impl_$.GRAVE = 53;
lime_ui__$ScanCode_ScanCode_$Impl_$.A = 4;
lime_ui__$ScanCode_ScanCode_$Impl_$.B = 5;
lime_ui__$ScanCode_ScanCode_$Impl_$.C = 6;
lime_ui__$ScanCode_ScanCode_$Impl_$.D = 7;
lime_ui__$ScanCode_ScanCode_$Impl_$.E = 8;
lime_ui__$ScanCode_ScanCode_$Impl_$.F = 9;
lime_ui__$ScanCode_ScanCode_$Impl_$.G = 10;
lime_ui__$ScanCode_ScanCode_$Impl_$.H = 11;
lime_ui__$ScanCode_ScanCode_$Impl_$.I = 12;
lime_ui__$ScanCode_ScanCode_$Impl_$.J = 13;
lime_ui__$ScanCode_ScanCode_$Impl_$.K = 14;
lime_ui__$ScanCode_ScanCode_$Impl_$.L = 15;
lime_ui__$ScanCode_ScanCode_$Impl_$.M = 16;
lime_ui__$ScanCode_ScanCode_$Impl_$.N = 17;
lime_ui__$ScanCode_ScanCode_$Impl_$.O = 18;
lime_ui__$ScanCode_ScanCode_$Impl_$.P = 19;
lime_ui__$ScanCode_ScanCode_$Impl_$.Q = 20;
lime_ui__$ScanCode_ScanCode_$Impl_$.R = 21;
lime_ui__$ScanCode_ScanCode_$Impl_$.S = 22;
lime_ui__$ScanCode_ScanCode_$Impl_$.T = 23;
lime_ui__$ScanCode_ScanCode_$Impl_$.U = 24;
lime_ui__$ScanCode_ScanCode_$Impl_$.V = 25;
lime_ui__$ScanCode_ScanCode_$Impl_$.W = 26;
lime_ui__$ScanCode_ScanCode_$Impl_$.X = 27;
lime_ui__$ScanCode_ScanCode_$Impl_$.Y = 28;
lime_ui__$ScanCode_ScanCode_$Impl_$.Z = 29;
lime_ui__$ScanCode_ScanCode_$Impl_$.DELETE = 76;
lime_ui__$ScanCode_ScanCode_$Impl_$.CAPS_LOCK = 57;
lime_ui__$ScanCode_ScanCode_$Impl_$.F1 = 58;
lime_ui__$ScanCode_ScanCode_$Impl_$.F2 = 59;
lime_ui__$ScanCode_ScanCode_$Impl_$.F3 = 60;
lime_ui__$ScanCode_ScanCode_$Impl_$.F4 = 61;
lime_ui__$ScanCode_ScanCode_$Impl_$.F5 = 62;
lime_ui__$ScanCode_ScanCode_$Impl_$.F6 = 63;
lime_ui__$ScanCode_ScanCode_$Impl_$.F7 = 64;
lime_ui__$ScanCode_ScanCode_$Impl_$.F8 = 65;
lime_ui__$ScanCode_ScanCode_$Impl_$.F9 = 66;
lime_ui__$ScanCode_ScanCode_$Impl_$.F10 = 67;
lime_ui__$ScanCode_ScanCode_$Impl_$.F11 = 68;
lime_ui__$ScanCode_ScanCode_$Impl_$.F12 = 69;
lime_ui__$ScanCode_ScanCode_$Impl_$.PRINT_SCREEN = 70;
lime_ui__$ScanCode_ScanCode_$Impl_$.SCROLL_LOCK = 71;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAUSE = 72;
lime_ui__$ScanCode_ScanCode_$Impl_$.INSERT = 73;
lime_ui__$ScanCode_ScanCode_$Impl_$.HOME = 74;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_UP = 75;
lime_ui__$ScanCode_ScanCode_$Impl_$.END = 77;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_DOWN = 78;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT = 79;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT = 80;
lime_ui__$ScanCode_ScanCode_$Impl_$.DOWN = 81;
lime_ui__$ScanCode_ScanCode_$Impl_$.UP = 82;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUM_LOCK = 83;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DIVIDE = 84;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MULTIPLY = 85;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MINUS = 86;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS = 87;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_ENTER = 88;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_1 = 89;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_2 = 90;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_3 = 91;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_4 = 92;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_5 = 93;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_6 = 94;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_7 = 95;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_8 = 96;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_9 = 97;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_0 = 98;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERIOD = 99;
lime_ui__$ScanCode_ScanCode_$Impl_$.APPLICATION = 101;
lime_ui__$ScanCode_ScanCode_$Impl_$.POWER = 102;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EQUALS = 103;
lime_ui__$ScanCode_ScanCode_$Impl_$.F13 = 104;
lime_ui__$ScanCode_ScanCode_$Impl_$.F14 = 105;
lime_ui__$ScanCode_ScanCode_$Impl_$.F15 = 106;
lime_ui__$ScanCode_ScanCode_$Impl_$.F16 = 107;
lime_ui__$ScanCode_ScanCode_$Impl_$.F17 = 108;
lime_ui__$ScanCode_ScanCode_$Impl_$.F18 = 109;
lime_ui__$ScanCode_ScanCode_$Impl_$.F19 = 110;
lime_ui__$ScanCode_ScanCode_$Impl_$.F20 = 111;
lime_ui__$ScanCode_ScanCode_$Impl_$.F21 = 112;
lime_ui__$ScanCode_ScanCode_$Impl_$.F22 = 113;
lime_ui__$ScanCode_ScanCode_$Impl_$.F23 = 114;
lime_ui__$ScanCode_ScanCode_$Impl_$.F24 = 115;
lime_ui__$ScanCode_ScanCode_$Impl_$.EXECUTE = 116;
lime_ui__$ScanCode_ScanCode_$Impl_$.HELP = 117;
lime_ui__$ScanCode_ScanCode_$Impl_$.MENU = 118;
lime_ui__$ScanCode_ScanCode_$Impl_$.SELECT = 119;
lime_ui__$ScanCode_ScanCode_$Impl_$.STOP = 120;
lime_ui__$ScanCode_ScanCode_$Impl_$.AGAIN = 121;
lime_ui__$ScanCode_ScanCode_$Impl_$.UNDO = 122;
lime_ui__$ScanCode_ScanCode_$Impl_$.CUT = 123;
lime_ui__$ScanCode_ScanCode_$Impl_$.COPY = 124;
lime_ui__$ScanCode_ScanCode_$Impl_$.PASTE = 125;
lime_ui__$ScanCode_ScanCode_$Impl_$.FIND = 126;
lime_ui__$ScanCode_ScanCode_$Impl_$.MUTE = 127;
lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_UP = 128;
lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_DOWN = 129;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COMMA = 133;
lime_ui__$ScanCode_ScanCode_$Impl_$.ALT_ERASE = 153;
lime_ui__$ScanCode_ScanCode_$Impl_$.SYSTEM_REQUEST = 154;
lime_ui__$ScanCode_ScanCode_$Impl_$.CANCEL = 155;
lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR = 156;
lime_ui__$ScanCode_ScanCode_$Impl_$.PRIOR = 157;
lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN2 = 158;
lime_ui__$ScanCode_ScanCode_$Impl_$.SEPARATOR = 159;
lime_ui__$ScanCode_ScanCode_$Impl_$.OUT = 160;
lime_ui__$ScanCode_ScanCode_$Impl_$.OPER = 161;
lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR_AGAIN = 162;
lime_ui__$ScanCode_ScanCode_$Impl_$.CRSEL = 163;
lime_ui__$ScanCode_ScanCode_$Impl_$.EXSEL = 164;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_00 = 176;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_000 = 177;
lime_ui__$ScanCode_ScanCode_$Impl_$.THOUSAND_SEPARATOR = 178;
lime_ui__$ScanCode_ScanCode_$Impl_$.DECIMAL_SEPARATOR = 179;
lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_UNIT = 180;
lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_SUBUNIT = 181;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 182;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 183;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_BRACE = 184;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_BRACE = 185;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_TAB = 186;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BACKSPACE = 187;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_A = 188;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_B = 189;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_C = 190;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_D = 191;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_E = 192;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_F = 193;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_XOR = 194;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_POWER = 195;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERCENT = 196;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LESS_THAN = 197;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_GREATER_THAN = 198;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AMPERSAND = 199;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 200;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_VERTICAL_BAR = 201;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COLON = 203;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HASH = 204;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_SPACE = 205;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AT = 206;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EXCLAMATION = 207;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_STORE = 208;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_RECALL = 209;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_CLEAR = 210;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_ADD = 211;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 212;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 213;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_DIVIDE = 214;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS_MINUS = 215;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR = 216;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 217;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BINARY = 218;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_OCTAL = 219;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DECIMAL = 220;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HEXADECIMAL = 221;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_CTRL = 224;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_SHIFT = 225;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_ALT = 226;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_META = 227;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_CTRL = 228;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_SHIFT = 229;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_ALT = 230;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_META = 231;
lime_ui__$ScanCode_ScanCode_$Impl_$.MODE = 257;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_NEXT = 258;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PREVIOUS = 259;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_STOP = 260;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PLAY = 261;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_MUTE = 262;
lime_ui__$ScanCode_ScanCode_$Impl_$.MEDIA_SELECT = 263;
lime_ui__$ScanCode_ScanCode_$Impl_$.WWW = 264;
lime_ui__$ScanCode_ScanCode_$Impl_$.MAIL = 265;
lime_ui__$ScanCode_ScanCode_$Impl_$.CALCULATOR = 266;
lime_ui__$ScanCode_ScanCode_$Impl_$.COMPUTER = 267;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_SEARCH = 268;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_HOME = 269;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BACK = 270;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_FORWARD = 271;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_STOP = 272;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_REFRESH = 273;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BOOKMARKS = 274;
lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_DOWN = 275;
lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_UP = 276;
lime_ui__$ScanCode_ScanCode_$Impl_$.DISPLAY_SWITCH = 277;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_TOGGLE = 278;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_DOWN = 279;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_UP = 280;
lime_ui__$ScanCode_ScanCode_$Impl_$.EJECT = 281;
lime_ui__$ScanCode_ScanCode_$Impl_$.SLEEP = 282;
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.bundlePaths = new haxe_ds_StringMap();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Float64Array_Float64Array_$Impl_$.BYTES_PER_ELEMENT = 8;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int8Array_Int8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
lime_utils_Log.throwErrors = true;
lime_utils__$LogLevel_LogLevel_$Impl_$.NONE = 0;
lime_utils__$LogLevel_LogLevel_$Impl_$.ERROR = 1;
lime_utils__$LogLevel_LogLevel_$Impl_$.WARN = 2;
lime_utils__$LogLevel_LogLevel_$Impl_$.INFO = 3;
lime_utils__$LogLevel_LogLevel_$Impl_$.DEBUG = 4;
lime_utils__$LogLevel_LogLevel_$Impl_$.VERBOSE = 5;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.BYTES_PER_ELEMENT = 1;
org_poly2tri_Constants.kAlpha = 0.3;
org_poly2tri_Constants.EPSILON = 1e-12;
org_poly2tri_Constants.PI_2 = Math.PI / 2;
org_poly2tri_Constants.PI_3div4 = 3 * Math.PI / 4;
org_poly2tri_Orientation.CW = 1;
org_poly2tri_Orientation.CCW = -1;
org_poly2tri_Orientation.COLLINEAR = 0;
org_poly2tri_Point.C_ID = 0;
org_poly2tri_Triangle.CW_OFFSET = 1;
org_poly2tri_Triangle.CCW_OFFSET = -1;
trilateral2_Algebra.quadStep = 0.03;
trilateral2_Algebra.cubicStep = 0.03;
trilateral2_Contour.smallDotScale = 0.07;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

});
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.lime.$scripts = $hx_exports.lime.$scripts || {};
$hx_exports.lime.$scripts["Trilateral2Lime"] = $hx_script;
$hx_exports.lime.embed = function(projectName) { var exports = {};
	var script = $hx_exports.lime.$scripts[projectName];
	if (!script) throw Error("Cannot find project name \"" + projectName + "\"");
	script(exports, $global);
	for (var key in exports) $hx_exports[key] = $hx_exports[key] || exports[key];
	var lime = exports.lime || window.lime;
	if (lime && lime.embed && this != lime.embed) lime.embed.apply(lime, arguments);
	return exports;
};
if(typeof define == "function" && define.amd) {
	define([], function() { return $hx_exports.lime; });
	define.__amd = define.amd;
	define.amd = null;
}
})(typeof exports != "undefined" ? exports : typeof define == "function" && define.amd ? {} : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

/*! howler.js v2.1.1 | (c) 2013-2018, James Simpson of GoldFire Studios | MIT License | howlerjs.com */
!function(){"use strict";var e=function(){this.init()};e.prototype={init:function(){var e=this||n;return e._counter=1e3,e._html5AudioPool=[],e.html5PoolSize=10,e._codecs={},e._howls=[],e._muted=!1,e._volume=1,e._canPlayEvent="canplaythrough",e._navigator="undefined"!=typeof window&&window.navigator?window.navigator:null,e.masterGain=null,e.noAudio=!1,e.usingWebAudio=!0,e.autoSuspend=!0,e.ctx=null,e.autoUnlock=!0,e._setup(),e},volume:function(e){var o=this||n;if(e=parseFloat(e),o.ctx||_(),void 0!==e&&e>=0&&e<=1){if(o._volume=e,o._muted)return o;o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.volume=u._volume*e)}return o}return o._volume},mute:function(e){var o=this||n;o.ctx||_(),o._muted=e,o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e?0:o._volume,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.muted=!!e||u._muted)}return o},unload:function(){for(var e=this||n,o=e._howls.length-1;o>=0;o--)e._howls[o].unload();return e.usingWebAudio&&e.ctx&&void 0!==e.ctx.close&&(e.ctx.close(),e.ctx=null,_()),e},codecs:function(e){return(this||n)._codecs[e.replace(/^x-/,"")]},_setup:function(){var e=this||n;if(e.state=e.ctx?e.ctx.state||"suspended":"suspended",e._autoSuspend(),!e.usingWebAudio)if("undefined"!=typeof Audio)try{var o=new Audio;void 0===o.oncanplaythrough&&(e._canPlayEvent="canplay")}catch(n){e.noAudio=!0}else e.noAudio=!0;try{var o=new Audio;o.muted&&(e.noAudio=!0)}catch(e){}return e.noAudio||e._setupCodecs(),e},_setupCodecs:function(){var e=this||n,o=null;try{o="undefined"!=typeof Audio?new Audio:null}catch(n){return e}if(!o||"function"!=typeof o.canPlayType)return e;var t=o.canPlayType("audio/mpeg;").replace(/^no$/,""),r=e._navigator&&e._navigator.userAgent.match(/OPR\/([0-6].)/g),a=r&&parseInt(r[0].split("/")[1],10)<33;return e._codecs={mp3:!(a||!t&&!o.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!t,opus:!!o.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!o.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!o.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!o.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(o.canPlayType("audio/x-m4a;")||o.canPlayType("audio/m4a;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(o.canPlayType("audio/x-mp4;")||o.canPlayType("audio/mp4;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),dolby:!!o.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(o.canPlayType("audio/x-flac;")||o.canPlayType("audio/flac;")).replace(/^no$/,"")},e},_unlockAudio:function(){var e=this||n,o=/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(e._navigator&&e._navigator.userAgent);if(!e._audioUnlocked&&e.ctx&&o){e._audioUnlocked=!1,e.autoUnlock=!1,e._mobileUnloaded||44100===e.ctx.sampleRate||(e._mobileUnloaded=!0,e.unload()),e._scratchBuffer=e.ctx.createBuffer(1,1,22050);var t=function(n){for(var o=0;o<e.html5PoolSize;o++){var r=new Audio;r._unlocked=!0,e._releaseHtml5Audio(r)}for(var o=0;o<e._howls.length;o++)if(!e._howls[o]._webAudio)for(var a=e._howls[o]._getSoundIds(),u=0;u<a.length;u++){var i=e._howls[o]._soundById(a[u]);i&&i._node&&!i._node._unlocked&&(i._node._unlocked=!0,i._node.load())}e._autoResume();var d=e.ctx.createBufferSource();d.buffer=e._scratchBuffer,d.connect(e.ctx.destination),void 0===d.start?d.noteOn(0):d.start(0),"function"==typeof e.ctx.resume&&e.ctx.resume(),d.onended=function(){d.disconnect(0),e._audioUnlocked=!0,document.removeEventListener("touchstart",t,!0),document.removeEventListener("touchend",t,!0),document.removeEventListener("click",t,!0);for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("unlock")}};return document.addEventListener("touchstart",t,!0),document.addEventListener("touchend",t,!0),document.addEventListener("click",t,!0),e}},_obtainHtml5Audio:function(){var e=this||n;if(e._html5AudioPool.length)return e._html5AudioPool.pop();var o=(new Audio).play();return o&&"undefined"!=typeof Promise&&(o instanceof Promise||"function"==typeof o.then)&&o.catch(function(){console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.")}),new Audio},_releaseHtml5Audio:function(e){var o=this||n;return e._unlocked&&o._html5AudioPool.push(e),o},_autoSuspend:function(){var e=this;if(e.autoSuspend&&e.ctx&&void 0!==e.ctx.suspend&&n.usingWebAudio){for(var o=0;o<e._howls.length;o++)if(e._howls[o]._webAudio)for(var t=0;t<e._howls[o]._sounds.length;t++)if(!e._howls[o]._sounds[t]._paused)return e;return e._suspendTimer&&clearTimeout(e._suspendTimer),e._suspendTimer=setTimeout(function(){e.autoSuspend&&(e._suspendTimer=null,e.state="suspending",e.ctx.suspend().then(function(){e.state="suspended",e._resumeAfterSuspend&&(delete e._resumeAfterSuspend,e._autoResume())}))},3e4),e}},_autoResume:function(){var e=this;if(e.ctx&&void 0!==e.ctx.resume&&n.usingWebAudio)return"running"===e.state&&e._suspendTimer?(clearTimeout(e._suspendTimer),e._suspendTimer=null):"suspended"===e.state?(e.ctx.resume().then(function(){e.state="running";for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("resume")}),e._suspendTimer&&(clearTimeout(e._suspendTimer),e._suspendTimer=null)):"suspending"===e.state&&(e._resumeAfterSuspend=!0),e}};var n=new e,o=function(e){var n=this;if(!e.src||0===e.src.length)return void console.error("An array of source files must be passed with any new Howl.");n.init(e)};o.prototype={init:function(e){var o=this;return n.ctx||_(),o._autoplay=e.autoplay||!1,o._format="string"!=typeof e.format?e.format:[e.format],o._html5=e.html5||!1,o._muted=e.mute||!1,o._loop=e.loop||!1,o._pool=e.pool||5,o._preload="boolean"!=typeof e.preload||e.preload,o._rate=e.rate||1,o._sprite=e.sprite||{},o._src="string"!=typeof e.src?e.src:[e.src],o._volume=void 0!==e.volume?e.volume:1,o._xhrWithCredentials=e.xhrWithCredentials||!1,o._duration=0,o._state="unloaded",o._sounds=[],o._endTimers={},o._queue=[],o._playLock=!1,o._onend=e.onend?[{fn:e.onend}]:[],o._onfade=e.onfade?[{fn:e.onfade}]:[],o._onload=e.onload?[{fn:e.onload}]:[],o._onloaderror=e.onloaderror?[{fn:e.onloaderror}]:[],o._onplayerror=e.onplayerror?[{fn:e.onplayerror}]:[],o._onpause=e.onpause?[{fn:e.onpause}]:[],o._onplay=e.onplay?[{fn:e.onplay}]:[],o._onstop=e.onstop?[{fn:e.onstop}]:[],o._onmute=e.onmute?[{fn:e.onmute}]:[],o._onvolume=e.onvolume?[{fn:e.onvolume}]:[],o._onrate=e.onrate?[{fn:e.onrate}]:[],o._onseek=e.onseek?[{fn:e.onseek}]:[],o._onunlock=e.onunlock?[{fn:e.onunlock}]:[],o._onresume=[],o._webAudio=n.usingWebAudio&&!o._html5,void 0!==n.ctx&&n.ctx&&n.autoUnlock&&n._unlockAudio(),n._howls.push(o),o._autoplay&&o._queue.push({event:"play",action:function(){o.play()}}),o._preload&&o.load(),o},load:function(){var e=this,o=null;if(n.noAudio)return void e._emit("loaderror",null,"No audio support.");"string"==typeof e._src&&(e._src=[e._src]);for(var r=0;r<e._src.length;r++){var u,i;if(e._format&&e._format[r])u=e._format[r];else{if("string"!=typeof(i=e._src[r])){e._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}u=/^data:audio\/([^;,]+);/i.exec(i),u||(u=/\.([^.]+)$/.exec(i.split("?",1)[0])),u&&(u=u[1].toLowerCase())}if(u||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),u&&n.codecs(u)){o=e._src[r];break}}return o?(e._src=o,e._state="loading","https:"===window.location.protocol&&"http:"===o.slice(0,5)&&(e._html5=!0,e._webAudio=!1),new t(e),e._webAudio&&a(e),e):void e._emit("loaderror",null,"No codec support for selected audio sources.")},play:function(e,o){var t=this,r=null;if("number"==typeof e)r=e,e=null;else{if("string"==typeof e&&"loaded"===t._state&&!t._sprite[e])return null;if(void 0===e&&(e="__default",!t._playLock)){for(var a=0,u=0;u<t._sounds.length;u++)t._sounds[u]._paused&&!t._sounds[u]._ended&&(a++,r=t._sounds[u]._id);1===a?e=null:r=null}}var i=r?t._soundById(r):t._inactiveSound();if(!i)return null;if(r&&!e&&(e=i._sprite||"__default"),"loaded"!==t._state){i._sprite=e,i._ended=!1;var d=i._id;return t._queue.push({event:"play",action:function(){t.play(d)}}),d}if(r&&!i._paused)return o||t._loadQueue("play"),i._id;t._webAudio&&n._autoResume();var _=Math.max(0,i._seek>0?i._seek:t._sprite[e][0]/1e3),s=Math.max(0,(t._sprite[e][0]+t._sprite[e][1])/1e3-_),l=1e3*s/Math.abs(i._rate),c=t._sprite[e][0]/1e3,f=(t._sprite[e][0]+t._sprite[e][1])/1e3,p=!(!i._loop&&!t._sprite[e][2]);i._sprite=e,i._ended=!1;var m=function(){i._paused=!1,i._seek=_,i._start=c,i._stop=f,i._loop=p};if(_>=f)return void t._ended(i);var v=i._node;if(t._webAudio){var h=function(){t._playLock=!1,m(),t._refreshBuffer(i);var e=i._muted||t._muted?0:i._volume;v.gain.setValueAtTime(e,n.ctx.currentTime),i._playStart=n.ctx.currentTime,void 0===v.bufferSource.start?i._loop?v.bufferSource.noteGrainOn(0,_,86400):v.bufferSource.noteGrainOn(0,_,s):i._loop?v.bufferSource.start(0,_,86400):v.bufferSource.start(0,_,s),l!==1/0&&(t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l)),o||setTimeout(function(){t._emit("play",i._id),t._loadQueue()},0)};"running"===n.state?h():(t._playLock=!0,t.once("resume",h),t._clearTimer(i._id))}else{var y=function(){v.currentTime=_,v.muted=i._muted||t._muted||n._muted||v.muted,v.volume=i._volume*n.volume(),v.playbackRate=i._rate;try{var r=v.play();if(r&&"undefined"!=typeof Promise&&(r instanceof Promise||"function"==typeof r.then)?(t._playLock=!0,m(),r.then(function(){t._playLock=!1,v._unlocked=!0,o||(t._emit("play",i._id),t._loadQueue())}).catch(function(){t._playLock=!1,t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."),i._ended=!0,i._paused=!0})):o||(t._playLock=!1,m(),t._emit("play",i._id),t._loadQueue()),v.playbackRate=i._rate,v.paused)return void t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");"__default"!==e||i._loop?t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l):(t._endTimers[i._id]=function(){t._ended(i),v.removeEventListener("ended",t._endTimers[i._id],!1)},v.addEventListener("ended",t._endTimers[i._id],!1))}catch(e){t._emit("playerror",i._id,e)}},g=window&&window.ejecta||!v.readyState&&n._navigator.isCocoonJS;if(v.readyState>=3||g)y();else{t._playLock=!0;var b=function(){y(),v.removeEventListener(n._canPlayEvent,b,!1)};v.addEventListener(n._canPlayEvent,b,!1),t._clearTimer(i._id)}}return i._id},pause:function(e){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"pause",action:function(){n.pause(e)}}),n;for(var o=n._getSoundIds(e),t=0;t<o.length;t++){n._clearTimer(o[t]);var r=n._soundById(o[t]);if(r&&!r._paused&&(r._seek=n.seek(o[t]),r._rateSeek=0,r._paused=!0,n._stopFade(o[t]),r._node))if(n._webAudio){if(!r._node.bufferSource)continue;void 0===r._node.bufferSource.stop?r._node.bufferSource.noteOff(0):r._node.bufferSource.stop(0),n._cleanBuffer(r._node)}else isNaN(r._node.duration)&&r._node.duration!==1/0||r._node.pause();arguments[1]||n._emit("pause",r?r._id:null)}return n},stop:function(e,n){var o=this;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"stop",action:function(){o.stop(e)}}),o;for(var t=o._getSoundIds(e),r=0;r<t.length;r++){o._clearTimer(t[r]);var a=o._soundById(t[r]);a&&(a._seek=a._start||0,a._rateSeek=0,a._paused=!0,a._ended=!0,o._stopFade(t[r]),a._node&&(o._webAudio?a._node.bufferSource&&(void 0===a._node.bufferSource.stop?a._node.bufferSource.noteOff(0):a._node.bufferSource.stop(0),o._cleanBuffer(a._node)):isNaN(a._node.duration)&&a._node.duration!==1/0||(a._node.currentTime=a._start||0,a._node.pause())),n||o._emit("stop",a._id))}return o},mute:function(e,o){var t=this;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"mute",action:function(){t.mute(e,o)}}),t;if(void 0===o){if("boolean"!=typeof e)return t._muted;t._muted=e}for(var r=t._getSoundIds(o),a=0;a<r.length;a++){var u=t._soundById(r[a]);u&&(u._muted=e,u._interval&&t._stopFade(u._id),t._webAudio&&u._node?u._node.gain.setValueAtTime(e?0:u._volume,n.ctx.currentTime):u._node&&(u._node.muted=!!n._muted||e),t._emit("mute",u._id))}return t},volume:function(){var e,o,t=this,r=arguments;if(0===r.length)return t._volume;if(1===r.length||2===r.length&&void 0===r[1]){t._getSoundIds().indexOf(r[0])>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else r.length>=2&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var a;if(!(void 0!==e&&e>=0&&e<=1))return a=o?t._soundById(o):t._sounds[0],a?a._volume:0;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"volume",action:function(){t.volume.apply(t,r)}}),t;void 0===o&&(t._volume=e),o=t._getSoundIds(o);for(var u=0;u<o.length;u++)(a=t._soundById(o[u]))&&(a._volume=e,r[2]||t._stopFade(o[u]),t._webAudio&&a._node&&!a._muted?a._node.gain.setValueAtTime(e,n.ctx.currentTime):a._node&&!a._muted&&(a._node.volume=e*n.volume()),t._emit("volume",a._id));return t},fade:function(e,o,t,r){var a=this;if("loaded"!==a._state||a._playLock)return a._queue.push({event:"fade",action:function(){a.fade(e,o,t,r)}}),a;e=parseFloat(e),o=parseFloat(o),t=parseFloat(t),a.volume(e,r);for(var u=a._getSoundIds(r),i=0;i<u.length;i++){var d=a._soundById(u[i]);if(d){if(r||a._stopFade(u[i]),a._webAudio&&!d._muted){var _=n.ctx.currentTime,s=_+t/1e3;d._volume=e,d._node.gain.setValueAtTime(e,_),d._node.gain.linearRampToValueAtTime(o,s)}a._startFadeInterval(d,e,o,t,u[i],void 0===r)}}return a},_startFadeInterval:function(e,n,o,t,r,a){var u=this,i=n,d=o-n,_=Math.abs(d/.01),s=Math.max(4,_>0?t/_:t),l=Date.now();e._fadeTo=o,e._interval=setInterval(function(){var r=(Date.now()-l)/t;l=Date.now(),i+=d*r,i=Math.max(0,i),i=Math.min(1,i),i=Math.round(100*i)/100,u._webAudio?e._volume=i:u.volume(i,e._id,!0),a&&(u._volume=i),(o<n&&i<=o||o>n&&i>=o)&&(clearInterval(e._interval),e._interval=null,e._fadeTo=null,u.volume(o,e._id),u._emit("fade",e._id))},s)},_stopFade:function(e){var o=this,t=o._soundById(e);return t&&t._interval&&(o._webAudio&&t._node.gain.cancelScheduledValues(n.ctx.currentTime),clearInterval(t._interval),t._interval=null,o.volume(t._fadeTo,e),t._fadeTo=null,o._emit("fade",e)),o},loop:function(){var e,n,o,t=this,r=arguments;if(0===r.length)return t._loop;if(1===r.length){if("boolean"!=typeof r[0])return!!(o=t._soundById(parseInt(r[0],10)))&&o._loop;e=r[0],t._loop=e}else 2===r.length&&(e=r[0],n=parseInt(r[1],10));for(var a=t._getSoundIds(n),u=0;u<a.length;u++)(o=t._soundById(a[u]))&&(o._loop=e,t._webAudio&&o._node&&o._node.bufferSource&&(o._node.bufferSource.loop=e,e&&(o._node.bufferSource.loopStart=o._start||0,o._node.bufferSource.loopEnd=o._stop)));return t},rate:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var i;if("number"!=typeof e)return i=t._soundById(o),i?i._rate:t._rate;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"rate",action:function(){t.rate.apply(t,r)}}),t;void 0===o&&(t._rate=e),o=t._getSoundIds(o);for(var d=0;d<o.length;d++)if(i=t._soundById(o[d])){t.playing(o[d])&&(i._rateSeek=t.seek(o[d]),i._playStart=t._webAudio?n.ctx.currentTime:i._playStart),i._rate=e,t._webAudio&&i._node&&i._node.bufferSource?i._node.bufferSource.playbackRate.setValueAtTime(e,n.ctx.currentTime):i._node&&(i._node.playbackRate=e);var _=t.seek(o[d]),s=(t._sprite[i._sprite][0]+t._sprite[i._sprite][1])/1e3-_,l=1e3*s/Math.abs(i._rate);!t._endTimers[o[d]]&&i._paused||(t._clearTimer(o[d]),t._endTimers[o[d]]=setTimeout(t._ended.bind(t,i),l)),t._emit("rate",i._id)}return t},seek:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):t._sounds.length&&(o=t._sounds[0]._id,e=parseFloat(r[0]))}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));if(void 0===o)return t;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"seek",action:function(){t.seek.apply(t,r)}}),t;var i=t._soundById(o);if(i){if(!("number"==typeof e&&e>=0)){if(t._webAudio){var d=t.playing(o)?n.ctx.currentTime-i._playStart:0,_=i._rateSeek?i._rateSeek-i._seek:0;return i._seek+(_+d*Math.abs(i._rate))}return i._node.currentTime}var s=t.playing(o);s&&t.pause(o,!0),i._seek=e,i._ended=!1,t._clearTimer(o),t._webAudio||!i._node||isNaN(i._node.duration)||(i._node.currentTime=e);var l=function(){t._emit("seek",o),s&&t.play(o,!0)};if(s&&!t._webAudio){var c=function(){t._playLock?setTimeout(c,0):l()};setTimeout(c,0)}else l()}return t},playing:function(e){var n=this;if("number"==typeof e){var o=n._soundById(e);return!!o&&!o._paused}for(var t=0;t<n._sounds.length;t++)if(!n._sounds[t]._paused)return!0;return!1},duration:function(e){var n=this,o=n._duration,t=n._soundById(e);return t&&(o=n._sprite[t._sprite][1]/1e3),o},state:function(){return this._state},unload:function(){for(var e=this,o=e._sounds,t=0;t<o.length;t++){if(o[t]._paused||e.stop(o[t]._id),!e._webAudio){/MSIE |Trident\//.test(n._navigator&&n._navigator.userAgent)||(o[t]._node.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"),o[t]._node.removeEventListener("error",o[t]._errorFn,!1),o[t]._node.removeEventListener(n._canPlayEvent,o[t]._loadFn,!1),n._releaseHtml5Audio(o[t]._node)}delete o[t]._node,e._clearTimer(o[t]._id)}var a=n._howls.indexOf(e);a>=0&&n._howls.splice(a,1);var u=!0;for(t=0;t<n._howls.length;t++)if(n._howls[t]._src===e._src||e._src.indexOf(n._howls[t]._src)>=0){u=!1;break}return r&&u&&delete r[e._src],n.noAudio=!1,e._state="unloaded",e._sounds=[],e=null,null},on:function(e,n,o,t){var r=this,a=r["_on"+e];return"function"==typeof n&&a.push(t?{id:o,fn:n,once:t}:{id:o,fn:n}),r},off:function(e,n,o){var t=this,r=t["_on"+e],a=0;if("number"==typeof n&&(o=n,n=null),n||o)for(a=0;a<r.length;a++){var u=o===r[a].id;if(n===r[a].fn&&u||!n&&u){r.splice(a,1);break}}else if(e)t["_on"+e]=[];else{var i=Object.keys(t);for(a=0;a<i.length;a++)0===i[a].indexOf("_on")&&Array.isArray(t[i[a]])&&(t[i[a]]=[])}return t},once:function(e,n,o){var t=this;return t.on(e,n,o,1),t},_emit:function(e,n,o){for(var t=this,r=t["_on"+e],a=r.length-1;a>=0;a--)r[a].id&&r[a].id!==n&&"load"!==e||(setTimeout(function(e){e.call(this,n,o)}.bind(t,r[a].fn),0),r[a].once&&t.off(e,r[a].fn,r[a].id));return t._loadQueue(e),t},_loadQueue:function(e){var n=this;if(n._queue.length>0){var o=n._queue[0];o.event===e&&(n._queue.shift(),n._loadQueue()),e||o.action()}return n},_ended:function(e){var o=this,t=e._sprite;if(!o._webAudio&&e._node&&!e._node.paused&&!e._node.ended&&e._node.currentTime<e._stop)return setTimeout(o._ended.bind(o,e),100),o;var r=!(!e._loop&&!o._sprite[t][2]);if(o._emit("end",e._id),!o._webAudio&&r&&o.stop(e._id,!0).play(e._id),o._webAudio&&r){o._emit("play",e._id),e._seek=e._start||0,e._rateSeek=0,e._playStart=n.ctx.currentTime;var a=1e3*(e._stop-e._start)/Math.abs(e._rate);o._endTimers[e._id]=setTimeout(o._ended.bind(o,e),a)}return o._webAudio&&!r&&(e._paused=!0,e._ended=!0,e._seek=e._start||0,e._rateSeek=0,o._clearTimer(e._id),o._cleanBuffer(e._node),n._autoSuspend()),o._webAudio||r||o.stop(e._id,!0),o},_clearTimer:function(e){var n=this;if(n._endTimers[e]){if("function"!=typeof n._endTimers[e])clearTimeout(n._endTimers[e]);else{var o=n._soundById(e);o&&o._node&&o._node.removeEventListener("ended",n._endTimers[e],!1)}delete n._endTimers[e]}return n},_soundById:function(e){for(var n=this,o=0;o<n._sounds.length;o++)if(e===n._sounds[o]._id)return n._sounds[o];return null},_inactiveSound:function(){var e=this;e._drain();for(var n=0;n<e._sounds.length;n++)if(e._sounds[n]._ended)return e._sounds[n].reset();return new t(e)},_drain:function(){var e=this,n=e._pool,o=0,t=0;if(!(e._sounds.length<n)){for(t=0;t<e._sounds.length;t++)e._sounds[t]._ended&&o++;for(t=e._sounds.length-1;t>=0;t--){if(o<=n)return;e._sounds[t]._ended&&(e._webAudio&&e._sounds[t]._node&&e._sounds[t]._node.disconnect(0),e._sounds.splice(t,1),o--)}}},_getSoundIds:function(e){var n=this;if(void 0===e){for(var o=[],t=0;t<n._sounds.length;t++)o.push(n._sounds[t]._id);return o}return[e]},_refreshBuffer:function(e){var o=this;return e._node.bufferSource=n.ctx.createBufferSource(),e._node.bufferSource.buffer=r[o._src],e._panner?e._node.bufferSource.connect(e._panner):e._node.bufferSource.connect(e._node),e._node.bufferSource.loop=e._loop,e._loop&&(e._node.bufferSource.loopStart=e._start||0,e._node.bufferSource.loopEnd=e._stop||0),e._node.bufferSource.playbackRate.setValueAtTime(e._rate,n.ctx.currentTime),o},_cleanBuffer:function(e){var o=this,t=n._navigator&&n._navigator.vendor.indexOf("Apple")>=0;if(n._scratchBuffer&&e.bufferSource&&(e.bufferSource.onended=null,e.bufferSource.disconnect(0),t))try{e.bufferSource.buffer=n._scratchBuffer}catch(e){}return e.bufferSource=null,o}};var t=function(e){this._parent=e,this.init()};t.prototype={init:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,o._sounds.push(e),e.create(),e},create:function(){var e=this,o=e._parent,t=n._muted||e._muted||e._parent._muted?0:e._volume;return o._webAudio?(e._node=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),e._node.gain.setValueAtTime(t,n.ctx.currentTime),e._node.paused=!0,e._node.connect(n.masterGain)):(e._node=n._obtainHtml5Audio(),e._errorFn=e._errorListener.bind(e),e._node.addEventListener("error",e._errorFn,!1),e._loadFn=e._loadListener.bind(e),e._node.addEventListener(n._canPlayEvent,e._loadFn,!1),e._node.src=o._src,e._node.preload="auto",e._node.volume=t*n.volume(),e._node.load()),e},reset:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._rateSeek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,e},_errorListener:function(){var e=this;e._parent._emit("loaderror",e._id,e._node.error?e._node.error.code:0),e._node.removeEventListener("error",e._errorFn,!1)},_loadListener:function(){var e=this,o=e._parent;o._duration=Math.ceil(10*e._node.duration)/10,0===Object.keys(o._sprite).length&&(o._sprite={__default:[0,1e3*o._duration]}),"loaded"!==o._state&&(o._state="loaded",o._emit("load"),o._loadQueue()),e._node.removeEventListener(n._canPlayEvent,e._loadFn,!1)}};var r={},a=function(e){var n=e._src;if(r[n])return e._duration=r[n].duration,void d(e);if(/^data:[^;]+;base64,/.test(n)){for(var o=atob(n.split(",")[1]),t=new Uint8Array(o.length),a=0;a<o.length;++a)t[a]=o.charCodeAt(a);i(t.buffer,e)}else{var _=new XMLHttpRequest;_.open("GET",n,!0),_.withCredentials=e._xhrWithCredentials,_.responseType="arraybuffer",_.onload=function(){var n=(_.status+"")[0];if("0"!==n&&"2"!==n&&"3"!==n)return void e._emit("loaderror",null,"Failed loading audio file with status: "+_.status+".");i(_.response,e)},_.onerror=function(){e._webAudio&&(e._html5=!0,e._webAudio=!1,e._sounds=[],delete r[n],e.load())},u(_)}},u=function(e){try{e.send()}catch(n){e.onerror()}},i=function(e,o){var t=function(){o._emit("loaderror",null,"Decoding audio data failed.")},a=function(e){e&&o._sounds.length>0?(r[o._src]=e,d(o,e)):t()};"undefined"!=typeof Promise&&1===n.ctx.decodeAudioData.length?n.ctx.decodeAudioData(e).then(a).catch(t):n.ctx.decodeAudioData(e,a,t)},d=function(e,n){n&&!e._duration&&(e._duration=n.duration),0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue())},_=function(){if(n.usingWebAudio){try{"undefined"!=typeof AudioContext?n.ctx=new AudioContext:"undefined"!=typeof webkitAudioContext?n.ctx=new webkitAudioContext:n.usingWebAudio=!1}catch(e){n.usingWebAudio=!1}n.ctx||(n.usingWebAudio=!1);var e=/iP(hone|od|ad)/.test(n._navigator&&n._navigator.platform),o=n._navigator&&n._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),t=o?parseInt(o[1],10):null;if(e&&t&&t<9){var r=/safari/.test(n._navigator&&n._navigator.userAgent.toLowerCase());(n._navigator&&n._navigator.standalone&&!r||n._navigator&&!n._navigator.standalone&&!r)&&(n.usingWebAudio=!1)}n.usingWebAudio&&(n.masterGain=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),n.masterGain.gain.setValueAtTime(n._muted?0:1,n.ctx.currentTime),n.masterGain.connect(n.ctx.destination)),n._setup()}};"function"==typeof define&&define.amd&&define([],function(){return{Howler:n,Howl:o}}),"undefined"!=typeof exports&&(exports.Howler=n,exports.Howl=o),"undefined"!=typeof window?(window.HowlerGlobal=e,window.Howler=n,window.Howl=o,window.Sound=t):"undefined"!=typeof global&&(global.HowlerGlobal=e,global.Howler=n,global.Howl=o,global.Sound=t)}();
/*! Spatial Plugin */
!function(){"use strict";HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(e){var n=this;if(!n.ctx||!n.ctx.listener)return n;for(var t=n._howls.length-1;t>=0;t--)n._howls[t].stereo(e);return n},HowlerGlobal.prototype.pos=function(e,n,t){var r=this;return r.ctx&&r.ctx.listener?(n="number"!=typeof n?r._pos[1]:n,t="number"!=typeof t?r._pos[2]:t,"number"!=typeof e?r._pos:(r._pos=[e,n,t],void 0!==r.ctx.listener.positionX?(r.ctx.listener.positionX.setTargetAtTime(r._pos[0],Howler.ctx.currentTime,.1),r.ctx.listener.positionY.setTargetAtTime(r._pos[1],Howler.ctx.currentTime,.1),r.ctx.listener.positionZ.setTargetAtTime(r._pos[2],Howler.ctx.currentTime,.1)):r.ctx.listener.setPosition(r._pos[0],r._pos[1],r._pos[2]),r)):r},HowlerGlobal.prototype.orientation=function(e,n,t,r,o,i){var a=this;if(!a.ctx||!a.ctx.listener)return a;var s=a._orientation;return n="number"!=typeof n?s[1]:n,t="number"!=typeof t?s[2]:t,r="number"!=typeof r?s[3]:r,o="number"!=typeof o?s[4]:o,i="number"!=typeof i?s[5]:i,"number"!=typeof e?s:(a._orientation=[e,n,t,r,o,i],void 0!==a.ctx.listener.forwardX?(a.ctx.listener.forwardX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.forwardY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.forwardZ.setTargetAtTime(t,Howler.ctx.currentTime,.1),a.ctx.listener.upX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.upY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.upZ.setTargetAtTime(t,Howler.ctx.currentTime,.1)):a.ctx.listener.setOrientation(e,n,t,r,o,i),a)},Howl.prototype.init=function(e){return function(n){var t=this;return t._orientation=n.orientation||[1,0,0],t._stereo=n.stereo||null,t._pos=n.pos||null,t._pannerAttr={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:360,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:360,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:0,distanceModel:void 0!==n.distanceModel?n.distanceModel:"inverse",maxDistance:void 0!==n.maxDistance?n.maxDistance:1e4,panningModel:void 0!==n.panningModel?n.panningModel:"HRTF",refDistance:void 0!==n.refDistance?n.refDistance:1,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:1},t._onstereo=n.onstereo?[{fn:n.onstereo}]:[],t._onpos=n.onpos?[{fn:n.onpos}]:[],t._onorientation=n.onorientation?[{fn:n.onorientation}]:[],e.call(this,n)}}(Howl.prototype.init),Howl.prototype.stereo=function(n,t){var r=this;if(!r._webAudio)return r;if("loaded"!==r._state)return r._queue.push({event:"stereo",action:function(){r.stereo(n,t)}}),r;var o=void 0===Howler.ctx.createStereoPanner?"spatial":"stereo";if(void 0===t){if("number"!=typeof n)return r._stereo;r._stereo=n,r._pos=[n,0,0]}for(var i=r._getSoundIds(t),a=0;a<i.length;a++){var s=r._soundById(i[a]);if(s){if("number"!=typeof n)return s._stereo;s._stereo=n,s._pos=[n,0,0],s._node&&(s._pannerAttr.panningModel="equalpower",s._panner&&s._panner.pan||e(s,o),"spatial"===o?void 0!==s._panner.positionX?(s._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),s._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),s._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):s._panner.setPosition(n,0,0):s._panner.pan.setValueAtTime(n,Howler.ctx.currentTime)),r._emit("stereo",s._id)}}return r},Howl.prototype.pos=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"pos",action:function(){i.pos(n,t,r,o)}}),i;if(t="number"!=typeof t?0:t,r="number"!=typeof r?-.5:r,void 0===o){if("number"!=typeof n)return i._pos;i._pos=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._pos;p._pos=[n,t,r],p._node&&(p._panner&&!p._panner.pan||e(p,"spatial"),void 0!==p._panner.positionX?(p._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.positionY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.positionZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setPosition(n,t,r)),i._emit("pos",p._id)}}return i},Howl.prototype.orientation=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"orientation",action:function(){i.orientation(n,t,r,o)}}),i;if(t="number"!=typeof t?i._orientation[1]:t,r="number"!=typeof r?i._orientation[2]:r,void 0===o){if("number"!=typeof n)return i._orientation;i._orientation=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._orientation;p._orientation=[n,t,r],p._node&&(p._panner||(p._pos||(p._pos=i._pos||[0,0,-.5]),e(p,"spatial")),void 0!==p._panner.orientationX?(p._panner.orientationX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.orientationY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.orientationZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setOrientation(n,t,r)),i._emit("orientation",p._id)}}return i},Howl.prototype.pannerAttr=function(){var n,t,r,o=this,i=arguments;if(!o._webAudio)return o;if(0===i.length)return o._pannerAttr;if(1===i.length){if("object"!=typeof i[0])return r=o._soundById(parseInt(i[0],10)),r?r._pannerAttr:o._pannerAttr;n=i[0],void 0===t&&(n.pannerAttr||(n.pannerAttr={coneInnerAngle:n.coneInnerAngle,coneOuterAngle:n.coneOuterAngle,coneOuterGain:n.coneOuterGain,distanceModel:n.distanceModel,maxDistance:n.maxDistance,refDistance:n.refDistance,rolloffFactor:n.rolloffFactor,panningModel:n.panningModel}),o._pannerAttr={coneInnerAngle:void 0!==n.pannerAttr.coneInnerAngle?n.pannerAttr.coneInnerAngle:o._coneInnerAngle,coneOuterAngle:void 0!==n.pannerAttr.coneOuterAngle?n.pannerAttr.coneOuterAngle:o._coneOuterAngle,coneOuterGain:void 0!==n.pannerAttr.coneOuterGain?n.pannerAttr.coneOuterGain:o._coneOuterGain,distanceModel:void 0!==n.pannerAttr.distanceModel?n.pannerAttr.distanceModel:o._distanceModel,maxDistance:void 0!==n.pannerAttr.maxDistance?n.pannerAttr.maxDistance:o._maxDistance,refDistance:void 0!==n.pannerAttr.refDistance?n.pannerAttr.refDistance:o._refDistance,rolloffFactor:void 0!==n.pannerAttr.rolloffFactor?n.pannerAttr.rolloffFactor:o._rolloffFactor,panningModel:void 0!==n.pannerAttr.panningModel?n.pannerAttr.panningModel:o._panningModel})}else 2===i.length&&(n=i[0],t=parseInt(i[1],10));for(var a=o._getSoundIds(t),s=0;s<a.length;s++)if(r=o._soundById(a[s])){var p=r._pannerAttr;p={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:p.coneInnerAngle,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:p.coneOuterAngle,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:p.coneOuterGain,distanceModel:void 0!==n.distanceModel?n.distanceModel:p.distanceModel,maxDistance:void 0!==n.maxDistance?n.maxDistance:p.maxDistance,refDistance:void 0!==n.refDistance?n.refDistance:p.refDistance,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:p.rolloffFactor,panningModel:void 0!==n.panningModel?n.panningModel:p.panningModel};var c=r._panner;c?(c.coneInnerAngle=p.coneInnerAngle,c.coneOuterAngle=p.coneOuterAngle,c.coneOuterGain=p.coneOuterGain,c.distanceModel=p.distanceModel,c.maxDistance=p.maxDistance,c.refDistance=p.refDistance,c.rolloffFactor=p.rolloffFactor,c.panningModel=p.panningModel):(r._pos||(r._pos=o._pos||[0,0,-.5]),e(r,"spatial"))}return o},Sound.prototype.init=function(e){return function(){var n=this,t=n._parent;n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,e.call(this),n._stereo?t.stereo(n._stereo):n._pos&&t.pos(n._pos[0],n._pos[1],n._pos[2],n._id)}}(Sound.prototype.init),Sound.prototype.reset=function(e){return function(){var n=this,t=n._parent;return n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,n._stereo?t.stereo(n._stereo):n._pos?t.pos(n._pos[0],n._pos[1],n._pos[2],n._id):n._panner&&(n._panner.disconnect(0),n._panner=void 0,t._refreshBuffer(n)),e.call(this)}}(Sound.prototype.reset);var e=function(e,n){n=n||"spatial","spatial"===n?(e._panner=Howler.ctx.createPanner(),e._panner.coneInnerAngle=e._pannerAttr.coneInnerAngle,e._panner.coneOuterAngle=e._pannerAttr.coneOuterAngle,e._panner.coneOuterGain=e._pannerAttr.coneOuterGain,e._panner.distanceModel=e._pannerAttr.distanceModel,e._panner.maxDistance=e._pannerAttr.maxDistance,e._panner.refDistance=e._pannerAttr.refDistance,e._panner.rolloffFactor=e._pannerAttr.rolloffFactor,e._panner.panningModel=e._pannerAttr.panningModel,void 0!==e._panner.positionX?(e._panner.positionX.setValueAtTime(e._pos[0],Howler.ctx.currentTime),e._panner.positionY.setValueAtTime(e._pos[1],Howler.ctx.currentTime),e._panner.positionZ.setValueAtTime(e._pos[2],Howler.ctx.currentTime)):e._panner.setPosition(e._pos[0],e._pos[1],e._pos[2]),void 0!==e._panner.orientationX?(e._panner.orientationX.setValueAtTime(e._orientation[0],Howler.ctx.currentTime),e._panner.orientationY.setValueAtTime(e._orientation[1],Howler.ctx.currentTime),e._panner.orientationZ.setValueAtTime(e._orientation[2],Howler.ctx.currentTime)):e._panner.setOrientation(e._orientation[0],e._orientation[1],e._orientation[2])):(e._panner=Howler.ctx.createStereoPanner(),e._panner.pan.setValueAtTime(e._stereo,Howler.ctx.currentTime)),e._panner.connect(e._node),e._paused||e._parent.pause(e._id,!0).play(e._id,!0)}}();
/* pako 1.0.2 nodeca/pako */
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.pako=t()}}(function(){return function t(e,a,i){function n(s,o){if(!a[s]){if(!e[s]){var l="function"==typeof require&&require;if(!o&&l)return l(s,!0);if(r)return r(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var d=a[s]={exports:{}};e[s][0].call(d.exports,function(t){var a=e[s][1][t];return n(a?a:t)},d,d.exports,t,e,a,i)}return a[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)n(i[s]);return n}({1:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=l.assign({level:w,method:v,chunkSize:16384,windowBits:15,memLevel:8,strategy:p,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=o.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==b)throw new Error(d[a]);if(e.header&&o.deflateSetHeader(this.strm,e.header),e.dictionary){var n;if(n="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===_.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=o.deflateSetDictionary(this.strm,n),a!==b)throw new Error(d[a]);this._dict_set=!0}}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}function s(t,e){return e=e||{},e.gzip=!0,n(t,e)}var o=t("./zlib/deflate"),l=t("./utils/common"),h=t("./utils/strings"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=Object.prototype.toString,u=0,c=4,b=0,g=1,m=2,w=-1,p=0,v=8;i.prototype.push=function(t,e){var a,i,n=this.strm,r=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:e===!0?c:u,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===_.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new l.Buf8(r),n.next_out=0,n.avail_out=r),a=o.deflate(n,i),a!==g&&a!==b)return this.onEnd(a),this.ended=!0,!1;0!==n.avail_out&&(0!==n.avail_in||i!==c&&i!==m)||("string"===this.options.to?this.onData(h.buf2binstring(l.shrinkBuf(n.output,n.next_out))):this.onData(l.shrinkBuf(n.output,n.next_out)))}while((n.avail_in>0||0===n.avail_out)&&a!==g);return i===c?(a=o.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===b):i!==m||(this.onEnd(b),n.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===b&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=l.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Deflate=i,a.deflate=n,a.deflateRaw=r,a.gzip=s},{"./utils/common":3,"./utils/strings":4,"./zlib/deflate":8,"./zlib/messages":13,"./zlib/zstream":15}],2:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0===(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=s.inflateInit2(this.strm,e.windowBits);if(a!==h.Z_OK)throw new Error(d[a]);this.header=new _,s.inflateGetHeader(this.strm,this.header)}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}var s=t("./zlib/inflate"),o=t("./utils/common"),l=t("./utils/strings"),h=t("./zlib/constants"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=t("./zlib/gzheader"),u=Object.prototype.toString;i.prototype.push=function(t,e){var a,i,n,r,d,f,_=this.strm,c=this.options.chunkSize,b=this.options.dictionary,g=!1;if(this.ended)return!1;i=e===~~e?e:e===!0?h.Z_FINISH:h.Z_NO_FLUSH,"string"==typeof t?_.input=l.binstring2buf(t):"[object ArrayBuffer]"===u.call(t)?_.input=new Uint8Array(t):_.input=t,_.next_in=0,_.avail_in=_.input.length;do{if(0===_.avail_out&&(_.output=new o.Buf8(c),_.next_out=0,_.avail_out=c),a=s.inflate(_,h.Z_NO_FLUSH),a===h.Z_NEED_DICT&&b&&(f="string"==typeof b?l.string2buf(b):"[object ArrayBuffer]"===u.call(b)?new Uint8Array(b):b,a=s.inflateSetDictionary(this.strm,f)),a===h.Z_BUF_ERROR&&g===!0&&(a=h.Z_OK,g=!1),a!==h.Z_STREAM_END&&a!==h.Z_OK)return this.onEnd(a),this.ended=!0,!1;_.next_out&&(0!==_.avail_out&&a!==h.Z_STREAM_END&&(0!==_.avail_in||i!==h.Z_FINISH&&i!==h.Z_SYNC_FLUSH)||("string"===this.options.to?(n=l.utf8border(_.output,_.next_out),r=_.next_out-n,d=l.buf2string(_.output,n),_.next_out=r,_.avail_out=c-r,r&&o.arraySet(_.output,_.output,n,r,0),this.onData(d)):this.onData(o.shrinkBuf(_.output,_.next_out)))),0===_.avail_in&&0===_.avail_out&&(g=!0)}while((_.avail_in>0||0===_.avail_out)&&a!==h.Z_STREAM_END);return a===h.Z_STREAM_END&&(i=h.Z_FINISH),i===h.Z_FINISH?(a=s.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===h.Z_OK):i!==h.Z_SYNC_FLUSH||(this.onEnd(h.Z_OK),_.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===h.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Inflate=i,a.inflate=n,a.inflateRaw=r,a.ungzip=n},{"./utils/common":3,"./utils/strings":4,"./zlib/constants":6,"./zlib/gzheader":9,"./zlib/inflate":11,"./zlib/messages":13,"./zlib/zstream":15}],3:[function(t,e,a){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;a.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(var i in a)a.hasOwnProperty(i)&&(t[i]=a[i])}}return t},a.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,a,i,n){if(e.subarray&&t.subarray)return void t.set(e.subarray(a,a+i),n);for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){var e,a,i,n,r,s;for(i=0,e=0,a=t.length;e<a;e++)i+=t[e].length;for(s=new Uint8Array(i),n=0,e=0,a=t.length;e<a;e++)r=t[e],s.set(r,n),n+=r.length;return s}},r={arraySet:function(t,e,a,i,n){for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){return[].concat.apply([],t)}};a.setTyped=function(t){t?(a.Buf8=Uint8Array,a.Buf16=Uint16Array,a.Buf32=Int32Array,a.assign(a,n)):(a.Buf8=Array,a.Buf16=Array,a.Buf32=Array,a.assign(a,r))},a.setTyped(i)},{}],4:[function(t,e,a){"use strict";function i(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&r))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var a="",i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a}var n=t("./common"),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var o=new n.Buf8(256),l=0;l<256;l++)o[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;o[254]=o[254]=1,a.string2buf=function(t){var e,a,i,r,s,o=t.length,l=0;for(r=0;r<o;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),l+=a<128?1:a<2048?2:a<65536?3:4;for(e=new n.Buf8(l),s=0,r=0;s<l;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},a.buf2binstring=function(t){return i(t,t.length)},a.binstring2buf=function(t){for(var e=new n.Buf8(t.length),a=0,i=e.length;a<i;a++)e[a]=t.charCodeAt(a);return e},a.buf2string=function(t,e){var a,n,r,s,l=e||t.length,h=new Array(2*l);for(n=0,a=0;a<l;)if(r=t[a++],r<128)h[n++]=r;else if(s=o[r],s>4)h[n++]=65533,a+=s-1;else{for(r&=2===s?31:3===s?15:7;s>1&&a<l;)r=r<<6|63&t[a++],s--;s>1?h[n++]=65533:r<65536?h[n++]=r:(r-=65536,h[n++]=55296|r>>10&1023,h[n++]=56320|1023&r)}return i(h,n)},a.utf8border=function(t,e){var a;for(e=e||t.length,e>t.length&&(e=t.length),a=e-1;a>=0&&128===(192&t[a]);)a--;return a<0?e:0===a?e:a+o[t[a]]>e?a:e}},{"./common":3}],5:[function(t,e,a){"use strict";function i(t,e,a,i){for(var n=65535&t|0,r=t>>>16&65535|0,s=0;0!==a;){s=a>2e3?2e3:a,a-=s;do n=n+e[i++]|0,r=r+n|0;while(--s);n%=65521,r%=65521}return n|r<<16|0}e.exports=i},{}],6:[function(t,e,a){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],7:[function(t,e,a){"use strict";function i(){for(var t,e=[],a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e}function n(t,e,a,i){var n=r,s=i+a;t^=-1;for(var o=i;o<s;o++)t=t>>>8^n[255&(t^e[o])];return t^-1}var r=i();e.exports=n},{}],8:[function(t,e,a){"use strict";function i(t,e){return t.msg=D[e],e}function n(t){return(t<<1)-(t>4?9:0)}function r(t){for(var e=t.length;--e>=0;)t[e]=0}function s(t){var e=t.state,a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(R.arraySet(t.output,e.pending_buf,e.pending_out,a,t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))}function o(t,e){C._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,s(t.strm)}function l(t,e){t.pending_buf[t.pending++]=e}function h(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function d(t,e,a,i){var n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,R.arraySet(e,t.input,t.next_in,n,a),1===t.state.wrap?t.adler=N(t.adler,e,n,a):2===t.state.wrap&&(t.adler=O(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)}function f(t,e){var a,i,n=t.max_chain_length,r=t.strstart,s=t.prev_length,o=t.nice_match,l=t.strstart>t.w_size-ft?t.strstart-(t.w_size-ft):0,h=t.window,d=t.w_mask,f=t.prev,_=t.strstart+dt,u=h[r+s-1],c=h[r+s];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do if(a=e,h[a+s]===c&&h[a+s-1]===u&&h[a]===h[r]&&h[++a]===h[r+1]){r+=2,a++;do;while(h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&r<_);if(i=dt-(_-r),r=_-dt,i>s){if(t.match_start=e,s=i,i>=o)break;u=h[r+s-1],c=h[r+s]}}while((e=f[e&d])>l&&0!==--n);return s<=t.lookahead?s:t.lookahead}function _(t){var e,a,i,n,r,s=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-ft)){R.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,a=t.hash_size,e=a;do i=t.head[--e],t.head[e]=i>=s?i-s:0;while(--a);a=s,e=a;do i=t.prev[--e],t.prev[e]=i>=s?i-s:0;while(--a);n+=s}if(0===t.strm.avail_in)break;if(a=d(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=a,t.lookahead+t.insert>=ht)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+ht-1])&t.hash_mask,t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<ht)););}while(t.lookahead<ft&&0!==t.strm.avail_in)}function u(t,e){var a=65535;for(a>t.pending_buf_size-5&&(a=t.pending_buf_size-5);;){if(t.lookahead<=1){if(_(t),0===t.lookahead&&e===I)return vt;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+a;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,o(t,!1),0===t.strm.avail_out))return vt;if(t.strstart-t.block_start>=t.w_size-ft&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.strstart>t.block_start&&(o(t,!1),0===t.strm.avail_out)?vt:vt}function c(t,e){for(var a,i;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a)),t.match_length>=ht)if(i=C._tr_tally(t,t.strstart-t.match_start,t.match_length-ht),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ht){t.match_length--;do t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(0!==--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function b(t,e){for(var a,i,n;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ht-1,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a),t.match_length<=5&&(t.strategy===q||t.match_length===ht&&t.strstart-t.match_start>4096)&&(t.match_length=ht-1)),t.prev_length>=ht&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-ht,i=C._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-ht),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(0!==--t.prev_length);if(t.match_available=0,t.match_length=ht-1,t.strstart++,i&&(o(t,!1),0===t.strm.avail_out))return vt}else if(t.match_available){if(i=C._tr_tally(t,0,t.window[t.strstart-1]),i&&o(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return vt}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=C._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function g(t,e){for(var a,i,n,r,s=t.window;;){if(t.lookahead<=dt){if(_(t),t.lookahead<=dt&&e===I)return vt;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=ht&&t.strstart>0&&(n=t.strstart-1,i=s[n],i===s[++n]&&i===s[++n]&&i===s[++n])){r=t.strstart+dt;do;while(i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&n<r);t.match_length=dt-(r-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ht?(a=C._tr_tally(t,1,t.match_length-ht),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function m(t,e){for(var a;;){if(0===t.lookahead&&(_(t),0===t.lookahead)){if(e===I)return vt;break}if(t.match_length=0,a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function w(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}function p(t){t.window_size=2*t.w_size,r(t.head),t.max_lazy_match=Z[t.level].max_lazy,t.good_match=Z[t.level].good_length,t.nice_match=Z[t.level].nice_length,t.max_chain_length=Z[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ht-1,t.match_available=0,t.ins_h=0}function v(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=V,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new R.Buf16(2*ot),this.dyn_dtree=new R.Buf16(2*(2*rt+1)),this.bl_tree=new R.Buf16(2*(2*st+1)),r(this.dyn_ltree),r(this.dyn_dtree),r(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new R.Buf16(lt+1),this.heap=new R.Buf16(2*nt+1),r(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new R.Buf16(2*nt+1),r(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function k(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=Q,e=t.state,e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?ut:wt,t.adler=2===e.wrap?0:1,e.last_flush=I,C._tr_init(e),H):i(t,K)}function y(t){var e=k(t);return e===H&&p(t.state),e}function x(t,e){return t&&t.state?2!==t.state.wrap?K:(t.state.gzhead=e,H):K}function z(t,e,a,n,r,s){if(!t)return K;var o=1;if(e===Y&&(e=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),r<1||r>$||a!==V||n<8||n>15||e<0||e>9||s<0||s>W)return i(t,K);8===n&&(n=9);var l=new v;return t.state=l,l.strm=t,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+ht-1)/ht),l.window=new R.Buf8(2*l.w_size),l.head=new R.Buf16(l.hash_size),l.prev=new R.Buf16(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new R.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=s,l.method=a,y(t)}function B(t,e){return z(t,e,V,tt,et,J)}function S(t,e){var a,o,d,f;if(!t||!t.state||e>L||e<0)return t?i(t,K):K;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===pt&&e!==F)return i(t,0===t.avail_out?P:K);if(o.strm=t,a=o.last_flush,o.last_flush=e,o.status===ut)if(2===o.wrap)t.adler=0,l(o,31),l(o,139),l(o,8),o.gzhead?(l(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),l(o,255&o.gzhead.time),l(o,o.gzhead.time>>8&255),l(o,o.gzhead.time>>16&255),l(o,o.gzhead.time>>24&255),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(l(o,255&o.gzhead.extra.length),l(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=O(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=ct):(l(o,0),l(o,0),l(o,0),l(o,0),l(o,0),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,zt),o.status=wt);else{var _=V+(o.w_bits-8<<4)<<8,u=-1;u=o.strategy>=G||o.level<2?0:o.level<6?1:6===o.level?2:3,_|=u<<6,0!==o.strstart&&(_|=_t),_+=31-_%31,o.status=wt,h(o,_),0!==o.strstart&&(h(o,t.adler>>>16),h(o,65535&t.adler)),t.adler=1}if(o.status===ct)if(o.gzhead.extra){for(d=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending!==o.pending_buf_size));)l(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=bt)}else o.status=bt;if(o.status===bt)if(o.gzhead.name){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.gzindex=0,o.status=gt)}else o.status=gt;if(o.status===gt)if(o.gzhead.comment){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.status=mt)}else o.status=mt;if(o.status===mt&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&s(t),o.pending+2<=o.pending_buf_size&&(l(o,255&t.adler),l(o,t.adler>>8&255),t.adler=0,o.status=wt)):o.status=wt),0!==o.pending){if(s(t),0===t.avail_out)return o.last_flush=-1,H}else if(0===t.avail_in&&n(e)<=n(a)&&e!==F)return i(t,P);if(o.status===pt&&0!==t.avail_in)return i(t,P);if(0!==t.avail_in||0!==o.lookahead||e!==I&&o.status!==pt){var c=o.strategy===G?m(o,e):o.strategy===X?g(o,e):Z[o.level].func(o,e);if(c!==yt&&c!==xt||(o.status=pt),c===vt||c===yt)return 0===t.avail_out&&(o.last_flush=-1),H;if(c===kt&&(e===U?C._tr_align(o):e!==L&&(C._tr_stored_block(o,0,0,!1),e===T&&(r(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),s(t),0===t.avail_out))return o.last_flush=-1,H}return e!==F?H:o.wrap<=0?j:(2===o.wrap?(l(o,255&t.adler),l(o,t.adler>>8&255),l(o,t.adler>>16&255),l(o,t.adler>>24&255),l(o,255&t.total_in),l(o,t.total_in>>8&255),l(o,t.total_in>>16&255),l(o,t.total_in>>24&255)):(h(o,t.adler>>>16),h(o,65535&t.adler)),s(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?H:j)}function E(t){var e;return t&&t.state?(e=t.state.status,e!==ut&&e!==ct&&e!==bt&&e!==gt&&e!==mt&&e!==wt&&e!==pt?i(t,K):(t.state=null,e===wt?i(t,M):H)):K}function A(t,e){var a,i,n,s,o,l,h,d,f=e.length;if(!t||!t.state)return K;if(a=t.state,s=a.wrap,2===s||1===s&&a.status!==ut||a.lookahead)return K;for(1===s&&(t.adler=N(t.adler,e,f,0)),a.wrap=0,f>=a.w_size&&(0===s&&(r(a.head),a.strstart=0,a.block_start=0,a.insert=0),d=new R.Buf8(a.w_size),R.arraySet(d,e,f-a.w_size,a.w_size,0),e=d,f=a.w_size),o=t.avail_in,l=t.next_in,h=t.input,t.avail_in=f,t.next_in=0,t.input=e,_(a);a.lookahead>=ht;){i=a.strstart,n=a.lookahead-(ht-1);do a.ins_h=(a.ins_h<<a.hash_shift^a.window[i+ht-1])&a.hash_mask,a.prev[i&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=i,i++;while(--n);a.strstart=i,a.lookahead=ht-1,_(a)}return a.strstart+=a.lookahead,a.block_start=a.strstart,a.insert=a.lookahead,a.lookahead=0,a.match_length=a.prev_length=ht-1,a.match_available=0,t.next_in=l,t.input=h,t.avail_in=o,a.wrap=s,H}var Z,R=t("../utils/common"),C=t("./trees"),N=t("./adler32"),O=t("./crc32"),D=t("./messages"),I=0,U=1,T=3,F=4,L=5,H=0,j=1,K=-2,M=-3,P=-5,Y=-1,q=1,G=2,X=3,W=4,J=0,Q=2,V=8,$=9,tt=15,et=8,at=29,it=256,nt=it+1+at,rt=30,st=19,ot=2*nt+1,lt=15,ht=3,dt=258,ft=dt+ht+1,_t=32,ut=42,ct=69,bt=73,gt=91,mt=103,wt=113,pt=666,vt=1,kt=2,yt=3,xt=4,zt=3;Z=[new w(0,0,0,0,u),new w(4,4,8,4,c),new w(4,5,16,8,c),new w(4,6,32,32,c),new w(4,4,16,16,b),new w(8,16,32,32,b),new w(8,16,128,128,b),new w(8,32,128,256,b),new w(32,128,258,1024,b),new w(32,258,258,4096,b)],a.deflateInit=B,a.deflateInit2=z,a.deflateReset=y,a.deflateResetKeep=k,a.deflateSetHeader=x,a.deflate=S,a.deflateEnd=E,a.deflateSetDictionary=A,a.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./messages":13,"./trees":14}],9:[function(t,e,a){"use strict";function i(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}e.exports=i},{}],10:[function(t,e,a){"use strict";var i=30,n=12;e.exports=function(t,e){var a,r,s,o,l,h,d,f,_,u,c,b,g,m,w,p,v,k,y,x,z,B,S,E,A;a=t.state,r=t.next_in,E=t.input,s=r+(t.avail_in-5),o=t.next_out,A=t.output,l=o-(e-t.avail_out),h=o+(t.avail_out-257),d=a.dmax,f=a.wsize,_=a.whave,u=a.wnext,c=a.window,b=a.hold,g=a.bits,m=a.lencode,w=a.distcode,p=(1<<a.lenbits)-1,v=(1<<a.distbits)-1;t:do{g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=m[b&p];e:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,0===y)A[o++]=65535&k;else{if(!(16&y)){if(0===(64&y)){k=m[(65535&k)+(b&(1<<y)-1)];continue e}if(32&y){a.mode=n;break t}t.msg="invalid literal/length code",a.mode=i;break t}x=65535&k,y&=15,y&&(g<y&&(b+=E[r++]<<g,g+=8),x+=b&(1<<y)-1,b>>>=y,g-=y),g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=w[b&v];a:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,!(16&y)){if(0===(64&y)){k=w[(65535&k)+(b&(1<<y)-1)];continue a}t.msg="invalid distance code",a.mode=i;break t}if(z=65535&k,y&=15,g<y&&(b+=E[r++]<<g,g+=8,g<y&&(b+=E[r++]<<g,g+=8)),z+=b&(1<<y)-1,z>d){t.msg="invalid distance too far back",a.mode=i;break t}if(b>>>=y,g-=y,y=o-l,z>y){if(y=z-y,y>_&&a.sane){t.msg="invalid distance too far back",a.mode=i;break t}if(B=0,S=c,0===u){if(B+=f-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}else if(u<y){if(B+=f+u-y,y-=u,y<x){x-=y;do A[o++]=c[B++];while(--y);if(B=0,u<x){y=u,x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}}else if(B+=u-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}for(;x>2;)A[o++]=S[B++],A[o++]=S[B++],A[o++]=S[B++],x-=3;x&&(A[o++]=S[B++],x>1&&(A[o++]=S[B++]))}else{B=o-z;do A[o++]=A[B++],A[o++]=A[B++],A[o++]=A[B++],x-=3;while(x>2);x&&(A[o++]=A[B++],x>1&&(A[o++]=A[B++]))}break}}break}}while(r<s&&o<h);x=g>>3,r-=x,g-=x<<3,b&=(1<<g)-1,t.next_in=r,t.next_out=o,t.avail_in=r<s?5+(s-r):5-(r-s),t.avail_out=o<h?257+(h-o):257-(o-h),a.hold=b,a.bits=g}},{}],11:[function(t,e,a){"use strict";function i(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function n(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new w.Buf16(320),this.work=new w.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function r(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=T,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new w.Buf32(bt),e.distcode=e.distdyn=new w.Buf32(gt),e.sane=1,e.back=-1,Z):N}function s(t){var e;return t&&t.state?(e=t.state,e.wsize=0,e.whave=0,e.wnext=0,r(t)):N}function o(t,e){var a,i;return t&&t.state?(i=t.state,e<0?(a=0,e=-e):(a=(e>>4)+1,e<48&&(e&=15)),e&&(e<8||e>15)?N:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,s(t))):N}function l(t,e){var a,i;return t?(i=new n,t.state=i,i.window=null,a=o(t,e),a!==Z&&(t.state=null),a):N}function h(t){return l(t,wt)}function d(t){if(pt){var e;for(g=new w.Buf32(512),m=new w.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(y(z,t.lens,0,288,g,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;y(B,t.lens,0,32,m,0,t.work,{bits:5}),pt=!1}t.lencode=g,t.lenbits=9,t.distcode=m,t.distbits=5}function f(t,e,a,i){var n,r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new w.Buf8(r.wsize)),i>=r.wsize?(w.arraySet(r.window,e,a-r.wsize,r.wsize,0),r.wnext=0,r.whave=r.wsize):(n=r.wsize-r.wnext,n>i&&(n=i),w.arraySet(r.window,e,a-i,n,r.wnext),i-=n,i?(w.arraySet(r.window,e,a-i,i,0),r.wnext=i,r.whave=r.wsize):(r.wnext+=n,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=n))),0}function _(t,e){var a,n,r,s,o,l,h,_,u,c,b,g,m,bt,gt,mt,wt,pt,vt,kt,yt,xt,zt,Bt,St=0,Et=new w.Buf8(4),At=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return N;a=t.state,a.mode===X&&(a.mode=W),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,c=l,b=h,xt=Z;t:for(;;)switch(a.mode){case T:if(0===a.wrap){a.mode=W;break}for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(2&a.wrap&&35615===_){a.check=0,Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0),_=0,u=0,a.mode=F;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",a.mode=_t;break}if((15&_)!==U){t.msg="unknown compression method",a.mode=_t;break}if(_>>>=4,u-=4,yt=(15&_)+8,0===a.wbits)a.wbits=yt;else if(yt>a.wbits){t.msg="invalid window size",a.mode=_t;break}a.dmax=1<<yt,t.adler=a.check=1,a.mode=512&_?q:X,_=0,u=0;break;case F:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(a.flags=_,(255&a.flags)!==U){t.msg="unknown compression method",a.mode=_t;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=_t;break}a.head&&(a.head.text=_>>8&1),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=L;case L:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.time=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,Et[2]=_>>>16&255,Et[3]=_>>>24&255,a.check=v(a.check,Et,4,0)),_=0,u=0,a.mode=H;case H:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.xflags=255&_,a.head.os=_>>8),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=j;case j:if(1024&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length=_,a.head&&(a.head.extra_len=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0}else a.head&&(a.head.extra=null);a.mode=K;case K:if(1024&a.flags&&(g=a.length,g>l&&(g=l),g&&(a.head&&(yt=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),w.arraySet(a.head.extra,n,s,g,yt)),512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,a.length-=g),a.length))break t;a.length=0,a.mode=M;case M:if(2048&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.name+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=P;case P:if(4096&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.comment+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.comment=null);a.mode=Y;case Y:if(512&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(65535&a.check)){t.msg="header crc mismatch",a.mode=_t;break}_=0,u=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=X;break;case q:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}t.adler=a.check=i(_),_=0,u=0,a.mode=G;case G:if(0===a.havedict)return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,C;t.adler=a.check=1,a.mode=X;case X:if(e===E||e===A)break t;case W:if(a.last){_>>>=7&u,u-=7&u,a.mode=ht;break}for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}switch(a.last=1&_,_>>>=1,u-=1,3&_){case 0:a.mode=J;break;case 1:if(d(a),a.mode=at,e===A){_>>>=2,u-=2;break t}break;case 2:a.mode=$;break;case 3:t.msg="invalid block type",a.mode=_t}_>>>=2,u-=2;break;case J:for(_>>>=7&u,u-=7&u;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if((65535&_)!==(_>>>16^65535)){t.msg="invalid stored block lengths",a.mode=_t;break}if(a.length=65535&_,_=0,u=0,a.mode=Q,e===A)break t;case Q:a.mode=V;case V:if(g=a.length){if(g>l&&(g=l),g>h&&(g=h),0===g)break t;w.arraySet(r,n,s,g,o),l-=g,s+=g,h-=g,o+=g,a.length-=g;break}a.mode=X;break;case $:for(;u<14;){if(0===l)break t;
l--,_+=n[s++]<<u,u+=8}if(a.nlen=(31&_)+257,_>>>=5,u-=5,a.ndist=(31&_)+1,_>>>=5,u-=5,a.ncode=(15&_)+4,_>>>=4,u-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=_t;break}a.have=0,a.mode=tt;case tt:for(;a.have<a.ncode;){for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.lens[At[a.have++]]=7&_,_>>>=3,u-=3}for(;a.have<19;)a.lens[At[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,zt={bits:a.lenbits},xt=y(x,a.lens,0,19,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid code lengths set",a.mode=_t;break}a.have=0,a.mode=et;case et:for(;a.have<a.nlen+a.ndist;){for(;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(wt<16)_>>>=gt,u-=gt,a.lens[a.have++]=wt;else{if(16===wt){for(Bt=gt+2;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_>>>=gt,u-=gt,0===a.have){t.msg="invalid bit length repeat",a.mode=_t;break}yt=a.lens[a.have-1],g=3+(3&_),_>>>=2,u-=2}else if(17===wt){for(Bt=gt+3;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=3+(7&_),_>>>=3,u-=3}else{for(Bt=gt+7;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=11+(127&_),_>>>=7,u-=7}if(a.have+g>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=_t;break}for(;g--;)a.lens[a.have++]=yt}}if(a.mode===_t)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=_t;break}if(a.lenbits=9,zt={bits:a.lenbits},xt=y(z,a.lens,0,a.nlen,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid literal/lengths set",a.mode=_t;break}if(a.distbits=6,a.distcode=a.distdyn,zt={bits:a.distbits},xt=y(B,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,zt),a.distbits=zt.bits,xt){t.msg="invalid distances set",a.mode=_t;break}if(a.mode=at,e===A)break t;case at:a.mode=it;case it:if(l>=6&&h>=258){t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,k(t,b),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,a.mode===X&&(a.back=-1);break}for(a.back=0;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(mt&&0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.lencode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,a.length=wt,0===mt){a.mode=lt;break}if(32&mt){a.back=-1,a.mode=X;break}if(64&mt){t.msg="invalid literal/length code",a.mode=_t;break}a.extra=15&mt,a.mode=nt;case nt:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=rt;case rt:for(;St=a.distcode[_&(1<<a.distbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.distcode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,64&mt){t.msg="invalid distance code",a.mode=_t;break}a.offset=wt,a.extra=15&mt,a.mode=st;case st:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.offset+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=_t;break}a.mode=ot;case ot:if(0===h)break t;if(g=b-h,a.offset>g){if(g=a.offset-g,g>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=_t;break}g>a.wnext?(g-=a.wnext,m=a.wsize-g):m=a.wnext-g,g>a.length&&(g=a.length),bt=a.window}else bt=r,m=o-a.offset,g=a.length;g>h&&(g=h),h-=g,a.length-=g;do r[o++]=bt[m++];while(--g);0===a.length&&(a.mode=it);break;case lt:if(0===h)break t;r[o++]=a.length,h--,a.mode=it;break;case ht:if(a.wrap){for(;u<32;){if(0===l)break t;l--,_|=n[s++]<<u,u+=8}if(b-=h,t.total_out+=b,a.total+=b,b&&(t.adler=a.check=a.flags?v(a.check,r,b,o-b):p(a.check,r,b,o-b)),b=h,(a.flags?_:i(_))!==a.check){t.msg="incorrect data check",a.mode=_t;break}_=0,u=0}a.mode=dt;case dt:if(a.wrap&&a.flags){for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=_t;break}_=0,u=0}a.mode=ft;case ft:xt=R;break t;case _t:xt=O;break t;case ut:return D;case ct:default:return N}return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,(a.wsize||b!==t.avail_out&&a.mode<_t&&(a.mode<ht||e!==S))&&f(t,t.output,t.next_out,b-t.avail_out)?(a.mode=ut,D):(c-=t.avail_in,b-=t.avail_out,t.total_in+=c,t.total_out+=b,a.total+=b,a.wrap&&b&&(t.adler=a.check=a.flags?v(a.check,r,b,t.next_out-b):p(a.check,r,b,t.next_out-b)),t.data_type=a.bits+(a.last?64:0)+(a.mode===X?128:0)+(a.mode===at||a.mode===Q?256:0),(0===c&&0===b||e===S)&&xt===Z&&(xt=I),xt)}function u(t){if(!t||!t.state)return N;var e=t.state;return e.window&&(e.window=null),t.state=null,Z}function c(t,e){var a;return t&&t.state?(a=t.state,0===(2&a.wrap)?N:(a.head=e,e.done=!1,Z)):N}function b(t,e){var a,i,n,r=e.length;return t&&t.state?(a=t.state,0!==a.wrap&&a.mode!==G?N:a.mode===G&&(i=1,i=p(i,e,r,0),i!==a.check)?O:(n=f(t,e,r,r))?(a.mode=ut,D):(a.havedict=1,Z)):N}var g,m,w=t("../utils/common"),p=t("./adler32"),v=t("./crc32"),k=t("./inffast"),y=t("./inftrees"),x=0,z=1,B=2,S=4,E=5,A=6,Z=0,R=1,C=2,N=-2,O=-3,D=-4,I=-5,U=8,T=1,F=2,L=3,H=4,j=5,K=6,M=7,P=8,Y=9,q=10,G=11,X=12,W=13,J=14,Q=15,V=16,$=17,tt=18,et=19,at=20,it=21,nt=22,rt=23,st=24,ot=25,lt=26,ht=27,dt=28,ft=29,_t=30,ut=31,ct=32,bt=852,gt=592,mt=15,wt=mt,pt=!0;a.inflateReset=s,a.inflateReset2=o,a.inflateResetKeep=r,a.inflateInit=h,a.inflateInit2=l,a.inflate=_,a.inflateEnd=u,a.inflateGetHeader=c,a.inflateSetDictionary=b,a.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./inffast":10,"./inftrees":12}],12:[function(t,e,a){"use strict";var i=t("../utils/common"),n=15,r=852,s=592,o=0,l=1,h=2,d=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],f=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],_=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,a,c,b,g,m,w){var p,v,k,y,x,z,B,S,E,A=w.bits,Z=0,R=0,C=0,N=0,O=0,D=0,I=0,U=0,T=0,F=0,L=null,H=0,j=new i.Buf16(n+1),K=new i.Buf16(n+1),M=null,P=0;for(Z=0;Z<=n;Z++)j[Z]=0;for(R=0;R<c;R++)j[e[a+R]]++;for(O=A,N=n;N>=1&&0===j[N];N--);if(O>N&&(O=N),0===N)return b[g++]=20971520,b[g++]=20971520,w.bits=1,0;for(C=1;C<N&&0===j[C];C++);for(O<C&&(O=C),U=1,Z=1;Z<=n;Z++)if(U<<=1,U-=j[Z],U<0)return-1;if(U>0&&(t===o||1!==N))return-1;for(K[1]=0,Z=1;Z<n;Z++)K[Z+1]=K[Z]+j[Z];for(R=0;R<c;R++)0!==e[a+R]&&(m[K[e[a+R]]++]=R);if(t===o?(L=M=m,z=19):t===l?(L=d,H-=257,M=f,P-=257,z=256):(L=_,M=u,z=-1),F=0,R=0,Z=C,x=g,D=O,I=0,k=-1,T=1<<O,y=T-1,t===l&&T>r||t===h&&T>s)return 1;for(var Y=0;;){Y++,B=Z-I,m[R]<z?(S=0,E=m[R]):m[R]>z?(S=M[P+m[R]],E=L[H+m[R]]):(S=96,E=0),p=1<<Z-I,v=1<<D,C=v;do v-=p,b[x+(F>>I)+v]=B<<24|S<<16|E|0;while(0!==v);for(p=1<<Z-1;F&p;)p>>=1;if(0!==p?(F&=p-1,F+=p):F=0,R++,0===--j[Z]){if(Z===N)break;Z=e[a+m[R]]}if(Z>O&&(F&y)!==k){for(0===I&&(I=O),x+=C,D=Z-I,U=1<<D;D+I<N&&(U-=j[D+I],!(U<=0));)D++,U<<=1;if(T+=1<<D,t===l&&T>r||t===h&&T>s)return 1;k=F&y,b[k]=O<<24|D<<16|x-g|0}}return 0!==F&&(b[x+F]=Z-I<<24|64<<16|0),w.bits=O,0}},{"../utils/common":3}],13:[function(t,e,a){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],14:[function(t,e,a){"use strict";function i(t){for(var e=t.length;--e>=0;)t[e]=0}function n(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function r(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function s(t){return t<256?lt[t]:lt[256+(t>>>7)]}function o(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function l(t,e,a){t.bi_valid>W-a?(t.bi_buf|=e<<t.bi_valid&65535,o(t,t.bi_buf),t.bi_buf=e>>W-t.bi_valid,t.bi_valid+=a-W):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)}function h(t,e,a){l(t,a[2*e],a[2*e+1])}function d(t,e){var a=0;do a|=1&t,t>>>=1,a<<=1;while(--e>0);return a>>>1}function f(t){16===t.bi_valid?(o(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}function _(t,e){var a,i,n,r,s,o,l=e.dyn_tree,h=e.max_code,d=e.stat_desc.static_tree,f=e.stat_desc.has_stree,_=e.stat_desc.extra_bits,u=e.stat_desc.extra_base,c=e.stat_desc.max_length,b=0;for(r=0;r<=X;r++)t.bl_count[r]=0;for(l[2*t.heap[t.heap_max]+1]=0,a=t.heap_max+1;a<G;a++)i=t.heap[a],r=l[2*l[2*i+1]+1]+1,r>c&&(r=c,b++),l[2*i+1]=r,i>h||(t.bl_count[r]++,s=0,i>=u&&(s=_[i-u]),o=l[2*i],t.opt_len+=o*(r+s),f&&(t.static_len+=o*(d[2*i+1]+s)));if(0!==b){do{for(r=c-1;0===t.bl_count[r];)r--;t.bl_count[r]--,t.bl_count[r+1]+=2,t.bl_count[c]--,b-=2}while(b>0);for(r=c;0!==r;r--)for(i=t.bl_count[r];0!==i;)n=t.heap[--a],n>h||(l[2*n+1]!==r&&(t.opt_len+=(r-l[2*n+1])*l[2*n],l[2*n+1]=r),i--)}}function u(t,e,a){var i,n,r=new Array(X+1),s=0;for(i=1;i<=X;i++)r[i]=s=s+a[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=d(r[o]++,o))}}function c(){var t,e,a,i,r,s=new Array(X+1);for(a=0,i=0;i<K-1;i++)for(dt[i]=a,t=0;t<1<<et[i];t++)ht[a++]=i;for(ht[a-1]=i,r=0,i=0;i<16;i++)for(ft[i]=r,t=0;t<1<<at[i];t++)lt[r++]=i;for(r>>=7;i<Y;i++)for(ft[i]=r<<7,t=0;t<1<<at[i]-7;t++)lt[256+r++]=i;for(e=0;e<=X;e++)s[e]=0;for(t=0;t<=143;)st[2*t+1]=8,t++,s[8]++;for(;t<=255;)st[2*t+1]=9,t++,s[9]++;for(;t<=279;)st[2*t+1]=7,t++,s[7]++;for(;t<=287;)st[2*t+1]=8,t++,s[8]++;for(u(st,P+1,s),t=0;t<Y;t++)ot[2*t+1]=5,ot[2*t]=d(t,5);_t=new n(st,et,M+1,P,X),ut=new n(ot,at,0,Y,X),ct=new n(new Array(0),it,0,q,J)}function b(t){var e;for(e=0;e<P;e++)t.dyn_ltree[2*e]=0;for(e=0;e<Y;e++)t.dyn_dtree[2*e]=0;for(e=0;e<q;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*Q]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function g(t){t.bi_valid>8?o(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function m(t,e,a,i){g(t),i&&(o(t,a),o(t,~a)),N.arraySet(t.pending_buf,t.window,e,a,t.pending),t.pending+=a}function w(t,e,a,i){var n=2*e,r=2*a;return t[n]<t[r]||t[n]===t[r]&&i[e]<=i[a]}function p(t,e,a){for(var i=t.heap[a],n=a<<1;n<=t.heap_len&&(n<t.heap_len&&w(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!w(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i}function v(t,e,a){var i,n,r,o,d=0;if(0!==t.last_lit)do i=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],n=t.pending_buf[t.l_buf+d],d++,0===i?h(t,n,e):(r=ht[n],h(t,r+M+1,e),o=et[r],0!==o&&(n-=dt[r],l(t,n,o)),i--,r=s(i),h(t,r,a),o=at[r],0!==o&&(i-=ft[r],l(t,i,o)));while(d<t.last_lit);h(t,Q,e)}function k(t,e){var a,i,n,r=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,l=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=G,a=0;a<l;a++)0!==r[2*a]?(t.heap[++t.heap_len]=h=a,t.depth[a]=0):r[2*a+1]=0;for(;t.heap_len<2;)n=t.heap[++t.heap_len]=h<2?++h:0,r[2*n]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=s[2*n+1]);for(e.max_code=h,a=t.heap_len>>1;a>=1;a--)p(t,r,a);n=l;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],p(t,r,1),i=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=i,r[2*n]=r[2*a]+r[2*i],t.depth[n]=(t.depth[a]>=t.depth[i]?t.depth[a]:t.depth[i])+1,r[2*a+1]=r[2*i+1]=n,t.heap[1]=n++,p(t,r,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],_(t,e),u(r,h,t.bl_count)}function y(t,e,a){var i,n,r=-1,s=e[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=s,s=e[2*(i+1)+1],++o<l&&n===s||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==r&&t.bl_tree[2*n]++,t.bl_tree[2*V]++):o<=10?t.bl_tree[2*$]++:t.bl_tree[2*tt]++,o=0,r=n,0===s?(l=138,h=3):n===s?(l=6,h=3):(l=7,h=4))}function x(t,e,a){var i,n,r=-1,s=e[1],o=0,d=7,f=4;for(0===s&&(d=138,f=3),i=0;i<=a;i++)if(n=s,s=e[2*(i+1)+1],!(++o<d&&n===s)){if(o<f){do h(t,n,t.bl_tree);while(0!==--o)}else 0!==n?(n!==r&&(h(t,n,t.bl_tree),o--),h(t,V,t.bl_tree),l(t,o-3,2)):o<=10?(h(t,$,t.bl_tree),l(t,o-3,3)):(h(t,tt,t.bl_tree),l(t,o-11,7));o=0,r=n,0===s?(d=138,f=3):n===s?(d=6,f=3):(d=7,f=4)}}function z(t){var e;for(y(t,t.dyn_ltree,t.l_desc.max_code),y(t,t.dyn_dtree,t.d_desc.max_code),k(t,t.bl_desc),e=q-1;e>=3&&0===t.bl_tree[2*nt[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}function B(t,e,a,i){var n;for(l(t,e-257,5),l(t,a-1,5),l(t,i-4,4),n=0;n<i;n++)l(t,t.bl_tree[2*nt[n]+1],3);x(t,t.dyn_ltree,e-1),x(t,t.dyn_dtree,a-1)}function S(t){var e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return D;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return I;for(e=32;e<M;e++)if(0!==t.dyn_ltree[2*e])return I;return D}function E(t){bt||(c(),bt=!0),t.l_desc=new r(t.dyn_ltree,_t),t.d_desc=new r(t.dyn_dtree,ut),t.bl_desc=new r(t.bl_tree,ct),t.bi_buf=0,t.bi_valid=0,b(t)}function A(t,e,a,i){l(t,(T<<1)+(i?1:0),3),m(t,e,a,!0)}function Z(t){l(t,F<<1,3),h(t,Q,st),f(t)}function R(t,e,a,i){var n,r,s=0;t.level>0?(t.strm.data_type===U&&(t.strm.data_type=S(t)),k(t,t.l_desc),k(t,t.d_desc),s=z(t),n=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=n&&(n=r)):n=r=a+5,a+4<=n&&e!==-1?A(t,e,a,i):t.strategy===O||r===n?(l(t,(F<<1)+(i?1:0),3),v(t,st,ot)):(l(t,(L<<1)+(i?1:0),3),B(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),v(t,t.dyn_ltree,t.dyn_dtree)),b(t),i&&g(t)}function C(t,e,a){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&a,t.last_lit++,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(ht[a]+M+1)]++,t.dyn_dtree[2*s(e)]++),t.last_lit===t.lit_bufsize-1}var N=t("../utils/common"),O=4,D=0,I=1,U=2,T=0,F=1,L=2,H=3,j=258,K=29,M=256,P=M+1+K,Y=30,q=19,G=2*P+1,X=15,W=16,J=7,Q=256,V=16,$=17,tt=18,et=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],at=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],it=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],nt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],rt=512,st=new Array(2*(P+2));i(st);var ot=new Array(2*Y);i(ot);var lt=new Array(rt);i(lt);var ht=new Array(j-H+1);i(ht);var dt=new Array(K);i(dt);var ft=new Array(Y);i(ft);var _t,ut,ct,bt=!1;a._tr_init=E,a._tr_stored_block=A,a._tr_flush_block=R,a._tr_tally=C,a._tr_align=Z},{"../utils/common":3}],15:[function(t,e,a){"use strict";function i(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}e.exports=i},{}],"/":[function(t,e,a){"use strict";var i=t("./lib/utils/common").assign,n=t("./lib/deflate"),r=t("./lib/inflate"),s=t("./lib/zlib/constants"),o={};i(o,n,r,s),e.exports=o},{"./lib/deflate":1,"./lib/inflate":2,"./lib/utils/common":3,"./lib/zlib/constants":6}]},{},[])("/")});

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var saveAs=saveAs||function(e){"use strict";if(typeof e==="undefined"||typeof navigator!=="undefined"&&/MSIE [1-9]\./.test(navigator.userAgent)){return}var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,a=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},i=/constructor/i.test(e.HTMLElement)||e.safari,f=/CriOS\/[\d]+/.test(navigator.userAgent),u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},s="application/octet-stream",d=1e3*40,c=function(e){var t=function(){if(typeof e==="string"){n().revokeObjectURL(e)}else{e.remove()}};setTimeout(t,d)},l=function(e,t,n){t=[].concat(t);var r=t.length;while(r--){var o=e["on"+t[r]];if(typeof o==="function"){try{o.call(e,n||e)}catch(a){u(a)}}}},p=function(e){if(/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)){return new Blob([String.fromCharCode(65279),e],{type:e.type})}return e},v=function(t,u,d){if(!d){t=p(t)}var v=this,w=t.type,m=w===s,y,h=function(){l(v,"writestart progress write writeend".split(" "))},S=function(){if((f||m&&i)&&e.FileReader){var r=new FileReader;r.onloadend=function(){var t=f?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");var n=e.open(t,"_blank");if(!n)e.location.href=t;t=undefined;v.readyState=v.DONE;h()};r.readAsDataURL(t);v.readyState=v.INIT;return}if(!y){y=n().createObjectURL(t)}if(m){e.location.href=y}else{var o=e.open(y,"_blank");if(!o){e.location.href=y}}v.readyState=v.DONE;h();c(y)};v.readyState=v.INIT;if(o){y=n().createObjectURL(t);setTimeout(function(){r.href=y;r.download=u;a(r);h();c(y);v.readyState=v.DONE});return}S()},w=v.prototype,m=function(e,t,n){return new v(e,t||e.name||"download",n)};if(typeof navigator!=="undefined"&&navigator.msSaveOrOpenBlob){return function(e,t,n){t=t||e.name||"download";if(!n){e=p(e)}return navigator.msSaveOrOpenBlob(e,t)}}w.abort=function(){};w.readyState=w.INIT=0;w.WRITING=1;w.DONE=2;w.error=w.onwritestart=w.onprogress=w.onwrite=w.onabort=w.onerror=w.onwriteend=null;return m}(typeof self!=="undefined"&&self||typeof window!=="undefined"&&window||this.content);if(typeof module!=="undefined"&&module.exports){module.exports.saveAs=saveAs}else if(typeof define!=="undefined"&&define!==null&&define.amd!==null){define("FileSaver.js",function(){return saveAs})}

if(typeof define == "function" && define.__amd) {
	define.amd = define.__amd;
	delete define.__amd;
}