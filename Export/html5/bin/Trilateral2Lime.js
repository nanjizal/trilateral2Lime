(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { // Generated by Haxe 4.1.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["hxGeomAlgo"] = $hx_exports["hxGeomAlgo"] || {};
$hx_exports["hxGeomAlgo"]["_HxPoint"] = $hx_exports["hxGeomAlgo"]["_HxPoint"] || {};
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g = 0;
			var _g1 = this.parent.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if($window.context != null) {
					$window.onRender.dispatch($window.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				this.parent.__window.onFocusOut.dispatch();
				this.parent.__window.onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__window.onFocusIn.dispatch();
				this.parent.__window.onActivate.dispatch();
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g3 = data.buttons.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g4 = 0;
				var _g5 = data.axes.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g6 = 0;
				var _g7 = data.buttons.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g8 = 0;
				var _g9 = data.axes.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function($window) {
		if($window != null) {
			this.__windows.push($window);
			this.__windowByID.h[$window.id] = $window;
			var _g = $bind(this,this.__onWindowClose);
			var window1 = $window;
			var tmp = function() {
				_g(window1);
			};
			$window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = $window;
				$window.onActivate.add($bind(this,this.onWindowActivate));
				$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				$window.onDropFile.add($bind(this,this.onWindowDropFile));
				$window.onEnter.add($bind(this,this.onWindowEnter));
				$window.onExpose.add($bind(this,this.onWindowExpose));
				$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				$window.onKeyDown.add($bind(this,this.onKeyDown));
				$window.onKeyUp.add($bind(this,this.onKeyUp));
				$window.onLeave.add($bind(this,this.onWindowLeave));
				$window.onMinimize.add($bind(this,this.onWindowMinimize));
				$window.onMouseDown.add($bind(this,this.onMouseDown));
				$window.onMouseMove.add($bind(this,this.onMouseMove));
				$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				$window.onMouseUp.add($bind(this,this.onMouseUp));
				$window.onMouseWheel.add($bind(this,this.onMouseWheel));
				$window.onMove.add($bind(this,this.onWindowMove));
				$window.onRender.add($bind(this,this.render));
				$window.onResize.add($bind(this,this.onWindowResize));
				$window.onRestore.add($bind(this,this.onWindowRestore));
				$window.onTextEdit.add($bind(this,this.onTextEdit));
				$window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch($window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var _g = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var _g = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			_g(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp = function(button) {
			_g1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp = function(button) {
			_g2(joystick3,button);
		};
		joystick.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp = function() {
			_g3(joystick4);
		};
		joystick.onDisconnect.add(tmp);
		var _g4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp = function(hat,position) {
			_g4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp);
		var _g5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp = function(trackball,x,y) {
			_g5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("Trilateral2Lime",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	ManifestResources.init(config);
	var app = new trilateral2Lime_app_Main();
	app.meta.h["build"] = "6";
	app.meta.h["company"] = "Nanjizal";
	app.meta.h["file"] = "Trilateral2Lime";
	app.meta.h["name"] = "Trilateral2Lime";
	app.meta.h["packageName"] = "net.nanjizal.trilateral2lime";
	app.meta.h["version"] = "1.0.0";
	var attributes = { allowHighDPI : false, alwaysOnTop : false, borderless : false, element : null, frameRate : 60, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "Trilateral2Lime", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 16777215, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		app.__preloader.addLibrary(library);
	}
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraryNames;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	ApplicationMain.start(app);
};
ApplicationMain.start = function(app) {
	var result = app.exec();
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	var bundle;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy17:assets%2Flime.pngy4:sizei38023y4:typey5:IMAGEy2:idR1y7:preloadtgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var fracs_DifferencePreference = $hxEnums["fracs.DifferencePreference"] = { __ename__ : "fracs.DifferencePreference", __constructs__ : ["CLOCKWISE","ANTICLOCKWISE","SMALL","LARGE"]
	,CLOCKWISE: {_hx_index:0,__enum__:"fracs.DifferencePreference",toString:$estr}
	,ANTICLOCKWISE: {_hx_index:1,__enum__:"fracs.DifferencePreference",toString:$estr}
	,SMALL: {_hx_index:2,__enum__:"fracs.DifferencePreference",toString:$estr}
	,LARGE: {_hx_index:3,__enum__:"fracs.DifferencePreference",toString:$estr}
};
var fracs_Angles = function() { };
$hxClasses["fracs.Angles"] = fracs_Angles;
fracs_Angles.__name__ = "fracs.Angles";
fracs_Angles.pi2pi = function(angle) {
	if(angle <= Math.PI && angle > -Math.PI) {
		return angle;
	} else {
		var a = (angle + Math.PI) % (2 * Math.PI);
		if(a >= 0) {
			return a - Math.PI;
		} else {
			return a + Math.PI;
		}
	}
};
fracs_Angles.zeroto2pi = function(angle) {
	if(angle >= 0 && angle > Math.PI) {
		return angle;
	} else {
		var a = angle % (2 * Math.PI);
		if(a >= 0) {
			return a;
		} else {
			return a + 2 * Math.PI;
		}
	}
};
fracs_Angles.zerotoMinus2pi = function(angle) {
	if(angle <= 0 && angle > -Math.PI) {
		return angle;
	} else {
		var a = angle % (2 * Math.PI);
		var a1 = a >= 0 ? a : a + 2 * Math.PI;
		return -(Math.PI * 2 - a1);
	}
};
fracs_Angles.differencePrefer = function(a,b,prefer) {
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(a >= 0 && a > Math.PI) {
			f = a;
		} else {
			var a1 = a % (2 * Math.PI);
			f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(b >= 0 && b > Math.PI) {
			f = b;
		} else {
			var a1 = b % (2 * Math.PI);
			f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif = clockwise ? theta : -theta;
		if(dif > 0) {
			return dif;
		} else {
			return 2 * Math.PI + dif;
		}
		break;
	case 1:
		var f;
		if(a >= 0 && a > Math.PI) {
			f = a;
		} else {
			var a1 = a % (2 * Math.PI);
			f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(b >= 0 && b > Math.PI) {
			f = b;
		} else {
			var a1 = b % (2 * Math.PI);
			f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif = clockwise ? theta : -theta;
		if(dif < 0) {
			return dif;
		} else {
			return -2 * Math.PI + dif;
		}
		break;
	case 2:
		var f;
		if(a >= 0 && a > Math.PI) {
			f = a;
		} else {
			var a1 = a % (2 * Math.PI);
			f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(b >= 0 && b > Math.PI) {
			f = b;
		} else {
			var a1 = b % (2 * Math.PI);
			f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif = clockwise ? theta : -theta;
		if(smallest) {
			return dif;
		} else if(clockwise) {
			return -(2 * Math.PI - theta);
		} else {
			return 2 * Math.PI - theta;
		}
		break;
	case 3:
		var f;
		if(a >= 0 && a > Math.PI) {
			f = a;
		} else {
			var a1 = a % (2 * Math.PI);
			f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(b >= 0 && b > Math.PI) {
			f = b;
		} else {
			var a = b % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif = clockwise ? theta : -theta;
		if(largest) {
			return dif;
		} else if(clockwise) {
			return -(2 * Math.PI - theta);
		} else {
			return 2 * Math.PI - theta;
		}
		break;
	}
};
fracs_Angles.difference = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f;
	if(b >= 0 && b > Math.PI) {
		f = b;
	} else {
		var a = b % (2 * Math.PI);
		f = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f;
	var zb = this1;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var clockwise = fa < fb;
	if(clockwise) {
		return theta;
	} else {
		return -theta;
	}
};
fracs_Angles.differenceClockWise = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f;
	if(b >= 0 && b > Math.PI) {
		f = b;
	} else {
		var a = b % (2 * Math.PI);
		f = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f;
	var zb = this1;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	if(dif > 0) {
		return dif;
	} else {
		return 2 * Math.PI + dif;
	}
};
fracs_Angles.differenceAntiClockwise = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f;
	if(b >= 0 && b > Math.PI) {
		f = b;
	} else {
		var a = b % (2 * Math.PI);
		f = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f;
	var zb = this1;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	if(dif < 0) {
		return dif;
	} else {
		return -2 * Math.PI + dif;
	}
};
fracs_Angles.differenceSmall = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f;
	if(b >= 0 && b > Math.PI) {
		f = b;
	} else {
		var a = b % (2 * Math.PI);
		f = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f;
	var zb = this1;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var smallest = theta <= Math.PI;
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	if(smallest) {
		return dif;
	} else if(clockwise) {
		return -(2 * Math.PI - theta);
	} else {
		return 2 * Math.PI - theta;
	}
};
fracs_Angles.differenceLarge = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f;
	if(b >= 0 && b > Math.PI) {
		f = b;
	} else {
		var a = b % (2 * Math.PI);
		f = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f;
	var zb = this1;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var largest = theta > Math.PI;
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	if(largest) {
		return dif;
	} else if(clockwise) {
		return -(2 * Math.PI - theta);
	} else {
		return 2 * Math.PI - theta;
	}
};
fracs_Angles.differenceSmallLarge = function(a,b) {
	var f;
	if(a >= 0 && a > Math.PI) {
		f = a;
	} else {
		var a1 = a % (2 * Math.PI);
		f = a1 >= 0 ? a1 : a1 + 2 * Math.PI;
	}
	var this1 = f;
	var za = this1;
	var f;
	if(b >= 0 && b > Math.PI) {
		f = b;
	} else {
		var a = b % (2 * Math.PI);
		f = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f;
	var zb = this1;
	var fa = za;
	var fb = zb;
	var theta = Math.abs(fa - fb);
	var smallest = theta <= Math.PI;
	var clockwise = fa < fb;
	var dif = clockwise ? theta : -theta;
	var other = clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
	if(smallest) {
		return { small : dif, large : other};
	} else {
		return { small : other, large : dif};
	}
};
var fracs_FractionArray = {};
fracs_FractionArray._new = function(val) {
	var this1 = val == null ? [] : val;
	return this1;
};
fracs_FractionArray.add = function(this1,val) {
	this1[this1.length] = val;
};
fracs_FractionArray.toString = function(this1) {
	var l = this1.length;
	var str = "";
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var tmp = this1[i];
		var str1;
		if(tmp == null) {
			str1 = "null";
		} else {
			var n = tmp.numerator;
			var d = tmp.denominator;
			var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? tmp.positive ? "" + n : "-" + n : tmp.positive ? "" + n + "/" + d : "-" + n + "/" + d;
			str1 = out;
		}
		str = str + "\n" + str1;
	}
	return str;
};
var fracs_Fraction = {};
fracs_Fraction._new = function(numerator,denominator,positive,value) {
	if(positive == null) {
		positive = true;
	}
	var numNeg = numerator < 0;
	var denoNeg = denominator < 0;
	if(value == null) {
		value = positive ? numerator / denominator : -numerator / denominator;
	}
	if(numNeg || denoNeg) {
		if(!(numNeg && denoNeg)) {
			positive = !positive;
		}
		if(numNeg) {
			numerator = -numerator;
		}
		if(denoNeg) {
			denominator = -denominator;
		}
	}
	var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
	return this1;
};
fracs_Fraction.optimize = function(this1) {
	var f = this1.value;
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	return fracStore;
};
fracs_Fraction.optimizeFraction = function(this1) {
	var f = this1.positive ? this1.numerator / this1.denominator : -this1.numerator / this1.denominator;
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	return fracStore;
};
fracs_Fraction.toFloat = function(this1) {
	if(this1.positive) {
		return this1.numerator / this1.denominator;
	} else {
		return -this1.numerator / this1.denominator;
	}
};
fracs_Fraction.float = function(this1) {
	return this1.value;
};
fracs_Fraction.verbose = function(this1) {
	return "{ numerator:" + this1.numerator + ", denominator: " + this1.denominator + ", positive: " + (this1.positive == null ? "null" : "" + this1.positive) + ", value: " + this1.value + " }";
};
fracs_Fraction.fromString = function(val) {
	var i = val.indexOf("/");
	var frac;
	if(i != -1) {
		var numerator = Std.parseInt(HxOverrides.substr(val,0,i));
		var denominator = Std.parseInt(HxOverrides.substr(val,i + 1,val.length));
		var positive = true;
		var value = null;
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive = !positive;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
		frac = this1;
	} else {
		var f = parseFloat(val);
		var arr = fracs_Fracs.approximateFractions(f);
		var dist = Infinity;
		var dif;
		var l = arr.length;
		var fracFloat;
		var frac1;
		var fracStore = arr[0];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			var frac1 = arr[i];
			fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
			dif = Math.abs(fracFloat - f);
			if(dif < dist) {
				dist = dif;
				fracStore = frac1;
			}
		}
		frac = fracStore;
	}
	return frac;
};
fracs_Fraction.toString = function(this1) {
	var n = this1.numerator;
	var d = this1.denominator;
	var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? this1.positive ? "" + n : "-" + n : this1.positive ? "" + n + "/" + d : "-" + n + "/" + d;
	return out;
};
fracs_Fraction.fromFloat = function(f) {
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	return fracStore;
};
fracs_Fraction.firstFloat = function(f) {
	var arr = fracs_Fracs.approximateFractions(f);
	var fracStore = arr[0];
	return fracStore;
};
fracs_Fraction.byDenominator = function(this1,val) {
	var n = this1.numerator;
	var d = this1.denominator;
	var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? this1.positive ? "" + n : "-" + n : this1.positive ? "" + n + "/" + d : "-" + n + "/" + d;
	var out1 = out;
	if(!(this1.denominator == val || out1 == "0" || out1 == "1")) {
		var dom = Math.round(this1.value * val);
		var numerator = dom;
		var denominator = val;
		var positive = true;
		var value = null;
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive = !positive;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
		var frac = this1;
		var n = frac.numerator;
		var d = frac.denominator;
		var out = n == 0 ? "0" : n == d ? "1" : d == 1 ? frac.positive ? "" + n : "-" + n : frac.positive ? "" + n + "/" + d : "-" + n + "/" + d;
		out1 = out;
	}
	return out1;
};
fracs_Fraction.all = function(f) {
	return fracs_Fracs.approximateFractions(f);
};
fracs_Fraction.similarToFraction = function(this1) {
	var f = this1.positive ? this1.numerator / this1.denominator : -this1.numerator / this1.denominator;
	return fracs_Fracs.approximateFractions(f);
};
fracs_Fraction.similarToValue = function(this1) {
	return fracs_Fracs.approximateFractions(this1.value);
};
var fracs_Fracs = function() { };
$hxClasses["fracs.Fracs"] = fracs_Fracs;
fracs_Fracs.__name__ = "fracs.Fracs";
fracs_Fracs.grabDecimalInput = function(decimalVal) {
	var decimal = Math.abs(parseFloat(decimalVal));
	if(isNaN(decimal)) {
		return 0.;
	} else {
		return decimal;
	}
};
fracs_Fracs.approximateFractions = function(f) {
	var positive = f <= 0 ? false : true;
	var numerators = [0,1];
	var denominators = [1,0];
	var f2 = f <= 0 ? -f : f;
	var fStr = f2 == null ? "null" : "" + f2;
	var digits = "";
	var ix = fStr.indexOf(".");
	if(ix == -1) {
		digits = fStr;
	} else if(ix == 0) {
		digits = HxOverrides.substr(fStr,1,fStr.length);
	} else if(ix < fStr.length) {
		digits = HxOverrides.substr(fStr,0,ix) + HxOverrides.substr(fStr,ix + 1,fStr.length);
	}
	var LStr = digits;
	var numDigits = LStr.length;
	var L2 = f2;
	var numIntDigits = Std.string(L2).length;
	if(L2 == 0) {
		numIntDigits = 0;
	}
	var numDigitsPastDecimal = numDigits - numIntDigits;
	var i = numDigitsPastDecimal;
	var L = parseFloat(digits);
	while(i > 0 && L % 2 == 0) {
		L /= 2;
		--i;
	}
	i = numDigitsPastDecimal;
	while(i > 0 && L % 5 == 0) {
		L /= 5;
		--i;
	}
	var maxNumerator = L;
	var d2 = f2;
	var calcD;
	var prevCalcD = null;
	var val = null;
	var this1 = val == null ? [] : val;
	var arrFraction = this1;
	var j = 0;
	var _g = 2;
	while(_g < 1000) {
		var i = _g++;
		var L2 = Math.floor(d2);
		numerators[i] = L2 * numerators[i - 1] + numerators[i - 2] | 0;
		if(Math.abs(numerators[i]) > maxNumerator) {
			break;
		}
		denominators[i] = L2 * denominators[i - 1] + denominators[i - 2] | 0;
		calcD = numerators[i] / denominators[i];
		if(calcD == prevCalcD) {
			break;
		}
		var numerator = numerators[i];
		var denominator = denominators[i];
		var positive1 = positive;
		var value = f;
		if(positive1 == null) {
			positive1 = true;
		}
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive1 ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive1 = !positive1;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive1, value : value};
		arrFraction[arrFraction.length] = this1;
		if(calcD == f2) {
			break;
		}
		prevCalcD = calcD;
		d2 = 1 / (d2 - L2);
	}
	return arrFraction;
};
fracs_Fracs.getMaxNumerator = function(f) {
	var fStr = f == null ? "null" : "" + f;
	var digits = "";
	var ix = fStr.indexOf(".");
	if(ix == -1) {
		digits = fStr;
	} else if(ix == 0) {
		digits = HxOverrides.substr(fStr,1,fStr.length);
	} else if(ix < fStr.length) {
		digits = HxOverrides.substr(fStr,0,ix) + HxOverrides.substr(fStr,ix + 1,fStr.length);
	}
	var LStr = digits;
	var numDigits = LStr.length;
	var L2 = f;
	var numIntDigits = (L2 == null ? "null" : "" + L2).length;
	if(L2 == 0) {
		numIntDigits = 0;
	}
	var numDigitsPastDecimal = numDigits - numIntDigits;
	var i = numDigitsPastDecimal;
	var L = parseFloat(digits);
	while(i > 0 && L % 2 == 0) {
		L /= 2;
		--i;
	}
	i = numDigitsPastDecimal;
	while(i > 0 && L % 5 == 0) {
		L /= 5;
		--i;
	}
	return L;
};
fracs_Fracs.extractDigitStr = function(fStr) {
	var f2 = "";
	var ixe = fStr.indexOf("E");
	if(ixe == -1) {
		ixe = fStr.indexOf("e");
	}
	if(ixe == -1) {
		f2 = fStr;
	} else {
		f2 = HxOverrides.substr(fStr,0,ixe);
	}
	var digits = "";
	var ix = f2.indexOf(".");
	if(ix == -1) {
		digits = f2;
	} else if(ix == 0) {
		digits = HxOverrides.substr(f2,1,f2.length);
	} else if(ix < f2.length) {
		digits = HxOverrides.substr(f2,0,ix) + HxOverrides.substr(f2,ix + 1,f2.length);
	}
	return digits;
};
fracs_Fracs.getMaxNumeratorStr = function(fStr) {
	var f2 = "";
	var ixe = fStr.indexOf("E");
	if(ixe == -1) {
		ixe = fStr.indexOf("e");
	}
	if(ixe == -1) {
		f2 = fStr;
	} else {
		f2 = HxOverrides.substr(fStr,0,ixe);
	}
	var digits = "";
	var ix = f2.indexOf(".");
	if(ix == -1) {
		digits = f2;
	} else if(ix == 0) {
		digits = HxOverrides.substr(f2,1,f2.length);
	} else if(ix < f2.length) {
		digits = HxOverrides.substr(f2,0,ix) + HxOverrides.substr(f2,ix + 1,f2.length);
	}
	var LStr = digits;
	var numDigits = LStr.length;
	var L2 = fStr;
	var numIntDigits = L2.length;
	if(L2 == "0") {
		numIntDigits = 0;
	}
	var numDigitsPastDecimal = numDigits - numIntDigits;
	var i = numDigitsPastDecimal;
	var L = parseFloat(fStr);
	while(i > 0 && L % 2 == 0) {
		L /= 2;
		--i;
	}
	i = numDigitsPastDecimal;
	while(i > 0 && L % 5 == 0) {
		L /= 5;
		--i;
	}
	return L;
};
var fracs_Pi2pi = {};
fracs_Pi2pi._new = function(f) {
	var this1 = f;
	return this1;
};
fracs_Pi2pi.fromFloat = function(f) {
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.additionPi = function(this1,b) {
	var f = this1 + b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.subtractionPi = function(this1,b) {
	var f = this1 - b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.dividePi = function(this1,b) {
	var f = this1 / b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.timesPi = function(this1,b) {
	var f = this1 * b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.addition = function(this1,b) {
	var f = this1 + b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.subtraction = function(this1,b) {
	var f = this1 - b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.divide = function(this1,b) {
	var f = this1 / b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.times = function(this1,b) {
	var f = this1 * b;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.get_degrees = function(this1) {
	return this1 * 180 / Math.PI;
};
fracs_Pi2pi.set_degrees = function(this1,val) {
	this1 = Math.PI * val / 180;
	return val;
};
fracs_Pi2pi.fromFraction = function(val) {
	var f = (val.positive ? val.numerator / val.denominator : -val.numerator / val.denominator) * Math.PI;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.tofraction = function(this1) {
	var f = this1 / Math.PI;
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	return fracStore;
};
fracs_Pi2pi.fromString = function(val) {
	var i = val.indexOf("/");
	var frac;
	if(i != -1) {
		var numerator = Std.parseInt(HxOverrides.substr(val,0,i));
		var denominator = Std.parseInt(HxOverrides.substr(val,i + 1,val.length));
		var positive = true;
		var value = null;
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive = !positive;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
		frac = this1;
	} else {
		var f = parseFloat(val);
		var arr = fracs_Fracs.approximateFractions(f);
		var dist = Infinity;
		var dif;
		var l = arr.length;
		var fracFloat;
		var frac1;
		var fracStore = arr[0];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			var frac1 = arr[i];
			fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
			dif = Math.abs(fracFloat - f);
			if(dif < dist) {
				dist = dif;
				fracStore = frac1;
			}
		}
		frac = fracStore;
	}
	var frac1 = frac;
	var f = (frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator) * Math.PI;
	var f1;
	if(f <= Math.PI && f > -Math.PI) {
		f1 = f;
	} else {
		var a = (f + Math.PI) % (2 * Math.PI);
		f1 = a >= 0 ? a - Math.PI : a + Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_Pi2pi.toString = function(this1) {
	if(this1 == null) {
		return "null";
	} else {
		return "" + this1;
	}
};
var fracs_ZeroTo2pi = {};
fracs_ZeroTo2pi._new = function(f) {
	var this1 = f;
	return this1;
};
fracs_ZeroTo2pi.fromFloat = function(f) {
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.additionPi = function(this1,b) {
	var f = this1 + b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.subtractionPi = function(this1,b) {
	var f = this1 - b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.dividePi = function(this1,b) {
	var f = this1 / b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.timesPi = function(this1,b) {
	var f = this1 * b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.addition = function(this1,b) {
	var f = this1 + b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.subtraction = function(this1,b) {
	var f = this1 - b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.divide = function(this1,b) {
	var f = this1 / b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.times = function(this1,b) {
	var f = this1 * b;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.get_degrees = function(this1) {
	return this1 * 180 / Math.PI;
};
fracs_ZeroTo2pi.set_degrees = function(this1,val) {
	this1 = Math.PI * val / 180;
	return val;
};
fracs_ZeroTo2pi.fromFraction = function(val) {
	var f = (val.positive ? val.numerator / val.denominator : -val.numerator / val.denominator) * Math.PI;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.tofraction = function(this1) {
	var f = this1 / Math.PI;
	var arr = fracs_Fracs.approximateFractions(f);
	var dist = Infinity;
	var dif;
	var l = arr.length;
	var fracFloat;
	var frac;
	var fracStore = arr[0];
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var frac = arr[i];
		fracFloat = frac.positive ? frac.numerator / frac.denominator : -frac.numerator / frac.denominator;
		dif = Math.abs(fracFloat - f);
		if(dif < dist) {
			dist = dif;
			fracStore = frac;
		}
	}
	return fracStore;
};
fracs_ZeroTo2pi.fromString = function(val) {
	var i = val.indexOf("/");
	var frac;
	if(i != -1) {
		var numerator = Std.parseInt(HxOverrides.substr(val,0,i));
		var denominator = Std.parseInt(HxOverrides.substr(val,i + 1,val.length));
		var positive = true;
		var value = null;
		var numNeg = numerator < 0;
		var denoNeg = denominator < 0;
		if(value == null) {
			value = positive ? numerator / denominator : -numerator / denominator;
		}
		if(numNeg || denoNeg) {
			if(!(numNeg && denoNeg)) {
				positive = !positive;
			}
			if(numNeg) {
				numerator = -numerator;
			}
			if(denoNeg) {
				denominator = -denominator;
			}
		}
		var this1 = { numerator : numerator, denominator : denominator, positive : positive, value : value};
		frac = this1;
	} else {
		var f = parseFloat(val);
		var arr = fracs_Fracs.approximateFractions(f);
		var dist = Infinity;
		var dif;
		var l = arr.length;
		var fracFloat;
		var frac1;
		var fracStore = arr[0];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			var frac1 = arr[i];
			fracFloat = frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator;
			dif = Math.abs(fracFloat - f);
			if(dif < dist) {
				dist = dif;
				fracStore = frac1;
			}
		}
		frac = fracStore;
	}
	var frac1 = frac;
	var f = (frac1.positive ? frac1.numerator / frac1.denominator : -frac1.numerator / frac1.denominator) * Math.PI;
	var f1;
	if(f >= 0 && f > Math.PI) {
		f1 = f;
	} else {
		var a = f % (2 * Math.PI);
		f1 = a >= 0 ? a : a + 2 * Math.PI;
	}
	var this1 = f1;
	return this1;
};
fracs_ZeroTo2pi.toString = function(this1) {
	if(this1 == null) {
		return "null";
	} else {
		return "" + this1;
	}
};
var geom_constraints_Interval = {};
geom_constraints_Interval._new = function(interval) {
	var this1 = interval;
	return this1;
};
geom_constraints_Interval.valid = function(this1) {
	return this1.u > this1.l;
};
geom_constraints_Interval.fix = function(this1) {
	if(!(this1.u > this1.l)) {
		var l = this1.u;
		this1.u = this1.l;
		this1.l = l;
	}
};
geom_constraints_Interval.clampClosed = function(this1,v) {
	if(v <= this1.l) {
		return this1.l;
	} else if(v >= this1.u) {
		return this1.u;
	} else {
		return v;
	}
};
geom_constraints_Interval.clampOpen = function(this1,v) {
	if(v < this1.l) {
		return this1.l;
	} else if(v > this1.u) {
		return this1.u;
	} else {
		return v;
	}
};
geom_constraints_Interval.close = function(this1,v,delta) {
	if(delta == null) {
		delta = 0.00001;
	}
	var interval = new geom_structure_Range(this1.u + delta,this1.l - delta);
	return v == (v <= interval.l ? interval.l : v >= interval.u ? interval.u : v);
};
geom_constraints_Interval.above = function(this1,v) {
	return v > this1.u;
};
geom_constraints_Interval.below = function(this1,v) {
	return v < this1.l;
};
geom_constraints_Interval.inClampOpen = function(this1,v) {
	return v == (v < this1.l ? this1.l : v > this1.u ? this1.u : v);
};
geom_constraints_Interval.inClampClosed = function(this1,v) {
	return v == (v <= this1.l ? this1.l : v >= this1.u ? this1.u : v);
};
geom_constraints_Interval.unit = function(v) {
	var interval = new geom_structure_Range(1.,0.);
	if(v <= interval.l) {
		return interval.l;
	} else if(v >= interval.u) {
		return interval.u;
	} else {
		return v;
	}
};
geom_constraints_Interval.unitFloat = function(v) {
	var interval = new geom_structure_Range(1.,-1.);
	if(v <= interval.l) {
		return interval.l;
	} else if(v >= interval.u) {
		return interval.u;
	} else {
		return v;
	}
};
geom_constraints_Interval.unitNegative = function(v) {
	var interval = new geom_structure_Range(1.,-1.);
	if(v <= interval.l) {
		return interval.l;
	} else if(v >= interval.u) {
		return interval.u;
	} else {
		return v;
	}
};
geom_constraints_Interval.inUnitFloat = function(v) {
	var interval = new geom_structure_Range(1.,-1.);
	return v == (v <= interval.l ? interval.l : v >= interval.u ? interval.u : v);
};
geom_constraints_Interval.random = function(this1) {
	return Math.random() * (this1.u - this1.l) + this1.l;
};
geom_constraints_Interval.randomInt = function(this1) {
	return Math.round(Math.random() * (this1.u - this1.l) + this1.l);
};
var geom_constraints_RadianInterval = {};
geom_constraints_RadianInterval._new = function() {
	var this1 = new geom_structure_Range(-Math.PI,Math.PI);
	return this1;
};
geom_constraints_RadianInterval.wrap = function(this1,v) {
	if(v == (v <= this1.l ? this1.l : v >= this1.u ? this1.u : v)) {
		return v;
	} else {
		return v - Math.PI * 2 * Math.floor((v + Math.PI) / (Math.PI * 2));
	}
};
geom_constraints_RadianInterval.inPiWrap = function(v) {
	var this1 = new geom_structure_Range(-Math.PI,Math.PI);
	var this2 = this1;
	return v == (v <= this2.l ? this2.l : v >= this2.u ? this2.u : v);
};
geom_constraints_RadianInterval.wrapRadian = function(v) {
	var this1 = new geom_structure_Range(-Math.PI,Math.PI);
	var this2 = this1;
	if(v == (v <= this2.l ? this2.l : v >= this2.u ? this2.u : v)) {
		return v;
	} else {
		return v - Math.PI * 2 * Math.floor((v + Math.PI) / (Math.PI * 2));
	}
};
var geom_constraints_Precision = function() { };
$hxClasses["geom.constraints.Precision"] = geom_constraints_Precision;
geom_constraints_Precision.__name__ = "geom.constraints.Precision";
geom_constraints_Precision.floatToStringPrecision = function(n,prec) {
	if(n == 0) {
		var _g = [];
		var _g1 = 0;
		var _g2 = prec;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push("0");
		}
		return "0." + _g.join("");
	}
	var minusSign = n < 0.0;
	n = Math.abs(n);
	var intPart = Math.floor(n);
	var p = Math.pow(10,prec);
	var fracPart = Math.round(p * (n - intPart));
	var buf_b = "";
	if(minusSign) {
		buf_b += String.fromCodePoint(45);
	}
	buf_b += Std.string(intPart == null ? "null" : "" + intPart);
	if(fracPart == 0) {
		buf_b += String.fromCodePoint(46);
		var _g = 0;
		var _g1 = prec;
		while(_g < _g1) {
			var i = _g++;
			buf_b += String.fromCodePoint(48);
		}
	} else {
		buf_b += String.fromCodePoint(46);
		p /= 10;
		var nZeros = 0;
		while(fracPart < p) {
			p /= 10;
			buf_b += String.fromCodePoint(48);
		}
		buf_b += fracPart == null ? "null" : "" + fracPart;
	}
	return buf_b;
};
geom_constraints_Precision.max4 = function(f0,f1,f2,f3) {
	return Math.round(Math.max(Math.max(Math.max(f0,f1),f2),f3));
};
geom_constraints_Precision.max3 = function(f0,f1,f2) {
	return Math.round(Math.max(Math.max(f0,f1),f2));
};
var geom_curve_Bezier = function() { };
$hxClasses["geom.curve.Bezier"] = geom_curve_Bezier;
geom_curve_Bezier.__name__ = "geom.curve.Bezier";
geom_curve_Bezier.approxInterval = function(x) {
	var d = 0.67;
	return x / (1 - d + Math.pow(Math.pow(d,4) + 0.25 * x * x,0.25));
};
geom_curve_Bezier.approxInverseInterval = function(x) {
	var b = 0.39;
	return x * (1 - b + Math.sqrt(b * b + 0.25 * x * x));
};
geom_curve_Bezier.quadError = function(p0,p1,p2) {
	var this1 = new geom_structure_Mat1x2(p1.x - p0.x,p1.y - p0.y);
	var p10 = this1;
	var this1 = new geom_structure_Mat1x2(p2.x - p0.x,p2.y - p0.y);
	var p20 = this1;
	var this1 = new geom_structure_Mat1x2(p10.x * p20.x,p10.y * p20.y);
	var this2 = this1;
	var t = this2.x + this2.y;
	var this1 = new geom_structure_Mat1x2(p20.x * p20.x,p20.y * p20.y);
	var this2 = this1;
	var t1 = t / (this2.x + this2.y);
	var interval = new geom_structure_Range(1.,0.);
	var t = t1 <= interval.l ? interval.l : t1 >= interval.u ? interval.u : t1;
	var this1 = p0;
	var this2 = new geom_structure_Mat1x2(this1.x - p20.x,this1.y - p20.y);
	var s = this2;
	var this1 = new geom_structure_Mat1x2(-s.x,-s.y);
	var n = this1;
	var this1 = new geom_structure_Mat1x2(n.x * t,n.y * t);
	var tn = this1;
	var this1 = new geom_structure_Mat1x2(s.x + tn.x,s.y + tn.y);
	var p = this1;
	var this1 = new geom_structure_Mat1x2(p.x - p10.x,p.y - p10.y);
	var c = this1;
	return 0.5 * (c.x * c.x + c.y * c.y);
};
geom_curve_Bezier.subdiv = function(tol,p0,p1,p2) {
	var this1 = new geom_structure_Mat1x2(p1.x * 2,p1.y * 2);
	var a = this1;
	var this1 = new geom_structure_Mat1x2(a.x - p0.x,a.y - p0.y);
	var a = this1;
	var this1 = new geom_structure_Mat1x2(a.x - p2.x,a.y - p2.y);
	var dd = this1;
	var this1 = new geom_structure_Mat1x2(p1.x - p0.x,p1.y - p0.y);
	var p10 = this1;
	var this1 = new geom_structure_Mat1x2(p2.x - p1.x,p2.y - p1.y);
	var p21 = this1;
	var this1 = new geom_structure_Mat1x2(p2.x - p0.x,p2.y - p0.y);
	var p20 = this1;
	var this1 = new geom_structure_Mat1x2(p10.x * dd.x,p10.y * dd.y);
	var this2 = this1;
	var u0 = this2.x + this2.y;
	var this1 = new geom_structure_Mat1x2(p20.x * dd.x,p20.y * dd.y);
	var this2 = this1;
	var u2 = this2.x + this2.y;
	var cross = p20.x * dd.y - p20.y * dd.x;
	var x0 = u0 / cross;
	var x2 = u2 / cross;
	var scale = Math.abs(cross) / (Math.sqrt(dd.x * dd.x + dd.y * dd.y) * Math.abs(x2 - x0));
	var d = 0.67;
	var a0 = x0 / (1 - d + Math.pow(Math.pow(d,4) + 0.25 * x0 * x0,0.25));
	var d = 0.67;
	var a2 = x2 / (1 - d + Math.pow(Math.pow(d,4) + 0.25 * x2 * x2,0.25));
	var count = 0.5 * Math.abs(a2 - a0) * Math.sqrt(scale / tol);
	var n = Math.ceil(count);
	var b = 0.39;
	var u0 = a0 * (1 - b + Math.sqrt(b * b + 0.25 * a0 * a0));
	var b = 0.39;
	var u2 = a2 * (1 - b + Math.sqrt(b * b + 0.25 * a2 * a2));
	var result = [0.];
	var _g = 1;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		var x = a0 + (a2 - a0) * i / n;
		var b = 0.39;
		var u = x * (1 - b + Math.sqrt(b * b + 0.25 * x * x));
		var t = (u - u0) / (u2 - u0);
		result[i] = t;
	}
	result[n] = 1.;
	return result;
};
geom_curve_Bezier.quadraticThru = function(t,s,c,e) {
	c = 2 * c - 0.5 * (s + e);
	var u = 1 - t;
	return Math.pow(u,2) * s + 2 * u * t * c + Math.pow(t,2) * e;
};
geom_curve_Bezier.quadratic = function(t,s,c,e) {
	var u = 1 - t;
	return Math.pow(u,2) * s + 2 * u * t * c + Math.pow(t,2) * e;
};
geom_curve_Bezier.quadSegment = function(t0,t1,s,c,e) {
	var u = t1 - t0;
	return s + (c - s + t0 * (e - 2 * c + s)) * u;
};
geom_curve_Bezier.cubic = function(t,s,c1,c2,e) {
	var u = 1 - t;
	return Math.pow(u,3) * s + 3 * Math.pow(u,2) * t * c1 + 3 * u * Math.pow(t,2) * c2 + Math.pow(t,3) * e;
};
var geom_flat_f32_Float32Flat = {};
geom_flat_f32_Float32Flat.readItem = function(this1,k) {
	return this1[k + 2];
};
geom_flat_f32_Float32Flat.writeItem = function(this1,k,v) {
	this1[k + 2] = v;
	return v;
};
geom_flat_f32_Float32Flat._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	return this2;
};
geom_flat_f32_Float32Flat.get_size = function(this1) {
	return this1[1] | 0;
};
geom_flat_f32_Float32Flat.set_size = function(this1,id) {
	var pos_ = id;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32_Float32Flat.get_index = function(this1) {
	return this1[0] | 0;
};
geom_flat_f32_Float32Flat.set_index = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32_Float32Flat.get_pos = function(this1) {
	return this1[0];
};
geom_flat_f32_Float32Flat.set_pos = function(this1,pos_) {
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return pos_;
};
geom_flat_f32_Float32Flat.updateLen = function(this1) {
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
};
geom_flat_f32_Float32Flat.hasNext = function(this1) {
	return this1[0] < geom_flat_f32_Float32Flat.get_size(this1);
};
geom_flat_f32_Float32Flat.next = function(this1) {
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return this1[0];
};
geom_flat_f32_Float32Flat.increment = function(this1) {
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return this1[0];
};
geom_flat_f32_Float32Flat.toArray = function(this1) {
	return this1.subarray(2,geom_flat_f32_Float32Flat.get_size(this1) + 2);
};
geom_flat_f32_Float32Flat.fromArray = function(arr) {
	var this1 = new Float32Array(arr.length + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var flat = this2;
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 2] = arr[i];
	}
	flat[0] = 0;
	flat[1] = l;
	return flat;
};
geom_flat_f32_Float32Flat.clone = function(this1) {
	var this2 = new Float32Array(this1.length - 2 + 2);
	var this3 = this2;
	this3[0] = 0.;
	this3[1] = 0.;
	var flat = this3;
	var arr = this1.subarray(2,geom_flat_f32_Float32Flat.get_size(this1) + 2);
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 2] = arr[i];
	}
	flat[0] = 0;
	flat[1] = l;
	return flat;
};
geom_flat_f32_Float32Flat.fill = function(this1,arr) {
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		this1[i + 2] = arr[i];
	}
	this1[0] = 0;
	this1[1] = l;
};
var geom_flat_f32_Float32Flat4 = {};
geom_flat_f32_Float32Flat4.readItem = function(this1,k) {
	return this1[(this1[0] | 0) * 4 + k + 2];
};
geom_flat_f32_Float32Flat4.writeItem = function(this1,k,v) {
	this1[(this1[0] | 0) * 4 + k + 2] = v;
	return v;
};
geom_flat_f32_Float32Flat4._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this1 = this2;
	return this1;
};
geom_flat_f32_Float32Flat4.get_index = function(this1) {
	return this1[0] | 0;
};
geom_flat_f32_Float32Flat4.set_index = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32_Float32Flat4.getArray = function(this1) {
	return this1.subarray(2,geom_flat_f32_Float32Flat.get_size(this1) * 4 + 2);
};
var geom_flat_f32_Float32Flat6 = {};
geom_flat_f32_Float32Flat6.readItem = function(this1,k) {
	return this1[(this1[0] | 0) * 6 + k + 2];
};
geom_flat_f32_Float32Flat6.writeItem = function(this1,k,v) {
	this1[(this1[0] | 0) * 6 + k + 2] = v;
	return v;
};
geom_flat_f32_Float32Flat6._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this1 = this2;
	return this1;
};
geom_flat_f32_Float32Flat6.get_index = function(this1) {
	return this1[0] | 0;
};
geom_flat_f32_Float32Flat6.set_index = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32_Float32Flat6.getArray = function(this1) {
	return this1.subarray(2,geom_flat_f32_Float32Flat.get_size(this1) * 6 + 2);
};
var geom_flat_f32_Float32Flat9 = {};
geom_flat_f32_Float32Flat9.readItem = function(this1,k) {
	return this1[(this1[0] | 0) * 9 + k + 2];
};
geom_flat_f32_Float32Flat9.writeItem = function(this1,k,v) {
	this1[(this1[0] | 0) * 9 + k + 2] = v;
	return v;
};
geom_flat_f32_Float32Flat9._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this1 = this2;
	return this1;
};
geom_flat_f32_Float32Flat9.get_index = function(this1) {
	return this1[0] | 0;
};
geom_flat_f32_Float32Flat9.set_index = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_f32_Float32Flat9.getArray = function(this1) {
	return this1.subarray(2,geom_flat_f32_Float32Flat.get_size(this1) * 9 + 2);
};
var geom_flat_f32_Float32FlatRGBA = {};
geom_flat_f32_Float32FlatRGBA._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this1 = this2;
	var this2 = this1;
	return this2;
};
geom_flat_f32_Float32FlatRGBA.get_red = function(this1) {
	return this1[(this1[0] | 0) * 4 + 2];
};
geom_flat_f32_Float32FlatRGBA.set_red = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatRGBA.get_green = function(this1) {
	return this1[(this1[0] | 0) * 4 + 1 + 2];
};
geom_flat_f32_Float32FlatRGBA.set_green = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 1 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatRGBA.get_blue = function(this1) {
	return this1[(this1[0] | 0) * 4 + 2 + 2];
};
geom_flat_f32_Float32FlatRGBA.set_blue = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatRGBA.get_alpha = function(this1) {
	return this1[(this1[0] | 0) * 4 + 3 + 2];
};
geom_flat_f32_Float32FlatRGBA.set_alpha = function(this1,v) {
	this1[(this1[0] | 0) * 4 + 3 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatRGBA.set_rgb = function(this1,col) {
	geom_flat_f32_Float32FlatRGBA.set_red(this1,(col >> 16 & 255) / 255);
	var v = (col & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	var v = (col >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v;
	this1[(this1[0] | 0) * 4 + 3 + 2] = 1.;
	return col;
};
geom_flat_f32_Float32FlatRGBA.get_rgb = function(this1) {
	return Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255) | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(this1) * 255) << 16;
};
geom_flat_f32_Float32FlatRGBA.set_argb = function(this1,col) {
	geom_flat_f32_Float32FlatRGBA.set_red(this1,(col >> 16 & 255) / 255);
	var v = (col & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	var v = (col >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v;
	var v = (col >> 24 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 3 + 2] = v;
	return col;
};
geom_flat_f32_Float32FlatRGBA.get_argb = function(this1) {
	return Math.round(this1[(this1[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(this1) * 255) << 16 | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255);
};
geom_flat_f32_Float32FlatRGBA.readItem = function(this1,k) {
	return this1[(this1[0] | 0) * 4 + k + 2];
};
geom_flat_f32_Float32FlatRGBA.writeItem = function(this1,k,v) {
	this1[(this1[0] | 0) * 4 + k + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatRGBA.colorTriangles = function(this1,color,times) {
	var _g = 0;
	var _g1 = times;
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32_Float32FlatRGBA.set_red(this1,(color >> 16 & 255) / 255);
		var v = (color & 255) / 255;
		this1[(this1[0] | 0) * 4 + 2 + 2] = v;
		var v1 = (color >> 8 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 1 + 2] = v1;
		var v2 = (color >> 24 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 3 + 2] = v2;
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
		geom_flat_f32_Float32FlatRGBA.set_red(this1,(color >> 16 & 255) / 255);
		var v3 = (color & 255) / 255;
		this1[(this1[0] | 0) * 4 + 2 + 2] = v3;
		var v4 = (color >> 8 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 1 + 2] = v4;
		var v5 = (color >> 24 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 3 + 2] = v5;
		var pos_1 = this1[0] + 1.;
		this1[0] = pos_1;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
		geom_flat_f32_Float32FlatRGBA.set_red(this1,(color >> 16 & 255) / 255);
		var v6 = (color & 255) / 255;
		this1[(this1[0] | 0) * 4 + 2 + 2] = v6;
		var v7 = (color >> 8 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 1 + 2] = v7;
		var v8 = (color >> 24 & 255) / 255;
		this1[(this1[0] | 0) * 4 + 3 + 2] = v8;
		var pos_2 = this1[0] + 1.;
		this1[0] = pos_2;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32_Float32FlatRGBA.cornerColors = function(this1,colorA,colorB,colorC) {
	geom_flat_f32_Float32FlatRGBA.set_red(this1,(colorA >> 16 & 255) / 255);
	var v = (colorA & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	var v = (colorA >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v;
	var v = (colorA >> 24 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 3 + 2] = v;
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	geom_flat_f32_Float32FlatRGBA.set_red(this1,(colorB >> 16 & 255) / 255);
	var v = (colorB & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	var v = (colorB >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v;
	var v = (colorB >> 24 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 3 + 2] = v;
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	geom_flat_f32_Float32FlatRGBA.set_red(this1,(colorC >> 16 & 255) / 255);
	var v = (colorC & 255) / 255;
	this1[(this1[0] | 0) * 4 + 2 + 2] = v;
	var v = (colorC >> 8 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 1 + 2] = v;
	var v = (colorC >> 24 & 255) / 255;
	this1[(this1[0] | 0) * 4 + 3 + 2] = v;
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
};
geom_flat_f32_Float32FlatRGBA.getTriColors = function(this1) {
	var a = Math.round(this1[(this1[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(this1) * 255) << 16 | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255);
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var b = Math.round(this1[(this1[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(this1) * 255) << 16 | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255);
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var c = Math.round(this1[(this1[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(this1) * 255) << 16 | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255);
	var pos_ = this1[0] + 1.;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return geom_obj_TriColors._new(new geom_structure_TriInt(a,b,c));
};
geom_flat_f32_Float32FlatRGBA.hex = function(this1) {
	return "0x" + StringTools.hex(Math.round(this1[(this1[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(this1) * 255) << 16 | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255));
};
geom_flat_f32_Float32FlatRGBA.hexAll = function(this1) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var str = "Float32FlatRGBA: \n";
	var _g = 0;
	var _g1 = geom_flat_f32_Float32Flat.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		str += "0x" + StringTools.hex(Math.round(this1[(this1[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(this1) * 255) << 16 | Math.round(this1[(this1[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(this1[(this1[0] | 0) * 4 + 2 + 2] * 255)) + "\n";
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return str;
};
geom_flat_f32_Float32FlatRGBA.alphaChannel = function(int) {
	return (int >> 24 & 255) / 255;
};
geom_flat_f32_Float32FlatRGBA.redChannel = function(int) {
	return (int >> 16 & 255) / 255;
};
geom_flat_f32_Float32FlatRGBA.greenChannel = function(int) {
	return (int >> 8 & 255) / 255;
};
geom_flat_f32_Float32FlatRGBA.blueChannel = function(int) {
	return (int & 255) / 255;
};
var geom_flat_f32_Float32FlatTriangle = {};
geom_flat_f32_Float32FlatTriangle._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this1 = this2;
	var this2 = this1;
	return this2;
};
geom_flat_f32_Float32FlatTriangle.get_ax = function(this1) {
	return this1[(this1[0] | 0) * 9 + 2];
};
geom_flat_f32_Float32FlatTriangle.set_ax = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangle.get_ay = function(this1) {
	return this1[(this1[0] | 0) * 9 + 1 + 2];
};
geom_flat_f32_Float32FlatTriangle.set_ay = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 1 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangle.get_az = function(this1) {
	return this1[(this1[0] | 0) * 9 + 2 + 2];
};
geom_flat_f32_Float32FlatTriangle.set_az = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 2 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangle.get_bx = function(this1) {
	return this1[(this1[0] | 0) * 9 + 3 + 2];
};
geom_flat_f32_Float32FlatTriangle.set_bx = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 3 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangle.get_by = function(this1) {
	return this1[(this1[0] | 0) * 9 + 4 + 2];
};
geom_flat_f32_Float32FlatTriangle.set_by = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 4 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangle.get_bz = function(this1) {
	return this1[(this1[0] | 0) * 9 + 5 + 2];
};
geom_flat_f32_Float32FlatTriangle.set_bz = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 5 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangle.get_cx = function(this1) {
	return this1[(this1[0] | 0) * 9 + 6 + 2];
};
geom_flat_f32_Float32FlatTriangle.set_cx = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 6 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangle.get_cy = function(this1) {
	return this1[(this1[0] | 0) * 9 + 7 + 2];
};
geom_flat_f32_Float32FlatTriangle.set_cy = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 7 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangle.get_cz = function(this1) {
	return this1[(this1[0] | 0) * 9 + 8 + 2];
};
geom_flat_f32_Float32FlatTriangle.set_cz = function(this1,v) {
	this1[(this1[0] | 0) * 9 + 8 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangle.transform = function(this1,m) {
	var this2 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_ax(this1),geom_flat_f32_Float32FlatTriangle.get_ay(this1),geom_flat_f32_Float32FlatTriangle.get_az(this1),1.);
	var pa = this2;
	var this2 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_bx(this1),geom_flat_f32_Float32FlatTriangle.get_by(this1),geom_flat_f32_Float32FlatTriangle.get_bz(this1),1.);
	var pb = this2;
	var this2 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_cx(this1),geom_flat_f32_Float32FlatTriangle.get_cy(this1),geom_flat_f32_Float32FlatTriangle.get_cz(this1),1.);
	var pc = this2;
	var this2 = new geom_structure_Mat1x4(m.a * pa.x + m.b * pa.y + m.c * pa.z + m.d,m.e * pa.x + m.f * pa.y + m.g * pa.z + m.h,m.i * pa.x + m.j * pa.y + m.k * pa.z + m.l,1.);
	pa = this2;
	var this2 = new geom_structure_Mat1x4(m.a * pb.x + m.b * pb.y + m.c * pb.z + m.d,m.e * pb.x + m.f * pb.y + m.g * pb.z + m.h,m.i * pb.x + m.j * pb.y + m.k * pb.z + m.l,1.);
	pb = this2;
	var this2 = new geom_structure_Mat1x4(m.a * pc.x + m.b * pc.y + m.c * pc.z + m.d,m.e * pc.x + m.f * pc.y + m.g * pc.z + m.h,m.i * pc.x + m.j * pc.y + m.k * pc.z + m.l,1.);
	pc = this2;
	geom_flat_f32_Float32FlatTriangle.set_ax(this1,pa.x);
	geom_flat_f32_Float32FlatTriangle.set_ay(this1,pa.y);
	geom_flat_f32_Float32FlatTriangle.set_az(this1,pa.z);
	geom_flat_f32_Float32FlatTriangle.set_bx(this1,pb.x);
	geom_flat_f32_Float32FlatTriangle.set_by(this1,pb.y);
	geom_flat_f32_Float32FlatTriangle.set_bz(this1,pb.z);
	geom_flat_f32_Float32FlatTriangle.set_cx(this1,pc.x);
	geom_flat_f32_Float32FlatTriangle.set_cy(this1,pc.y);
	geom_flat_f32_Float32FlatTriangle.set_cz(this1,pc.z);
};
geom_flat_f32_Float32FlatTriangle.transformAll = function(this1,m) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var _g = 0;
	var _g1 = geom_flat_f32_Float32Flat.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32_Float32FlatTriangle.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32_Float32FlatTriangle.transformRange = function(this1,m,start,end) {
	this1[0] = start;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	if(end > geom_flat_f32_Float32Flat.get_size(this1) - 1) {
		geom_flat_f32_Float32Flat.get_size(this1);
	}
	var _g = start;
	var _g1 = end + 1;
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32_Float32FlatTriangle.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32_Float32FlatTriangle.getTri3D = function(this1) {
	var this2 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_ax(this1),geom_flat_f32_Float32FlatTriangle.get_ay(this1),geom_flat_f32_Float32FlatTriangle.get_az(this1),1.);
	var pa = this2;
	var this2 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_bx(this1),geom_flat_f32_Float32FlatTriangle.get_by(this1),geom_flat_f32_Float32FlatTriangle.get_bz(this1),1.);
	var pb = this2;
	var this2 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_cx(this1),geom_flat_f32_Float32FlatTriangle.get_cy(this1),geom_flat_f32_Float32FlatTriangle.get_cz(this1),1.);
	var pc = this2;
	return new geom_structure_TriVec(pa,pb,pc);
};
geom_flat_f32_Float32FlatTriangle.triangle = function(this1,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
	geom_flat_f32_Float32FlatTriangle.set_ax(this1,ax_);
	geom_flat_f32_Float32FlatTriangle.set_ay(this1,ay_);
	geom_flat_f32_Float32FlatTriangle.set_az(this1,az_);
	geom_flat_f32_Float32FlatTriangle.set_bx(this1,bx_);
	geom_flat_f32_Float32FlatTriangle.set_by(this1,by_);
	geom_flat_f32_Float32FlatTriangle.set_bz(this1,bz_);
	geom_flat_f32_Float32FlatTriangle.set_cx(this1,cx_);
	geom_flat_f32_Float32FlatTriangle.set_cy(this1,cy_);
	geom_flat_f32_Float32FlatTriangle.set_cz(this1,cz_);
	var windingAdjusted = geom_flat_f32_Float32FlatTriangle.adjustWinding(this1);
	if(windingAdjusted) {
		geom_flat_f32_Float32FlatTriangle.set_ax(this1,ax_);
		geom_flat_f32_Float32FlatTriangle.set_ay(this1,ay_);
		geom_flat_f32_Float32FlatTriangle.set_bx(this1,cx_);
		geom_flat_f32_Float32FlatTriangle.set_by(this1,cy_);
		geom_flat_f32_Float32FlatTriangle.set_cx(this1,bx_);
		geom_flat_f32_Float32FlatTriangle.set_cy(this1,by_);
	}
	return windingAdjusted;
};
geom_flat_f32_Float32FlatTriangle.adjustWinding = function(this1) {
	return geom_flat_f32_Float32FlatTriangle.get_ax(this1) * geom_flat_f32_Float32FlatTriangle.get_by(this1) - geom_flat_f32_Float32FlatTriangle.get_bx(this1) * geom_flat_f32_Float32FlatTriangle.get_ay(this1) + (geom_flat_f32_Float32FlatTriangle.get_bx(this1) * geom_flat_f32_Float32FlatTriangle.get_cy(this1) - geom_flat_f32_Float32FlatTriangle.get_cx(this1) * geom_flat_f32_Float32FlatTriangle.get_by(this1)) + (geom_flat_f32_Float32FlatTriangle.get_cx(this1) * geom_flat_f32_Float32FlatTriangle.get_ay(this1) - geom_flat_f32_Float32FlatTriangle.get_ax(this1) * geom_flat_f32_Float32FlatTriangle.get_cy(this1)) > 0;
};
geom_flat_f32_Float32FlatTriangle.get_x = function(this1) {
	return Math.min(Math.min(geom_flat_f32_Float32FlatTriangle.get_ax(this1),geom_flat_f32_Float32FlatTriangle.get_bx(this1)),geom_flat_f32_Float32FlatTriangle.get_cx(this1));
};
geom_flat_f32_Float32FlatTriangle.set_x = function(this1,x) {
	var dx = x - Math.min(Math.min(geom_flat_f32_Float32FlatTriangle.get_ax(this1),geom_flat_f32_Float32FlatTriangle.get_bx(this1)),geom_flat_f32_Float32FlatTriangle.get_cx(this1));
	geom_flat_f32_Float32FlatTriangle.set_ax(this1,geom_flat_f32_Float32FlatTriangle.get_ax(this1) + dx);
	geom_flat_f32_Float32FlatTriangle.set_bx(this1,geom_flat_f32_Float32FlatTriangle.get_bx(this1) + dx);
	geom_flat_f32_Float32FlatTriangle.set_cx(this1,geom_flat_f32_Float32FlatTriangle.get_cx(this1) + dx);
	return x;
};
geom_flat_f32_Float32FlatTriangle.get_y = function(this1) {
	return Math.min(Math.min(geom_flat_f32_Float32FlatTriangle.get_ay(this1),geom_flat_f32_Float32FlatTriangle.get_by(this1)),geom_flat_f32_Float32FlatTriangle.get_cy(this1));
};
geom_flat_f32_Float32FlatTriangle.set_y = function(this1,y) {
	var dy = y - Math.min(Math.min(geom_flat_f32_Float32FlatTriangle.get_ay(this1),geom_flat_f32_Float32FlatTriangle.get_by(this1)),geom_flat_f32_Float32FlatTriangle.get_cy(this1));
	geom_flat_f32_Float32FlatTriangle.set_ay(this1,geom_flat_f32_Float32FlatTriangle.get_ay(this1) + dy);
	geom_flat_f32_Float32FlatTriangle.set_by(this1,geom_flat_f32_Float32FlatTriangle.get_by(this1) + dy);
	geom_flat_f32_Float32FlatTriangle.set_cy(this1,geom_flat_f32_Float32FlatTriangle.get_cy(this1) + dy);
	return y;
};
geom_flat_f32_Float32FlatTriangle.get_z = function(this1) {
	return Math.min(Math.min(geom_flat_f32_Float32FlatTriangle.get_az(this1),geom_flat_f32_Float32FlatTriangle.get_bz(this1)),geom_flat_f32_Float32FlatTriangle.get_cz(this1));
};
geom_flat_f32_Float32FlatTriangle.set_z = function(this1,z) {
	var dz = z - Math.min(Math.min(geom_flat_f32_Float32FlatTriangle.get_az(this1),geom_flat_f32_Float32FlatTriangle.get_bz(this1)),geom_flat_f32_Float32FlatTriangle.get_cz(this1));
	geom_flat_f32_Float32FlatTriangle.set_az(this1,geom_flat_f32_Float32FlatTriangle.get_az(this1) + dz);
	geom_flat_f32_Float32FlatTriangle.set_bz(this1,geom_flat_f32_Float32FlatTriangle.get_bz(this1) + dz);
	geom_flat_f32_Float32FlatTriangle.set_cz(this1,geom_flat_f32_Float32FlatTriangle.get_cz(this1) + dz);
	return z;
};
geom_flat_f32_Float32FlatTriangle.get_right = function(this1) {
	return Math.max(Math.max(geom_flat_f32_Float32FlatTriangle.get_ax(this1),geom_flat_f32_Float32FlatTriangle.get_bx(this1)),geom_flat_f32_Float32FlatTriangle.get_cx(this1));
};
geom_flat_f32_Float32FlatTriangle.get_bottom = function(this1) {
	return Math.max(Math.max(geom_flat_f32_Float32FlatTriangle.get_ay(this1),geom_flat_f32_Float32FlatTriangle.get_by(this1)),geom_flat_f32_Float32FlatTriangle.get_cy(this1));
};
geom_flat_f32_Float32FlatTriangle.get_back = function(this1) {
	return Math.max(Math.max(geom_flat_f32_Float32FlatTriangle.get_az(this1),geom_flat_f32_Float32FlatTriangle.get_bz(this1)),geom_flat_f32_Float32FlatTriangle.get_cz(this1));
};
geom_flat_f32_Float32FlatTriangle.moveDelta = function(this1,dx,dy) {
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ax(_g,geom_flat_f32_Float32FlatTriangle.get_ax(_g) + dx);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ay(_g,geom_flat_f32_Float32FlatTriangle.get_ay(_g) + dy);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_bx(_g,geom_flat_f32_Float32FlatTriangle.get_bx(_g) + dx);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_by(_g,geom_flat_f32_Float32FlatTriangle.get_by(_g) + dy);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cx(_g,geom_flat_f32_Float32FlatTriangle.get_cx(_g) + dx);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cy(_g,geom_flat_f32_Float32FlatTriangle.get_cy(_g) + dy);
};
geom_flat_f32_Float32FlatTriangle.sign = function(n) {
	return Math.abs(n) / n | 0;
};
geom_flat_f32_Float32FlatTriangle.liteHit = function(this1,px,py) {
	var planeAB = (geom_flat_f32_Float32FlatTriangle.get_ax(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_by(this1) - py) - (geom_flat_f32_Float32FlatTriangle.get_bx(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_ay(this1) - py);
	var planeBC = (geom_flat_f32_Float32FlatTriangle.get_bx(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_cy(this1) - py) - (geom_flat_f32_Float32FlatTriangle.get_cx(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_by(this1) - py);
	var planeCA = (geom_flat_f32_Float32FlatTriangle.get_cx(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_ay(this1) - py) - (geom_flat_f32_Float32FlatTriangle.get_ax(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_cy(this1) - py);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_flat_f32_Float32FlatTriangle.fullHit = function(this1,px,py) {
	if(px > Math.min(Math.min(geom_flat_f32_Float32FlatTriangle.get_ax(this1),geom_flat_f32_Float32FlatTriangle.get_bx(this1)),geom_flat_f32_Float32FlatTriangle.get_cx(this1)) && px < Math.max(Math.max(geom_flat_f32_Float32FlatTriangle.get_ax(this1),geom_flat_f32_Float32FlatTriangle.get_bx(this1)),geom_flat_f32_Float32FlatTriangle.get_cx(this1)) && py > Math.min(Math.min(geom_flat_f32_Float32FlatTriangle.get_ay(this1),geom_flat_f32_Float32FlatTriangle.get_by(this1)),geom_flat_f32_Float32FlatTriangle.get_cy(this1)) && py < Math.max(Math.max(geom_flat_f32_Float32FlatTriangle.get_ay(this1),geom_flat_f32_Float32FlatTriangle.get_by(this1)),geom_flat_f32_Float32FlatTriangle.get_cy(this1))) {
		return true;
	}
	var planeAB = (geom_flat_f32_Float32FlatTriangle.get_ax(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_by(this1) - py) - (geom_flat_f32_Float32FlatTriangle.get_bx(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_ay(this1) - py);
	var planeBC = (geom_flat_f32_Float32FlatTriangle.get_bx(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_cy(this1) - py) - (geom_flat_f32_Float32FlatTriangle.get_cx(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_by(this1) - py);
	var planeCA = (geom_flat_f32_Float32FlatTriangle.get_cx(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_ay(this1) - py) - (geom_flat_f32_Float32FlatTriangle.get_ax(this1) - px) * (geom_flat_f32_Float32FlatTriangle.get_cy(this1) - py);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_flat_f32_Float32FlatTriangle.rotate = function(this1,x,y,theta) {
	var cos = Math.cos(theta);
	var sin = Math.sin(theta);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ax(_g,geom_flat_f32_Float32FlatTriangle.get_ax(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ay(_g,geom_flat_f32_Float32FlatTriangle.get_ay(_g) - y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_bx(_g,geom_flat_f32_Float32FlatTriangle.get_bx(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_by(_g,geom_flat_f32_Float32FlatTriangle.get_by(_g) - y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cx(_g,geom_flat_f32_Float32FlatTriangle.get_cx(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cy(_g,geom_flat_f32_Float32FlatTriangle.get_cy(_g) - y);
	var dx = geom_flat_f32_Float32FlatTriangle.get_ax(this1);
	var dy = geom_flat_f32_Float32FlatTriangle.get_ay(this1);
	geom_flat_f32_Float32FlatTriangle.set_ax(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangle.set_ay(this1,dx * sin + dy * cos);
	dx = geom_flat_f32_Float32FlatTriangle.get_bx(this1);
	dy = geom_flat_f32_Float32FlatTriangle.get_by(this1);
	geom_flat_f32_Float32FlatTriangle.set_bx(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangle.set_by(this1,dx * sin + dy * cos);
	dx = geom_flat_f32_Float32FlatTriangle.get_cx(this1);
	dy = geom_flat_f32_Float32FlatTriangle.get_cy(this1);
	geom_flat_f32_Float32FlatTriangle.set_cx(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangle.set_cy(this1,dx * sin + dy * cos);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ax(_g,geom_flat_f32_Float32FlatTriangle.get_ax(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ay(_g,geom_flat_f32_Float32FlatTriangle.get_ay(_g) + y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_bx(_g,geom_flat_f32_Float32FlatTriangle.get_bx(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_by(_g,geom_flat_f32_Float32FlatTriangle.get_by(_g) + y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cx(_g,geom_flat_f32_Float32FlatTriangle.get_cx(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cy(_g,geom_flat_f32_Float32FlatTriangle.get_cy(_g) + y);
};
geom_flat_f32_Float32FlatTriangle.rotateTrig = function(this1,x,y,cos,sin) {
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ax(_g,geom_flat_f32_Float32FlatTriangle.get_ax(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ay(_g,geom_flat_f32_Float32FlatTriangle.get_ay(_g) - y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_bx(_g,geom_flat_f32_Float32FlatTriangle.get_bx(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_by(_g,geom_flat_f32_Float32FlatTriangle.get_by(_g) - y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cx(_g,geom_flat_f32_Float32FlatTriangle.get_cx(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cy(_g,geom_flat_f32_Float32FlatTriangle.get_cy(_g) - y);
	var dx = geom_flat_f32_Float32FlatTriangle.get_ax(this1);
	var dy = geom_flat_f32_Float32FlatTriangle.get_ay(this1);
	geom_flat_f32_Float32FlatTriangle.set_ax(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangle.set_ay(this1,dx * sin + dy * cos);
	dx = geom_flat_f32_Float32FlatTriangle.get_bx(this1);
	dy = geom_flat_f32_Float32FlatTriangle.get_by(this1);
	geom_flat_f32_Float32FlatTriangle.set_bx(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangle.set_by(this1,dx * sin + dy * cos);
	dx = geom_flat_f32_Float32FlatTriangle.get_cx(this1);
	dy = geom_flat_f32_Float32FlatTriangle.get_cy(this1);
	geom_flat_f32_Float32FlatTriangle.set_cx(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangle.set_cy(this1,dx * sin + dy * cos);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ax(_g,geom_flat_f32_Float32FlatTriangle.get_ax(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_ay(_g,geom_flat_f32_Float32FlatTriangle.get_ay(_g) + y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_bx(_g,geom_flat_f32_Float32FlatTriangle.get_bx(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_by(_g,geom_flat_f32_Float32FlatTriangle.get_by(_g) + y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cx(_g,geom_flat_f32_Float32FlatTriangle.get_cx(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangle.set_cy(_g,geom_flat_f32_Float32FlatTriangle.get_cy(_g) + y);
};
geom_flat_f32_Float32FlatTriangle.prettyString = function(this1) {
	return "{ ax: " + geom_flat_f32_Float32FlatTriangle.get_ax(this1) + ", ay: " + geom_flat_f32_Float32FlatTriangle.get_ay(this1) + ", az: " + geom_flat_f32_Float32FlatTriangle.get_az(this1) + " }" + "\n" + "{ bx: " + geom_flat_f32_Float32FlatTriangle.get_bx(this1) + ", by: " + geom_flat_f32_Float32FlatTriangle.get_by(this1) + ", bz: " + geom_flat_f32_Float32FlatTriangle.get_bz(this1) + " }" + "\n" + "{ cx: " + geom_flat_f32_Float32FlatTriangle.get_cx(this1) + ", cy: " + geom_flat_f32_Float32FlatTriangle.get_cy(this1) + ", az: " + geom_flat_f32_Float32FlatTriangle.get_cz(this1) + " }" + "\n";
};
geom_flat_f32_Float32FlatTriangle.prettyAll = function(this1) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var str = "Float32FlatTriangle: \n";
	var _g = 0;
	var _g1 = geom_flat_f32_Float32Flat.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		str += "{ ax: " + geom_flat_f32_Float32FlatTriangle.get_ax(this1) + ", ay: " + geom_flat_f32_Float32FlatTriangle.get_ay(this1) + ", az: " + geom_flat_f32_Float32FlatTriangle.get_az(this1) + " }" + "\n" + "{ bx: " + geom_flat_f32_Float32FlatTriangle.get_bx(this1) + ", by: " + geom_flat_f32_Float32FlatTriangle.get_by(this1) + ", bz: " + geom_flat_f32_Float32FlatTriangle.get_bz(this1) + " }" + "\n" + "{ cx: " + geom_flat_f32_Float32FlatTriangle.get_cx(this1) + ", cy: " + geom_flat_f32_Float32FlatTriangle.get_cy(this1) + ", az: " + geom_flat_f32_Float32FlatTriangle.get_cz(this1) + " }" + "\n";
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return str;
};
var geom_flat_f32_Float32FlatTriangleXY = {};
geom_flat_f32_Float32FlatTriangleXY._new = function(len) {
	var this1 = new Float32Array(len + 2);
	var this2 = this1;
	this2[0] = 0.;
	this2[1] = 0.;
	var this1 = this2;
	var this2 = this1;
	return this2;
};
geom_flat_f32_Float32FlatTriangleXY.get_ax = function(this1) {
	return this1[(this1[0] | 0) * 6 + 2];
};
geom_flat_f32_Float32FlatTriangleXY.set_ax = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangleXY.get_ay = function(this1) {
	return this1[(this1[0] | 0) * 6 + 1 + 2];
};
geom_flat_f32_Float32FlatTriangleXY.set_ay = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 1 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangleXY.get_bx = function(this1) {
	return this1[(this1[0] | 0) * 6 + 3 + 2];
};
geom_flat_f32_Float32FlatTriangleXY.set_bx = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 3 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangleXY.get_by = function(this1) {
	return this1[(this1[0] | 0) * 6 + 4 + 2];
};
geom_flat_f32_Float32FlatTriangleXY.set_by = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 4 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangleXY.get_cx = function(this1) {
	return this1[(this1[0] | 0) * 6 + 6 + 2];
};
geom_flat_f32_Float32FlatTriangleXY.set_cx = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 6 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangleXY.get_cy = function(this1) {
	return this1[(this1[0] | 0) * 6 + 7 + 2];
};
geom_flat_f32_Float32FlatTriangleXY.set_cy = function(this1,v) {
	this1[(this1[0] | 0) * 6 + 7 + 2] = v;
	return v;
};
geom_flat_f32_Float32FlatTriangleXY.transform = function(this1,m) {
	var this2 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangleXY.get_ax(this1),geom_flat_f32_Float32FlatTriangleXY.get_ay(this1),1.,1.);
	var pa = this2;
	var this2 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangleXY.get_bx(this1),geom_flat_f32_Float32FlatTriangleXY.get_by(this1),1.,1.);
	var pb = this2;
	var this2 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangleXY.get_cx(this1),geom_flat_f32_Float32FlatTriangleXY.get_cy(this1),1.,1.);
	var pc = this2;
	var this2 = new geom_structure_Mat1x4(m.a * pa.x + m.b * pa.y + m.c * pa.z + m.d,m.e * pa.x + m.f * pa.y + m.g * pa.z + m.h,m.i * pa.x + m.j * pa.y + m.k * pa.z + m.l,1.);
	pa = this2;
	var this2 = new geom_structure_Mat1x4(m.a * pb.x + m.b * pb.y + m.c * pb.z + m.d,m.e * pb.x + m.f * pb.y + m.g * pb.z + m.h,m.i * pb.x + m.j * pb.y + m.k * pb.z + m.l,1.);
	pb = this2;
	var this2 = new geom_structure_Mat1x4(m.a * pc.x + m.b * pc.y + m.c * pc.z + m.d,m.e * pc.x + m.f * pc.y + m.g * pc.z + m.h,m.i * pc.x + m.j * pc.y + m.k * pc.z + m.l,1.);
	pc = this2;
	geom_flat_f32_Float32FlatTriangleXY.set_ax(this1,pa.x);
	geom_flat_f32_Float32FlatTriangleXY.set_ay(this1,pa.y);
	geom_flat_f32_Float32FlatTriangleXY.set_bx(this1,pb.x);
	geom_flat_f32_Float32FlatTriangleXY.set_by(this1,pb.y);
	geom_flat_f32_Float32FlatTriangleXY.set_cx(this1,pc.x);
	geom_flat_f32_Float32FlatTriangleXY.set_cy(this1,pc.y);
};
geom_flat_f32_Float32FlatTriangleXY.transformAll = function(this1,m) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var _g = 0;
	var _g1 = geom_flat_f32_Float32Flat.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32_Float32FlatTriangleXY.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32_Float32FlatTriangleXY.transformRange = function(this1,m,start,end) {
	this1[0] = start;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	if(end > geom_flat_f32_Float32Flat.get_size(this1) - 1) {
		geom_flat_f32_Float32Flat.get_size(this1);
	}
	var _g = start;
	var _g1 = end + 1;
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32_Float32FlatTriangleXY.transform(this1,m);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32_Float32FlatTriangleXY.fromPosition = function(this1,tri) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	tri[0] = 0;
	if(tri[0] > tri[1] - 1) {
		tri[1] = tri[0];
	}
	var _g = 0;
	var _g1 = geom_flat_f32_Float32Flat.get_size(tri);
	while(_g < _g1) {
		var i = _g++;
		geom_flat_f32_Float32FlatTriangleXY.set_ax(this1,geom_flat_f32_Float32FlatTriangle.get_ax(tri));
		geom_flat_f32_Float32FlatTriangleXY.set_ay(this1,geom_flat_f32_Float32FlatTriangle.get_ay(tri));
		geom_flat_f32_Float32FlatTriangleXY.set_bx(this1,geom_flat_f32_Float32FlatTriangle.get_bx(tri));
		geom_flat_f32_Float32FlatTriangleXY.set_by(this1,geom_flat_f32_Float32FlatTriangle.get_by(tri));
		geom_flat_f32_Float32FlatTriangleXY.set_cx(this1,geom_flat_f32_Float32FlatTriangle.get_cx(tri));
		geom_flat_f32_Float32FlatTriangleXY.set_cy(this1,geom_flat_f32_Float32FlatTriangle.get_cy(tri));
		(function(_e) {
			return function() {
				var pos_ = _e[0][0] + 1.;
				_e[0][0] = pos_;
				if(_e[0][0] > _e[0][1] - 1) {
					_e[0][1] = _e[0][0];
				}
				return _e[0][0];
			};
		})([tri]);
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
};
geom_flat_f32_Float32FlatTriangleXY.triangle = function(this1,ax_,ay_,bx_,by_,cx_,cy_) {
	geom_flat_f32_Float32FlatTriangleXY.set_ax(this1,ax_);
	geom_flat_f32_Float32FlatTriangleXY.set_ay(this1,ay_);
	geom_flat_f32_Float32FlatTriangleXY.set_bx(this1,bx_);
	geom_flat_f32_Float32FlatTriangleXY.set_by(this1,by_);
	geom_flat_f32_Float32FlatTriangleXY.set_cx(this1,cx_);
	geom_flat_f32_Float32FlatTriangleXY.set_cy(this1,cy_);
	var windingAdjusted = geom_flat_f32_Float32FlatTriangleXY.adjustWinding(this1);
	if(windingAdjusted) {
		geom_flat_f32_Float32FlatTriangleXY.set_ax(this1,ax_);
		geom_flat_f32_Float32FlatTriangleXY.set_ay(this1,ay_);
		geom_flat_f32_Float32FlatTriangleXY.set_bx(this1,cx_);
		geom_flat_f32_Float32FlatTriangleXY.set_by(this1,cy_);
		geom_flat_f32_Float32FlatTriangleXY.set_cx(this1,bx_);
		geom_flat_f32_Float32FlatTriangleXY.set_cy(this1,by_);
	}
	return windingAdjusted;
};
geom_flat_f32_Float32FlatTriangleXY.adjustWinding = function(this1) {
	return geom_flat_f32_Float32FlatTriangleXY.get_ax(this1) * geom_flat_f32_Float32FlatTriangleXY.get_by(this1) - geom_flat_f32_Float32FlatTriangleXY.get_bx(this1) * geom_flat_f32_Float32FlatTriangleXY.get_ay(this1) + (geom_flat_f32_Float32FlatTriangleXY.get_bx(this1) * geom_flat_f32_Float32FlatTriangleXY.get_cy(this1) - geom_flat_f32_Float32FlatTriangleXY.get_cx(this1) * geom_flat_f32_Float32FlatTriangleXY.get_by(this1)) + (geom_flat_f32_Float32FlatTriangleXY.get_cx(this1) * geom_flat_f32_Float32FlatTriangleXY.get_ay(this1) - geom_flat_f32_Float32FlatTriangleXY.get_ax(this1) * geom_flat_f32_Float32FlatTriangleXY.get_cy(this1)) > 0;
};
geom_flat_f32_Float32FlatTriangleXY.get_x = function(this1) {
	return Math.min(Math.min(geom_flat_f32_Float32FlatTriangleXY.get_ax(this1),geom_flat_f32_Float32FlatTriangleXY.get_bx(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cx(this1));
};
geom_flat_f32_Float32FlatTriangleXY.set_x = function(this1,x) {
	var dx = x - Math.min(Math.min(geom_flat_f32_Float32FlatTriangleXY.get_ax(this1),geom_flat_f32_Float32FlatTriangleXY.get_bx(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cx(this1));
	geom_flat_f32_Float32FlatTriangleXY.set_ax(this1,geom_flat_f32_Float32FlatTriangleXY.get_ax(this1) + dx);
	geom_flat_f32_Float32FlatTriangleXY.set_bx(this1,geom_flat_f32_Float32FlatTriangleXY.get_bx(this1) + dx);
	geom_flat_f32_Float32FlatTriangleXY.set_cx(this1,geom_flat_f32_Float32FlatTriangleXY.get_cx(this1) + dx);
	return x;
};
geom_flat_f32_Float32FlatTriangleXY.get_y = function(this1) {
	return Math.min(Math.min(geom_flat_f32_Float32FlatTriangleXY.get_ay(this1),geom_flat_f32_Float32FlatTriangleXY.get_by(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cy(this1));
};
geom_flat_f32_Float32FlatTriangleXY.set_y = function(this1,y) {
	var dy = y - Math.min(Math.min(geom_flat_f32_Float32FlatTriangleXY.get_ay(this1),geom_flat_f32_Float32FlatTriangleXY.get_by(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cy(this1));
	geom_flat_f32_Float32FlatTriangleXY.set_ay(this1,geom_flat_f32_Float32FlatTriangleXY.get_ay(this1) + dy);
	geom_flat_f32_Float32FlatTriangleXY.set_by(this1,geom_flat_f32_Float32FlatTriangleXY.get_by(this1) + dy);
	geom_flat_f32_Float32FlatTriangleXY.set_cy(this1,geom_flat_f32_Float32FlatTriangleXY.get_cy(this1) + dy);
	return y;
};
geom_flat_f32_Float32FlatTriangleXY.get_right = function(this1) {
	return Math.max(Math.max(geom_flat_f32_Float32FlatTriangleXY.get_ax(this1),geom_flat_f32_Float32FlatTriangleXY.get_bx(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cx(this1));
};
geom_flat_f32_Float32FlatTriangleXY.get_bottom = function(this1) {
	return Math.max(Math.max(geom_flat_f32_Float32FlatTriangleXY.get_ay(this1),geom_flat_f32_Float32FlatTriangleXY.get_by(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cy(this1));
};
geom_flat_f32_Float32FlatTriangleXY.moveDelta = function(this1,dx,dy) {
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ax(_g,geom_flat_f32_Float32FlatTriangleXY.get_ax(_g) + dx);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ay(_g,geom_flat_f32_Float32FlatTriangleXY.get_ay(_g) + dy);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_bx(_g,geom_flat_f32_Float32FlatTriangleXY.get_bx(_g) + dx);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_by(_g,geom_flat_f32_Float32FlatTriangleXY.get_by(_g) + dy);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cx(_g,geom_flat_f32_Float32FlatTriangleXY.get_cx(_g) + dx);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cy(_g,geom_flat_f32_Float32FlatTriangleXY.get_cy(_g) + dy);
};
geom_flat_f32_Float32FlatTriangleXY.sign = function(n) {
	return Math.abs(n) / n | 0;
};
geom_flat_f32_Float32FlatTriangleXY.liteHit = function(this1,px,py) {
	var planeAB = (geom_flat_f32_Float32FlatTriangleXY.get_ax(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_by(this1) - py) - (geom_flat_f32_Float32FlatTriangleXY.get_bx(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_ay(this1) - py);
	var planeBC = (geom_flat_f32_Float32FlatTriangleXY.get_bx(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_cy(this1) - py) - (geom_flat_f32_Float32FlatTriangleXY.get_cx(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_by(this1) - py);
	var planeCA = (geom_flat_f32_Float32FlatTriangleXY.get_cx(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_ay(this1) - py) - (geom_flat_f32_Float32FlatTriangleXY.get_ax(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_cy(this1) - py);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_flat_f32_Float32FlatTriangleXY.fullHit = function(this1,px,py) {
	if(px > Math.min(Math.min(geom_flat_f32_Float32FlatTriangleXY.get_ax(this1),geom_flat_f32_Float32FlatTriangleXY.get_bx(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cx(this1)) && px < Math.max(Math.max(geom_flat_f32_Float32FlatTriangleXY.get_ax(this1),geom_flat_f32_Float32FlatTriangleXY.get_bx(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cx(this1)) && py > Math.min(Math.min(geom_flat_f32_Float32FlatTriangleXY.get_ay(this1),geom_flat_f32_Float32FlatTriangleXY.get_by(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cy(this1)) && py < Math.max(Math.max(geom_flat_f32_Float32FlatTriangleXY.get_ay(this1),geom_flat_f32_Float32FlatTriangleXY.get_by(this1)),geom_flat_f32_Float32FlatTriangleXY.get_cy(this1))) {
		return true;
	}
	var planeAB = (geom_flat_f32_Float32FlatTriangleXY.get_ax(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_by(this1) - py) - (geom_flat_f32_Float32FlatTriangleXY.get_bx(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_ay(this1) - py);
	var planeBC = (geom_flat_f32_Float32FlatTriangleXY.get_bx(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_cy(this1) - py) - (geom_flat_f32_Float32FlatTriangleXY.get_cx(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_by(this1) - py);
	var planeCA = (geom_flat_f32_Float32FlatTriangleXY.get_cx(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_ay(this1) - py) - (geom_flat_f32_Float32FlatTriangleXY.get_ax(this1) - px) * (geom_flat_f32_Float32FlatTriangleXY.get_cy(this1) - py);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_flat_f32_Float32FlatTriangleXY.rotate = function(this1,x,y,theta) {
	var cos = Math.cos(theta);
	var sin = Math.sin(theta);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ax(_g,geom_flat_f32_Float32FlatTriangleXY.get_ax(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ay(_g,geom_flat_f32_Float32FlatTriangleXY.get_ay(_g) - y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_bx(_g,geom_flat_f32_Float32FlatTriangleXY.get_bx(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_by(_g,geom_flat_f32_Float32FlatTriangleXY.get_by(_g) - y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cx(_g,geom_flat_f32_Float32FlatTriangleXY.get_cx(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cy(_g,geom_flat_f32_Float32FlatTriangleXY.get_cy(_g) - y);
	var dx = geom_flat_f32_Float32FlatTriangleXY.get_ax(this1);
	var dy = geom_flat_f32_Float32FlatTriangleXY.get_ay(this1);
	geom_flat_f32_Float32FlatTriangleXY.set_ax(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangleXY.set_ay(this1,dx * sin + dy * cos);
	dx = geom_flat_f32_Float32FlatTriangleXY.get_bx(this1);
	dy = geom_flat_f32_Float32FlatTriangleXY.get_by(this1);
	geom_flat_f32_Float32FlatTriangleXY.set_bx(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangleXY.set_by(this1,dx * sin + dy * cos);
	dx = geom_flat_f32_Float32FlatTriangleXY.get_cx(this1);
	dy = geom_flat_f32_Float32FlatTriangleXY.get_cy(this1);
	geom_flat_f32_Float32FlatTriangleXY.set_cx(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangleXY.set_cy(this1,dx * sin + dy * cos);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ax(_g,geom_flat_f32_Float32FlatTriangleXY.get_ax(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ay(_g,geom_flat_f32_Float32FlatTriangleXY.get_ay(_g) + y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_bx(_g,geom_flat_f32_Float32FlatTriangleXY.get_bx(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_by(_g,geom_flat_f32_Float32FlatTriangleXY.get_by(_g) + y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cx(_g,geom_flat_f32_Float32FlatTriangleXY.get_cx(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cy(_g,geom_flat_f32_Float32FlatTriangleXY.get_cy(_g) + y);
};
geom_flat_f32_Float32FlatTriangleXY.rotateTrig = function(this1,x,y,cos,sin) {
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ax(_g,geom_flat_f32_Float32FlatTriangleXY.get_ax(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ay(_g,geom_flat_f32_Float32FlatTriangleXY.get_ay(_g) - y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_bx(_g,geom_flat_f32_Float32FlatTriangleXY.get_bx(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_by(_g,geom_flat_f32_Float32FlatTriangleXY.get_by(_g) - y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cx(_g,geom_flat_f32_Float32FlatTriangleXY.get_cx(_g) - x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cy(_g,geom_flat_f32_Float32FlatTriangleXY.get_cy(_g) - y);
	var dx = geom_flat_f32_Float32FlatTriangleXY.get_ax(this1);
	var dy = geom_flat_f32_Float32FlatTriangleXY.get_ay(this1);
	geom_flat_f32_Float32FlatTriangleXY.set_ax(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangleXY.set_ay(this1,dx * sin + dy * cos);
	dx = geom_flat_f32_Float32FlatTriangleXY.get_bx(this1);
	dy = geom_flat_f32_Float32FlatTriangleXY.get_by(this1);
	geom_flat_f32_Float32FlatTriangleXY.set_bx(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangleXY.set_by(this1,dx * sin + dy * cos);
	dx = geom_flat_f32_Float32FlatTriangleXY.get_cx(this1);
	dy = geom_flat_f32_Float32FlatTriangleXY.get_cy(this1);
	geom_flat_f32_Float32FlatTriangleXY.set_cx(this1,dx * cos - dy * sin);
	geom_flat_f32_Float32FlatTriangleXY.set_cy(this1,dx * sin + dy * cos);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ax(_g,geom_flat_f32_Float32FlatTriangleXY.get_ax(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_ay(_g,geom_flat_f32_Float32FlatTriangleXY.get_ay(_g) + y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_bx(_g,geom_flat_f32_Float32FlatTriangleXY.get_bx(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_by(_g,geom_flat_f32_Float32FlatTriangleXY.get_by(_g) + y);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cx(_g,geom_flat_f32_Float32FlatTriangleXY.get_cx(_g) + x);
	var _g = this1;
	geom_flat_f32_Float32FlatTriangleXY.set_cy(_g,geom_flat_f32_Float32FlatTriangleXY.get_cy(_g) + y);
};
geom_flat_f32_Float32FlatTriangleXY.prettyString = function(this1) {
	return "{ ax: " + geom_flat_f32_Float32FlatTriangleXY.get_ax(this1) + ", ay: " + geom_flat_f32_Float32FlatTriangleXY.get_ay(this1) + " }" + "\n" + "{ bx: " + geom_flat_f32_Float32FlatTriangleXY.get_bx(this1) + ", by: " + geom_flat_f32_Float32FlatTriangleXY.get_by(this1) + " }" + "\n" + "{ cx: " + geom_flat_f32_Float32FlatTriangleXY.get_cx(this1) + ", cy: " + geom_flat_f32_Float32FlatTriangleXY.get_cy(this1) + " }" + "\n";
};
geom_flat_f32_Float32FlatTriangleXY.prettyAll = function(this1) {
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	var str = "Float32FlatTexture: \n";
	var _g = 0;
	var _g1 = geom_flat_f32_Float32Flat.get_size(this1);
	while(_g < _g1) {
		var i = _g++;
		str += "{ ax: " + geom_flat_f32_Float32FlatTriangleXY.get_ax(this1) + ", ay: " + geom_flat_f32_Float32FlatTriangleXY.get_ay(this1) + " }" + "\n" + "{ bx: " + geom_flat_f32_Float32FlatTriangleXY.get_bx(this1) + ", by: " + geom_flat_f32_Float32FlatTriangleXY.get_by(this1) + " }" + "\n" + "{ cx: " + geom_flat_f32_Float32FlatTriangleXY.get_cx(this1) + ", cy: " + geom_flat_f32_Float32FlatTriangleXY.get_cy(this1) + " }" + "\n";
		var pos_ = this1[0] + 1.;
		this1[0] = pos_;
		if(this1[0] > this1[1] - 1) {
			this1[1] = this1[0];
		}
	}
	this1[0] = 0;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return str;
};
var geom_flat_i32_Int32Flat = {};
geom_flat_i32_Int32Flat.readItem = function(this1,k) {
	return this1[k + 2];
};
geom_flat_i32_Int32Flat.writeItem = function(this1,k,v) {
	this1[k + 2] = v;
	return v;
};
geom_flat_i32_Int32Flat._new = function(len) {
	var this1 = new Int32Array(len + 2);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	return this2;
};
geom_flat_i32_Int32Flat.get_size = function(this1) {
	return this1[1];
};
geom_flat_i32_Int32Flat.set_size = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_i32_Int32Flat.get_pos = function(this1) {
	return this1[0];
};
geom_flat_i32_Int32Flat.set_pos = function(this1,pos_) {
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return pos_;
};
geom_flat_i32_Int32Flat.updateLen = function(this1) {
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
};
geom_flat_i32_Int32Flat.hasNext = function(this1) {
	return this1[0] < this1[1];
};
geom_flat_i32_Int32Flat.next = function(this1) {
	var pos_ = this1[0] + 1;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return this1[0];
};
geom_flat_i32_Int32Flat.increment = function(this1) {
	var pos_ = this1[0] + 1;
	this1[0] = pos_;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return this1[0];
};
geom_flat_i32_Int32Flat.toArray = function(this1) {
	return this1.subarray(2,this1[1] + 2);
};
geom_flat_i32_Int32Flat.fromArray = function(arr) {
	var this1 = new Int32Array(arr.length + 2);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	var flat = this2;
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 2] = arr[i];
	}
	flat[0] = 0;
	flat[1] = l;
	return flat;
};
geom_flat_i32_Int32Flat.clone = function(this1) {
	var this2 = new Int32Array(this1.length - 2 + 2);
	var this3 = this2;
	this3[0] = 0;
	this3[1] = 0;
	var flat = this3;
	var arr = this1.subarray(2,this1[1] + 2);
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 2] = arr[i];
	}
	flat[0] = 0;
	flat[1] = l;
	return flat;
};
geom_flat_i32_Int32Flat.fill = function(this1,arr) {
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		this1[i + 2] = arr[i];
	}
	this1[0] = 0;
	this1[1] = l;
};
var geom_flat_i32_Int32Flat3 = {};
geom_flat_i32_Int32Flat3.readItem = function(this1,k) {
	return this1[this1[0] * 3 + k + 2];
};
geom_flat_i32_Int32Flat3.writeItem = function(this1,k,v) {
	this1[this1[0] * 3 + k + 2] = v;
	return v;
};
geom_flat_i32_Int32Flat3._new = function(len) {
	var this1 = new Int32Array(len + 2);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	var this1 = this2;
	return this1;
};
geom_flat_i32_Int32Flat3.get_pos = function(this1) {
	return this1[0];
};
geom_flat_i32_Int32Flat3.set_pos = function(this1,id) {
	this1[0] = id;
	if(this1[0] > this1[1] - 1) {
		this1[1] = this1[0];
	}
	return id;
};
geom_flat_i32_Int32Flat3.getArray = function(this1) {
	return this1.subarray(2,this1[1] * 3 + 2);
};
var geom_flat_ui16_UInt16Flat = {};
geom_flat_ui16_UInt16Flat.readItem = function(this1,k) {
	return this1[k + 4];
};
geom_flat_ui16_UInt16Flat.writeItem = function(this1,k,v) {
	this1[k + 4] = v;
	return v;
};
geom_flat_ui16_UInt16Flat._new = function(len) {
	var this1 = new Uint16Array(len + 4);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	this2[2] = 0;
	this2[3] = 0;
	return this2;
};
geom_flat_ui16_UInt16Flat.get_size = function(this1) {
	return (this1[2] << 16) + this1[3];
};
geom_flat_ui16_UInt16Flat.set_size = function(this1,id) {
	this1[0] = id >>> 16;
	this1[1] = id & 65535;
	if(id > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = id >>> 16;
		this1[3] = id & 65535;
	}
	return id;
};
geom_flat_ui16_UInt16Flat.get_pos = function(this1) {
	return (this1[0] << 16) + this1[1];
};
geom_flat_ui16_UInt16Flat.set_pos = function(this1,pos_) {
	this1[0] = pos_ >>> 16;
	this1[1] = pos_ & 65535;
	if(pos_ > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = pos_ >>> 16;
		this1[3] = pos_ & 65535;
	}
	return pos_;
};
geom_flat_ui16_UInt16Flat.setLength = function(this1,v) {
	this1[2] = v >>> 16;
	this1[3] = v & 65535;
};
geom_flat_ui16_UInt16Flat.setPos = function(this1,v) {
	this1[0] = v >>> 16;
	this1[1] = v & 65535;
};
geom_flat_ui16_UInt16Flat.getDual16 = function(this1,i) {
	return (this1[i] << 16) + this1[i + 1];
};
geom_flat_ui16_UInt16Flat.setDual16 = function(this1,i,v) {
	this1[i] = v >>> 16;
	this1[i + 1] = v & 65535;
};
geom_flat_ui16_UInt16Flat.upper16 = function(this1,v) {
	return v >>> 16;
};
geom_flat_ui16_UInt16Flat.lower16 = function(this1,v) {
	return v & 65535;
};
geom_flat_ui16_UInt16Flat.updateLen = function(this1,pos_) {
	if(pos_ > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = pos_ >>> 16;
		this1[3] = pos_ & 65535;
	}
};
geom_flat_ui16_UInt16Flat.hasNext = function(this1) {
	return (this1[0] << 16) + this1[1] < (this1[2] << 16) + this1[3];
};
geom_flat_ui16_UInt16Flat.next = function(this1) {
	var pos_ = (this1[0] << 16) + this1[1] + 1;
	this1[0] = pos_ >>> 16;
	this1[1] = pos_ & 65535;
	if(pos_ > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = pos_ >>> 16;
		this1[3] = pos_ & 65535;
	}
	return (this1[0] << 16) + this1[1];
};
geom_flat_ui16_UInt16Flat.increment = function(this1) {
	var pos_ = (this1[0] << 16) + this1[1] + 1;
	this1[0] = pos_ >>> 16;
	this1[1] = pos_ & 65535;
	if(pos_ > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = pos_ >>> 16;
		this1[3] = pos_ & 65535;
	}
	return (this1[0] << 16) + this1[1];
};
geom_flat_ui16_UInt16Flat.toArray = function(this1) {
	return this1.subarray(4,(this1[2] << 16) + this1[3] + 4);
};
geom_flat_ui16_UInt16Flat.fromArray = function(arr) {
	var this1 = new Uint16Array(arr.length + 4);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	this2[2] = 0;
	this2[3] = 0;
	var flat = this2;
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 4] = arr[i];
	}
	flat[0] = 0;
	flat[1] = 0;
	flat[2] = l >>> 16;
	flat[3] = l & 65535;
	return flat;
};
geom_flat_ui16_UInt16Flat.clone = function(this1) {
	var this2 = new Uint16Array(this1.length - 4 + 4);
	var this3 = this2;
	this3[0] = 0;
	this3[1] = 0;
	this3[2] = 0;
	this3[3] = 0;
	var flat = this3;
	var arr = this1.subarray(4,(this1[2] << 16) + this1[3] + 4);
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		flat[i + 4] = arr[i];
	}
	flat[0] = 0;
	flat[1] = 0;
	flat[2] = l >>> 16;
	flat[3] = l & 65535;
	return flat.subarray(4,(flat[2] << 16) + flat[3] + 4);
};
geom_flat_ui16_UInt16Flat.fill = function(this1,arr) {
	var l = arr.length;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		this1[i + 4] = arr[i];
	}
	this1[0] = 0;
	this1[1] = 0;
	this1[2] = l >>> 16;
	this1[3] = l & 65535;
};
var geom_flat_ui16_UInt16Flat3 = {};
geom_flat_ui16_UInt16Flat3.readItem = function(this1,k) {
	return this1[((this1[0] << 16) + this1[1]) * 3 + k + 4];
};
geom_flat_ui16_UInt16Flat3.writeItem = function(this1,k,v) {
	this1[((this1[0] << 16) + this1[1]) * 3 + k + 4] = v;
	return v;
};
geom_flat_ui16_UInt16Flat3._new = function(len) {
	var this1 = new Uint16Array(len + 4);
	var this2 = this1;
	this2[0] = 0;
	this2[1] = 0;
	this2[2] = 0;
	this2[3] = 0;
	var this1 = this2;
	return this1;
};
geom_flat_ui16_UInt16Flat3.get_pos = function(this1) {
	return (this1[0] << 16) + this1[1];
};
geom_flat_ui16_UInt16Flat3.set_pos = function(this1,id) {
	this1[0] = id >>> 16;
	this1[1] = id & 65535;
	if(id > (this1[2] << 16) + this1[3] - 1) {
		this1[2] = id >>> 16;
		this1[3] = id & 65535;
	}
	return id;
};
geom_flat_ui16_UInt16Flat3.getArray = function(this1) {
	return this1.subarray(4,((this1[2] << 16) + this1[3]) * 3 + 4);
};
var geom_matrix_Conversion = function() { };
$hxClasses["geom.matrix.Conversion"] = geom_matrix_Conversion;
geom_matrix_Conversion.__name__ = "geom.matrix.Conversion";
geom_matrix_Conversion._1x2toTpoint = function(m1x2) {
	return { x : m1x2.x, y : m1x2.y};
};
geom_matrix_Conversion._1x2toVec3 = function(m1x2) {
	var this1 = new Array(3);
	var vec = this1;
	vec[0] = m1x2.x;
	vec[1] = m1x2.y;
	vec[2] = 1.;
	return vec;
};
geom_matrix_Conversion.Vectorto1x2 = function(v) {
	var this1 = new geom_structure_Mat1x2(v[0],v[1]);
	return this1;
};
geom_matrix_Conversion.Vectorto1x3 = function(vec) {
	var this1 = new geom_structure_Mat1x3(vec[0],vec[1],vec[2]);
	return this1;
};
geom_matrix_Conversion._1x3toVector = function(m1x3) {
	var this1 = new Array(3);
	var vec = this1;
	vec[0] = m1x3.x;
	vec[1] = m1x3.y;
	vec[2] = m1x3.z;
	return vec;
};
geom_matrix_Conversion.Arrayto1x3 = function(arr) {
	var this1 = new geom_structure_Mat1x3(arr[0],arr[1],arr[2]);
	return this1;
};
geom_matrix_Conversion._1x3toArray = function(m1x3) {
	return [m1x3.x,m1x3.y,m1x3.z];
};
geom_matrix_Conversion.Vectorto1x4 = function(vec) {
	var this1 = new geom_structure_Mat1x4(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix_Conversion._1x4toVector = function(m1x4) {
	var this1 = new Array(4);
	var vec = this1;
	vec[0] = m1x4.x;
	vec[1] = m1x4.y;
	vec[2] = m1x4.z;
	vec[3] = m1x4.w;
	return vec;
};
geom_matrix_Conversion.Arrayto1x4 = function(arr) {
	var this1 = new geom_structure_Mat1x4(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix_Conversion._1x4toArray = function(m1x4) {
	return [m1x4.x,m1x4.y,m1x4.z,m1x4.w];
};
geom_matrix_Conversion.Arrayto2x2 = function(arr) {
	var this1 = new geom_structure_Mat2x2(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix_Conversion._2x2toArray = function(m2x2) {
	return [m2x2.a,m2x2.b,m2x2.c,m2x2.d];
};
geom_matrix_Conversion.Vectorto2x2 = function(vec) {
	var this1 = new geom_structure_Mat2x2(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix_Conversion._2x2toVector = function(m2x2) {
	var this1 = new Array(4);
	var vec = this1;
	vec[0] = m2x2.a;
	vec[1] = m2x2.b;
	vec[2] = m2x2.c;
	vec[3] = m2x2.d;
	return vec;
};
geom_matrix_Conversion.toTmatrix2x2 = function(m2x2) {
	var tm = { a : m2x2.a, b : m2x2.b, c : m2x2.c, d : m2x2.d};
	return tm;
};
geom_matrix_Conversion.Tmatrix2x2to2x2 = function(tm) {
	var m2x2 = tm;
	var this1 = m2x2;
	return this1;
};
geom_matrix_Conversion._2x2toTmatrix2x2numbered = function(m2x2) {
	var tm = { _00 : m2x2.a, _10 : m2x2.b, _01 : m2x2.c, _11 : m2x2.d};
	return tm;
};
geom_matrix_Conversion.Tmatrix2x2numberedto2x2 = function(tm) {
	var this1 = new geom_structure_Mat2x2(tm._00,tm._10,tm._01,tm._11);
	return this1;
};
geom_matrix_Conversion._2x2toAlternate2x2numbered = function(m2x2) {
	var am = { _00 : m2x2.a, _01 : m2x2.b, _10 : m2x2.c, _11 : m2x2.d};
	return am;
};
geom_matrix_Conversion.Alternate2x2numberedto2x2 = function(am) {
	var this1 = new geom_structure_Mat2x2(am._00,am._01,am._10,am._11);
	return this1;
};
geom_matrix_Conversion._2x2toFloat32ArrayTranspose_ = function(m2x2) {
	var this1 = new Float32Array(4);
	var arr = this1;
	arr[0] = m2x2.a;
	arr[1] = m2x2.c;
	arr[2] = m2x2.b;
	arr[3] = m2x2.d;
	return arr;
};
geom_matrix_Conversion._2x2toFloat32Array_ = function(m2x2) {
	var this1 = new Float32Array(4);
	var arr = this1;
	arr[0] = m2x2.a;
	arr[1] = m2x2.b;
	arr[2] = m2x2.c;
	arr[3] = m2x2.d;
	return arr;
};
geom_matrix_Conversion.Float32Array_to2x2Transpose = function(arr) {
	var this1 = new geom_structure_Mat2x2(arr[0],arr[2],arr[1],arr[3]);
	return this1;
};
geom_matrix_Conversion.Float32Array_2x2 = function(arr) {
	var this1 = new geom_structure_Mat2x2(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix_Conversion.Arrayto3x3 = function(arr) {
	var this1 = new geom_structure_Mat3x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8]);
	return this1;
};
geom_matrix_Conversion._3x3toArray = function(m3x3) {
	return [m3x3.a,m3x3.b,m3x3.c,m3x3.d,m3x3.e,m3x3.f,m3x3.g,m3x3.h,m3x3.i];
};
geom_matrix_Conversion._2x2to3x3 = function(m2) {
	var this1 = new geom_structure_Mat3x3(m2.a,m2.b,0.,m2.c,m2.d,0.,0.,0,1.);
	return this1;
};
geom_matrix_Conversion._3x3to2x2 = function(m3x3) {
	var this1 = new geom_structure_Mat2x2(m3x3.a,m3x3.b,m3x3.d,m3x3.e);
	return this1;
};
geom_matrix_Conversion.Vectorto3x3 = function(vec) {
	var this1 = new geom_structure_Mat3x3(vec[0],vec[1],vec[2],vec[3],vec[4],vec[5],vec[6],vec[7],vec[8]);
	return this1;
};
geom_matrix_Conversion._3x3toVector = function(m3x3) {
	var this1 = new Array(8);
	var v = this1;
	v[0] = m3x3.a;
	v[1] = m3x3.b;
	v[2] = m3x3.c;
	v[3] = m3x3.d;
	v[4] = m3x3.e;
	v[5] = m3x3.f;
	v[6] = m3x3.g;
	v[7] = m3x3.h;
	v[8] = m3x3.i;
	return v;
};
geom_matrix_Conversion._3x3toTmatrix3x3 = function(m3x3) {
	var tm = { a : m3x3.a, b : m3x3.b, c : m3x3.c, d : m3x3.d, e : m3x3.e, f : m3x3.f, g : m3x3.g, h : m3x3.h, i : m3x3.i};
	return tm;
};
geom_matrix_Conversion.Tmatrix3x3to3x3 = function(tm) {
	var m3x3 = tm;
	var this1 = m3x3;
	return this1;
};
geom_matrix_Conversion._3x3toTmatrix3x3numbered = function(m3x3) {
	var tm = { _00 : m3x3.a, _10 : m3x3.b, _20 : m3x3.c, _01 : m3x3.d, _11 : m3x3.e, _21 : m3x3.f, _02 : m3x3.g, _12 : m3x3.h, _22 : m3x3.i};
	return tm;
};
geom_matrix_Conversion.Tmatrix3x3numberedto3x3 = function(tm) {
	var this1 = new geom_structure_Mat3x3(tm._00,tm._10,tm._20,tm._01,tm._11,tm._21,tm._02,tm._12,tm._22);
	return this1;
};
geom_matrix_Conversion._m3x3toAlternate3x3numbered = function(m3x3) {
	var tm = { _00 : m3x3.a, _01 : m3x3.b, _02 : m3x3.c, _10 : m3x3.d, _11 : m3x3.e, _12 : m3x3.f, _20 : m3x3.g, _21 : m3x3.h, _22 : m3x3.i};
	return tm;
};
geom_matrix_Conversion.Alternate3x3numberedto3x3 = function(tm) {
	var this1 = new geom_structure_Mat3x3(tm._00,tm._01,tm._02,tm._10,tm._11,tm._12,tm._20,tm._21,tm._22);
	return this1;
};
geom_matrix_Conversion._3x3toFloat32ArrayTranspose_ = function(m3x3) {
	var this1 = new Float32Array(9);
	var arr = this1;
	arr[0] = m3x3.a;
	arr[1] = m3x3.d;
	arr[2] = m3x3.g;
	arr[3] = m3x3.b;
	arr[4] = m3x3.e;
	arr[5] = m3x3.h;
	arr[6] = m3x3.c;
	arr[7] = m3x3.f;
	arr[8] = m3x3.i;
	return arr;
};
geom_matrix_Conversion._3x3toFloat32Array_ = function(m3x3) {
	var this1 = new Float32Array(9);
	var arr = this1;
	arr[0] = m3x3.a;
	arr[1] = m3x3.b;
	arr[2] = m3x3.c;
	arr[3] = m3x3.d;
	arr[4] = m3x3.e;
	arr[5] = m3x3.f;
	arr[6] = m3x3.g;
	arr[7] = m3x3.h;
	arr[8] = m3x3.i;
	return arr;
};
geom_matrix_Conversion.Float32Array_to3x3Transpose = function(arr) {
	var this1 = new geom_structure_Mat3x3(arr[0],arr[3],arr[6],arr[1],arr[4],arr[7],arr[2],arr[5],arr[8]);
	return this1;
};
geom_matrix_Conversion.Float32Array_to3x3 = function(arr) {
	var this1 = new geom_structure_Mat3x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8]);
	return this1;
};
geom_matrix_Conversion._2x2to4x3 = function(m2) {
	var this1 = new geom_structure_Mat4x3(m2.a,m2.b,0.,0.,m2.c,m2.d,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Conversion._4x3to2x2 = function(m4x3) {
	var this1 = new geom_structure_Mat2x2(m4x3.a,m4x3.b,m4x3.e,m4x3.f);
	return this1;
};
geom_matrix_Conversion._3x3to4x3 = function(m3) {
	var this1 = new geom_structure_Mat4x3(m3.a,m3.b,m3.c,0.,m3.d,m3.e,m3.f,0.,m3.g,m3.h,m3.i,0.);
	return this1;
};
geom_matrix_Conversion._4x3to3x3 = function(m4x3) {
	var this1 = new geom_structure_Mat3x3(m4x3.a,m4x3.b,m4x3.c,m4x3.e,m4x3.f,m4x3.g,m4x3.i,m4x3.j,m4x3.k);
	return this1;
};
geom_matrix_Conversion.ArraytoMatrix4x3 = function(arr) {
	var this1 = new geom_structure_Mat4x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8],arr[9],arr[10],arr[11]);
	return this1;
};
geom_matrix_Conversion._4x3toArray = function(m4x3) {
	return [m4x3.a,m4x3.b,m4x3.c,m4x3.d,m4x3.e,m4x3.f,m4x3.g,m4x3.h,m4x3.i,m4x3.j,m4x3.k,m4x3.l];
};
geom_matrix_Conversion._4x3toVector = function(m4x3) {
	var this1 = new Array(12);
	var vec = this1;
	vec[0] = m4x3.a;
	vec[1] = m4x3.b;
	vec[2] = m4x3.c;
	vec[3] = m4x3.d;
	vec[4] = m4x3.e;
	vec[5] = m4x3.f;
	vec[6] = m4x3.g;
	vec[7] = m4x3.h;
	vec[8] = m4x3.i;
	vec[9] = m4x3.j;
	vec[10] = m4x3.k;
	vec[11] = m4x3.l;
	return vec;
};
geom_matrix_Conversion.Vectorto4x3 = function(v) {
	var this1 = new geom_structure_Mat4x3(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11]);
	return this1;
};
geom_matrix_Conversion._4x3toFloat32ArrayTranspose_ = function(m4x3) {
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = m4x3.a;
	arr[1] = m4x3.e;
	arr[2] = m4x3.i;
	arr[3] = 0.;
	arr[4] = m4x3.b;
	arr[5] = m4x3.f;
	arr[6] = m4x3.j;
	arr[7] = 0.;
	arr[8] = m4x3.c;
	arr[9] = m4x3.g;
	arr[10] = m4x3.k;
	arr[11] = 0.;
	arr[12] = m4x3.d;
	arr[13] = m4x3.h;
	arr[14] = m4x3.l;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Conversion._4x3toFloat32ArrayTransposeUpdate_ = function(arr,m4x3) {
	arr[0] = m4x3.a;
	arr[1] = m4x3.e;
	arr[2] = m4x3.i;
	arr[3] = 0.;
	arr[4] = m4x3.b;
	arr[5] = m4x3.f;
	arr[6] = m4x3.j;
	arr[7] = 0.;
	arr[8] = m4x3.c;
	arr[9] = m4x3.g;
	arr[10] = m4x3.k;
	arr[11] = 0.;
	arr[12] = m4x3.d;
	arr[13] = m4x3.h;
	arr[14] = m4x3.l;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Conversion._4x3toFloat32Array_ = function(m4x3) {
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = m4x3.a;
	arr[1] = m4x3.b;
	arr[2] = m4x3.c;
	arr[3] = m4x3.d;
	arr[4] = m4x3.e;
	arr[5] = m4x3.f;
	arr[6] = m4x3.g;
	arr[7] = m4x3.h;
	arr[8] = m4x3.i;
	arr[9] = m4x3.j;
	arr[10] = m4x3.k;
	arr[11] = m4x3.l;
	arr[12] = 0.;
	arr[13] = 0.;
	arr[14] = 0.;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Conversion._4x3toFloat32ArrayUpdate_ = function(arr,m4x3) {
	arr[0] = m4x3.a;
	arr[1] = m4x3.b;
	arr[2] = m4x3.c;
	arr[3] = m4x3.d;
	arr[4] = m4x3.e;
	arr[5] = m4x3.f;
	arr[6] = m4x3.g;
	arr[7] = m4x3.h;
	arr[8] = m4x3.i;
	arr[9] = m4x3.j;
	arr[10] = m4x3.k;
	arr[11] = m4x3.l;
	arr[12] = 0.;
	arr[13] = 0.;
	arr[14] = 0.;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Conversion.Float32Array_to4x3Transpose = function(arr) {
	var this1 = new geom_structure_Mat4x3(arr[0],arr[4],arr[8],arr[12],arr[1],arr[5],arr[9],arr[13],arr[2],arr[6],arr[10],arr[14]);
	return this1;
};
geom_matrix_Conversion.Float32Array_to4x3 = function(arr) {
	var this1 = new geom_structure_Mat4x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8],arr[9],arr[10],arr[11]);
	return this1;
};
geom_matrix_Conversion._4x3toTAffineMatrix = function(m4x3) {
	return { e0 : m4x3.a, e4 : m4x3.b, e8 : m4x3.c, e12 : m4x3.d, e1 : m4x3.e, e5 : m4x3.f, e9 : m4x3.g, e13 : m4x3.h, e2 : m4x3.i, e6 : m4x3.j, e10 : m4x3.k, e14 : m4x3.l};
};
geom_matrix_Conversion.Tmatrix4x4numberedto4x3 = function(m) {
	var this1 = new geom_structure_Mat4x3(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32);
	return this1;
};
geom_matrix_Conversion._4x3toTmatrix4x4numbered = function(m4x3) {
	return { _00 : m4x3.a, _10 : m4x3.b, _20 : m4x3.c, _30 : m4x3.d, _01 : m4x3.e, _11 : m4x3.f, _21 : m4x3.g, _31 : m4x3.h, _02 : m4x3.i, _12 : m4x3.j, _22 : m4x3.k, _32 : m4x3.l, _03 : 0., _13 : 0., _23 : 0., _33 : 1.};
};
geom_matrix_Conversion._4x3toTmatrix4x3 = function(m4x3) {
	var tm4x3 = { a : m4x3.a, b : m4x3.b, c : m4x3.c, d : m4x3.d, e : m4x3.e, f : m4x3.f, g : m4x3.g, h : m4x3.h, i : m4x3.i, j : m4x3.j, k : m4x3.k, l : m4x3.l};
	return tm4x3;
};
geom_matrix_Conversion.Tmatrix4x3to4x3 = function(tm) {
	var m4x3 = new geom_structure_Mat4x3(tm.a,tm.b,tm.c,tm.d,tm.e,tm.f,tm.g,tm.h,tm.i,tm.j,tm.k,tm.l);
	var this1 = m4x3;
	return this1;
};
geom_matrix_Conversion._4x4toFloat32ArrayTranspose_ = function(m4x4) {
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = m4x4.a;
	arr[1] = m4x4.e;
	arr[2] = m4x4.i;
	arr[3] = m4x4.m;
	arr[4] = m4x4.b;
	arr[5] = m4x4.f;
	arr[6] = m4x4.j;
	arr[7] = m4x4.n;
	arr[8] = m4x4.c;
	arr[9] = m4x4.g;
	arr[10] = m4x4.k;
	arr[11] = m4x4.o;
	arr[12] = m4x4.d;
	arr[13] = m4x4.h;
	arr[14] = m4x4.l;
	arr[15] = m4x4.p;
	return arr;
};
geom_matrix_Conversion._4x4toFloat32ArrayTransposeUpdate_ = function(arr,m4x4) {
	arr[0] = m4x4.a;
	arr[1] = m4x4.e;
	arr[2] = m4x4.i;
	arr[3] = m4x4.m;
	arr[4] = m4x4.b;
	arr[5] = m4x4.f;
	arr[6] = m4x4.j;
	arr[7] = m4x4.n;
	arr[8] = m4x4.c;
	arr[9] = m4x4.g;
	arr[10] = m4x4.k;
	arr[11] = m4x4.o;
	arr[12] = m4x4.d;
	arr[13] = m4x4.h;
	arr[14] = m4x4.l;
	arr[15] = m4x4.p;
	return arr;
};
geom_matrix_Conversion._4x4toFloat32Array_ = function(m4x4) {
	var this1 = new Float32Array(16);
	var arr = this1;
	arr[0] = m4x4.a;
	arr[1] = m4x4.b;
	arr[2] = m4x4.c;
	arr[3] = m4x4.d;
	arr[4] = m4x4.e;
	arr[5] = m4x4.f;
	arr[6] = m4x4.g;
	arr[7] = m4x4.h;
	arr[8] = m4x4.i;
	arr[9] = m4x4.j;
	arr[10] = m4x4.k;
	arr[11] = m4x4.l;
	arr[12] = m4x4.m;
	arr[13] = m4x4.n;
	arr[14] = m4x4.o;
	arr[15] = m4x4.p;
	return arr;
};
geom_matrix_Conversion._4x4toFloat32ArrayUpdate_ = function(arr,m4x4) {
	arr[0] = m4x4.a;
	arr[1] = m4x4.b;
	arr[2] = m4x4.c;
	arr[3] = m4x4.d;
	arr[4] = m4x4.e;
	arr[5] = m4x4.f;
	arr[6] = m4x4.g;
	arr[7] = m4x4.h;
	arr[8] = m4x4.i;
	arr[9] = m4x4.j;
	arr[10] = m4x4.k;
	arr[11] = m4x4.l;
	arr[12] = m4x4.m;
	arr[13] = m4x4.n;
	arr[14] = m4x4.o;
	arr[15] = m4x4.p;
	return arr;
};
geom_matrix_Conversion.Float32Array_to4x4Transpose = function(arr) {
	var this1 = new geom_structure_Mat4x4(arr[0],arr[4],arr[8],arr[12],arr[1],arr[5],arr[9],arr[13],arr[2],arr[6],arr[10],arr[14],arr[3],arr[7],arr[11],arr[15]);
	return this1;
};
geom_matrix_Conversion.Float32Array_to4x4 = function(arr) {
	var this1 = new geom_structure_Mat4x4(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8],arr[9],arr[10],arr[11],arr[12],arr[13],arr[14],arr[15]);
	return this1;
};
geom_matrix_Conversion._4x4toTmatrix4x4 = function(m4x4) {
	var tm = { a : m4x4.a, b : m4x4.b, c : m4x4.c, d : m4x4.d, e : m4x4.e, f : m4x4.f, g : m4x4.g, h : m4x4.h, i : m4x4.i, j : m4x4.j, k : m4x4.k, l : m4x4.l, m : m4x4.m, n : m4x4.n, o : m4x4.o, p : m4x4.p};
	return tm;
};
geom_matrix_Conversion.Tmatrix4x4to4x4 = function(tm) {
	var m4x4 = tm;
	var this1 = m4x4;
	return this1;
};
geom_matrix_Conversion._4x4toTmatrix4x4numbered = function(m4x4) {
	var tm = { _00 : m4x4.a, _10 : m4x4.b, _20 : m4x4.c, _30 : m4x4.d, _01 : m4x4.e, _11 : m4x4.f, _21 : m4x4.g, _31 : m4x4.h, _02 : m4x4.i, _12 : m4x4.j, _22 : m4x4.k, _32 : m4x4.l, _03 : m4x4.m, _13 : m4x4.n, _23 : m4x4.o, _33 : m4x4.p};
	return tm;
};
geom_matrix_Conversion.Tmatrix4x4numberedto4x4 = function(tm) {
	var this1 = new geom_structure_Mat4x4(tm._00,tm._10,tm._20,tm._30,tm._01,tm._11,tm._21,tm._31,tm._02,tm._12,tm._22,tm._32,tm._03,tm._13,tm._23,tm._33);
	return this1;
};
geom_matrix_Conversion._4x4toAlternate4x4numbered = function(m4x4) {
	var tm = { _00 : m4x4.a, _01 : m4x4.b, _02 : m4x4.c, _03 : m4x4.d, _10 : m4x4.e, _11 : m4x4.f, _12 : m4x4.g, _13 : m4x4.h, _20 : m4x4.i, _21 : m4x4.j, _22 : m4x4.k, _23 : m4x4.l, _30 : m4x4.m, _31 : m4x4.n, _32 : m4x4.o, _33 : m4x4.p};
	return tm;
};
geom_matrix_Conversion.Alternate4x4numberedto4x4 = function(tm) {
	var this1 = new geom_structure_Mat4x4(tm._00,tm._01,tm._02,tm._03,tm._10,tm._11,tm._12,tm._13,tm._20,tm._21,tm._22,tm._23,tm._30,tm._31,tm._32,tm._33);
	return this1;
};
var geom_matrix_DualQuaternion = {};
geom_matrix_DualQuaternion._new = function(dq) {
	var this1 = dq;
	return this1;
};
geom_matrix_DualQuaternion.get_zero = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
	var this2 = new geom_structure_Mat1x4(0.,0.,0.,1.);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix_DualQuaternion.clone = function(this1) {
	var this2 = this1.real;
	var this3 = new geom_structure_Mat1x4(this2.x,this2.y,this2.z,this2.w);
	var this2 = this1.dual;
	var this1 = new geom_structure_Mat1x4(this2.x,this2.y,this2.z,this2.w);
	var this2 = new geom_structure_DualQ(this3,this1);
	return this2;
};
geom_matrix_DualQuaternion.equal = function(a,b) {
	var a1 = a.real;
	var b1 = b.real;
	var delta = 0.0000001;
	if(!(Math.abs(a1.x - b1.x) >= delta || Math.abs(a1.y - b1.y) >= delta || Math.abs(a1.z - b1.z) >= delta || Math.abs(a1.w - b1.w) >= delta)) {
		var a1 = a.dual;
		var b1 = b.dual;
		var delta = 0.0000001;
		return !(Math.abs(a1.x - b1.x) >= delta || Math.abs(a1.y - b1.y) >= delta || Math.abs(a1.z - b1.z) >= delta || Math.abs(a1.w - b1.w) >= delta);
	} else {
		return false;
	}
};
geom_matrix_DualQuaternion.notEqual = function(a,b) {
	var tmp;
	var a1 = a.real;
	var b1 = b.real;
	var delta = 0.0000001;
	if(!(Math.abs(a1.x - b1.x) >= delta || Math.abs(a1.y - b1.y) >= delta || Math.abs(a1.z - b1.z) >= delta || Math.abs(a1.w - b1.w) >= delta)) {
		var a1 = a.dual;
		var b1 = b.dual;
		var delta = 0.0000001;
		tmp = !(Math.abs(a1.x - b1.x) >= delta || Math.abs(a1.y - b1.y) >= delta || Math.abs(a1.z - b1.z) >= delta || Math.abs(a1.w - b1.w) >= delta);
	} else {
		tmp = false;
	}
	return !tmp;
};
geom_matrix_DualQuaternion.scaleMultiply = function(a,v) {
	var a1 = a.real;
	var this1 = new geom_structure_Mat1x4(a1.x * v,a1.y * v,a1.z * v,a1.w * v);
	var a1 = a.dual;
	var this2 = new geom_structure_Mat1x4(a1.x * v,a1.y * v,a1.z * v,a1.w * v);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix_DualQuaternion.divide = function(a,v) {
	var v1 = 1 / v;
	var a1 = a.real;
	var this1 = new geom_structure_Mat1x4(a1.x * v1,a1.y * v1,a1.z * v1,a1.w * v1);
	var a1 = a.dual;
	var this2 = new geom_structure_Mat1x4(a1.x * v1,a1.y * v1,a1.z * v1,a1.w * v1);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix_DualQuaternion.add = function(a,b) {
	var a1 = a.real;
	var b1 = b.real;
	var this1 = new geom_structure_Mat1x4(a1.x + b1.x,a1.y + b1.y,a1.z + b1.z,a1.w + b1.w);
	var a1 = a.dual;
	var b1 = b.dual;
	var this2 = new geom_structure_Mat1x4(a1.x + b1.x,a1.y + b1.y,a1.z + b1.z,a1.w + b1.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix_DualQuaternion.subtract = function(a,b) {
	var a1 = a.real;
	var b1 = b.real;
	var this1 = new geom_structure_Mat1x4(a1.x - b1.x,a1.y - b1.y,a1.z - b1.z,a1.w - b1.w);
	var a1 = a.dual;
	var b1 = b.dual;
	var this2 = new geom_structure_Mat1x4(a1.x - b1.x,a1.y - b1.y,a1.z - b1.z,a1.w - b1.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix_DualQuaternion.negate = function(a) {
	var a1 = a.real;
	var this1 = new geom_structure_Mat1x4(-a1.x,-a1.y,-a1.z,-a1.w);
	var a1 = a.dual;
	var this2 = new geom_structure_Mat1x4(-a1.x,-a1.y,-a1.z,-a1.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix_DualQuaternion.create = function(r,t) {
	var currentLength = Math.sqrt(r.x * r.x + r.y * r.y + r.z * r.z + r.w * r.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		r.x *= mul;
		r.y *= mul;
		r.z *= mul;
		r.w *= mul;
		var real = r.x * r.x + r.y * r.y + r.z * r.z + r.w * r.w;
	}
	var real = r;
	var this1 = new geom_structure_Mat1x4(t.x,t.y,t.z,0.);
	var q = this1;
	var this1 = new geom_structure_Mat1x4(q.x * 0.5,q.y * 0.5,q.z * 0.5,q.w * 0.5);
	q = this1;
	var this1 = new geom_structure_Mat1x4(q.x * real.w + q.y * real.z - q.z * real.y + q.w * real.x,-q.x * real.z + q.y * real.w + q.z * real.x + q.w * real.y,q.x * real.y - q.y * real.x + q.z * real.w + q.w * real.z,-q.x * real.x - q.y * real.y - q.z * real.z + q.w * real.w);
	var dual = this1;
	var this1 = new geom_structure_DualQ(real,dual);
	return this1;
};
geom_matrix_DualQuaternion.applyScale = function(this1,s) {
	var this2 = this1.real;
	var this3 = new geom_structure_Mat1x4(this2.x,this2.y,this2.z,this2.w);
	var this2 = this1.dual;
	var this1 = new geom_structure_Mat1x4(this2.x,this2.y,this2.z,this2.w);
	var this2 = new geom_structure_DualQ(this3,this1);
	var cloned = this2;
	var this1 = new geom_structure_Mat1x4(0,0,0,Math.sqrt(s));
	var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	var this3 = new geom_structure_DualQ(this1,this2);
	var q2 = this3;
	var q1 = q2.real;
	var q21 = cloned.real;
	var this1 = new geom_structure_Mat1x4(q1.x * q21.w + q1.y * q21.z - q1.z * q21.y + q1.w * q21.x,-q1.x * q21.z + q1.y * q21.w + q1.z * q21.x + q1.w * q21.y,q1.x * q21.y - q1.y * q21.x + q1.z * q21.w + q1.w * q21.z,-q1.x * q21.x - q1.y * q21.y - q1.z * q21.z + q1.w * q21.w);
	var q1 = q2.dual;
	var q21 = cloned.real;
	var this2 = new geom_structure_Mat1x4(q1.x * q21.w + q1.y * q21.z - q1.z * q21.y + q1.w * q21.x,-q1.x * q21.z + q1.y * q21.w + q1.z * q21.x + q1.w * q21.y,q1.x * q21.y - q1.y * q21.x + q1.z * q21.w + q1.w * q21.z,-q1.x * q21.x - q1.y * q21.y - q1.z * q21.z + q1.w * q21.w);
	var a = this2;
	var q1 = q2.real;
	var q2 = cloned.dual;
	var this2 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
	var b = this2;
	var this2 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	cloned = this3;
	return cloned;
};
geom_matrix_DualQuaternion.scalar = function(s) {
	var this1 = new geom_structure_Mat1x4(0,0,0,Math.sqrt(s));
	var this2 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix_DualQuaternion.dotProduct = function(a,b) {
	var a1 = a.real;
	var b1 = b.real;
	return a1.x * b1.x + a1.y * b1.y + a1.z * b1.z + a1.w * b1.w;
};
geom_matrix_DualQuaternion.normalize = function(this1) {
	var a = this1.real;
	var b = this1.real;
	var mag = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	if(mag < 0) {
		return null;
	}
	var oneOver = 1 / mag;
	var a = this1.real;
	var this2 = new geom_structure_Mat1x4(a.x * oneOver,a.y * oneOver,a.z * oneOver,a.w * oneOver);
	var a = this1.dual;
	var this1 = new geom_structure_Mat1x4(a.x * oneOver,a.y * oneOver,a.z * oneOver,a.w * oneOver);
	var this3 = new geom_structure_DualQ(this2,this1);
	return this3;
};
geom_matrix_DualQuaternion.conjugate = function(a) {
	var a1 = a.real;
	var this1 = new geom_structure_Mat1x4(-a1.x,-a1.y,-a1.z,a1.w);
	var a1 = a.dual;
	var this2 = new geom_structure_Mat1x4(-a1.x,-a1.y,-a1.z,a1.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix_DualQuaternion.getTranslation = function(this1) {
	var a = this1.dual;
	var this2 = new geom_structure_Mat1x4(a.x * 2.,a.y * 2.,a.z * 2.,a.w * 2.);
	var q = this2;
	var a = this1.real;
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,a.w);
	var q2 = this1;
	var this1 = new geom_structure_Mat1x4(q.x * q2.w + q.y * q2.z - q.z * q2.y + q.w * q2.x,-q.x * q2.z + q.y * q2.w + q.z * q2.x + q.w * q2.y,q.x * q2.y - q.y * q2.x + q.z * q2.w + q.w * q2.z,-q.x * q2.x - q.y * q2.y - q.z * q2.z + q.w * q2.w);
	q = this1;
	var this1 = new geom_structure_Mat1x4(q.x,q.y,q.z,1.);
	return this1;
};
geom_matrix_DualQuaternion.multiplyQ = function(q1,q2) {
	var q11 = q2.real;
	var q21 = q1.real;
	var this1 = new geom_structure_Mat1x4(q11.x * q21.w + q11.y * q21.z - q11.z * q21.y + q11.w * q21.x,-q11.x * q21.z + q11.y * q21.w + q11.z * q21.x + q11.w * q21.y,q11.x * q21.y - q11.y * q21.x + q11.z * q21.w + q11.w * q21.z,-q11.x * q21.x - q11.y * q21.y - q11.z * q21.z + q11.w * q21.w);
	var q11 = q2.dual;
	var q21 = q1.real;
	var this2 = new geom_structure_Mat1x4(q11.x * q21.w + q11.y * q21.z - q11.z * q21.y + q11.w * q21.x,-q11.x * q21.z + q11.y * q21.w + q11.z * q21.x + q11.w * q21.y,q11.x * q21.y - q11.y * q21.x + q11.z * q21.w + q11.w * q21.z,-q11.x * q21.x - q11.y * q21.y - q11.z * q21.z + q11.w * q21.w);
	var a = this2;
	var q11 = q2.real;
	var q2 = q1.dual;
	var this2 = new geom_structure_Mat1x4(q11.x * q2.w + q11.y * q2.z - q11.z * q2.y + q11.w * q2.x,-q11.x * q2.z + q11.y * q2.w + q11.z * q2.x + q11.w * q2.y,q11.x * q2.y - q11.y * q2.x + q11.z * q2.w + q11.w * q2.z,-q11.x * q2.x - q11.y * q2.y - q11.z * q2.z + q11.w * q2.w);
	var b = this2;
	var this2 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	var this3 = new geom_structure_DualQ(this1,this2);
	return this3;
};
geom_matrix_DualQuaternion.toMatrix4x3 = function(this1) {
	var a = this1.real;
	var b = this1.real;
	var mag = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
	var q;
	if(mag < 0) {
		q = null;
	} else {
		var oneOver = 1 / mag;
		var a = this1.real;
		var this2 = new geom_structure_Mat1x4(a.x * oneOver,a.y * oneOver,a.z * oneOver,a.w * oneOver);
		var a = this1.dual;
		var this1 = new geom_structure_Mat1x4(a.x * oneOver,a.y * oneOver,a.z * oneOver,a.w * oneOver);
		var this3 = new geom_structure_DualQ(this2,this1);
		q = this3;
	}
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var m = this1;
	var w = q.real.w;
	var x = q.real.x;
	var y = q.real.y;
	var z = q.real.z;
	m.a = w * w + x * x - y * y - z * z;
	m.e = 2 * x * y + 2 * w * z;
	m.i = 2 * x * z - 2 * w * y;
	m.b = 2 * x * y - 2 * w * z;
	m.f = w * w + y * y - x * x - z * z;
	m.j = 2 * y * z + 2 * w * x;
	m.c = 2 * x * z + 2 * w * y;
	m.g = 2 * y * z - 2 * w * x;
	m.k = w * w + z * z - x * x - y * y;
	var a = q.dual;
	var this1 = new geom_structure_Mat1x4(a.x * 2.,a.y * 2.,a.z * 2.,a.w * 2.);
	var q1 = this1;
	var a = q.real;
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,a.w);
	var q2 = this1;
	var this1 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
	q1 = this1;
	var this1 = new geom_structure_Mat1x4(q1.x,q1.y,q1.z,1.);
	var t = this1;
	m.d = t.x;
	m.h = t.y;
	m.l = t.z;
	return m;
};
var geom_matrix_Matrix1x2 = {};
geom_matrix_Matrix1x2._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix_Matrix1x2.clone = function(this1) {
	var this2 = new geom_structure_Mat1x2(this1.x,this1.y);
	return this2;
};
geom_matrix_Matrix1x2.iterator = function(this1) {
	return new haxe_iterators_ArrayIterator([this1.x,this1.y]);
};
geom_matrix_Matrix1x2.get_self = function(this1) {
	return this1;
};
geom_matrix_Matrix1x2.get_magnitude = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
geom_matrix_Matrix1x2.set_magnitude = function(this1,length) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	if(currentLength == 0) {
		return 0;
	} else {
		var mul = length / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	}
};
geom_matrix_Matrix1x2.normalize = function(this1) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	if(currentLength != 0) {
		var mul = 1. / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		var tmp = this1.x * this1.x + this1.y * this1.y;
	}
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
geom_matrix_Matrix1x2.get_zero = function() {
	var this1 = new geom_structure_Mat1x2(0.,0.);
	return this1;
};
geom_matrix_Matrix1x2.get_nought = function(this1) {
	var this1 = new geom_structure_Mat1x2(0.,0.);
	return this1;
};
geom_matrix_Matrix1x2.get_unit = function() {
	var this1 = new geom_structure_Mat1x2(1.,1.);
	return this1;
};
geom_matrix_Matrix1x2.get_one = function(this1) {
	var this1 = new geom_structure_Mat1x2(1.,1.);
	return this1;
};
geom_matrix_Matrix1x2.get_minus1 = function() {
	var this1 = new geom_structure_Mat1x2(1.,1.);
	var a = this1;
	var this1 = new geom_structure_Mat1x2(-a.x,-a.y);
	return this1;
};
geom_matrix_Matrix1x2.get_counting = function() {
	var this1 = new geom_structure_Mat1x2(1.,2.);
	return this1;
};
geom_matrix_Matrix1x2.get_testCount = function(this1) {
	var this1 = new geom_structure_Mat1x2(1.,2.);
	return this1;
};
geom_matrix_Matrix1x2.negating = function(a) {
	var this1 = new geom_structure_Mat1x2(-a.x,-a.y);
	return this1;
};
geom_matrix_Matrix1x2.negate = function(this1) {
	var this2 = new geom_structure_Mat1x2(-this1.x,-this1.y);
	return this2;
};
geom_matrix_Matrix1x2.adding = function(a,b) {
	var this1 = new geom_structure_Mat1x2(a.x + b.x,a.y + b.y);
	return this1;
};
geom_matrix_Matrix1x2.add = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x + b.x,this1.y + b.y);
	return this2;
};
geom_matrix_Matrix1x2.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat1x2(a.x - b.x,a.y - b.y);
	return this1;
};
geom_matrix_Matrix1x2.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x - b.x,this1.y - b.y);
	return this2;
};
geom_matrix_Matrix1x2.isEqualling = function(a,b) {
	if(a.x == b.x) {
		return a.y == b.y;
	} else {
		return false;
	}
};
geom_matrix_Matrix1x2.isEqual = function(this1,b) {
	if(this1.x == b.x) {
		return this1.y == b.y;
	} else {
		return false;
	}
};
geom_matrix_Matrix1x2.scaleMultiplying = function(a,v) {
	var this1 = new geom_structure_Mat1x2(a.x * v,a.y * v);
	return this1;
};
geom_matrix_Matrix1x2.scaleMultiply = function(this1,v) {
	var this2 = new geom_structure_Mat1x2(this1.x * v,this1.y * v);
	return this2;
};
geom_matrix_Matrix1x2.lerpClampT = function(this1,p,t) {
	var interval = new geom_structure_Range(1.,0.);
	var t1 = t <= interval.l ? interval.l : t >= interval.u ? interval.u : t;
	var this2 = this1;
	var this1 = new geom_structure_Mat1x2(this2.x - p.x,this2.y - p.y);
	var s = this1;
	var this1 = new geom_structure_Mat1x2(-s.x,-s.y);
	var n = this1;
	var this1 = new geom_structure_Mat1x2(n.x * t1,n.y * t1);
	var tn = this1;
	var this1 = new geom_structure_Mat1x2(s.x + tn.x,s.y + tn.y);
	return this1;
};
geom_matrix_Matrix1x2.lerp = function(this1,p,t) {
	var this2 = this1;
	var this1 = new geom_structure_Mat1x2(this2.x - p.x,this2.y - p.y);
	var s = this1;
	var this1 = new geom_structure_Mat1x2(-s.x,-s.y);
	var n = this1;
	var this1 = new geom_structure_Mat1x2(n.x * t,n.y * t);
	var tn = this1;
	var this1 = new geom_structure_Mat1x2(s.x + tn.x,s.y + tn.y);
	return this1;
};
geom_matrix_Matrix1x2.sumXY = function(this1) {
	return this1.x + this1.y;
};
geom_matrix_Matrix1x2.topLeft = function() {
	var this1 = new geom_structure_Mat1x2(-1.,1.);
	return this1;
};
geom_matrix_Matrix1x2.topRight = function() {
	var this1 = new geom_structure_Mat1x2(1.,1.);
	return this1;
};
geom_matrix_Matrix1x2.bottomLeft = function() {
	var this1 = new geom_structure_Mat1x2(-1.,-1.);
	return this1;
};
geom_matrix_Matrix1x2.bottomRight = function() {
	var this1 = new geom_structure_Mat1x2(1.,-1.);
	return this1;
};
geom_matrix_Matrix1x2.north = function() {
	var this1 = new geom_structure_Mat1x2(0.,1.);
	return this1;
};
geom_matrix_Matrix1x2.south = function() {
	var this1 = new geom_structure_Mat1x2(0.,-1.);
	return this1;
};
geom_matrix_Matrix1x2.west = function() {
	var this1 = new geom_structure_Mat1x2(-1.,0.);
	return this1;
};
geom_matrix_Matrix1x2.east = function() {
	var this1 = new geom_structure_Mat1x2(1.,0.);
	return this1;
};
geom_matrix_Matrix1x2.dotting = function(a,b) {
	var this1 = new geom_structure_Mat1x2(a.x * b.x,a.y * b.y);
	return this1;
};
geom_matrix_Matrix1x2.dot = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x * b.x,this1.y * b.y);
	return this2;
};
geom_matrix_Matrix1x2.dividing = function(a,v) {
	var a1 = a;
	var v1 = 1 / v;
	var this1 = new geom_structure_Mat1x2(a1.x * v1,a1.y * v1);
	return this1;
};
geom_matrix_Matrix1x2.divide = function(this1,v) {
	var a = this1;
	var v1 = 1 / v;
	var this1 = new geom_structure_Mat1x2(a.x * v1,a.y * v1);
	return this1;
};
geom_matrix_Matrix1x2.notEqual = function(a,b) {
	return !(a.x == b.x && a.y == b.y);
};
geom_matrix_Matrix1x2.perp = function(this1,b) {
	return this1.x * b.y - this1.y * b.x;
};
geom_matrix_Matrix1x2.mid = function(a,b) {
	var this1 = new geom_structure_Mat1x2((a.x + b.x) / 2,(a.y + b.y) / 2);
	return this1;
};
geom_matrix_Matrix1x2.distanceBetweenSquare = function(this1,b) {
	var dx = this1.x - b.x;
	var dy = this1.y - b.y;
	return dx * dx + dy * dy;
};
geom_matrix_Matrix1x2.distanceBetweenSquare_ = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x - b.x,this1.y - b.y);
	var c = this2;
	return c.x * c.x + c.y * c.y;
};
geom_matrix_Matrix1x2.distanceBetween = function(this1,b) {
	var dx = this1.x - b.x;
	var dy = this1.y - b.y;
	return Math.pow(dx * dx + dy * dy,0.5);
};
geom_matrix_Matrix1x2.span = function(this1,b) {
	var this2 = new geom_structure_Mat1x2(this1.x - b.x,this1.y - b.y);
	return this2;
};
geom_matrix_Matrix1x2.lenSquare = function(this1) {
	return this1.x * this1.x + this1.y * this1.y;
};
geom_matrix_Matrix1x2.distance = function(this1) {
	return Math.pow(this1.x * this1.x + this1.y * this1.y,0.5);
};
geom_matrix_Matrix1x2.isLeft = function(this1,a,b) {
	return (b.x - a.x) * (this1.y - a.y) - (this1.x - a.x) * (b.y - a.y);
};
geom_matrix_Matrix1x2.triangleArea = function(a,b,c) {
	return Math.abs(((c.x - b.x) * (a.y - b.y) - (a.x - b.x) * (c.y - b.y)) / 2.);
};
geom_matrix_Matrix1x2.sign = function(n) {
	return Math.abs(n) / n | 0;
};
geom_matrix_Matrix1x2.thetaDifference = function(a,b) {
	var dx = a.x - b.x;
	var dy = a.y - b.y;
	return Math.atan2(dy,dx);
};
geom_matrix_Matrix1x2.inTri = function(this1,a,b,c) {
	var planeAB = (a.x - this1.x) * (b.y - this1.y) - (b.x - this1.x) * (a.y - this1.y);
	var planeBC = (b.x - this1.x) * (c.y - this1.y) - (c.x - this1.x) * (b.y - this1.y);
	var planeCA = (c.x - this1.x) * (a.y - this1.y) - (a.x - this1.x) * (c.y - this1.y);
	if((Math.abs(planeAB) / planeAB | 0) == (Math.abs(planeBC) / planeBC | 0)) {
		return (Math.abs(planeBC) / planeBC | 0) == (Math.abs(planeCA) / planeCA | 0);
	} else {
		return false;
	}
};
geom_matrix_Matrix1x2.inTri2 = function(this1,a,b,c) {
	var v0x = c.x - a.x;
	var v0y = c.y - a.y;
	var v1x = b.x - a.x;
	var v1y = b.y - a.y;
	var v2x = this1.x - a.x;
	var v2y = this1.y - a.y;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	if(u >= 0 && v >= 0) {
		return u + v < 1;
	} else {
		return false;
	}
};
geom_matrix_Matrix1x2.inRect = function(this1,b,c) {
	var small = 0.0000000001;
	var minx = Math.min(b.x,c.x);
	var maxx = Math.max(b.x,c.x);
	var miny = Math.min(b.y,c.y);
	var maxy = Math.max(b.y,c.y);
	if(minx == maxx) {
		if(miny <= this1.y) {
			return this1.y <= maxy;
		} else {
			return false;
		}
	} else if(miny == maxy) {
		if(minx <= this1.x) {
			return this1.x <= maxx;
		} else {
			return false;
		}
	} else if(minx <= this1.x + small && this1.x - small <= maxx && miny <= this1.y + small) {
		return this1.y - small <= maxy;
	} else {
		return false;
	}
};
geom_matrix_Matrix1x2.convex = function(a,b,c) {
	return (a.y - b.y) * (c.x - b.x) + (b.x - a.x) * (c.y - b.y) >= 0;
};
geom_matrix_Matrix1x2.cross = function(a,b) {
	return a.x * b.y - a.y * b.x;
};
geom_matrix_Matrix1x2.theta = function(this1) {
	return Math.atan2(this1.y,this1.x);
};
geom_matrix_Matrix1x2.close = function(this1,b,delta) {
	if(delta == null) {
		delta = 0.00001;
	}
	var dx = this1.x - b.x;
	if(dx < 0.00001 || dx > -1e-05) {
		var dy = this1.y - b.y;
		if(!(dy < 0.00001)) {
			return dy > -1e-05;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
geom_matrix_Matrix1x2.xClose = function(this1,b,delta) {
	if(delta == null) {
		delta = 0.00001;
	}
	var dx = this1.x - b.x;
	if(!(dx < delta)) {
		return dx > -delta;
	} else {
		return true;
	}
};
geom_matrix_Matrix1x2.yClose = function(this1,b,delta) {
	if(delta == null) {
		delta = 0.00001;
	}
	var dy = this1.y - b.y;
	if(!(dy < delta)) {
		return dy > -delta;
	} else {
		return true;
	}
};
geom_matrix_Matrix1x2.pivotAround = function(this1,omega,pivot) {
	var px = this1.x - pivot.x;
	var py = this1.y - pivot.y;
	var px2 = px * Math.cos(omega) - py * Math.sin(omega);
	py = py * Math.cos(omega) + px * Math.sin(omega);
	var this1 = new geom_structure_Mat1x2(px2 + pivot.x,py + pivot.y);
	return this1;
};
geom_matrix_Matrix1x2.toTpoint = function(this1) {
	return { x : this1.x, y : this1.y};
};
geom_matrix_Matrix1x2.toVec3 = function(this1) {
	var this2 = new Array(3);
	var vec = this2;
	vec[0] = this1.x;
	vec[1] = this1.y;
	vec[2] = 1.;
	return vec;
};
geom_matrix_Matrix1x2.fromVec3 = function(v) {
	var this1 = new geom_structure_Mat1x2(v[0],v[1]);
	return this1;
};
geom_matrix_Matrix1x2.fromArrayPos = function(arr,pos) {
	var this1 = new geom_structure_Mat1x2(arr[pos],arr[pos + 1]);
	return this1;
};
geom_matrix_Matrix1x2.toArrayPos = function(this1,arr,pos) {
	arr[pos] = this1.x;
	arr[pos + 1] = this1.y;
	return arr;
};
geom_matrix_Matrix1x2.readItem = function(this1,k) {
	switch(k) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	default:
		throw haxe_Exception.thrown("use index less than 2");
	}
};
geom_matrix_Matrix1x2.writeItem = function(this1,k,v) {
	switch(k) {
	case 0:
		this1.x = v;
		break;
	case 1:
		this1.y = v;
		break;
	default:
		throw haxe_Exception.thrown("use index less than 2");
	}
	return v;
};
var geom_matrix_Matrix1x3 = {};
geom_matrix_Matrix1x3._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix_Matrix1x3.clone = function(this1) {
	var this2 = new geom_structure_Mat1x3(this1.x,this1.y,this1.z);
	return this2;
};
geom_matrix_Matrix1x3.iterator = function(this1) {
	return new haxe_iterators_ArrayIterator([this1.x,this1.y,this1.z]);
};
geom_matrix_Matrix1x3.get_self = function(this1) {
	return this1;
};
geom_matrix_Matrix1x3.get_magnitude = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
};
geom_matrix_Matrix1x3.set_magnitude = function(this1,length) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
	if(currentLength == 0.) {
		return 0.;
	} else {
		var mul = length / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
	}
};
geom_matrix_Matrix1x3.normalize = function(this1) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		var tmp = this1.x * this1.x + this1.y * this1.y + this1.z * this1.z;
	}
	return this1;
};
geom_matrix_Matrix1x3.get_zero = function() {
	var this1 = new geom_structure_Mat1x3(0.,0.,0.);
	return this1;
};
geom_matrix_Matrix1x3.get_nought = function(this1) {
	var this1 = new geom_structure_Mat1x3(0.,0.,0.);
	return this1;
};
geom_matrix_Matrix1x3.get_unit = function() {
	var this1 = new geom_structure_Mat1x3(1.,1.,1.);
	return this1;
};
geom_matrix_Matrix1x3.get_one = function(this1) {
	var this1 = new geom_structure_Mat1x3(1.,1.,1.);
	return this1;
};
geom_matrix_Matrix1x3.get_minus1 = function() {
	var this1 = new geom_structure_Mat1x3(1.,1.,1.);
	var a = this1;
	var this1 = new geom_structure_Mat1x3(-a.x,-a.y,-a.z);
	return this1;
};
geom_matrix_Matrix1x3.get_counting = function() {
	var this1 = new geom_structure_Mat1x3(1.,2.,3.);
	return this1;
};
geom_matrix_Matrix1x3.get_testCount = function(this1) {
	var this1 = new geom_structure_Mat1x3(1.,2.,3.);
	return this1;
};
geom_matrix_Matrix1x3.identity = function(out) {
	out.x = 1.;
	out.y = 1.;
	out.z = 1.;
	return out;
};
geom_matrix_Matrix1x3.copy = function(pin,pout) {
	pout.x = pin.x;
	pout.y = pin.y;
	pout.z = pin.z;
	return pout;
};
geom_matrix_Matrix1x3.magnitudeSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z;
};
geom_matrix_Matrix1x3.scalarProduct = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z;
};
geom_matrix_Matrix1x3.dotProd = function(this1,b) {
	return this1.x * b.x + this1.y * b.y + this1.z * b.z;
};
geom_matrix_Matrix1x3.transformPoint = function(this1,t) {
	var this2 = new geom_structure_Mat1x3(t.a * this1.x + t.b * this1.y + t.c * this1.z + t.d,t.e * this1.x + t.f * this1.y + t.g * this1.z + t.h,t.i * this1.x + t.j * this1.y + t.k * this1.z + t.l);
	return this2;
};
geom_matrix_Matrix1x3.cross = function(this1,v) {
	var this2 = new geom_structure_Mat1x3(this1.y * v.z - this1.z * v.y,this1.z * v.x - this1.x * v.z,this1.x * v.y - this1.y * v.x);
	return this2;
};
geom_matrix_Matrix1x3.divide = function(a,v) {
	var v1 = 1 / v;
	var this1 = new geom_structure_Mat1x3(a.x * v1,a.y * v1,a.z * v1);
	return this1;
};
geom_matrix_Matrix1x3.divide2 = function(v,a) {
	var this1 = new geom_structure_Mat1x3(v / a.x,v / a.y,v / a.z);
	return this1;
};
geom_matrix_Matrix1x3.notEqual = function(a,b) {
	var delta = 0.0000001;
	return (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta);
};
geom_matrix_Matrix1x3.negating = function(a) {
	var this1 = new geom_structure_Mat1x3(-a.x,-a.y,-a.z);
	return this1;
};
geom_matrix_Matrix1x3.negate = function(this1) {
	var this2 = new geom_structure_Mat1x3(-this1.x,-this1.y,-this1.z);
	return this2;
};
geom_matrix_Matrix1x3.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat1x3(a.x - b.x,a.y - b.y,a.z - b.z);
	return this1;
};
geom_matrix_Matrix1x3.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat1x3(this1.x - b.x,this1.y - b.y,this1.z - b.z);
	return this2;
};
geom_matrix_Matrix1x3.adding = function(a,b) {
	var this1 = new geom_structure_Mat1x3(a.x + b.x,a.y + b.y,a.z + b.z);
	return this1;
};
geom_matrix_Matrix1x3.add = function(this1,b) {
	var this2 = new geom_structure_Mat1x3(this1.x + b.x,this1.y + b.y,this1.z + b.z);
	return this2;
};
geom_matrix_Matrix1x3.scaleMultiplying = function(a,v) {
	var this1 = new geom_structure_Mat1x3(a.x * v,a.y * v,a.z * v);
	return this1;
};
geom_matrix_Matrix1x3.scaleMultiply = function(this1,v) {
	var this2 = new geom_structure_Mat1x3(this1.x * v,this1.y * v,this1.z * v);
	return this2;
};
geom_matrix_Matrix1x3.isEqualling = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta);
};
geom_matrix_Matrix1x3.isEqual = function(this1,b) {
	var delta = 0.0000001;
	return !(Math.abs(this1.x - b.x) >= delta || Math.abs(this1.y - b.y) >= delta || Math.abs(this1.z - b.z) >= delta);
};
geom_matrix_Matrix1x3.fromVec = function(vec) {
	var this1 = new geom_structure_Mat1x3(vec[0],vec[1],vec[2]);
	return this1;
};
geom_matrix_Matrix1x3.staticFromVec = function(this1,vec) {
	var this1 = new geom_structure_Mat1x3(vec[0],vec[1],vec[2]);
	return this1;
};
geom_matrix_Matrix1x3.toVector = function(this1) {
	var this2 = new Array(3);
	var vec = this2;
	vec[0] = this1.x;
	vec[1] = this1.y;
	vec[2] = this1.z;
	return vec;
};
geom_matrix_Matrix1x3.fromArray = function(arr) {
	var this1 = new geom_structure_Mat1x3(arr[0],arr[1],arr[2]);
	return this1;
};
geom_matrix_Matrix1x3.staticFromArray = function(this1,arr) {
	var this1 = new geom_structure_Mat1x3(arr[0],arr[1],arr[2]);
	return this1;
};
geom_matrix_Matrix1x3.toArray = function(this1) {
	return [this1.x,this1.y,this1.z];
};
geom_matrix_Matrix1x3.readItem = function(this1,k) {
	switch(k) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	default:
		throw haxe_Exception.thrown("index needs to be below 4");
	}
};
geom_matrix_Matrix1x3.writeItem = function(this1,k,v) {
	switch(k) {
	case 0:
		this1.x = v;
		break;
	case 1:
		this1.y = v;
		break;
	case 3:
		this1.z = v;
		break;
	default:
		throw haxe_Exception.thrown("index needs to be below 4");
	}
	return v;
};
var geom_matrix_Matrix1x4 = {};
geom_matrix_Matrix1x4._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix_Matrix1x4.clone = function(this1) {
	var this2 = new geom_structure_Mat1x4(this1.x,this1.y,this1.z,this1.w);
	return this2;
};
geom_matrix_Matrix1x4.iterator = function(this1) {
	var arr = [this1.x,this1.y,this1.z,this1.w];
	return new haxe_iterators_ArrayIterator(arr);
};
geom_matrix_Matrix1x4.get_self = function(this1) {
	return this1;
};
geom_matrix_Matrix1x4.get_magnitude = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
};
geom_matrix_Matrix1x4.set_magnitude = function(this1,length) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	if(currentLength == 0.) {
		return 0.;
	} else {
		var mul = length / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		this1.w *= mul;
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	}
};
geom_matrix_Matrix1x4.normalize = function(this1) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		this1.w *= mul;
		var tmp = this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
	}
	return this1;
};
geom_matrix_Matrix1x4.get_zero = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix1x4.get_nought = function(this1) {
	var this1 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix1x4.get_unit = function() {
	var this1 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	return this1;
};
geom_matrix_Matrix1x4.get_one = function(this1) {
	var this1 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	return this1;
};
geom_matrix_Matrix1x4.get_minus1 = function() {
	var this1 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	var a = this1;
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,-a.w);
	return this1;
};
geom_matrix_Matrix1x4.get_counting = function() {
	var this1 = new geom_structure_Mat1x4(1.,2.,3.,4.);
	return this1;
};
geom_matrix_Matrix1x4.get_testCount = function(this1) {
	var this1 = new geom_structure_Mat1x4(1.,2.,3.,4.);
	return this1;
};
geom_matrix_Matrix1x4.negating = function(a) {
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,-a.w);
	return this1;
};
geom_matrix_Matrix1x4.negate = function(this1) {
	var this2 = new geom_structure_Mat1x4(-this1.x,-this1.y,-this1.z,-this1.w);
	return this2;
};
geom_matrix_Matrix1x4.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat1x4(a.x - b.x,a.y - b.y,a.z - b.z,a.w - b.w);
	return this1;
};
geom_matrix_Matrix1x4.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat1x4(this1.x - b.x,this1.y - b.y,this1.z - b.z,this1.w - b.w);
	return this2;
};
geom_matrix_Matrix1x4.adding = function(a,b) {
	var this1 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	return this1;
};
geom_matrix_Matrix1x4.add = function(this1,b) {
	var this2 = new geom_structure_Mat1x4(this1.x + b.x,this1.y + b.y,this1.z + b.z,this1.w + b.w);
	return this2;
};
geom_matrix_Matrix1x4.scaleMultiplying = function(a,v) {
	var this1 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	return this1;
};
geom_matrix_Matrix1x4.scaleMultiply = function(this1,v) {
	var this2 = new geom_structure_Mat1x4(this1.x * v,this1.y * v,this1.z * v,this1.w * v);
	return this2;
};
geom_matrix_Matrix1x4.isEqualling = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
};
geom_matrix_Matrix1x4.isEqual = function(this1,b) {
	var delta = 0.0000001;
	return !(Math.abs(this1.x - b.x) >= delta || Math.abs(this1.y - b.y) >= delta || Math.abs(this1.z - b.z) >= delta || Math.abs(this1.w - b.w) >= delta);
};
geom_matrix_Matrix1x4.identity = function(out) {
	out.x = 1.;
	out.y = 1.;
	out.z = 1.;
	out.w = 1.;
	return out;
};
geom_matrix_Matrix1x4.copy = function(pin,pout) {
	pout.x = pin.x;
	pout.y = pin.y;
	pout.z = pin.z;
	pout.w = pin.w;
	return pout;
};
geom_matrix_Matrix1x4.projectPoint = function(this1) {
	if(this1.z <= 0) {
		var this2 = new geom_structure_Mat1x4(0.,0.,this1.z,1.);
		return this2;
	} else {
		var this2 = new geom_structure_Mat1x4(this1.x / this1.z,this1.y / this1.z,this1.z,1.);
		return this2;
	}
};
geom_matrix_Matrix1x4.notEqual = function(a,b) {
	var delta = 0.0000001;
	return (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
};
geom_matrix_Matrix1x4.magnitudeSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
geom_matrix_Matrix1x4.scalarProduct = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
geom_matrix_Matrix1x4.dotProd = function(this1,b) {
	return this1.x * b.x + this1.y * b.y + this1.z * b.z + this1.w * b.w;
};
geom_matrix_Matrix1x4.rotateX = function(this1,theta) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
	var t = this2;
	var this2 = new geom_structure_Mat1x4(t.a * this1.x + t.b * this1.y + t.c * this1.z + t.d,t.e * this1.x + t.f * this1.y + t.g * this1.z + t.h,t.i * this1.x + t.j * this1.y + t.k * this1.z + t.l,1.);
	return this2;
};
geom_matrix_Matrix1x4.rotateY = function(this1,theta) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat4x3(c,0.,s,0.,0.,1.,0.,0.,-s,0.,c,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
	var t = this2;
	var this2 = new geom_structure_Mat1x4(t.a * this1.x + t.b * this1.y + t.c * this1.z + t.d,t.e * this1.x + t.f * this1.y + t.g * this1.z + t.h,t.i * this1.x + t.j * this1.y + t.k * this1.z + t.l,1.);
	return this2;
};
geom_matrix_Matrix1x4.rotateZ = function(this1,theta) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat4x3(c,-s,0.,0.,s,c,0.,0.,0.,0.,1.,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
	var t = this2;
	var this2 = new geom_structure_Mat1x4(t.a * this1.x + t.b * this1.y + t.c * this1.z + t.d,t.e * this1.x + t.f * this1.y + t.g * this1.z + t.h,t.i * this1.x + t.j * this1.y + t.k * this1.z + t.l,1.);
	return this2;
};
geom_matrix_Matrix1x4.translateXY = function(this1,x,y) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
	var t = this2;
	var this2 = new geom_structure_Mat1x4(t.a * this1.x + t.b * this1.y + t.c * this1.z + t.d,t.e * this1.x + t.f * this1.y + t.g * this1.z + t.h,t.i * this1.x + t.j * this1.y + t.k * this1.z + t.l,1.);
	return this2;
};
geom_matrix_Matrix1x4.translateXYZ = function(this1,x,y,z) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this3 = this2;
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,z);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this3.a * s.a + this3.b * s.e + this3.c * s.i,this3.a * s.b + this3.b * s.f + this3.c * s.j,this3.a * s.c + this3.b * s.g + this3.c * s.k,this3.a * s.d + this3.b * s.h + this3.c * s.l + this3.d,this3.e * s.a + this3.f * s.e + this3.g * s.i,this3.e * s.b + this3.f * s.f + this3.g * s.j,this3.e * s.c + this3.f * s.g + this3.g * s.k,this3.e * s.d + this3.f * s.h + this3.g * s.l + this3.h,this3.i * s.a + this3.j * s.e + this3.k * s.i,this3.i * s.b + this3.j * s.f + this3.k * s.j,this3.i * s.c + this3.j * s.g + this3.k * s.k,this3.i * s.d + this3.j * s.h + this3.k * s.l + this3.l);
	var t = this2;
	var this2 = new geom_structure_Mat1x4(t.a * this1.x + t.b * this1.y + t.c * this1.z + t.d,t.e * this1.x + t.f * this1.y + t.g * this1.z + t.h,t.i * this1.x + t.j * this1.y + t.k * this1.z + t.l,1.);
	return this2;
};
geom_matrix_Matrix1x4.transformPoint = function(this1,t) {
	var this2 = new geom_structure_Mat1x4(t.a * this1.x + t.b * this1.y + t.c * this1.z + t.d,t.e * this1.x + t.f * this1.y + t.g * this1.z + t.h,t.i * this1.x + t.j * this1.y + t.k * this1.z + t.l,1.);
	return this2;
};
geom_matrix_Matrix1x4.divide = function(a,v) {
	var v1 = 1 / v;
	var this1 = new geom_structure_Mat1x4(a.x * v1,a.y * v1,a.z * v1,a.w * v1);
	return this1;
};
geom_matrix_Matrix1x4.divide2 = function(v,a) {
	var this1 = new geom_structure_Mat1x4(v / a.x,v / a.y,v / a.z,v / a.w);
	return this1;
};
geom_matrix_Matrix1x4.conjugate = function(a) {
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,a.w);
	return this1;
};
geom_matrix_Matrix1x4.multiplyV = function(a,b,out) {
	var ax = a.x;
	var ay = a.y;
	var az = a.z;
	var aw = a.w;
	var bx = b.x;
	var by = b.y;
	var bz = b.z;
	var bw = b.w;
	out.x = ax * bw + aw * bx + ay * bz - az * by;
	out.y = ay * bw + aw * by + az * bx - ax * bz;
	out.z = az * bw + aw * bz + ax * by - ay * bx;
	out.w = aw * bw - ax * bx - ay * by - az * bz;
	return out;
};
geom_matrix_Matrix1x4.multiplyQ = function(q,v,out) {
	var vx = v.x;
	var vy = v.y;
	var vz = v.z;
	var qx = q.x;
	var qy = q.y;
	var qz = q.z;
	var qw = q.w;
	out.w = -qx * vx - qy * vy - qz * vz;
	out.x = qw * vx + qy * vz - qz * vy;
	out.y = qw * vy - qx * vz + qz * vx;
	out.z = qw * vz + qx * vy - qy * vx;
	return out;
};
geom_matrix_Matrix1x4.cross = function(this1,v) {
	var this2 = new geom_structure_Mat1x4(this1.y * v.z - this1.z * v.y,this1.z * v.x - this1.x * v.z,this1.x * v.y - this1.y * v.x,this1.w * v.w);
	return this2;
};
geom_matrix_Matrix1x4.constrainDistance = function(this1,anchor,distance) {
	var this2 = new geom_structure_Mat1x4(this1.x - anchor.x,this1.y - anchor.y,this1.z - anchor.z,this1.w - anchor.w);
	var this1 = this2;
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		this1.w *= mul;
		var tmp = this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
	}
	var a = this1;
	var this1 = new geom_structure_Mat1x4(a.x * distance,a.y * distance,a.z * distance,a.w * distance);
	var a = this1;
	var this1 = new geom_structure_Mat1x4(a.x + anchor.x,a.y + anchor.y,a.z + anchor.z,a.w + anchor.w);
	return this1;
};
geom_matrix_Matrix1x4.fromVec = function(vec) {
	var this1 = new geom_structure_Mat1x4(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix_Matrix1x4.toVector = function(this1) {
	var this2 = new Array(4);
	var vec = this2;
	vec[0] = this1.x;
	vec[1] = this1.y;
	vec[2] = this1.z;
	vec[3] = this1.w;
	return vec;
};
geom_matrix_Matrix1x4.fromArray = function(arr) {
	var this1 = new geom_structure_Mat1x4(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix_Matrix1x4.toArray = function(this1) {
	return [this1.x,this1.y,this1.z,this1.w];
};
geom_matrix_Matrix1x4.readItem = function(this1,k) {
	switch(k) {
	case 0:
		return this1.x;
	case 1:
		return this1.y;
	case 2:
		return this1.z;
	case 3:
		return this1.w;
	default:
		throw haxe_Exception.thrown("use index less than 4");
	}
};
geom_matrix_Matrix1x4.writeItem = function(this1,k,v) {
	switch(k) {
	case 0:
		this1.x = v;
		break;
	case 1:
		this1.y = v;
		break;
	case 3:
		this1.z = v;
		break;
	case 4:
		this1.w = v;
		break;
	default:
		throw haxe_Exception.thrown("use index less than 4");
	}
	return v;
};
var geom_matrix_Matrix2x2 = {};
geom_matrix_Matrix2x2._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix_Matrix2x2.clone = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.b,this1.c,this1.d);
	return this2;
};
geom_matrix_Matrix2x2.iterator = function(this1) {
	return new haxe_iterators_ArrayIterator([this1.a,this1.b,this1.c,this1.d]);
};
geom_matrix_Matrix2x2.get_self = function(this1) {
	return this1;
};
geom_matrix_Matrix2x2.get_zero = function() {
	var this1 = new geom_structure_Mat2x2(0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix2x2.get_nought = function(this1) {
	var this1 = new geom_structure_Mat2x2(0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix2x2.get_unit = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix2x2.get_one = function(this1) {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix2x2.get_minus1 = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,1.);
	var a = this1;
	var this1 = new geom_structure_Mat2x2(-a.a,-a.b,-a.c,-a.d);
	return this1;
};
geom_matrix_Matrix2x2.get_counting = function() {
	var this1 = new geom_structure_Mat2x2(1.,2.,3.,4.);
	return this1;
};
geom_matrix_Matrix2x2.get_testCount = function(this1) {
	var this1 = new geom_structure_Mat2x2(1.,2.,3.,4.);
	return this1;
};
geom_matrix_Matrix2x2.get__1234 = function() {
	var this1 = new geom_structure_Mat2x2(1.,2.,3.,4.);
	return this1;
};
geom_matrix_Matrix2x2.get_topLeft = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,-1.);
	return this1;
};
geom_matrix_Matrix2x2.get_topRight = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix2x2.get_bottomLeft = function() {
	var this1 = new geom_structure_Mat2x2(-1.,0.,0.,-1.);
	return this1;
};
geom_matrix_Matrix2x2.get_bottomRight = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,-1.);
	return this1;
};
geom_matrix_Matrix2x2.get_north = function() {
	var this1 = new geom_structure_Mat2x2(0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix2x2.get_south = function() {
	var this1 = new geom_structure_Mat2x2(0.,0.,0.,-1.);
	return this1;
};
geom_matrix_Matrix2x2.get_west = function() {
	var this1 = new geom_structure_Mat2x2(-1.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix2x2.get_east = function() {
	var this1 = new geom_structure_Mat2x2(1.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix2x2.create = function(this1,a,b,c,d) {
	var this2 = new geom_structure_Mat2x2(a,b,c,d);
	this1 = this2;
	return this1;
};
geom_matrix_Matrix2x2.scale = function(p) {
	var this1 = new geom_structure_Mat2x2(p.x,0.,0.,p.y);
	return this1;
};
geom_matrix_Matrix2x2.rotation = function(alpha) {
	var this1 = new geom_structure_Mat2x2(Math.cos(alpha),-Math.sin(alpha),Math.sin(alpha),Math.cos(alpha));
	return this1;
};
geom_matrix_Matrix2x2.transpose = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.c,this1.b,this1.d);
	return this2;
};
geom_matrix_Matrix2x2.negating = function(a) {
	var this1 = new geom_structure_Mat2x2(-a.a,-a.b,-a.c,-a.d);
	return this1;
};
geom_matrix_Matrix2x2.negate = function(this1) {
	var this2 = new geom_structure_Mat2x2(-this1.a,-this1.b,-this1.c,-this1.d);
	return this2;
};
geom_matrix_Matrix2x2.adding = function(a,b) {
	var this1 = new geom_structure_Mat2x2(a.a + b.a,a.b + b.b,a.c + b.c,a.d + b.d);
	return this1;
};
geom_matrix_Matrix2x2.add = function(this1,b) {
	var this2 = new geom_structure_Mat2x2(this1.a + b.a,this1.b + b.b,this1.c + b.c,this1.d + b.d);
	return this2;
};
geom_matrix_Matrix2x2.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
};
geom_matrix_Matrix2x2.notEqual = function(a,b) {
	var delta = 0.0000001;
	return (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta);
};
geom_matrix_Matrix2x2.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat2x2(a.a - b.a,a.b - b.b,a.c - b.c,a.d - b.d);
	return this1;
};
geom_matrix_Matrix2x2.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat2x2(this1.a - b.a,this1.b - b.b,this1.c - b.c,this1.d - b.d);
	return this2;
};
geom_matrix_Matrix2x2.multiplyValue = function(v,m) {
	var this1 = new geom_structure_Mat2x2(m.a * v,m.b * v,m.c * v,m.d * v);
	return this1;
};
geom_matrix_Matrix2x2.scaleByVector2 = function(this1,p) {
	var this2 = new geom_structure_Mat2x2(this1.a * p.x,this1.b,this1.c,this1.d * p.y);
	return this2;
};
geom_matrix_Matrix2x2.multiply = function(a2,b2) {
	var this1 = new geom_structure_Mat2x2(a2.a * b2.a + a2.b * b2.c,a2.a * b2.b + a2.b * b2.d,a2.c * b2.a + a2.d * b2.c,a2.c * b2.b + a2.d * b2.d);
	return this1;
};
geom_matrix_Matrix2x2.multiplyPoint = function(this1,p) {
	var x = this1.a * p.x + this1.c * p.y;
	var y = this1.b * p.x + this1.d * p.y;
	var this1 = new geom_structure_Mat1x2(x,y);
	return this1;
};
geom_matrix_Matrix2x2.det = function(this1) {
	return this1.a * this1.d - this1.b * this1.c;
};
geom_matrix_Matrix2x2.inverse = function(this1) {
	var d = this1.a * this1.d - this1.b * this1.c;
	if(d == 0) {
		return null;
	} else {
		var this2 = new geom_structure_Mat2x2(this1.d,-this1.b,-this1.c,this1.a);
		var adj = this2;
		var v = 1 / d;
		var this1 = new geom_structure_Mat2x2(adj.a * v,adj.b * v,adj.c * v,adj.d * v);
		return this1;
	}
};
geom_matrix_Matrix2x2.to3x3 = function(this1) {
	var this2 = new geom_structure_Mat3x3(this1.a,this1.b,0.,this1.c,this1.d,0.,0.,0,1.);
	return this2;
};
geom_matrix_Matrix2x2.to4x3 = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.a,this1.b,0.,0.,this1.c,this1.d,0.,0.,0.,0.,1.,0.);
	return this2;
};
geom_matrix_Matrix2x2.from3x3 = function(m3) {
	var this1 = new geom_structure_Mat2x2(m3.a,m3.b,m3.d,m3.e);
	return this1;
};
geom_matrix_Matrix2x2.from4x3 = function(m4) {
	var this1 = new geom_structure_Mat2x2(m4.a,m4.b,m4.e,m4.f);
	return this1;
};
geom_matrix_Matrix2x2.fromArr = function(arr) {
	var this1 = new geom_structure_Mat2x2(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix_Matrix2x2.toArray = function(this1) {
	return [this1.a,this1.b,this1.c,this1.d];
};
geom_matrix_Matrix2x2.fromVec = function(vec) {
	var this1 = new geom_structure_Mat2x2(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix_Matrix2x2.toVector = function(this1) {
	var this2 = new Array(4);
	var vec = this2;
	vec[0] = this1.a;
	vec[1] = this1.b;
	vec[2] = this1.c;
	vec[3] = this1.d;
	return vec;
};
geom_matrix_Matrix2x2.setXY = function(this1,x,y,v) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			this1.a = v;
			break;
		case 1:
			this1.c = v;
			break;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix2x2");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			this1.b = v;
			break;
		case 1:
			this1.d = v;
			break;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix2x2");
		}
		break;
	default:
		throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix2x2");
	}
	return this1;
};
geom_matrix_Matrix2x2.getXY = function(this1,x,y) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a;
		case 1:
			return this1.c;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix2x2");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.b;
		case 1:
			return this1.d;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix2x2");
		}
		break;
	default:
		throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix2x2");
	}
};
var geom_matrix_Matrix3x3 = {};
geom_matrix_Matrix3x3._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix_Matrix3x3.clone = function(this1) {
	var this2 = new geom_structure_Mat3x3(this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i);
	return this2;
};
geom_matrix_Matrix3x3.iterator = function(this1) {
	var arr = [this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i];
	return new haxe_iterators_ArrayIterator(arr);
};
geom_matrix_Matrix3x3.get_self = function(this1) {
	return this1;
};
geom_matrix_Matrix3x3.get_zero = function() {
	var this1 = new geom_structure_Mat3x3(0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix3x3.get_nought = function(this1) {
	var this1 = new geom_structure_Mat3x3(0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix3x3.get_unit = function() {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.get_one = function(this1) {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.get_minus1 = function() {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,1.);
	var a = this1;
	var this1 = new geom_structure_Mat3x3(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i);
	return this1;
};
geom_matrix_Matrix3x3.get_counting = function() {
	var this1 = new geom_structure_Mat3x3(1.,2.,3.,4.,5.,6.,7.,8.,9.);
	return this1;
};
geom_matrix_Matrix3x3.get_testCount = function(this1) {
	var this1 = new geom_structure_Mat3x3(1.,2.,3.,4.,5.,6.,7.,8.,9.);
	return this1;
};
geom_matrix_Matrix3x3.get__123456789 = function() {
	var this1 = new geom_structure_Mat3x3(1.,2.,3.,4.,5.,6.,7.,8.,9.);
	return this1;
};
geom_matrix_Matrix3x3.radianX = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,c,-s,0.,s,c);
	return this1;
};
geom_matrix_Matrix3x3.rotateX = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,0.,c,-s,0.,s,c);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.radianY = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat3x3(c,0.,s,0.,1.,0,-s,0.,c);
	return this1;
};
geom_matrix_Matrix3x3.rotateY = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat3x3(c,0.,s,0.,1.,0,-s,0.,c);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.radianZ = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat3x3(c,-s,0.,s,c,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.rotateZ = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat3x3(c,-s,0.,s,c,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.rotate = function(this1,theta) {
	var theta1 = -theta;
	var c = Math.cos(theta1);
	var s = Math.sin(theta1);
	var this2 = new geom_structure_Mat3x3(c,-s,0.,s,c,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.xShear = function(theta) {
	var this1 = new geom_structure_Mat3x3(1.,Math.tan(theta),0.,0,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.shearX = function(this1,theta) {
	var this2 = new geom_structure_Mat3x3(1.,Math.tan(theta),0.,0,1.,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.yShear = function(theta) {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,Math.tan(theta),1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.shearY = function(this1,theta) {
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,Math.tan(theta),1.,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.xFlip = function() {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0,-1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.flipX = function(this1) {
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,0,-1.,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.yFlip = function() {
	var this1 = new geom_structure_Mat3x3(-1.,0.,0.,0,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.flipY = function(this1) {
	var this2 = new geom_structure_Mat3x3(-1.,0.,0.,0,1.,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.xyFlip = function() {
	var this1 = new geom_structure_Mat3x3(-1.,0.,0.,0,-1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.flipXY = function(this1) {
	var this2 = new geom_structure_Mat3x3(-1.,0.,0.,0,-1.,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.sxyz = function(x,y,z) {
	var this1 = new geom_structure_Mat3x3(x,0.,0.,0.,y,0.,0.,0.,z);
	return this1;
};
geom_matrix_Matrix3x3.scaleXYZ = function(this1,x,y,z) {
	var this2 = new geom_structure_Mat3x3(x,0.,0.,0.,y,0.,0.,0.,z);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.sx = function(x) {
	var this1 = new geom_structure_Mat3x3(x,0.,0.,0.,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.scaleX = function(this1,x) {
	var this2 = new geom_structure_Mat3x3(x,0.,0.,0.,1.,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.sy = function(y) {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,y,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.scaleY = function(this1,y) {
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,0.,y,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.sz = function(z) {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,z);
	return this1;
};
geom_matrix_Matrix3x3.scaleZ = function(this1,z) {
	var this2 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,0.,0.,0.,z);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.scale = function(this1,s) {
	var this2 = new geom_structure_Mat3x3(s,0.,0.,0.,s,0.,0.,0.,s);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.scale2D = function(this1,s) {
	var this2 = new geom_structure_Mat3x3(s,0.,0.,0.,s,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.tx = function(x) {
	var this1 = new geom_structure_Mat3x3(1.,0.,x,0.,1.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.translateX = function(this1,x) {
	var this2 = new geom_structure_Mat3x3(1.,0.,x,0.,1.,0.,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.ty = function(y) {
	var this1 = new geom_structure_Mat3x3(1.,0.,0.,0.,1.,y,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.txy = function(x,y) {
	var this1 = new geom_structure_Mat3x3(1.,0.,x,0.,1.,y,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix3x3.translateXY = function(this1,x,y) {
	var this2 = new geom_structure_Mat3x3(1.,0.,x,0.,1.,y,0.,0.,1.);
	var q = this2;
	var this2 = new geom_structure_Mat3x3(this1.a * q.a + this1.b * q.d + this1.c * q.g,this1.a * q.b + this1.b * q.e + this1.c * q.h,this1.a * q.c + this1.b * q.f + this1.c * q.i,this1.d * q.a + this1.e * this1.d + this1.f * q.g,this1.d * q.b + this1.e * q.e + this1.f * q.h,this1.d * q.c + this1.e * q.f + this1.f * q.i,this1.g * this1.a + this1.h * q.d + this1.i * q.g,this1.g * q.b + this1.h * q.e + this1.i * q.h,this1.g * q.c + this1.h * q.f + this1.i * q.i);
	return this2;
};
geom_matrix_Matrix3x3.transpose = function(this1) {
	var this2 = new geom_structure_Mat3x3(this1.a,this1.d,this1.g,this1.b,this1.e,this1.h,this1.c,this1.f,this1.i);
	return this2;
};
geom_matrix_Matrix3x3.negating = function(a) {
	var this1 = new geom_structure_Mat3x3(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i);
	return this1;
};
geom_matrix_Matrix3x3.negate = function(this1) {
	var this2 = new geom_structure_Mat3x3(-this1.a,-this1.b,-this1.c,-this1.d,-this1.e,-this1.f,-this1.g,-this1.h,-this1.i);
	return this2;
};
geom_matrix_Matrix3x3.adding = function(a,b) {
	var this1 = new geom_structure_Mat3x3(a.a + b.a,a.b + b.b,a.c + b.c,a.d + b.d,a.e + b.e,a.f + b.f,a.d + b.d,a.h + b.h,a.i + b.i);
	return this1;
};
geom_matrix_Matrix3x3.add = function(this1,b) {
	var this2 = new geom_structure_Mat3x3(this1.a + b.a,this1.b + b.b,this1.c + b.c,this1.d + b.d,this1.e + b.e,this1.f + b.f,this1.d + b.d,this1.h + b.h,this1.i + b.i);
	return this2;
};
geom_matrix_Matrix3x3.subtracting = function(a,b) {
	var this1 = new geom_structure_Mat3x3(a.a - b.a,a.b - b.b,a.c - b.c,a.d - b.d,a.e - b.e,a.f - b.f,a.g - b.g,a.h - b.h,a.i - b.i);
	return this1;
};
geom_matrix_Matrix3x3.subtract = function(this1,b) {
	var this2 = new geom_structure_Mat3x3(this1.a - b.a,this1.b - b.b,this1.c - b.c,this1.d - b.d,this1.e - b.e,this1.f - b.f,this1.g - b.g,this1.h - b.h,this1.i - b.i);
	return this2;
};
geom_matrix_Matrix3x3.scaleVector4 = function(this1,p) {
	var this2 = new geom_structure_Mat3x3(this1.a * p.x,this1.b,this1.c,this1.d,this1.e * p.y,this1.f,this1.g,this1.h,this1.i * p.z);
	return this2;
};
geom_matrix_Matrix3x3.scaleVector2 = function(this1,p) {
	var this2 = new geom_structure_Mat3x3(this1.a * p.x,this1.b,this1.c,this1.d,this1.e * p.y,this1.f,this1.g,this1.h,this1.i);
	return this2;
};
geom_matrix_Matrix3x3.scaleVectorT3 = function(this1,p) {
	var this2 = new geom_structure_Mat3x3(this1.a * p.x,this1.b,this1.c,this1.d,this1.e * p.y,this1.f,this1.g,this1.h,this1.i * p.y);
	return this2;
};
geom_matrix_Matrix3x3.multiplyV = function(v,m) {
	var this1 = new geom_structure_Mat3x3(m.a * v,m.b * v,m.c * v,m.d * v,m.e * v,m.f * v,m.g * v,m.h * v,m.i * v);
	return this1;
};
geom_matrix_Matrix3x3.multiply = function(p,q) {
	var this1 = new geom_structure_Mat3x3(p.a * q.a + p.b * q.d + p.c * q.g,p.a * q.b + p.b * q.e + p.c * q.h,p.a * q.c + p.b * q.f + p.c * q.i,p.d * q.a + p.e * p.d + p.f * q.g,p.d * q.b + p.e * q.e + p.f * q.h,p.d * q.c + p.e * q.f + p.f * q.i,p.g * p.a + p.h * q.d + p.i * q.g,p.g * q.b + p.h * q.e + p.i * q.h,p.g * q.c + p.h * q.f + p.i * q.i);
	return this1;
};
geom_matrix_Matrix3x3.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta);
};
geom_matrix_Matrix3x3.isEqual = function(this1,b) {
	var delta = 0.0000001;
	return !(Math.abs(this1.a - b.a) >= delta || Math.abs(this1.b - b.b) >= delta || Math.abs(this1.c - b.c) >= delta || Math.abs(this1.d - b.d) >= delta || Math.abs(this1.e - b.e) >= delta || Math.abs(this1.f - b.f) >= delta || Math.abs(this1.g - b.g) >= delta || Math.abs(this1.h - b.h) >= delta || Math.abs(this1.i - b.i) >= delta);
};
geom_matrix_Matrix3x3.notEqual = function(a,b) {
	var delta = 0.0000001;
	return (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta);
};
geom_matrix_Matrix3x3.cofactor = function(this1,a,b,c,d) {
	return a * d - b * c;
};
geom_matrix_Matrix3x3.det = function(this1) {
	return this1.a * (this1.e * this1.i - this1.f * this1.h) - this1.b * (this1.d * this1.i - this1.f * this1.g) + this1.c * (this1.d * this1.h - this1.e * this1.g);
};
geom_matrix_Matrix3x3.inverse = function(this1) {
	var d = this1.a * (this1.e * this1.i - this1.f * this1.h) - this1.b * (this1.d * this1.i - this1.f * this1.g) + this1.c * (this1.d * this1.h - this1.e * this1.g);
	if(d == 0) {
		return null;
	} else {
		var this2 = new geom_structure_Mat3x3(this1.e * this1.i - this1.f * this1.h,-(this1.d * this1.i - this1.f * this1.g),this1.d * this1.h - this1.e * this1.g,-(this1.b * this1.i - this1.c * this1.h),this1.a * this1.i - this1.c * this1.g,-(this1.a * this1.h - this1.b * this1.g),this1.b * this1.f - this1.c * this1.e,-(this1.a * this1.f - this1.c * this1.d),this1.a * this1.e - this1.b * this1.d);
		var adj = this2;
		var v = 1 / d;
		var this1 = new geom_structure_Mat3x3(adj.a * v,adj.b * v,adj.c * v,adj.d * v,adj.e * v,adj.f * v,adj.g * v,adj.h * v,adj.i * v);
		return this1;
	}
};
geom_matrix_Matrix3x3.fromArr = function(arr) {
	var this1 = new geom_structure_Mat3x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8]);
	return this1;
};
geom_matrix_Matrix3x3.toArray = function(this1) {
	return [this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i];
};
geom_matrix_Matrix3x3.to2x2 = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.b,this1.d,this1.e);
	return this2;
};
geom_matrix_Matrix3x3.to3D = function(m2) {
	var this1 = new geom_structure_Mat3x3(m2.a,m2.b,0.,m2.c,m2.d,0.,0.,0,0.);
	return this1;
};
geom_matrix_Matrix3x3.from2x2 = function(m2) {
	var this1 = new geom_structure_Mat3x3(m2.a,m2.b,0.,m2.c,m2.d,0.,0.,0,1.);
	return this1;
};
geom_matrix_Matrix3x3.to4x3 = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.b,this1.d,this1.e);
	var this1 = this2;
	var this2 = new geom_structure_Mat4x3(this1.a,this1.b,0.,0.,this1.c,this1.d,0.,0.,0.,0.,1.,0.);
	return this2;
};
geom_matrix_Matrix3x3.from4x3 = function(m4) {
	var this1 = new geom_structure_Mat3x3(m4.a,m4.b,m4.c,m4.e,m4.f,m4.g,m4.i,m4.j,m4.k);
	var m3 = this1;
	var this1 = new geom_structure_Mat4x3(m3.a,m3.b,m3.c,0.,m3.d,m3.e,m3.f,0.,m3.g,m3.h,m3.i,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat3x3(this2.a,this2.b,this2.c,this2.e,this2.f,this2.g,this2.i,this2.j,this2.k);
	return this1;
};
geom_matrix_Matrix3x3.fromVec = function(vec) {
	var this1 = new geom_structure_Mat3x3(vec[0],vec[1],vec[2],vec[3],vec[4],vec[5],vec[6],vec[7],vec[8]);
	return this1;
};
geom_matrix_Matrix3x3.toVector = function(this1) {
	var this2 = new Array(8);
	var v = this2;
	v[0] = this1.a;
	v[1] = this1.b;
	v[2] = this1.c;
	v[3] = this1.d;
	v[4] = this1.e;
	v[5] = this1.f;
	v[6] = this1.g;
	v[7] = this1.h;
	v[8] = this1.i;
	return v;
};
geom_matrix_Matrix3x3.setXY = function(this1,x,y,v) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a = v;
		case 1:
			return this1.b = v;
		case 2:
			return this1.c = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix3x3");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.d = v;
		case 1:
			return this1.e = v;
		case 2:
			return this1.f = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix3x3");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.g = v;
		case 1:
			return this1.h = v;
		case 2:
			return this1.i = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix3x3");
		}
		break;
	default:
		throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix3x3");
	}
};
geom_matrix_Matrix3x3.getXY = function(this1,x,y) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a;
		case 1:
			return this1.b;
		case 2:
			return this1.c;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix3x3");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.d;
		case 1:
			return this1.e;
		case 2:
			return this1.f;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix3x3");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.g;
		case 1:
			return this1.h;
		case 2:
			return this1.i;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix3x3");
		}
		break;
	default:
		throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix3x3");
	}
};
var geom_matrix_Matrix4x3 = {};
geom_matrix_Matrix4x3._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix_Matrix4x3.clone = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l);
	return this2;
};
geom_matrix_Matrix4x3.iterator = function(this1) {
	var arr = [this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l];
	return new haxe_iterators_ArrayIterator(arr);
};
geom_matrix_Matrix4x3.get_self = function(this1) {
	return this1;
};
geom_matrix_Matrix4x3.get_zero = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_nought = function(this1) {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_unit = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_one = function(this1) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_minus1 = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var a = this1;
	var this1 = new geom_structure_Mat4x3(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i,-a.j,-a.k,-a.l);
	return this1;
};
geom_matrix_Matrix4x3.get_counting = function() {
	var this1 = new geom_structure_Mat4x3(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.);
	return this1;
};
geom_matrix_Matrix4x3.get_testCount = function(this1) {
	var this1 = new geom_structure_Mat4x3(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.);
	return this1;
};
geom_matrix_Matrix4x3.get_topLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_topRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_bottomLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_bottomRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_north = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_south = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_west = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_east = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_front = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_frontNorth = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_frontTopLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_frontTopRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_frontBottomLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_frontBottomRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_frontSouth = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_frontWest = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_frontEast = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_back = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_backTopLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_backTopRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_backBottomLeft = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_backBottomRight = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_backNorth = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_backSouth = function() {
	var this1 = new geom_structure_Mat4x3(0.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_backWest = function() {
	var this1 = new geom_structure_Mat4x3(-1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.get_backEast = function() {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.radianX = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	return this1;
};
geom_matrix_Matrix4x3.rotateX = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.rotationX = function(theta) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.radianY = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat4x3(c,0.,s,0.,0.,1.,0.,0.,-s,0.,c,0.);
	return this1;
};
geom_matrix_Matrix4x3.rotateY = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat4x3(c,0.,s,0.,0.,1.,0.,0.,-s,0.,c,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.rotationY = function(theta) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat4x3(c,0.,s,0.,0.,1.,0.,0.,-s,0.,c,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.radianZ = function(theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat4x3(c,-s,0.,0.,s,c,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.rotateZ = function(this1,theta) {
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this2 = new geom_structure_Mat4x3(c,-s,0.,0.,s,c,0.,0.,0.,0.,1.,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.rotationZ = function(theta) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var this1 = new geom_structure_Mat4x3(c,-s,0.,0.,s,c,0.,0.,0.,0.,1.,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.sxy = function(x,y) {
	var this1 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,1,0.);
	return this1;
};
geom_matrix_Matrix4x3.scaleXY = function(this1,x,y) {
	var this2 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,1,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.scalarXY = function(x,y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,1,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.sxyz = function(x,y,z) {
	var this1 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,z,0.);
	return this1;
};
geom_matrix_Matrix4x3.scaleXYZ = function(this1,x,y,z) {
	var this2 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,z,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.scalarXYZ = function(x,y,z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,y,0.,0.,0.,0.,z,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.sx = function(x) {
	var this1 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.scaleX = function(this1,x) {
	var this2 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.scalarX = function(x) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(x,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.sy = function(y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,y,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.scaleY = function(this1,y) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,y,0.,0.,0.,0.,1.,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.scalarY = function(y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,y,0.,0.,0.,0.,1.,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.sz = function(z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,z,0.);
	return this1;
};
geom_matrix_Matrix4x3.scaleZ = function(this1,z) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,z,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.scalarZ = function(z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,z,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.scale = function(this1,s) {
	var this2 = new geom_structure_Mat4x3(s,0.,0.,0.,0.,s,0.,0.,0.,0.,s,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.scalar = function(s) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(s,0.,0.,0.,0.,s,0.,0.,0.,0.,s,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.txyz = function(x,y,z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,z);
	return this1;
};
geom_matrix_Matrix4x3.translateXYZ = function(this1,x,y,z) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,z);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.translationXYZ = function(x,y,z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,z);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.tx = function(x) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.translateX = function(this1,x) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,0.,0.,0.,1.,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.translationX = function(x) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,0.,0.,0.,1.,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.ty = function(y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,y,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.translateY = function(this1,y) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,y,0.,0.,1.,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.translationY = function(y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,y,0.,0.,1.,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.tz = function(z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z);
	return this1;
};
geom_matrix_Matrix4x3.translateZ = function(this1,z) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.translationZ = function(z) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,z);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.txy = function(x,y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.translateXY = function(this1,x,y) {
	var this2 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.translationXY = function(x,y) {
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(1.,0.,0.,x,0.,1.,0.,y,0.,0.,1.,0.);
	var s = this1;
	var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
	return this1;
};
geom_matrix_Matrix4x3.reflection = function(a,b,c) {
	var this1 = new geom_structure_Mat4x3(-a * a + b * b + c * c,-2. * a * b,-2. * a * c,0.,-2. * b * a,-b * b + a * a + c * c,-2. * b * c,0.,-2. * c * a,-2. * c * b,-c * c + b * b + a * a,0.);
	return this1;
};
geom_matrix_Matrix4x3.reflectionX = function() {
	var this1 = new geom_structure_Mat4x3(1,2.,2.,0.,2.,1,-2.,0.,2.,-2.,1,0.);
	return this1;
};
geom_matrix_Matrix4x3.reflectionY = function() {
	var this1 = new geom_structure_Mat4x3(1,2.,-2.,0.,2.,1,2.,0.,-2.,2.,1,0.);
	return this1;
};
geom_matrix_Matrix4x3.reflectionZ = function() {
	var this1 = new geom_structure_Mat4x3(1,-2.,2.,0.,-2.,1,2.,0.,2.,2.,1,0.);
	return this1;
};
geom_matrix_Matrix4x3.reflectX = function(this1) {
	var this2 = new geom_structure_Mat4x3(1,2.,2.,0.,2.,1,-2.,0.,2.,-2.,1,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.reflectY = function(this1) {
	var this2 = new geom_structure_Mat4x3(1,2.,-2.,0.,2.,1,2.,0.,-2.,2.,1,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.reflectZ = function(this1) {
	var this2 = new geom_structure_Mat4x3(1,-2.,2.,0.,-2.,1,2.,0.,2.,2.,1,0.);
	var s = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * s.a + this1.b * s.e + this1.c * s.i,this1.a * s.b + this1.b * s.f + this1.c * s.j,this1.a * s.c + this1.b * s.g + this1.c * s.k,this1.a * s.d + this1.b * s.h + this1.c * s.l + this1.d,this1.e * s.a + this1.f * s.e + this1.g * s.i,this1.e * s.b + this1.f * s.f + this1.g * s.j,this1.e * s.c + this1.f * s.g + this1.g * s.k,this1.e * s.d + this1.f * s.h + this1.g * s.l + this1.h,this1.i * s.a + this1.j * s.e + this1.k * s.i,this1.i * s.b + this1.j * s.f + this1.k * s.j,this1.i * s.c + this1.j * s.g + this1.k * s.k,this1.i * s.d + this1.j * s.h + this1.k * s.l + this1.l);
	return this2;
};
geom_matrix_Matrix4x3.reflectionNonOrigin = function(this1,a,b,c,d) {
	var this1 = new geom_structure_Mat4x3(1. - 2. * a * a,-2. * b * c,-2. * a * c,-2. * a * d,-2. * b * c,1. - 2. * b * b,-2. * b * c,-2. * b * d,-2. * a * c,2. * b * c,1. - 2. * c * c,-2 * c * d);
	return this1;
};
geom_matrix_Matrix4x3.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
};
geom_matrix_Matrix4x3.notEqual = function(a,b) {
	var delta = 0.0000001;
	return (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta);
};
geom_matrix_Matrix4x3.negating = function(a) {
	var this1 = new geom_structure_Mat4x3(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i,-a.j,-a.k,-a.l);
	return this1;
};
geom_matrix_Matrix4x3.negate = function(this1) {
	var this2 = new geom_structure_Mat4x3(-this1.a,-this1.b,-this1.c,-this1.d,-this1.e,-this1.f,-this1.g,-this1.h,-this1.i,-this1.j,-this1.k,-this1.l);
	return this2;
};
geom_matrix_Matrix4x3.add = function(m0,m1) {
	var this1 = new geom_structure_Mat4x3(m0.a + m1.a,m0.b + m1.b,m0.c + m1.c,m0.d + m1.d,m0.e + m1.e,m0.f + m1.f,m0.g + m1.g,m0.h + m1.h,m0.i + m1.i,m0.j + m1.j,m0.k + m1.k,m0.l + m1.l);
	return this1;
};
geom_matrix_Matrix4x3.sub = function(m0,m1) {
	var this1 = new geom_structure_Mat4x3(m0.a - m1.a,m0.b - m1.b,m0.c - m1.c,m0.d - m1.d,m0.e - m1.e,m0.f - m1.f,m0.g - m1.g,m0.h - m1.h,m0.i - m1.i,m0.j - m1.j,m0.k - m1.k,m0.l - m1.l);
	return this1;
};
geom_matrix_Matrix4x3.scaleDownByVector = function(this1,p) {
	var this2 = new geom_structure_Mat1x4(1 / p.x,1 / p.y,1 / p.z,1 / p.w);
	var pd = this2;
	var this2 = new geom_structure_Mat4x3(this1.a * pd.x,this1.b,this1.c,this1.d,this1.e,this1.f * pd.y,this1.g,this1.h,this1.i,this1.j,this1.k * pd.z,this1.l);
	return this2;
};
geom_matrix_Matrix4x3.scaleByVector = function(this1,p) {
	var this2 = new geom_structure_Mat4x3(this1.a * p.x,this1.b,this1.c,this1.d,this1.e,this1.f * p.y,this1.g,this1.h,this1.i,this1.j,this1.k * p.z,this1.l);
	return this2;
};
geom_matrix_Matrix4x3.multiply = function(r,s) {
	var this1 = new geom_structure_Mat4x3(r.a * s.a + r.b * s.e + r.c * s.i,r.a * s.b + r.b * s.f + r.c * s.j,r.a * s.c + r.b * s.g + r.c * s.k,r.a * s.d + r.b * s.h + r.c * s.l + r.d,r.e * s.a + r.f * s.e + r.g * s.i,r.e * s.b + r.f * s.f + r.g * s.j,r.e * s.c + r.f * s.g + r.g * s.k,r.e * s.d + r.f * s.h + r.g * s.l + r.h,r.i * s.a + r.j * s.e + r.k * s.i,r.i * s.b + r.j * s.f + r.k * s.j,r.i * s.c + r.j * s.g + r.k * s.k,r.i * s.d + r.j * s.h + r.k * s.l + r.l);
	return this1;
};
geom_matrix_Matrix4x3.cofactor = function(this1,a,b,c,d,e,f,g,h,i) {
	return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g);
};
geom_matrix_Matrix4x3.det = function(this1) {
	var m = 0.;
	var n = 0.;
	var o = 0.;
	var p = 1.;
	var d = this1.j;
	var e = this1.k;
	var f = this1.l;
	var d1 = this1.i;
	var e1 = this1.k;
	var f1 = this1.l;
	var d2 = this1.i;
	var e2 = this1.j;
	var f2 = this1.l;
	var d3 = this1.i;
	var e3 = this1.j;
	var f3 = this1.k;
	return this1.a * (this1.f * (e * p - f * o) - this1.g * (d * p - f * n) + this1.h * (d * o - e * n)) - this1.b * (this1.e * (e1 * p - f1 * o) - this1.g * (d1 * p - f1 * m) + this1.h * (d1 * o - e1 * m)) + this1.c * (this1.e * (e2 * n - f2 * p) - this1.f * (d2 * n - f2 * m) + this1.h * (d2 * p - e2 * m)) - this1.d * (this1.e * (e3 * o - f3 * n) - this1.f * (d3 * o - f3 * m) + this1.g * (d3 * n - e3 * m));
};
geom_matrix_Matrix4x3.inverse = function(this1) {
	var a = this1.a;
	var b = this1.b;
	var c = this1.c;
	var d = this1.d;
	var e = this1.e;
	var f = this1.f;
	var g = this1.g;
	var h = this1.h;
	var i = this1.i;
	var j = this1.j;
	var k = this1.k;
	var l = this1.l;
	var m = 0.;
	var n = 0.;
	var o = 0.;
	var p = 1.;
	var q = j * o * h - n * k * h + n * g * l - f * o * l - j * g * p + f * k * p;
	var r = m * k * h - i * o * h - m * g * l + e * o * l + i * g * p - e * k * p;
	var s = i * n * h - m * j * h + m * f * l - e * n * l - i * f * p + e * j * p;
	var t = m * j * g - i * n * g - m * f * k + e * n * k + i * f * o - e * j * o;
	var det = a * q + b * r + c * s + d * t;
	if(det == 0) {
		return null;
	} else {
		var detI = 1 / det;
		var this1 = new geom_structure_Mat4x3(q * detI,(n * k * d - j * o * d - n * c * l + b * o * l + j * c * p - b * k * p) * detI,(f * o * d - n * g * d + n * c * h - b * o * h - f * c * p + b * g * p) * detI,(j * g * d - f * k * d - j * c * h + b * k * h + f * c * l - b * g * l) * detI,r * detI,(i * o * d - m * k * d + m * c * l - a * o * l - i * c * p + a * k * p) * detI,(m * g * d - e * o * d - m * c * h + a * o * h + e * c * p - a * g * p) * detI,(e * k * d - i * g * d + i * c * h - a * k * h - e * c * l + a * g * l) * detI,s * detI,(m * j * d - i * n * d - m * b * l + a * n * l + i * b * p - a * j * p) * detI,(e * n * d - m * f * d + m * b * h - a * n * h - e * b * p + a * f * p) * detI,(i * f * d - e * j * d - i * b * h + a * j * h + e * b * l - a * f * l) * detI);
		return this1;
	}
};
geom_matrix_Matrix4x3.orientation = function(pos,dir,up) {
	var this1 = new geom_structure_Mat1x4(dir.y * up.z - dir.z * up.y,dir.z * up.x - dir.x * up.z,dir.x * up.y - dir.y * up.x,dir.w * up.w);
	var right = this1;
	var this1 = new geom_structure_Mat4x3(dir.x,up.x,right.x,pos.x,dir.y,up.y,right.y,pos.y,dir.z,up.z,right.z,pos.z);
	return this1;
};
geom_matrix_Matrix4x3.applyRotation = function(this1,p) {
	var this2 = new geom_structure_Mat1x4(this1.a * p.x + this1.b * p.y + this1.c * p.z,this1.e * p.x + this1.f * p.y + this1.g * p.z,this1.h * p.x + this1.i * p.y + this1.j * p.z,1.);
	return this2;
};
geom_matrix_Matrix4x3.applyInverseRotation = function(this1,p) {
	var this2 = new geom_structure_Mat1x4(this1.a * p.x + this1.e * p.y + this1.i * p.z,this1.b * p.x + this1.f * p.y + this1.j * p.z,this1.c * p.x + this1.g * p.y + this1.k * p.z,1.);
	return this2;
};
geom_matrix_Matrix4x3.orthonormalizeRotation = function(this1) {
	var this2 = new geom_structure_Mat1x4(this1.a,this1.e,this1.i,1.);
	var this3 = this2;
	var currentLength = Math.sqrt(this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this3.x *= mul;
		this3.y *= mul;
		this3.z *= mul;
		this3.w *= mul;
		var tmp = this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w;
	}
	var new_x = this3;
	var this2 = new geom_structure_Mat1x4(this1.b,this1.f,this1.j,1.);
	var v = this2;
	var this2 = new geom_structure_Mat1x4(new_x.y * v.z - new_x.z * v.y,new_x.z * v.x - new_x.x * v.z,new_x.x * v.y - new_x.y * v.x,new_x.w * v.w);
	var this3 = this2;
	var currentLength = Math.sqrt(this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this3.x *= mul;
		this3.y *= mul;
		this3.z *= mul;
		this3.w *= mul;
		var tmp = this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w;
	}
	var new_z = this3;
	var this2 = new geom_structure_Mat1x4(new_z.y * new_x.z - new_z.z * new_x.y,new_z.z * new_x.x - new_z.x * new_x.z,new_z.x * new_x.y - new_z.y * new_x.x,new_z.w * new_x.w);
	var new_y = this2;
	this1.a = new_x.x;
	this1.b = new_y.x;
	this1.c = new_z.x;
	this1.e = new_x.y;
	this1.f = new_y.y;
	this1.g = new_z.y;
	this1.i = new_x.z;
	this1.j = new_y.z;
	this1.k = new_z.z;
	return this1;
};
geom_matrix_Matrix4x3.makeViewFromOrientation = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.c,this1.b,-this1.a,this1.d,this1.g,this1.f,-this1.e,this1.h,this1.k,this1.j,-this1.i,this1.l);
	var m = this2;
	var this1 = new geom_structure_Mat4x3(m.a,m.e,m.i,0.,m.b,m.f,m.j,0.,m.c,m.g,m.k,0.);
	var m1 = this1;
	var this1 = new geom_structure_Mat1x4(m.d,m.h,m.l,1.);
	var this2 = this1;
	var this1 = new geom_structure_Mat1x4(m1.a * this2.x + m1.b * this2.y + m1.c * this2.z + m1.d,m1.e * this2.x + m1.f * this2.y + m1.g * this2.z + m1.h,m1.i * this2.x + m1.j * this2.y + m1.k * this2.z + m1.l,1.);
	var trans_prime = this1;
	m1.d = -trans_prime.x;
	m1.h = -trans_prime.y;
	m1.l = -trans_prime.z;
	return m1;
};
geom_matrix_Matrix4x3.invertNormalizedRotation = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.a,this1.e,this1.i,0.,this1.b,this1.f,this1.j,0.,this1.c,this1.g,this1.k,0.);
	return this2;
};
geom_matrix_Matrix4x3.invertNormalized = function(this1) {
	var this2 = new geom_structure_Mat4x3(this1.a,this1.e,this1.i,0.,this1.b,this1.f,this1.j,0.,this1.c,this1.g,this1.k,0.);
	var m = this2;
	var this2 = new geom_structure_Mat1x4(this1.d,this1.h,this1.l,1.);
	var this1 = this2;
	var this2 = new geom_structure_Mat1x4(m.a * this1.x + m.b * this1.y + m.c * this1.z + m.d,m.e * this1.x + m.f * this1.y + m.g * this1.z + m.h,m.i * this1.x + m.j * this1.y + m.k * this1.z + m.l,1.);
	var trans_prime = this2;
	m.d = -trans_prime.x;
	m.h = -trans_prime.y;
	m.l = -trans_prime.z;
	return m;
};
geom_matrix_Matrix4x3.toAffineMatrix = function(this1) {
	return { e0 : this1.a, e4 : this1.b, e8 : this1.c, e12 : this1.d, e1 : this1.e, e5 : this1.f, e9 : this1.g, e13 : this1.h, e2 : this1.i, e6 : this1.j, e10 : this1.k, e14 : this1.l};
};
geom_matrix_Matrix4x3.fromNumbered = function(m) {
	var this1 = new geom_structure_Mat4x3(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32);
	return this1;
};
geom_matrix_Matrix4x3.toNumbered = function(this1) {
	return { _00 : this1.a, _10 : this1.b, _20 : this1.c, _30 : this1.d, _01 : this1.e, _11 : this1.f, _21 : this1.g, _31 : this1.h, _02 : this1.i, _12 : this1.j, _22 : this1.k, _32 : this1.l, _03 : 0., _13 : 0., _23 : 0., _33 : 1.};
};
geom_matrix_Matrix4x3.fromArr = function(arr) {
	var this1 = new geom_structure_Mat4x3(arr[0],arr[1],arr[2],arr[3],arr[4],arr[5],arr[6],arr[7],arr[8],arr[9],arr[10],arr[11]);
	return this1;
};
geom_matrix_Matrix4x3.toArray = function(this1) {
	return [this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l];
};
geom_matrix_Matrix4x3.from2x2 = function(m2) {
	var this1 = new geom_structure_Mat4x3(m2.a,m2.b,0.,0.,m2.c,m2.d,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Matrix4x3.to2x2 = function(this1) {
	var this2 = new geom_structure_Mat2x2(this1.a,this1.b,this1.e,this1.f);
	return this2;
};
geom_matrix_Matrix4x3.from3x3 = function(m3) {
	var this1 = new geom_structure_Mat4x3(m3.a,m3.b,m3.c,0.,m3.d,m3.e,m3.f,0.,m3.g,m3.h,m3.i,0.);
	return this1;
};
geom_matrix_Matrix4x3.to3x3 = function(this1) {
	var this2 = new geom_structure_Mat3x3(this1.a,this1.b,this1.c,this1.e,this1.f,this1.g,this1.i,this1.j,this1.k);
	return this2;
};
geom_matrix_Matrix4x3.fromVec = function(v) {
	var this1 = new geom_structure_Mat4x3(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11]);
	return this1;
};
geom_matrix_Matrix4x3.toVector = function(this1) {
	var this2 = new Array(12);
	var vec = this2;
	vec[0] = this1.a;
	vec[1] = this1.b;
	vec[2] = this1.c;
	vec[3] = this1.d;
	vec[4] = this1.e;
	vec[5] = this1.f;
	vec[6] = this1.g;
	vec[7] = this1.h;
	vec[8] = this1.i;
	vec[9] = this1.j;
	vec[10] = this1.k;
	vec[11] = this1.l;
	return vec;
};
geom_matrix_Matrix4x3.setXY = function(this1,x,y,v) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a = v;
		case 1:
			return this1.b = v;
		case 2:
			return this1.c = v;
		case 3:
			return this1.d = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix4x3");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.e = v;
		case 1:
			return this1.f = v;
		case 2:
			return this1.g = v;
		case 3:
			return this1.h = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix4x3");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.i = v;
		case 1:
			return this1.j = v;
		case 2:
			return this1.k = v;
		case 3:
			return this1.l = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix4x3");
		}
		break;
	default:
		throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix4x3");
	}
};
geom_matrix_Matrix4x3.getXY = function(this1,x,y) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a;
		case 1:
			return this1.b;
		case 2:
			return this1.c;
		case 3:
			return this1.d;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix4x3");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.e;
		case 1:
			return this1.f;
		case 2:
			return this1.g;
		case 3:
			return this1.h;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix4x3");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.i;
		case 1:
			return this1.j;
		case 2:
			return this1.k;
		case 3:
			return this1.l;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix4x3");
		}
		break;
	default:
		throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix4x3");
	}
};
geom_matrix_Matrix4x3.updateWebGL = function(this1,arr) {
	var here = this1;
	arr[0] = here.a;
	arr[1] = here.e;
	arr[2] = here.i;
	arr[3] = 0.;
	arr[4] = here.b;
	arr[5] = here.f;
	arr[6] = here.j;
	arr[7] = 0.;
	arr[8] = here.c;
	arr[9] = here.g;
	arr[10] = here.k;
	arr[11] = 0.;
	arr[12] = here.d;
	arr[13] = here.h;
	arr[14] = here.l;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Matrix4x3.updateWebGL_ = function(this1,arr) {
	var here = this1;
	arr[0] = here.a;
	arr[1] = here.b;
	arr[2] = here.c;
	arr[3] = here.d;
	arr[4] = here.e;
	arr[5] = here.f;
	arr[6] = here.g;
	arr[7] = here.h;
	arr[8] = here.i;
	arr[9] = here.j;
	arr[10] = here.k;
	arr[11] = here.l;
	arr[12] = 0.;
	arr[13] = 0.;
	arr[14] = 0.;
	arr[15] = 1.;
	return arr;
};
geom_matrix_Matrix4x3.pretty = function(this1,prec) {
	var dp = geom_constraints_Precision.floatToStringPrecision;
	var max3 = geom_constraints_Precision.max3;
	var sa = dp(this1.a,prec);
	var sb = dp(this1.b,prec);
	var sc = dp(this1.c,prec);
	var sd = dp(this1.d,prec);
	var se = dp(this1.e,prec);
	var sf = dp(this1.f,prec);
	var sg = dp(this1.g,prec);
	var sh = dp(this1.h,prec);
	var si = dp(this1.i,prec);
	var sj = dp(this1.j,prec);
	var sk = dp(this1.k,prec);
	var sl = dp(this1.l,prec);
	var la = sa.length;
	var lb = sb.length;
	var lc = sc.length;
	var ld = sd.length;
	var le = se.length;
	var lf = sf.length;
	var lg = sg.length;
	var lh = sh.length;
	var li = si.length;
	var lj = sj.length;
	var lk = sk.length;
	var ll = sl.length;
	var r0 = max3(la,le,li);
	var r1 = max3(lb,lf,lj);
	var r2 = max3(lc,lg,lk);
	var r3 = max3(ld,lh,ll);
	var spaces = "";
	var _g = 0;
	var _g1 = r0;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sa = HxOverrides.substr(spaces,0,r0 - la) + sa;
	se = HxOverrides.substr(spaces,0,r0 - le) + se;
	si = HxOverrides.substr(spaces,0,r0 - li) + si;
	var spaces = "";
	var _g = 0;
	var _g1 = r1;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sb = HxOverrides.substr(spaces,0,r1 - lb) + sb;
	sf = HxOverrides.substr(spaces,0,r1 - lf) + sf;
	sj = HxOverrides.substr(spaces,0,r1 - lj) + sj;
	var space = "";
	var _g = 0;
	var _g1 = r2;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sc = HxOverrides.substr(spaces,0,r2 - lc) + sc;
	sg = HxOverrides.substr(spaces,0,r2 - lg) + sg;
	sk = HxOverrides.substr(spaces,0,r2 - lk) + sk;
	var space = "";
	var _g = 0;
	var _g1 = r3;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sd = HxOverrides.substr(spaces,0,r3 - ld) + sd;
	sh = HxOverrides.substr(spaces,0,r3 - lh) + sh;
	sl = HxOverrides.substr(spaces,0,r3 - ll) + sl;
	return "\n" + "/ " + sa + ", " + sb + ", " + sc + ", " + sd + " \\\n" + "| " + se + ", " + sf + ", " + sg + ", " + sh + " |\n" + "\\ " + si + ", " + sj + ", " + sk + ", " + sl + " /\n";
};
var geom_matrix_Matrix4x4 = {};
geom_matrix_Matrix4x4._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix_Matrix4x4.clone = function(this1) {
	var this2 = new geom_structure_Mat4x4(this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l,this1.m,this1.n,this1.o,this1.p);
	return this2;
};
geom_matrix_Matrix4x4.iterator = function(this1) {
	return new haxe_iterators_ArrayIterator([this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l,this1.m,this1.n,this1.o,this1.p]);
};
geom_matrix_Matrix4x4.get_self = function(this1) {
	return this1;
};
geom_matrix_Matrix4x4.get_zero = function() {
	var this1 = new geom_structure_Mat4x4(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x4.get_nought = function(this1) {
	var this1 = new geom_structure_Mat4x4(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);
	return this1;
};
geom_matrix_Matrix4x4.get_unit = function() {
	var this1 = new geom_structure_Mat4x4(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix4x4.get_one = function(this1) {
	var this1 = new geom_structure_Mat4x4(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix4x4.get_minus1 = function() {
	var this1 = new geom_structure_Mat4x4(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.);
	var a = this1;
	var this1 = new geom_structure_Mat4x4(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i,-a.j,-a.k,-a.l,-a.m,-a.n,-a.o,-a.p);
	return this1;
};
geom_matrix_Matrix4x4.get_counting = function() {
	var this1 = new geom_structure_Mat4x4(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.);
	return this1;
};
geom_matrix_Matrix4x4.get_testCount = function(this1) {
	var this1 = new geom_structure_Mat4x4(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.);
	return this1;
};
geom_matrix_Matrix4x4.get__1_16 = function() {
	var this1 = new geom_structure_Mat4x4(1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.,15.,16.);
	return this1;
};
geom_matrix_Matrix4x4.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
};
geom_matrix_Matrix4x4.notEqual = function(a,b) {
	var delta = 0.0000001;
	return (Math.abs(a.a - b.a) >= delta || Math.abs(a.b - b.b) >= delta || Math.abs(a.c - b.c) >= delta || Math.abs(a.d - b.d) >= delta || Math.abs(a.e - b.e) >= delta || Math.abs(a.f - b.f) >= delta || Math.abs(a.g - b.g) >= delta || Math.abs(a.h - b.h) >= delta || Math.abs(a.i - b.i) >= delta || Math.abs(a.j - b.j) >= delta || Math.abs(a.k - b.k) >= delta || Math.abs(a.l - b.l) >= delta || Math.abs(a.m - b.m) >= delta || Math.abs(a.n - b.n) >= delta || Math.abs(a.o - b.o) >= delta || Math.abs(a.p - b.p) >= delta);
};
geom_matrix_Matrix4x4.negating = function(a) {
	var this1 = new geom_structure_Mat4x4(-a.a,-a.b,-a.c,-a.d,-a.e,-a.f,-a.g,-a.h,-a.i,-a.j,-a.k,-a.l,-a.m,-a.n,-a.o,-a.p);
	return this1;
};
geom_matrix_Matrix4x4.negate = function(this1) {
	var this2 = new geom_structure_Mat4x4(-this1.a,-this1.b,-this1.c,-this1.d,-this1.e,-this1.f,-this1.g,-this1.h,-this1.i,-this1.j,-this1.k,-this1.l,-this1.m,-this1.n,-this1.o,-this1.p);
	return this2;
};
geom_matrix_Matrix4x4.add = function(m0,m1) {
	var this1 = new geom_structure_Mat4x4(m0.a + m1.a,m0.b + m1.b,m0.c + m1.c,m0.d + m1.d,m0.e + m1.e,m0.f + m1.f,m0.g + m1.g,m0.h + m1.h,m0.i + m1.i,m0.j + m1.j,m0.k + m1.k,m0.l + m1.l,m0.m + m1.m,m0.n + m1.n,m0.o + m1.o,m0.p + m1.p);
	return this1;
};
geom_matrix_Matrix4x4.sub = function(m0,m1) {
	var this1 = new geom_structure_Mat4x4(m0.a - m1.a,m0.b - m1.b,m0.c - m1.c,m0.d - m1.d,m0.e - m1.e,m0.f - m1.f,m0.g - m1.g,m0.h - m1.h,m0.i - m1.i,m0.j - m1.j,m0.k - m1.k,m0.l - m1.l,m0.m - m1.m,m0.n - m1.n,m0.o - m1.o,m0.p - m1.p);
	return this1;
};
geom_matrix_Matrix4x4.multiply = function(r,s) {
	var this1 = new geom_structure_Mat4x4(r.a * s.a + r.b * s.e + r.c * s.i + r.d * s.m,r.a * s.b + r.b * s.f + r.c * s.j + r.d * s.n,r.a * s.c + r.b * s.g + r.c * s.k + r.d * s.o,r.a * s.d + r.b * s.h + r.c * s.l + r.d * s.p,r.e * s.a + r.f * s.e + r.g * s.i + r.h * s.m,r.e * s.b + r.f * s.f + r.g * s.j + r.h * s.n,r.e * s.c + r.f * s.g + r.g * s.k + r.h * s.o,r.e * s.d + r.f * s.h + r.g * s.l + r.h * s.p,r.i * s.a + r.j * s.e + r.k * s.i + r.l * s.m,r.i * s.b + r.j * s.f + r.k * s.j + r.l * s.n,r.i * s.c + r.j * s.g + r.k * s.k + r.l * s.o,r.i * s.d + r.j * s.h + r.k * s.l + r.l * s.p,r.m * s.a + r.n * s.e + r.o * s.i + r.p * s.m,r.m * s.b + r.n * s.f + r.o * s.j + r.p * s.n,r.m + s.c + r.n * s.g + r.o * s.k + r.p * s.o,r.m * s.d + r.n * s.h + r.o * s.l + r.p * s.p);
	return this1;
};
geom_matrix_Matrix4x4.scaleDivide = function(m,p) {
	var this1 = new geom_structure_Mat1x4(1 / p.x,1 / p.y,1 / p.z,1 / p.w);
	var pd = this1;
	var this1 = new geom_structure_Mat4x4(m.a * pd.x,m.b,m.c,m.d,m.e,m.f * pd.y,m.g,m.h,m.i,m.j,m.k * pd.z,m.l,m.m,m.n,m.o,m.p * pd.w);
	return this1;
};
geom_matrix_Matrix4x4.scaleMultiply1 = function(p,m) {
	var this1 = new geom_structure_Mat4x4(m.a * p.x,m.b,m.c,m.d,m.e,m.f * p.y,m.g,m.h,m.i,m.j,m.k * p.z,m.l,m.m,m.n,m.o,m.p * p.w);
	return this1;
};
geom_matrix_Matrix4x4.scaleMultiply2 = function(m,p) {
	var this1 = new geom_structure_Mat4x4(m.a * p.x,m.b,m.c,m.d,m.e,m.f * p.y,m.g,m.h,m.i,m.j,m.k * p.z,m.l,m.m,m.n,m.o,m.p * p.w);
	return this1;
};
geom_matrix_Matrix4x4.delta = function(this1,x,y) {
	var this2 = new geom_structure_Mat4x4(this1.a,this1.b,this1.c,this1.d,this1.e,this1.f,this1.g,this1.h,this1.i,this1.j,this1.k,this1.l,this1.m + x,this1.n + y,this1.o,this1.p);
	return this2;
};
geom_matrix_Matrix4x4.matrix4x3 = function(m) {
	var this1 = new geom_structure_Mat4x4(m.a,m.b,m.c,m.d,m.e,m.f,m.g,m.h,m.i,m.j,m.k,m.l,0.,0.,0.,1.);
	return this1;
};
geom_matrix_Matrix4x4.transpose = function(this1) {
	var this2 = new geom_structure_Mat4x4(this1.a,this1.e,this1.i,this1.m,this1.b,this1.f,this1.j,this1.n,this1.c,this1.g,this1.k,this1.o,this1.d,this1.h,this1.l,this1.p);
	return this2;
};
geom_matrix_Matrix4x4.updateWebGL = function(this1,arr) {
	var here = this1;
	arr[0] = here.a;
	arr[1] = here.e;
	arr[2] = here.i;
	arr[3] = here.m;
	arr[4] = here.b;
	arr[5] = here.f;
	arr[6] = here.j;
	arr[7] = here.n;
	arr[8] = here.c;
	arr[9] = here.g;
	arr[10] = here.k;
	arr[11] = here.o;
	arr[12] = here.d;
	arr[13] = here.h;
	arr[14] = here.l;
	arr[15] = here.p;
	return arr;
};
geom_matrix_Matrix4x4.updateWebGL_ = function(this1,arr) {
	var here = this1;
	arr[0] = here.a;
	arr[1] = here.b;
	arr[2] = here.c;
	arr[3] = here.d;
	arr[4] = here.e;
	arr[5] = here.f;
	arr[6] = here.g;
	arr[7] = here.h;
	arr[8] = here.i;
	arr[9] = here.j;
	arr[10] = here.k;
	arr[11] = here.l;
	arr[12] = here.m;
	arr[13] = here.n;
	arr[14] = here.o;
	arr[15] = here.p;
	return arr;
};
geom_matrix_Matrix4x4.setXY = function(this1,x,y,v) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a = v;
		case 1:
			return this1.b = v;
		case 2:
			return this1.c = v;
		case 3:
			return this1.d = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.e = v;
		case 1:
			return this1.f = v;
		case 2:
			return this1.g = v;
		case 3:
			return this1.h = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.i = v;
		case 1:
			return this1.j = v;
		case 2:
			return this1.k = v;
		case 3:
			return this1.l = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 3:
		switch(y) {
		case 0:
			return this1.m = v;
		case 1:
			return this1.n = v;
		case 2:
			return this1.o = v;
		case 3:
			return this1.p = v;
		default:
			throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix4x4");
		}
		break;
	default:
		throw haxe_Exception.thrown("bad set " + x + ", " + y + " on Matrix4x4");
	}
};
geom_matrix_Matrix4x4.getXY = function(this1,x,y) {
	switch(x) {
	case 0:
		switch(y) {
		case 0:
			return this1.a;
		case 1:
			return this1.b;
		case 2:
			return this1.c;
		case 3:
			return this1.d;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 1:
		switch(y) {
		case 0:
			return this1.e;
		case 1:
			return this1.f;
		case 2:
			return this1.g;
		case 3:
			return this1.h;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 2:
		switch(y) {
		case 0:
			return this1.i;
		case 1:
			return this1.j;
		case 2:
			return this1.k;
		case 3:
			return this1.l;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix4x4");
		}
		break;
	case 3:
		switch(y) {
		case 0:
			return this1.m;
		case 1:
			return this1.n;
		case 2:
			return this1.o;
		case 3:
			return this1.p;
		default:
			throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix4x4");
		}
		break;
	default:
		throw haxe_Exception.thrown("bad get " + x + ", " + y + " on Matrix4x4");
	}
};
geom_matrix_Matrix4x4.pretty = function(this1,prec) {
	var dp = geom_constraints_Precision.floatToStringPrecision;
	var max4 = geom_constraints_Precision.max4;
	var sa = dp(this1.a,prec);
	var sb = dp(this1.b,prec);
	var sc = dp(this1.c,prec);
	var sd = dp(this1.d,prec);
	var se = dp(this1.e,prec);
	var sf = dp(this1.f,prec);
	var sg = dp(this1.g,prec);
	var sh = dp(this1.h,prec);
	var si = dp(this1.i,prec);
	var sj = dp(this1.j,prec);
	var sk = dp(this1.k,prec);
	var sl = dp(this1.l,prec);
	var sm = dp(this1.m,prec);
	var sn = dp(this1.n,prec);
	var so = dp(this1.o,prec);
	var sp = dp(this1.p,prec);
	var la = sa.length;
	var lb = sb.length;
	var lc = sc.length;
	var ld = sd.length;
	var le = se.length;
	var lf = sf.length;
	var lg = sg.length;
	var lh = sh.length;
	var li = si.length;
	var lj = sj.length;
	var lk = sk.length;
	var ll = sl.length;
	var lm = sm.length;
	var ln = sn.length;
	var lo = so.length;
	var lp = sp.length;
	var r0 = max4(la,le,li,lm);
	var r1 = max4(lb,lf,lj,ln);
	var r2 = max4(lc,lg,lk,lo);
	var r3 = max4(ld,lh,ll,lp);
	var spaces = "";
	var _g = 0;
	var _g1 = r0;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sa = HxOverrides.substr(spaces,0,r0 - la) + sa;
	se = HxOverrides.substr(spaces,0,r0 - le) + se;
	si = HxOverrides.substr(spaces,0,r0 - li) + si;
	sm = HxOverrides.substr(spaces,0,r0 - lm) + sm;
	var spaces = "";
	var _g = 0;
	var _g1 = r1;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sb = HxOverrides.substr(spaces,0,r1 - lb) + sb;
	sf = HxOverrides.substr(spaces,0,r1 - lf) + sf;
	sj = HxOverrides.substr(spaces,0,r1 - lj) + sj;
	sn = HxOverrides.substr(spaces,0,r1 - ln) + sn;
	var space = "";
	var _g = 0;
	var _g1 = r2;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sc = HxOverrides.substr(spaces,0,r2 - lc) + sc;
	sg = HxOverrides.substr(spaces,0,r2 - lg) + sg;
	sk = HxOverrides.substr(spaces,0,r2 - lk) + sk;
	so = HxOverrides.substr(spaces,0,r2 - lo) + so;
	var space = "";
	var _g = 0;
	var _g1 = r3;
	while(_g < _g1) {
		var n = _g++;
		spaces += " ";
	}
	sd = HxOverrides.substr(spaces,0,r3 - ld) + sd;
	sh = HxOverrides.substr(spaces,0,r3 - lh) + sh;
	sl = HxOverrides.substr(spaces,0,r3 - ll) + sl;
	sp = HxOverrides.substr(spaces,0,r3 - lp) + sp;
	return "\n" + "/ " + sa + ", " + sb + ", " + sc + ", " + sd + " \\\n" + "| " + se + ", " + sf + ", " + sg + ", " + sh + " |\n" + "| " + si + ", " + sj + ", " + sk + ", " + sl + " |\n" + "\\ " + sm + ", " + sn + ", " + so + ", " + sp + " /\n";
};
var geom_matrix_Projection = function() { };
$hxClasses["geom.matrix.Projection"] = geom_matrix_Projection;
geom_matrix_Projection.__name__ = "geom.matrix.Projection";
geom_matrix_Projection.perspective = function(angleOfView,near,far) {
	if(far == null) {
		far = 100.;
	}
	if(near == null) {
		near = 0.1;
	}
	if(angleOfView == null) {
		angleOfView = 1.57079632679;
	}
	var scale = 1 / Math.tan(angleOfView * 0.5);
	var dif = far - near;
	var this1 = new geom_structure_Mat4x4(scale,0.,0.,0.,0.,scale,0.,0.,0.,0.,-far / dif,-far * near / dif,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Projection.perspectiveAspect = function(fov,aspectRatio,near,far) {
	var f = 1.0 / Math.tan(fov / 2);
	var rangeInv = 1 / (near - far);
	var this1 = new geom_structure_Mat4x4(f / aspectRatio,0.,0.,0.,0.,f,0.,0.,0.,0.,(near + far) * rangeInv,near * far * rangeInv * 2,0.,0.,-1.,0.);
	return this1;
};
geom_matrix_Projection.projectionWindow = function(wid,hi,fov) {
	var halfWid = wid / 2;
	var halfHi = hi / 2;
	var tanHalf = Math.tan(fov / 2);
	var scale = halfWid / tanHalf;
	var this1 = new geom_structure_Mat4x3(scale,-0.,-scale,0.,0.,-scale,-halfHi / tanHalf,0.,0.,0.,-1,0.);
	return this1;
};
var geom_matrix_Quaternion = {};
geom_matrix_Quaternion._new = function(m) {
	var this1 = m;
	return this1;
};
geom_matrix_Quaternion.get_zero = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,0.,0.);
	return this1;
};
geom_matrix_Quaternion.get_zeroNormal = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
	return this1;
};
geom_matrix_Quaternion.get_unit = function() {
	var this1 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	return this1;
};
geom_matrix_Quaternion.get_unitNormal = function() {
	var this1 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	var this2 = this1;
	var currentLength = Math.sqrt(this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this2.x *= mul;
		this2.y *= mul;
		this2.z *= mul;
		this2.w *= mul;
		var tmp = this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w;
	}
	return this2;
};
geom_matrix_Quaternion.clone = function(this1) {
	var this2 = new geom_structure_Mat1x4(this1.x,this1.y,this1.z,this1.w);
	return this2;
};
geom_matrix_Quaternion.xRotate = function(angle) {
	var this1 = new geom_structure_Mat1x4(Math.sin(0.5 * angle),0.,0,Math.cos(0.5 * angle));
	return this1;
};
geom_matrix_Quaternion.yRotate = function(angle) {
	var this1 = new geom_structure_Mat1x4(0.,Math.sin(0.5 * angle),0.,Math.cos(0.5 * angle));
	return this1;
};
geom_matrix_Quaternion.zRotate = function(angle) {
	var this1 = new geom_structure_Mat1x4(0.,0.,Math.sin(0.5 * angle),Math.cos(0.5 * angle));
	return this1;
};
geom_matrix_Quaternion.xPIhalf = function() {
	var halfSqrt = Math.sqrt(0.5);
	var this1 = new geom_structure_Mat1x4(halfSqrt,0.,0,halfSqrt);
	return this1;
};
geom_matrix_Quaternion.yPIhalf = function() {
	var halfSqrt = Math.sqrt(0.5);
	var this1 = new geom_structure_Mat1x4(0.,halfSqrt,0.,halfSqrt);
	return this1;
};
geom_matrix_Quaternion.zPIhalf = function() {
	var halfSqrt = Math.sqrt(0.5);
	var this1 = new geom_structure_Mat1x4(0.,0.,halfSqrt,halfSqrt);
	return this1;
};
geom_matrix_Quaternion.xPI = function() {
	var this1 = new geom_structure_Mat1x4(1.,0.,0,0.);
	return this1;
};
geom_matrix_Quaternion.yPI = function() {
	var this1 = new geom_structure_Mat1x4(0.,1.,0.,0.);
	return this1;
};
geom_matrix_Quaternion.zPI = function() {
	var this1 = new geom_structure_Mat1x4(0.,0.,1.,0.);
	return this1;
};
geom_matrix_Quaternion.xPIhalfMinus = function() {
	var halfSqrt = Math.sqrt(0.5);
	var this1 = new geom_structure_Mat1x4(-halfSqrt,0.,0,halfSqrt);
	return this1;
};
geom_matrix_Quaternion.yPIhalfMinus = function() {
	var halfSqrt = Math.sqrt(0.5);
	var this1 = new geom_structure_Mat1x4(0.,-halfSqrt,0.,halfSqrt);
	return this1;
};
geom_matrix_Quaternion.zPIhalfMinus = function() {
	var halfSqrt = Math.sqrt(0.5);
	var this1 = new geom_structure_Mat1x4(0.,0.,-halfSqrt,halfSqrt);
	return this1;
};
geom_matrix_Quaternion.createFromAxisAngle = function(x,y,z,theta) {
	var factor = Math.sin(theta / 2.0);
	x *= factor;
	y *= factor;
	z *= factor;
	var w = Math.cos(theta / 2.0);
	var this1 = new geom_structure_Mat1x4(x,y,z,w);
	var this2 = this1;
	var currentLength = Math.sqrt(this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this2.x *= mul;
		this2.y *= mul;
		this2.z *= mul;
		this2.w *= mul;
		var tmp = this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w;
	}
	return this2;
};
geom_matrix_Quaternion.getAngleAxis = function(this1) {
	var sqrt = Math.sqrt(1 - this1.w * this1.w);
	var this2 = new geom_structure_Mat1x3(this1.x / sqrt,this1.y / sqrt,this1.z / sqrt);
	return { axis : this2, angle : 2 * Math.acos(this1.w)};
};
geom_matrix_Quaternion.identity = function(out) {
	out.x = 0.;
	out.y = 0.;
	out.z = 0.;
	out.w = 1.;
	return out;
};
geom_matrix_Quaternion.toMatrix4x1 = function(this1) {
	var this2 = new geom_structure_Mat1x4(this1.x,this1.y,this1.z,this1.w);
	return this2;
};
geom_matrix_Quaternion.copy = function(pin,pout) {
	pout.x = pin.x;
	pout.y = pin.y;
	pout.z = pin.z;
	pout.w = pin.w;
	return pout;
};
geom_matrix_Quaternion.get_magnitude = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
};
geom_matrix_Quaternion.set_magnitude = function(this1,length) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	if(currentLength == 0.) {
		return 0.;
	} else {
		var mul = length / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		this1.w *= mul;
		return Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	}
};
geom_matrix_Quaternion.dot = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
geom_matrix_Quaternion.dotProd = function(this1,b) {
	return this1.x * b.x + this1.y * b.y + this1.z * b.z + this1.w * b.w;
};
geom_matrix_Quaternion.dotProduct = function(a,b) {
	return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
};
geom_matrix_Quaternion.equal = function(a,b) {
	var delta = 0.0000001;
	return !(Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
};
geom_matrix_Quaternion.distanceZeroOne = function(this1,q) {
	var dot_ = this1.x * q.x + this1.y * q.y + this1.z * q.z + this1.w * q.w;
	return 1 - dot_ * dot_;
};
geom_matrix_Quaternion.theta = function(this1,q) {
	var d = this1.x * q.x + this1.y * q.y + this1.z * q.z + this1.w * q.w;
	return Math.acos(2 * d * d - 1);
};
geom_matrix_Quaternion.notEqual = function(a,b) {
	var delta = 0.0000001;
	return (Math.abs(a.x - b.x) >= delta || Math.abs(a.y - b.y) >= delta || Math.abs(a.z - b.z) >= delta || Math.abs(a.w - b.w) >= delta);
};
geom_matrix_Quaternion.magnitudeSquared = function(this1) {
	return this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
};
geom_matrix_Quaternion.add = function(a,b) {
	var this1 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	return this1;
};
geom_matrix_Quaternion.subtract = function(a,b) {
	var this1 = new geom_structure_Mat1x4(a.x - b.x,a.y - b.y,a.z - b.z,a.w - b.w);
	return this1;
};
geom_matrix_Quaternion.scaleMultiply = function(a,v) {
	var this1 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	return this1;
};
geom_matrix_Quaternion.divide = function(a,v) {
	var v1 = 1 / v;
	var this1 = new geom_structure_Mat1x4(a.x * v1,a.y * v1,a.z * v1,a.w * v1);
	return this1;
};
geom_matrix_Quaternion.divide2 = function(v,a) {
	var this1 = new geom_structure_Mat1x4(v / a.x,v / a.y,v / a.z,v / a.w);
	return this1;
};
geom_matrix_Quaternion.conjugate = function(a) {
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,a.w);
	return this1;
};
geom_matrix_Quaternion.negate = function(a) {
	var this1 = new geom_structure_Mat1x4(-a.x,-a.y,-a.z,-a.w);
	return this1;
};
geom_matrix_Quaternion.invert = function(this1) {
	var sqNorm = this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
	var this2 = new geom_structure_Mat1x4(this1.x / -sqNorm,this1.y / -sqNorm,this1.z / -sqNorm,this1.w / sqNorm);
	return this2;
};
geom_matrix_Quaternion.inversion = function(q1) {
	var sqNorm = q1.x * q1.x + q1.y * q1.y + q1.z * q1.z + q1.w * q1.w;
	var this1 = new geom_structure_Mat1x4(q1.x / -sqNorm,q1.y / -sqNorm,q1.z / -sqNorm,q1.w / sqNorm);
	return this1;
};
geom_matrix_Quaternion.multiplyQ = function(q1,q2) {
	var this1 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
	return this1;
};
geom_matrix_Quaternion.cross = function(this1,v) {
	var this2 = new geom_structure_Mat1x4(this1.y * v.z - this1.z * v.y,this1.z * v.x - this1.x * v.z,this1.x * v.y - this1.y * v.x,this1.w * v.w);
	return this2;
};
geom_matrix_Quaternion.fromYawPitchRoll = function(yaw,pitch,roll) {
	var n9 = roll * 0.5;
	var n6 = Math.sin(n9);
	var n5 = Math.cos(n9);
	var n8 = pitch * 0.5;
	var n4 = Math.sin(n8);
	var n3 = Math.cos(n8);
	var n7 = yaw * 0.5;
	var n2 = Math.sin(n7);
	var n1 = Math.cos(n7);
	var this1 = new geom_structure_Mat1x4(n1 * n4 * n5 + n2 * n3 * n6,n2 * n3 * n5 - n1 * n4 * n6,n1 * n3 * n6 - n2 * n4 * n5,n1 * n3 * n5 + n2 * n4 * n6);
	return this1;
};
geom_matrix_Quaternion.fromAxisAngle = function(theta,axis) {
	var half = theta / 2.;
	var c = Math.cos(half);
	var s = Math.sin(half);
	var this1 = new geom_structure_Mat1x4(s * axis.x,s * axis.y,s * axis.z,c);
	return this1;
};
geom_matrix_Quaternion.lerp = function(a,b,t) {
	var currentLength = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		a.x *= mul;
		a.y *= mul;
		a.z *= mul;
		a.w *= mul;
		var tmp = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
	}
	var currentLength = Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		b.x *= mul;
		b.y *= mul;
		b.z *= mul;
		b.w *= mul;
		var tmp = b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w;
	}
	var v = 1.0 - t;
	var this1 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	var a = this1;
	var this1 = new geom_structure_Mat1x4(b.x * t,b.y * t,b.z * t,b.w * t);
	var b = this1;
	var this1 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	return this1;
};
geom_matrix_Quaternion.set_euler = function(this1,a) {
	var x5 = a.x * .5;
	var y5 = a.y * .5;
	var z5 = a.z * .5;
	var cx = Math.cos(x5);
	var sx = Math.sin(x5);
	var cy = Math.cos(y5);
	var sy = Math.sin(y5);
	var cz = Math.cos(z5);
	var sz = Math.sin(z5);
	this1.w = cx * cy * cz + sx * sy * sz;
	this1.x = sx * cy * cz - cx * sy * sz;
	this1.y = cx * sy * cz + sx * cy * sz;
	this1.z = cx * cy * sz - sx * sy * cz;
	return this1;
};
geom_matrix_Quaternion.get_euler = function(this1) {
	var this2 = new geom_structure_Mat1x4(Math.atan2(2 * (this1.w * this1.x + this1.y * this1.z),1 - 2 * (this1.x * this1.x + this1.y * this1.y)),Math.asin(2 * (this1.w * this1.y - this1.z * this1.x)),Math.atan2(2 * (this1.w * this1.z + this1.x * this1.y),1 - 2 * (this1.y * this1.y + this1.z * this1.z)),1.);
	return this2;
};
geom_matrix_Quaternion.slerp = function(this1,v1,t) {
	var this2 = new geom_structure_Mat1x4(this1.x,this1.y,this1.z,this1.w);
	var v0 = this2;
	var currentLength = Math.sqrt(v0.x * v0.x + v0.y * v0.y + v0.z * v0.z + v0.w * v0.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		v0.x *= mul;
		v0.y *= mul;
		v0.z *= mul;
		v0.w *= mul;
		var tmp = v0.x * v0.x + v0.y * v0.y + v0.z * v0.z + v0.w * v0.w;
	}
	var dot = v0.x * v1.x + v0.y * v1.y + v0.z * v1.z + v0.w * v1.w;
	if(dot < 0.0) {
		var this1 = new geom_structure_Mat1x4(-v1.x,-v1.y,-v1.z,-v1.w);
		v1 = this1;
		dot = -dot;
	}
	if(dot > 0.9995) {
		var _g = t;
		var this1 = new geom_structure_Mat1x4(v1.x - v0.x,v1.y - v0.y,v1.z - v0.z,v1.w - v0.w);
		var _g1 = this1;
		var this1 = new geom_structure_Mat1x4(_g1.x * _g,_g1.y * _g,_g1.z * _g,_g1.w * _g);
		var b = this1;
		var this1 = new geom_structure_Mat1x4(v0.x + b.x,v0.y + b.y,v0.z + b.z,v0.w + b.w);
		var result = this1;
		var currentLength = Math.sqrt(result.x * result.x + result.y * result.y + result.z * result.z + result.w * result.w);
		if(currentLength != 0.) {
			var mul = 1. / currentLength;
			result.x *= mul;
			result.y *= mul;
			result.z *= mul;
			result.w *= mul;
			var tmp = result.x * result.x + result.y * result.y + result.z * result.z + result.w * result.w;
		}
		return result;
	}
	var theta0 = Math.acos(dot);
	var theta = theta0 * t;
	var sinTheta = Math.sin(theta);
	var sinTheta0 = Math.sin(theta0);
	var ratioA = Math.cos(theta) - dot * sinTheta / sinTheta0;
	var ratioB = sinTheta / sinTheta0;
	var this1 = new geom_structure_Mat1x4(v0.x * ratioA + v1.x * ratioB,v0.y * ratioA + v1.y * ratioB,v0.z * ratioA + v1.z * ratioB,v0.x * ratioA + v1.x * ratioB);
	var q = this1;
	var currentLength = Math.sqrt(q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		q.x *= mul;
		q.y *= mul;
		q.z *= mul;
		q.w *= mul;
		var tmp = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;
	}
	return q;
};
geom_matrix_Quaternion.scalarReal = function(s) {
	var this1 = new geom_structure_Mat1x4(0,0,0,Math.sqrt(s));
	return this1;
};
geom_matrix_Quaternion.scaled = function(this1,s) {
	var this2 = new geom_structure_Mat1x4(this1.x * s,this1.y * s,this1.z * s,this1.w * s);
	return this2;
};
geom_matrix_Quaternion.normalize = function(this1) {
	var currentLength = Math.sqrt(this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this1.x *= mul;
		this1.y *= mul;
		this1.z *= mul;
		this1.w *= mul;
		var tmp = this1.x * this1.x + this1.y * this1.y + this1.z * this1.z + this1.w * this1.w;
	}
	return this1;
};
geom_matrix_Quaternion.lookAt = function(this1,target,current,eye,up) {
	var this1 = new geom_structure_Mat1x4(current.x - eye.x,current.y - eye.y,current.z - eye.z,current.w - eye.w);
	var this2 = this1;
	var currentLength = Math.sqrt(this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this2.x *= mul;
		this2.y *= mul;
		this2.z *= mul;
		this2.w *= mul;
		var tmp = this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w;
	}
	var n1 = this2;
	var this1 = new geom_structure_Mat1x4(target.x - eye.x,target.y - eye.y,target.z - eye.z,target.w - eye.w);
	var this2 = this1;
	var currentLength = Math.sqrt(this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		this2.x *= mul;
		this2.y *= mul;
		this2.z *= mul;
		this2.w *= mul;
		var tmp = this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w;
	}
	var n2 = this2;
	var d = n1.x * n2.x + n1.y * n2.y + n1.z * n2.z + n1.w * n2.w;
	if(d > 0.9998) {
		var this1 = new geom_structure_Mat1x4(0.,0.,1.,0.);
		return this1;
	}
	if(d < -0.9998) {
		var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this2 = this1;
		var c = Math.cos(0.5);
		var s = Math.sin(0.5);
		var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,c,-s,0.,0.,s,c,0.);
		var s = this1;
		var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
		var t = this1;
		var this1 = new geom_structure_Mat1x4(t.a * n1.x + t.b * n1.y + t.c * n1.z + t.d,t.e * n1.x + t.f * n1.y + t.g * n1.z + t.h,t.i * n1.x + t.j * n1.y + t.k * n1.z + t.l,1.);
		n1 = this1;
	}
	var axis = n1;
	var this1 = new geom_structure_Mat1x4(axis.y * n2.z - axis.z * n2.y,axis.z * n2.x - axis.x * n2.z,axis.x * n2.y - axis.y * n2.x,axis.w * n2.w);
	var pointToTarget = new geom_structure_Mat1x4(axis.x,axis.y,axis.z,1.0 + d);
	var currentLength = Math.sqrt(pointToTarget.x * pointToTarget.x + pointToTarget.y * pointToTarget.y + pointToTarget.z * pointToTarget.z + pointToTarget.w * pointToTarget.w);
	if(currentLength != 0.) {
		var mul = 1. / currentLength;
		pointToTarget.x *= mul;
		pointToTarget.y *= mul;
		pointToTarget.z *= mul;
		pointToTarget.w *= mul;
		var tmp = pointToTarget.x * pointToTarget.x + pointToTarget.y * pointToTarget.y + pointToTarget.z * pointToTarget.z + pointToTarget.w * pointToTarget.w;
	}
	var a = pointToTarget.x;
	var b = pointToTarget.y;
	var c = pointToTarget.z;
	var this1 = new geom_structure_Mat4x3(b * b + c * c,-a * b,-b * a,0,-b * a,a * a + c * c,-b * c,0,-c * a,-c * b,a * a + b * b,0);
	var projectionMatrix = this1;
	var this1 = new geom_structure_Mat1x4(projectionMatrix.a * up.x + projectionMatrix.b * up.y + projectionMatrix.c * up.z + projectionMatrix.d,projectionMatrix.e * up.x + projectionMatrix.f * up.y + projectionMatrix.g * up.z + projectionMatrix.h,projectionMatrix.i * up.x + projectionMatrix.j * up.y + projectionMatrix.k * up.z + projectionMatrix.l,1.);
	var upProjected = this1;
	var y = new geom_structure_Mat1x4(0.,0.,0.,1.);
	var this1 = new geom_structure_Mat1x4(projectionMatrix.a * y.x + projectionMatrix.b * y.y + projectionMatrix.c * y.z + projectionMatrix.d,projectionMatrix.e * y.x + projectionMatrix.f * y.y + projectionMatrix.g * y.z + projectionMatrix.h,projectionMatrix.i * y.x + projectionMatrix.j * y.y + projectionMatrix.k * y.z + projectionMatrix.l,1.);
	var yaxisProjected = this1;
	d = upProjected.x * yaxisProjected.x + upProjected.y * yaxisProjected.y + upProjected.z * yaxisProjected.z + upProjected.w * yaxisProjected.w;
	var s = Math.sqrt(1.0 - d * d);
	var twist = new geom_structure_Mat1x4(n2.x * s,n2.y * s,n2.z * s,d);
	var this1 = new geom_structure_Mat1x4(pointToTarget.x * twist.w + pointToTarget.y * twist.z - pointToTarget.z * twist.y + pointToTarget.w * twist.x,-pointToTarget.x * twist.z + pointToTarget.y * twist.w + pointToTarget.z * twist.x + pointToTarget.w * twist.y,pointToTarget.x * twist.y - pointToTarget.y * twist.x + pointToTarget.z * twist.w + pointToTarget.w * twist.z,-pointToTarget.x * twist.x - pointToTarget.y * twist.y - pointToTarget.z * twist.z + pointToTarget.w * twist.w);
	return this1;
};
geom_matrix_Quaternion.fromVec = function(vec) {
	var this1 = new geom_structure_Mat1x4(vec[0],vec[1],vec[2],vec[3]);
	return this1;
};
geom_matrix_Quaternion.toVector = function(this1) {
	var this2 = new Array(4);
	var vec = this2;
	vec[0] = this1.x;
	vec[1] = this1.y;
	vec[2] = this1.z;
	vec[3] = this1.w;
	return vec;
};
geom_matrix_Quaternion.fromArray = function(arr) {
	var this1 = new geom_structure_Mat1x4(arr[0],arr[1],arr[2],arr[3]);
	return this1;
};
geom_matrix_Quaternion.toArray = function(this1) {
	return [this1.x,this1.y,this1.z,this1.w];
};
geom_matrix_Quaternion.toMatrix4x3 = function(this1) {
	var this2 = this1;
	var this1 = this2;
	var xx = this1.x * this1.x;
	var xy = this1.x * this1.y;
	var xz = this1.x * this1.z;
	var xw = this1.x * this1.w;
	var yy = this1.y * this1.y;
	var yz = this1.y * this1.z;
	var yw = this1.y * this1.w;
	var zz = this1.z * this1.z;
	var zw = this1.z * this1.w;
	var this1 = new geom_structure_Mat3x3(1 - 2 * (yy + zz),2 * (xy - zw),2 * (xz + yw),2 * (xy + zw),1 - 2 * (xx + zz),2 * (yz - xw),2 * (xz - yw),2 * (yz + xw),1 - 2 * (xx + yy));
	var m = this1;
	var this1 = new geom_structure_Mat2x2(m.a,m.b,m.d,m.e);
	var this2 = this1;
	var this1 = new geom_structure_Mat4x3(this2.a,this2.b,0.,0.,this2.c,this2.d,0.,0.,0.,0.,1.,0.);
	return this1;
};
geom_matrix_Quaternion.toMatrix3x3 = function(this1) {
	var xx = this1.x * this1.x;
	var xy = this1.x * this1.y;
	var xz = this1.x * this1.z;
	var xw = this1.x * this1.w;
	var yy = this1.y * this1.y;
	var yz = this1.y * this1.z;
	var yw = this1.y * this1.w;
	var zz = this1.z * this1.z;
	var zw = this1.z * this1.w;
	var this1 = new geom_structure_Mat3x3(1 - 2 * (yy + zz),2 * (xy - zw),2 * (xz + yw),2 * (xy + zw),1 - 2 * (xx + zz),2 * (yz - xw),2 * (xz - yw),2 * (yz + xw),1 - 2 * (xx + yy));
	return this1;
};
geom_matrix_Quaternion.fromMatrix4x3 = function(m4x3) {
	var this1 = new geom_structure_Mat3x3(m4x3.a,m4x3.b,m4x3.c,m4x3.e,m4x3.f,m4x3.g,m4x3.i,m4x3.j,m4x3.k);
	var m3x3 = this1;
	var this1 = new geom_structure_Mat3x3(0.,0.,0.,0.,0.,0.,0.,0.,0.);
	var tr = m3x3.a + m3x3.e + m3x3.i;
	var s;
	if(tr > 0) {
		s = Math.sqrt(tr + 1.0) * 2;
		var this1 = new geom_structure_Mat1x4((m3x3.h - m3x3.f) / s,(m3x3.c - m3x3.g) / s,(m3x3.d - m3x3.b) / s,0.25 * s);
		return this1;
	} else if(m3x3.a > m3x3.e && m3x3.a > m3x3.i) {
		s = Math.sqrt(1.0 + m3x3.a - m3x3.e - m3x3.i) * 2;
		var this1 = new geom_structure_Mat1x4(0.25 * s,(m3x3.b + m3x3.d) / s,(m3x3.c + m3x3.g) / s,(m3x3.h - m3x3.f) / s);
		return this1;
	} else if(m3x3.e > m3x3.i) {
		s = Math.sqrt(1.0 + m3x3.e - m3x3.a - m3x3.i) * 2;
		var this1 = new geom_structure_Mat1x4((m3x3.b + m3x3.d) / s,0.25 * s,(m3x3.f + m3x3.h) / s,(m3x3.c - m3x3.g) / s);
		return this1;
	} else {
		s = Math.sqrt(1.0 + m3x3.i - m3x3.i - m3x3.e) * 2;
		var this1 = new geom_structure_Mat1x4((m3x3.d - m3x3.b) / s,(m3x3.c + m3x3.g) / s,(m3x3.f + m3x3.h) / s,0.25 * s);
		return this1;
	}
};
geom_matrix_Quaternion.fromMatrix3x3 = function(m) {
	var this1 = new geom_structure_Mat3x3(0.,0.,0.,0.,0.,0.,0.,0.,0.);
	var tr = m.a + m.e + m.i;
	var s;
	if(tr > 0) {
		s = Math.sqrt(tr + 1.0) * 2;
		var this1 = new geom_structure_Mat1x4((m.h - m.f) / s,(m.c - m.g) / s,(m.d - m.b) / s,0.25 * s);
		return this1;
	} else if(m.a > m.e && m.a > m.i) {
		s = Math.sqrt(1.0 + m.a - m.e - m.i) * 2;
		var this1 = new geom_structure_Mat1x4(0.25 * s,(m.b + m.d) / s,(m.c + m.g) / s,(m.h - m.f) / s);
		return this1;
	} else if(m.e > m.i) {
		s = Math.sqrt(1.0 + m.e - m.a - m.i) * 2;
		var this1 = new geom_structure_Mat1x4((m.b + m.d) / s,0.25 * s,(m.f + m.h) / s,(m.c - m.g) / s);
		return this1;
	} else {
		s = Math.sqrt(1.0 + m.i - m.i - m.e) * 2;
		var this1 = new geom_structure_Mat1x4((m.d - m.b) / s,(m.c + m.g) / s,(m.f + m.h) / s,0.25 * s);
		return this1;
	}
};
var geom_move_Axis3 = function() {
	this.tz = new geom_move_Parameter();
	this.ty = new geom_move_Parameter();
	this.tx = new geom_move_Parameter();
	this.rz = new geom_move_Parameter();
	this.ry = new geom_move_Parameter();
	this.rx = new geom_move_Parameter();
};
$hxClasses["geom.move.Axis3"] = geom_move_Axis3;
geom_move_Axis3.__name__ = "geom.move.Axis3";
geom_move_Axis3.prototype = {
	reset: function() {
		this.rx.value = 0.;
		this.ry.value = 0.;
		this.rz.value = 0.;
		this.tx.value = 0.;
		this.ty.value = 0.;
		this.tz.value = 0.;
	}
	,pitch: function(v) {
		var _this = this.rx;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,yaw: function(v) {
		var _this = this.ry;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,roll: function(v) {
		var _this = this.rz;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,alongX: function(v) {
		var _this = this.tx;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,alongY: function(v) {
		var _this = this.ty;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,alongZ: function(v) {
		var _this = this.tz;
		_this.trinary.set_trit(v);
		if(_this.trinary.changed) {
			if(v == 0.) {
				_this.value = 0.;
			} else {
				var f = v;
				_this.value = -f * _this.step;
			}
		}
	}
	,updateCalculate: function(q) {
		var rotations = this.rx.trinary.changed || this.ry.trinary.changed || this.rz.trinary.changed;
		var translations = this.tx.trinary.changed || this.ty.trinary.changed || this.tz.trinary.changed;
		if(translations || rotations) {
			var qReal;
			if(rotations) {
				var n9 = this.rz.value * 0.5;
				var n6 = Math.sin(n9);
				var n5 = Math.cos(n9);
				var n8 = this.rx.value * 0.5;
				var n4 = Math.sin(n8);
				var n3 = Math.cos(n8);
				var n7 = this.ry.value * 0.5;
				var n2 = Math.sin(n7);
				var n1 = Math.cos(n7);
				var this1 = new geom_structure_Mat1x4(n1 * n4 * n5 + n2 * n3 * n6,n2 * n3 * n5 - n1 * n4 * n6,n1 * n3 * n6 - n2 * n4 * n5,n1 * n3 * n5 + n2 * n4 * n6);
				qReal = this1;
			} else {
				var this1 = new geom_structure_Mat1x4(0.,0.,0.,1.);
				qReal = this1;
			}
			var qDual;
			if(translations) {
				var this1 = new geom_structure_Mat1x4(this.tx.value,this.ty.value,this.tz.value,1.);
				qDual = this1;
			} else {
				var this1 = new geom_structure_Mat1x4(0.,0.,0.,0.);
				qDual = this1;
			}
			var currentLength = Math.sqrt(qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w);
			if(currentLength != 0.) {
				var mul = 1. / currentLength;
				qReal.x *= mul;
				qReal.y *= mul;
				qReal.z *= mul;
				qReal.w *= mul;
				var real = qReal.x * qReal.x + qReal.y * qReal.y + qReal.z * qReal.z + qReal.w * qReal.w;
			}
			var real = qReal;
			var this1 = new geom_structure_Mat1x4(qDual.x,qDual.y,qDual.z,0.);
			var q1 = this1;
			var this1 = new geom_structure_Mat1x4(q1.x * 0.5,q1.y * 0.5,q1.z * 0.5,q1.w * 0.5);
			q1 = this1;
			var this1 = new geom_structure_Mat1x4(q1.x * real.w + q1.y * real.z - q1.z * real.y + q1.w * real.x,-q1.x * real.z + q1.y * real.w + q1.z * real.x + q1.w * real.y,q1.x * real.y - q1.y * real.x + q1.z * real.w + q1.w * real.z,-q1.x * real.x - q1.y * real.y - q1.z * real.z + q1.w * real.w);
			var dual = this1;
			var this1 = new geom_structure_DualQ(real,dual);
			var dualQuaternion = this1;
			var q1 = q.real;
			var q2 = dualQuaternion.real;
			var this1 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
			var q1 = q.dual;
			var q2 = dualQuaternion.real;
			var this2 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
			var a = this2;
			var q1 = q.real;
			var q2 = dualQuaternion.dual;
			var this2 = new geom_structure_Mat1x4(q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x,-q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y,q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z,-q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);
			var b = this2;
			var this2 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
			var this3 = new geom_structure_DualQ(this1,this2);
			return this3;
		} else {
			return q;
		}
	}
	,rotationChanged: function() {
		if(!(this.rx.trinary.changed || this.ry.trinary.changed)) {
			return this.rz.trinary.changed;
		} else {
			return true;
		}
	}
	,translationChanged: function() {
		if(!(this.tx.trinary.changed || this.ty.trinary.changed)) {
			return this.tz.trinary.changed;
		} else {
			return true;
		}
	}
	,__class__: geom_move_Axis3
};
var geom_move_Parameter = function() {
	this.trinary = new geom_move_Trinary(0.);
	this.value = 0.;
	this.step = 0.005;
};
$hxClasses["geom.move.Parameter"] = geom_move_Parameter;
geom_move_Parameter.__name__ = "geom.move.Parameter";
geom_move_Parameter.prototype = {
	update: function(v) {
		this.trinary.set_trit(v);
		if(this.trinary.changed) {
			if(v == 0.) {
				this.value = 0.;
			} else {
				var f = v;
				this.value = -f * this.step;
			}
		}
	}
	,__class__: geom_move_Parameter
};
var geom_move_Trinary = function(v) {
	this.changed = false;
	this.set_trit(v);
};
$hxClasses["geom.move.Trinary"] = geom_move_Trinary;
geom_move_Trinary.__name__ = "geom.move.Trinary";
geom_move_Trinary.prototype = {
	set_trit: function(v) {
		if(this.get_trit() == v) {
			this.changed = false;
		} else {
			this.trit = v;
			this.changed = true;
		}
		return v;
	}
	,get_trit: function() {
		return this.trit;
	}
	,increment: function() {
		switch(this.get_trit()) {
		case -1.:
			this.set_trit(0.);
			break;
		case 0.:
			this.set_trit(1.);
			break;
		case 1.:
			this.set_trit(-1.);
			break;
		}
	}
	,decrement: function() {
		switch(this.get_trit()) {
		case -1.:
			this.set_trit(1.);
			break;
		case 0.:
			this.set_trit(-1.);
			break;
		case 1.:
			this.set_trit(0.);
			break;
		}
	}
	,__class__: geom_move_Trinary
};
var geom_obj_Quad2D = function(A,B,C,D) {
	this.A = A;
	this.B = B;
	this.C = C;
	this.D = D;
};
$hxClasses["geom.obj.Quad2D"] = geom_obj_Quad2D;
geom_obj_Quad2D.__name__ = "geom.obj.Quad2D";
geom_obj_Quad2D.prototype = {
	__class__: geom_obj_Quad2D
};
var geom_obj_Tri3D = {};
geom_obj_Tri3D._new = function(tv) {
	var this1 = tv;
	return this1;
};
geom_obj_Tri3D.add0 = function(tv,p) {
	var a = tv.a;
	var this1 = new geom_structure_Mat1x4(a.x + p.x,a.y + p.y,a.z + p.z,a.w + p.w);
	var a = tv.b;
	var this2 = new geom_structure_Mat1x4(a.x + p.x,a.y + p.y,a.z + p.z,a.w + p.w);
	var a = tv.c;
	var this3 = new geom_structure_Mat1x4(a.x + p.x,a.y + p.y,a.z + p.z,a.w + p.w);
	return geom_obj_Tri3D._new(new geom_structure_TriVec(this1,this2,this3));
};
geom_obj_Tri3D.add1 = function(p,tv) {
	var a = tv.a;
	var this1 = new geom_structure_Mat1x4(a.x + p.x,a.y + p.y,a.z + p.z,a.w + p.w);
	var a = tv.b;
	var this2 = new geom_structure_Mat1x4(a.x + p.x,a.y + p.y,a.z + p.z,a.w + p.w);
	var a = tv.c;
	var this3 = new geom_structure_Mat1x4(a.x + p.x,a.y + p.y,a.z + p.z,a.w + p.w);
	return geom_obj_Tri3D._new(new geom_structure_TriVec(this1,this2,this3));
};
geom_obj_Tri3D.sub = function(tv,p) {
	var a = tv.a;
	var this1 = new geom_structure_Mat1x4(a.x - p.x,a.y - p.y,a.z - p.z,a.w - p.w);
	var a = tv.b;
	var this2 = new geom_structure_Mat1x4(a.x - p.x,a.y - p.y,a.z - p.z,a.w - p.w);
	var a = tv.c;
	var this3 = new geom_structure_Mat1x4(a.x - p.x,a.y - p.y,a.z - p.z,a.w - p.w);
	return geom_obj_Tri3D._new(new geom_structure_TriVec(this1,this2,this3));
};
geom_obj_Tri3D.scaleMultiply = function(tv,p) {
	var a = tv.a;
	var v = p.x;
	var this1 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	var a = tv.b;
	var v = p.y;
	var this2 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	var a = tv.c;
	var v = p.z;
	var this3 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	return geom_obj_Tri3D._new(new geom_structure_TriVec(this1,this2,this3));
};
geom_obj_Tri3D.magnitudeSquaredFrom = function(this1,centre) {
	var maximum = 0.;
	var b = this1.a;
	var this2 = new geom_structure_Mat1x4(centre.x - b.x,centre.y - b.y,centre.z - b.z,centre.w - b.w);
	var this3 = this2;
	var ca = this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w;
	if(ca > maximum) {
		maximum = ca;
	}
	var b = this1.b;
	var this2 = new geom_structure_Mat1x4(centre.x - b.x,centre.y - b.y,centre.z - b.z,centre.w - b.w);
	var this3 = this2;
	var cb = this3.x * this3.x + this3.y * this3.y + this3.z * this3.z + this3.w * this3.w;
	if(cb > maximum) {
		maximum = cb;
	}
	var b = this1.b;
	var this1 = new geom_structure_Mat1x4(centre.x - b.x,centre.y - b.y,centre.z - b.z,centre.w - b.w);
	var this2 = this1;
	var cb = this2.x * this2.x + this2.y * this2.y + this2.z * this2.z + this2.w * this2.w;
	if(cb > maximum) {
		maximum = cb;
	}
	return maximum;
};
geom_obj_Tri3D.centre = function(this1) {
	var a = this1.a;
	var b = this1.b;
	var this2 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	var a = this2;
	var b = this1.c;
	var this1 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	var a = this1;
	var v = 0.333333333333333315;
	var this1 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	return this1;
};
geom_obj_Tri3D.transform = function(this1,m) {
	var this2 = this1.a;
	var this3 = new geom_structure_Mat1x4(m.a * this2.x + m.b * this2.y + m.c * this2.z + m.d,m.e * this2.x + m.f * this2.y + m.g * this2.z + m.h,m.i * this2.x + m.j * this2.y + m.k * this2.z + m.l,1.);
	this1.a = this3;
	var this2 = this1.b;
	var this3 = new geom_structure_Mat1x4(m.a * this2.x + m.b * this2.y + m.c * this2.z + m.d,m.e * this2.x + m.f * this2.y + m.g * this2.z + m.h,m.i * this2.x + m.j * this2.y + m.k * this2.z + m.l,1.);
	this1.b = this3;
	var this2 = this1.c;
	var this3 = new geom_structure_Mat1x4(m.a * this2.x + m.b * this2.y + m.c * this2.z + m.d,m.e * this2.x + m.f * this2.y + m.g * this2.z + m.h,m.i * this2.x + m.j * this2.y + m.k * this2.z + m.l,1.);
	this1.c = this3;
	return geom_obj_Tri3D._new(this1);
};
geom_obj_Tri3D.quatRotation = function(this1,q) {
	var this2 = q;
	var this3 = this2;
	var xx = this3.x * this3.x;
	var xy = this3.x * this3.y;
	var xz = this3.x * this3.z;
	var xw = this3.x * this3.w;
	var yy = this3.y * this3.y;
	var yz = this3.y * this3.z;
	var yw = this3.y * this3.w;
	var zz = this3.z * this3.z;
	var zw = this3.z * this3.w;
	var this2 = new geom_structure_Mat3x3(1 - 2 * (yy + zz),2 * (xy - zw),2 * (xz + yw),2 * (xy + zw),1 - 2 * (xx + zz),2 * (yz - xw),2 * (xz - yw),2 * (yz + xw),1 - 2 * (xx + yy));
	var m = this2;
	var this2 = new geom_structure_Mat2x2(m.a,m.b,m.d,m.e);
	var this3 = this2;
	var this2 = new geom_structure_Mat4x3(this3.a,this3.b,0.,0.,this3.c,this3.d,0.,0.,0.,0.,1.,0.);
	var m = this2;
	var this2 = this1.a;
	var this3 = new geom_structure_Mat1x4(m.a * this2.x + m.b * this2.y + m.c * this2.z + m.d,m.e * this2.x + m.f * this2.y + m.g * this2.z + m.h,m.i * this2.x + m.j * this2.y + m.k * this2.z + m.l,1.);
	this1.a = this3;
	var this2 = this1.b;
	var this3 = new geom_structure_Mat1x4(m.a * this2.x + m.b * this2.y + m.c * this2.z + m.d,m.e * this2.x + m.f * this2.y + m.g * this2.z + m.h,m.i * this2.x + m.j * this2.y + m.k * this2.z + m.l,1.);
	this1.b = this3;
	var this2 = this1.c;
	var this3 = new geom_structure_Mat1x4(m.a * this2.x + m.b * this2.y + m.c * this2.z + m.d,m.e * this2.x + m.f * this2.y + m.g * this2.z + m.h,m.i * this2.x + m.j * this2.y + m.k * this2.z + m.l,1.);
	this1.c = this3;
	return geom_obj_Tri3D._new(this1);
};
geom_obj_Tri3D.multiplyQ = function(this1,q) {
	var a = this1.a;
	var b = this1.b;
	var this2 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	var a = this2;
	var b = this1.c;
	var this2 = new geom_structure_Mat1x4(a.x + b.x,a.y + b.y,a.z + b.z,a.w + b.w);
	var a = this2;
	var v = 0.333333333333333315;
	var this2 = new geom_structure_Mat1x4(a.x * v,a.y * v,a.z * v,a.w * v);
	var cp = this2;
	var a = this1.a;
	var this2 = new geom_structure_Mat1x4(a.x - cp.x,a.y - cp.y,a.z - cp.z,a.w - cp.w);
	var a2 = this2;
	var a = this1.b;
	var this2 = new geom_structure_Mat1x4(a.x - cp.x,a.y - cp.y,a.z - cp.z,a.w - cp.w);
	var b2 = this2;
	var a = this1.c;
	var this2 = new geom_structure_Mat1x4(a.x - cp.x,a.y - cp.y,a.z - cp.z,a.w - cp.w);
	var c2 = this2;
	var this2 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	var aout = this2;
	var this2 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	var bout = this2;
	var this2 = new geom_structure_Mat1x4(1.,1.,1.,1.);
	var cout = this2;
	var vx = a2.x;
	var vy = a2.y;
	var vz = a2.z;
	var qx = q.x;
	var qy = q.y;
	var qz = q.z;
	var qw = q.w;
	aout.w = -qx * vx - qy * vy - qz * vz;
	aout.x = qw * vx + qy * vz - qz * vy;
	aout.y = qw * vy - qx * vz + qz * vx;
	aout.z = qw * vz + qx * vy - qy * vx;
	var vx = b2.x;
	var vy = b2.y;
	var vz = b2.z;
	var qx = q.x;
	var qy = q.y;
	var qz = q.z;
	var qw = q.w;
	bout.w = -qx * vx - qy * vy - qz * vz;
	bout.x = qw * vx + qy * vz - qz * vy;
	bout.y = qw * vy - qx * vz + qz * vx;
	bout.z = qw * vz + qx * vy - qy * vx;
	var vx = c2.x;
	var vy = c2.y;
	var vz = c2.z;
	var qx = q.x;
	var qy = q.y;
	var qz = q.z;
	var qw = q.w;
	cout.w = -qx * vx - qy * vy - qz * vz;
	cout.x = qw * vx + qy * vz - qz * vy;
	cout.y = qw * vy - qx * vz + qz * vx;
	cout.z = qw * vz + qx * vy - qy * vx;
	var this2 = new geom_structure_Mat1x4(aout.x + cp.x,aout.y + cp.y,aout.z + cp.z,aout.w + cp.w);
	a2 = this2;
	var this2 = new geom_structure_Mat1x4(bout.x + cp.x,bout.y + cp.y,bout.z + cp.z,bout.w + cp.w);
	b2 = this2;
	var this2 = new geom_structure_Mat1x4(bout.x + cp.x,bout.y + cp.y,bout.z + cp.z,bout.w + cp.w);
	c2 = this2;
	this1 = geom_obj_Tri3D._new(new geom_structure_TriVec(a2,b2,c2));
	return this1;
};
var geom_obj_TriColors = {};
geom_obj_TriColors._new = function(ti) {
	var this1 = ti;
	return this1;
};
var geom_structure_DualQ = function(real,dual) {
	this.real = real;
	this.dual = dual;
};
$hxClasses["geom.structure.DualQ"] = geom_structure_DualQ;
geom_structure_DualQ.__name__ = "geom.structure.DualQ";
geom_structure_DualQ.prototype = {
	__class__: geom_structure_DualQ
};
var geom_structure_Mat1x2 = function(x,y) {
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
};
$hxClasses["geom.structure.Mat1x2"] = geom_structure_Mat1x2;
geom_structure_Mat1x2.__name__ = "geom.structure.Mat1x2";
geom_structure_Mat1x2.prototype = {
	__class__: geom_structure_Mat1x2
};
var geom_structure_Mat1x3 = function(x,y,z) {
	this.z = 0.;
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["geom.structure.Mat1x3"] = geom_structure_Mat1x3;
geom_structure_Mat1x3.__name__ = "geom.structure.Mat1x3";
geom_structure_Mat1x3.prototype = {
	__class__: geom_structure_Mat1x3
};
var geom_structure_Mat1x4 = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	this.w = 1.;
	this.z = 0.;
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["geom.structure.Mat1x4"] = geom_structure_Mat1x4;
geom_structure_Mat1x4.__name__ = "geom.structure.Mat1x4";
geom_structure_Mat1x4.prototype = {
	__class__: geom_structure_Mat1x4
};
var geom_structure_Mat2x2 = function(a,b,c,d) {
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
};
$hxClasses["geom.structure.Mat2x2"] = geom_structure_Mat2x2;
geom_structure_Mat2x2.__name__ = "geom.structure.Mat2x2";
geom_structure_Mat2x2.prototype = {
	__class__: geom_structure_Mat2x2
};
var geom_structure_Mat3x3 = function(a,b,c,d,e,f,g,h,i) {
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
};
$hxClasses["geom.structure.Mat3x3"] = geom_structure_Mat3x3;
geom_structure_Mat3x3.__name__ = "geom.structure.Mat3x3";
geom_structure_Mat3x3.prototype = {
	__class__: geom_structure_Mat3x3
};
var geom_structure_Mat4x3 = function(a,b,c,d,e,f,g,h,i,j,k,l) {
	this.l = 0.;
	this.k = 0.;
	this.j = 0.;
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
	this.j = j;
	this.k = k;
	this.l = l;
};
$hxClasses["geom.structure.Mat4x3"] = geom_structure_Mat4x3;
geom_structure_Mat4x3.__name__ = "geom.structure.Mat4x3";
geom_structure_Mat4x3.prototype = {
	__class__: geom_structure_Mat4x3
};
var geom_structure_Mat4x4 = function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) {
	this.p = 0.;
	this.o = 0.;
	this.n = 0.;
	this.m = 0.;
	this.l = 0.;
	this.k = 0.;
	this.j = 0.;
	this.i = 0.;
	this.h = 0.;
	this.g = 0.;
	this.f = 0.;
	this.e = 0.;
	this.d = 0.;
	this.c = 0.;
	this.b = 0.;
	this.a = 0.;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.e = e;
	this.f = f;
	this.g = g;
	this.h = h;
	this.i = i;
	this.j = j;
	this.k = k;
	this.l = l;
	this.m = m;
	this.n = n;
	this.o = o;
	this.p = p;
};
$hxClasses["geom.structure.Mat4x4"] = geom_structure_Mat4x4;
geom_structure_Mat4x4.__name__ = "geom.structure.Mat4x4";
geom_structure_Mat4x4.prototype = {
	__class__: geom_structure_Mat4x4
};
var geom_structure_Range = function(u,l) {
	this.l = 0.;
	this.u = 0.;
	this.u = u;
	this.l = l;
};
$hxClasses["geom.structure.Range"] = geom_structure_Range;
geom_structure_Range.__name__ = "geom.structure.Range";
geom_structure_Range.prototype = {
	__class__: geom_structure_Range
};
var geom_structure_TriInt = function(a,b,c) {
	this.a = a;
	this.b = b;
	this.c = c;
};
$hxClasses["geom.structure.TriInt"] = geom_structure_TriInt;
geom_structure_TriInt.__name__ = "geom.structure.TriInt";
geom_structure_TriInt.prototype = {
	__class__: geom_structure_TriInt
};
var geom_structure_TriVec = function(a,b,c) {
	this.a = a;
	this.b = b;
	this.c = c;
};
$hxClasses["geom.structure.TriVec"] = geom_structure_TriVec;
geom_structure_TriVec.__name__ = "geom.structure.TriVec";
geom_structure_TriVec.prototype = {
	__class__: geom_structure_TriVec
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var k = haxe_ds_StringMap.keysIterator(v1.h);
				while(k.hasNext()) {
					var k1 = k.next();
					this.serializeString(k1);
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = _$String_String_$Impl_$.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : "haxe.zip.ExtraField", __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : "haxe.zip.Huffman", __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.table;
			var _g = t.n;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : "haxe.zip._InflateImpl.State", __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n = h.n;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.unzip = function(f) {
	if(!f.compressed) {
		return f.data;
	}
	throw haxe_Exception.thrown("No uncompress support");
};
haxe_zip_Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			csize = -1;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.dataSize < 0) {
				var bufSize = 65536;
				if(tmp == null) {
					tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
				}
				var out = new haxe_io_BytesBuffer();
				var z = new haxe_zip_InflateImpl(this.i,false,false);
				while(true) {
					var n = z.readBytes(tmp,0,bufSize);
					out.addBytes(tmp,0,n);
					if(n < bufSize) {
						break;
					}
				}
				e.data = out.getBytes();
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var hxGeomAlgo_Debug = function() { };
$hxClasses["hxGeomAlgo.Debug"] = hxGeomAlgo_Debug;
hxGeomAlgo_Debug.__name__ = "hxGeomAlgo.Debug";
hxGeomAlgo_Debug.assert = function(cond,message,pos) {
	return;
};
var hxGeomAlgo_HomogCoord = function(x,y,w) {
	if(w == null) {
		w = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.w = w;
};
$hxClasses["hxGeomAlgo.HomogCoord"] = hxGeomAlgo_HomogCoord;
hxGeomAlgo_HomogCoord.__name__ = "hxGeomAlgo.HomogCoord";
hxGeomAlgo_HomogCoord.det = function(p,q,r) {
	return p.w * q.perpdot(r) - q.w * p.perpdot(r) + r.w * p.perpdot(q);
};
hxGeomAlgo_HomogCoord.ccw = function(p,q,r) {
	return hxGeomAlgo_HomogCoord.det(p,q,r) > 0;
};
hxGeomAlgo_HomogCoord.cw = function(p,q,r) {
	return hxGeomAlgo_HomogCoord.det(p,q,r) < 0;
};
hxGeomAlgo_HomogCoord.prototype = {
	add: function(p) {
		this.x += p.x;
		this.y += p.y;
		return this;
	}
	,sub: function(p) {
		this.x -= p.x;
		this.y -= p.y;
		return this;
	}
	,neg: function() {
		this.w = -this.w;
		this.x = -this.x;
		this.y = -this.y;
		return this;
	}
	,mul: function(m) {
		this.w *= m;
		this.x *= m;
		this.y *= m;
		return this;
	}
	,div: function(m) {
		this.w /= m;
		this.x /= m;
		this.y /= m;
		return this;
	}
	,normalize: function() {
		return this.div(this.length());
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.lengthSquared());
	}
	,perp: function() {
		var tmp = -this.y;
		this.y = this.x;
		this.x = tmp;
		return this;
	}
	,dotPoint: function(p) {
		return this.w + this.x * p.x + this.y * p.y;
	}
	,dot: function(p) {
		return this.w * p.w + this.x * p.x + this.y * p.y;
	}
	,perpdot: function(p) {
		return this.x * p.y - this.y * p.x;
	}
	,dotperp: function(p) {
		return -this.x * p.y + this.y * p.x;
	}
	,equals: function(p) {
		if(p.w * this.x == this.w * p.x) {
			return p.w * this.y == this.w * p.y;
		} else {
			return false;
		}
	}
	,left: function(p) {
		return this.dotPoint(p) > 0;
	}
	,right: function(p) {
		return this.dotPoint(p) < 0;
	}
	,toScreen: function() {
		return hxGeomAlgo_HxPoint._new(this.x / this.w,-this.y / this.w);
	}
	,toPoint: function() {
		return hxGeomAlgo_HxPoint._new(this.x / this.w,this.y / this.w);
	}
	,meet: function(p) {
		return new hxGeomAlgo_HomogCoord(p.w * this.y - this.w * p.y,this.w * p.x - p.w * this.x,this.x * p.y - this.y * p.x);
	}
	,meetPoint: function(p) {
		return new hxGeomAlgo_HomogCoord(this.y - this.w * p.y,this.w * p.x - this.x,this.x * p.y - this.y * p.x);
	}
	,toString: function() {
		return " (w:" + this.w + "; x:" + this.x + ", y:" + this.y + ")  ";
	}
	,__class__: hxGeomAlgo_HomogCoord
};
var hxGeomAlgo_HxPointData = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["hxGeomAlgo.HxPointData"] = hxGeomAlgo_HxPointData;
hxGeomAlgo_HxPointData.__name__ = "hxGeomAlgo.HxPointData";
hxGeomAlgo_HxPointData.prototype = {
	toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxGeomAlgo_HxPointData
};
var hxGeomAlgo_HxPoint = $hx_exports["hxGeomAlgo"]["HxPoint"] = {};
hxGeomAlgo_HxPoint.get_x = function(this1) {
	return this1.x;
};
hxGeomAlgo_HxPoint.set_x = function(this1,value) {
	return this1.x = value;
};
hxGeomAlgo_HxPoint.get_y = function(this1) {
	return this1.y;
};
hxGeomAlgo_HxPoint.set_y = function(this1,value) {
	return this1.y = value;
};
hxGeomAlgo_HxPoint._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new hxGeomAlgo_HxPointData(x,y);
	return this1;
};
hxGeomAlgo_HxPoint.setTo = function(this1,newX,newY) {
	this1.x = newX;
	this1.y = newY;
};
hxGeomAlgo_HxPoint.equals = function(this1,p) {
	if(p != null && this1.x == p.x) {
		return this1.y == p.y;
	} else {
		return false;
	}
};
hxGeomAlgo_HxPoint.clone = function(this1) {
	return hxGeomAlgo_HxPoint._new(this1.x,this1.y);
};
hxGeomAlgo_HxPoint.toString = function(this1) {
	return "(" + this1.x + ", " + this1.y + ")";
};
hxGeomAlgo_HxPoint.fromPointStruct = function(p) {
	return hxGeomAlgo_HxPoint._new(p.x,p.y);
};
hxGeomAlgo_HxPoint.toPointStruct = function(this1) {
	return { x : this1.x, y : this1.y};
};
var hxGeomAlgo_PolyTools = $hx_exports["hxGeomAlgo"]["PolyTools"] = function() { };
$hxClasses["hxGeomAlgo.PolyTools"] = hxGeomAlgo_PolyTools;
hxGeomAlgo_PolyTools.__name__ = "hxGeomAlgo.PolyTools";
hxGeomAlgo_PolyTools.isCCW = function(poly) {
	if(poly.length <= 2) {
		return true;
	}
	var signedArea = 0.;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var idx = i - 1;
		var idx1 = idx;
		var len = poly.length;
		if(idx1 < 0) {
			idx1 += len;
		}
		idx = idx1 % len;
		var idx2 = i - 1;
		var idx3 = idx2;
		var len1 = poly.length;
		if(idx3 < 0) {
			idx3 += len1;
		}
		idx2 = idx3 % len1;
		signedArea += poly[idx].x * poly[i].y - poly[i].x * poly[idx2].y;
	}
	return signedArea < 0;
};
hxGeomAlgo_PolyTools.isCW = function(poly) {
	if(poly.length <= 2) {
		return true;
	}
	var signedArea = 0.;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var idx = i - 1;
		var idx1 = idx;
		var len = poly.length;
		if(idx1 < 0) {
			idx1 += len;
		}
		idx = idx1 % len;
		var idx2 = i - 1;
		var idx3 = idx2;
		var len1 = poly.length;
		if(idx3 < 0) {
			idx3 += len1;
		}
		idx2 = idx3 % len1;
		signedArea += poly[idx].x * poly[i].y - poly[i].x * poly[idx2].y;
	}
	return signedArea > 0;
};
hxGeomAlgo_PolyTools.makeCCW = function(poly) {
	var reversed = false;
	if(!hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.makeCW = function(poly) {
	var reversed = false;
	if(hxGeomAlgo_PolyTools.isCCW(poly)) {
		poly.reverse();
		reversed = true;
	}
	return reversed;
};
hxGeomAlgo_PolyTools.isConvex = function(poly) {
	var isPositive = null;
	var _g = 0;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var lower = i == 0 ? poly.length - 1 : i - 1;
		var middle = i;
		var upper = i == poly.length - 1 ? 0 : i + 1;
		var dx0 = poly[middle].x - poly[lower].x;
		var dy0 = poly[middle].y - poly[lower].y;
		var dx1 = poly[upper].x - poly[middle].x;
		var dy1 = poly[upper].y - poly[middle].y;
		var cross = dx0 * dy1 - dx1 * dy0;
		var newIsPositive = cross > 0;
		if(cross == 0) {
			continue;
		}
		if(isPositive == null) {
			isPositive = newIsPositive;
		} else if(isPositive != newIsPositive) {
			return false;
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.isSimple = function(poly) {
	var len = poly.length;
	if(len <= 3) {
		return true;
	}
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var p0 = i;
		var p1 = i == len - 1 ? 0 : i + 1;
		var _g2 = i + 1;
		var _g3 = len;
		while(_g2 < _g3) {
			var j = _g2++;
			var q0 = j;
			var q1 = j == len - 1 ? 0 : j + 1;
			var intersection = hxGeomAlgo_PolyTools.segmentIntersect(poly[p0],poly[p1],poly[q0],poly[q1]);
			var tmp;
			var tmp1;
			if(intersection != null) {
				var tmp2;
				var w = poly[p0];
				var x = intersection.x - w.x;
				var x1 = intersection.y - w.y;
				if(!(Math.sqrt(x * x + x1 * x1) < hxGeomAlgo_PolyTools.EPSILON)) {
					var w1 = poly[p1];
					var x2 = intersection.x - w1.x;
					var x3 = intersection.y - w1.y;
					tmp2 = Math.sqrt(x2 * x2 + x3 * x3) < hxGeomAlgo_PolyTools.EPSILON;
				} else {
					tmp2 = true;
				}
				tmp1 = !tmp2;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var tmp3;
				var w2 = poly[q0];
				var x4 = intersection.x - w2.x;
				var x5 = intersection.y - w2.y;
				if(!(Math.sqrt(x4 * x4 + x5 * x5) < hxGeomAlgo_PolyTools.EPSILON)) {
					var w3 = poly[q1];
					var x6 = intersection.x - w3.x;
					var x7 = intersection.y - w3.y;
					tmp3 = Math.sqrt(x6 * x6 + x7 * x7) < hxGeomAlgo_PolyTools.EPSILON;
				} else {
					tmp3 = true;
				}
				tmp = !tmp3;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
		}
	}
	return true;
};
hxGeomAlgo_PolyTools.segmentIntersect = function(p0,p1,q0,q1) {
	var a1 = p1.y - p0.y;
	var b1 = p0.x - p1.x;
	var c1 = p1.x * p0.y - p0.x * p1.y;
	var a2 = q1.y - q0.y;
	var b2 = q0.x - q1.x;
	var c2 = q1.x * q0.y - q0.x * q1.y;
	var denom = a1 * b2 - a2 * b1;
	if(denom == 0) {
		return null;
	}
	var intersectionPoint = hxGeomAlgo_HxPoint._new();
	intersectionPoint.x = (b1 * c2 - b2 * c1) / denom;
	intersectionPoint.y = (a2 * c1 - a1 * c2) / denom;
	var x = p0.x - p1.x;
	var x1 = p0.y - p1.y;
	var p0p1 = x * x + x1 * x1;
	var x = q0.x - q1.x;
	var x1 = q0.y - q1.y;
	var q0q1 = x * x + x1 * x1;
	var x = intersectionPoint.x - p1.x;
	var x1 = intersectionPoint.y - p1.y;
	if(x * x + x1 * x1 > p0p1) {
		return null;
	}
	var x = intersectionPoint.x - p0.x;
	var x1 = intersectionPoint.y - p0.y;
	if(x * x + x1 * x1 > p0p1) {
		return null;
	}
	var x = intersectionPoint.x - q1.x;
	var x1 = intersectionPoint.y - q1.y;
	if(x * x + x1 * x1 > q0q1) {
		return null;
	}
	var x = intersectionPoint.x - q0.x;
	var x1 = intersectionPoint.y - q0.y;
	if(x * x + x1 * x1 > q0q1) {
		return null;
	}
	return intersectionPoint;
};
hxGeomAlgo_PolyTools.findDuplicatePoints = function(poly,consecutiveOnly,wrapAround) {
	if(wrapAround == null) {
		wrapAround = true;
	}
	if(consecutiveOnly == null) {
		consecutiveOnly = true;
	}
	var len = poly.length;
	if(len <= 1) {
		return [];
	}
	var dupIndices = [];
	var _g = 0;
	var _g1 = len - 1;
	while(_g < _g1) {
		var i = _g++;
		var j = i + 1;
		while(j < len) {
			var this1 = poly[i];
			var p = poly[j];
			var foundDup = p != null && this1.x == p.x && this1.y == p.y;
			if(foundDup) {
				dupIndices.push(i);
			}
			if(consecutiveOnly || foundDup && !consecutiveOnly) {
				break;
			}
			++j;
		}
	}
	var tmp;
	if(wrapAround && consecutiveOnly) {
		var this1 = poly[0];
		var p = poly[len - 1];
		tmp = p != null && this1.x == p.x && this1.y == p.y;
	} else {
		tmp = false;
	}
	if(tmp) {
		dupIndices.push(len - 1);
	}
	return dupIndices;
};
hxGeomAlgo_PolyTools.intersection = function(p1,p2,q1,q2) {
	var res = null;
	var a1 = p2.y - p1.y;
	var b1 = p1.x - p2.x;
	var c1 = a1 * p1.x + b1 * p1.y;
	var a2 = q2.y - q1.y;
	var b2 = q1.x - q2.x;
	var c2 = a2 * q1.x + b2 * q1.y;
	var det = a1 * b2 - a2 * b1;
	if(!(Math.abs(det) <= hxGeomAlgo_PolyTools.EPSILON)) {
		res = hxGeomAlgo_HxPoint._new();
		res.x = (b2 * c1 - b1 * c2) / det;
		res.y = (a1 * c2 - a2 * c1) / det;
	}
	return res;
};
hxGeomAlgo_PolyTools.isReflex = function(poly,idx) {
	var idx1 = idx - 1;
	var idx2 = idx1;
	var len = poly.length;
	if(idx2 < 0) {
		idx2 += len;
	}
	idx1 = idx2 % len;
	var p = poly[idx1];
	var idx1 = idx;
	var idx2 = idx1;
	var len = poly.length;
	if(idx2 < 0) {
		idx2 += len;
	}
	idx1 = idx2 % len;
	var a = poly[idx1];
	var idx1 = idx + 1;
	var idx = idx1;
	var len = poly.length;
	if(idx < 0) {
		idx += len;
	}
	idx1 = idx % len;
	var b = poly[idx1];
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.at = function(poly,idx) {
	var idx1 = idx;
	var len = poly.length;
	if(idx1 < 0) {
		idx1 += len;
	}
	idx = idx1 % len;
	return poly[idx];
};
hxGeomAlgo_PolyTools.wrappedIdx = function(poly,idx) {
	var len = poly.length;
	if(idx < 0) {
		idx += len;
	}
	return idx % len;
};
hxGeomAlgo_PolyTools.side = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y);
};
hxGeomAlgo_PolyTools.isLeft = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) > 0;
};
hxGeomAlgo_PolyTools.isLeftOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) >= 0;
};
hxGeomAlgo_PolyTools.isRight = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) < 0;
};
hxGeomAlgo_PolyTools.isRightOrOn = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) <= 0;
};
hxGeomAlgo_PolyTools.isCollinear = function(p,a,b) {
	return (a.x - p.x) * (b.y - p.y) - (b.x - p.x) * (a.y - p.y) == 0;
};
hxGeomAlgo_PolyTools.distance = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return Math.sqrt(x * x + x1 * x1);
};
hxGeomAlgo_PolyTools.distanceToSegment = function(p,v,w) {
	return Math.sqrt(hxGeomAlgo_PolyTools.distanceToSegmentSquared(p,v,w));
};
hxGeomAlgo_PolyTools.distanceSquared = function(v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	return x * x + x1 * x1;
};
hxGeomAlgo_PolyTools.distanceToSegmentSquared = function(p,v,w) {
	var x = v.x - w.x;
	var x1 = v.y - w.y;
	var l2 = x * x + x1 * x1;
	if(l2 == 0) {
		var x = p.x - v.x;
		var x1 = p.y - v.y;
		return x * x + x1 * x1;
	}
	var t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;
	if(t < 0) {
		var x = p.x - v.x;
		var x1 = p.y - v.y;
		return x * x + x1 * x1;
	}
	if(t > 1) {
		var x = p.x - w.x;
		var x1 = p.y - w.y;
		return x * x + x1 * x1;
	}
	hxGeomAlgo_HxPoint.setTo(hxGeomAlgo_PolyTools.point,v.x + t * (w.x - v.x),v.y + t * (w.y - v.y));
	var w = hxGeomAlgo_PolyTools.point;
	var x = p.x - w.x;
	var x1 = p.y - w.y;
	return x * x + x1 * x1;
};
hxGeomAlgo_PolyTools.getCentroid = function(poly) {
	var c = hxGeomAlgo_HxPoint._new();
	var area = hxGeomAlgo_PolyTools.getArea(poly);
	if(area != 0) {
		var len = poly.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var p0 = poly[i];
			var p1 = poly[(i + 1) % len];
			var m = p0.x * p1.y - p1.x * p0.y;
			c.x += (p0.x + p1.x) * m;
			c.y += (p0.y + p1.y) * m;
		}
		c.x /= 6 * area;
		c.y /= 6 * area;
	} else {
		c = hxGeomAlgo_HxPoint.EMPTY;
	}
	return c;
};
hxGeomAlgo_PolyTools.getArea = function(poly) {
	var area = 0.0;
	var len = poly.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var p0 = poly[i];
		var p1 = poly[(i + 1) % len];
		area += p0.x * p1.y - p1.x * p0.y;
	}
	area = .5 * area;
	return area;
};
hxGeomAlgo_PolyTools.meet = function(p,q) {
	return new hxGeomAlgo_HomogCoord(p.y - q.y,q.x - p.x,p.x * q.y - p.y * q.x);
};
hxGeomAlgo_PolyTools.dot = function(p,q) {
	return p.x * q.x + p.y * q.y;
};
hxGeomAlgo_PolyTools.sqr = function(x) {
	return x * x;
};
hxGeomAlgo_PolyTools.eq = function(a,b) {
	return Math.abs(a - b) <= hxGeomAlgo_PolyTools.EPSILON;
};
hxGeomAlgo_PolyTools.clear = function(array) {
	array.length = 0;
};
hxGeomAlgo_PolyTools.toFloatArray = function(poly,out) {
	if(out == null) {
		out = [];
	}
	var _g = 0;
	while(_g < poly.length) {
		var p = poly[_g];
		++_g;
		out.push(p.x);
		out.push(p.y);
	}
	return out;
};
hxGeomAlgo_PolyTools.reverseFloatArray = function(poly,inPlace) {
	if(inPlace == null) {
		inPlace = false;
	}
	var res = inPlace ? poly : [];
	var nPoints = poly.length >> 1;
	var _g = 0;
	var _g1 = nPoints;
	while(_g < _g1) {
		var i = _g++;
		var xPos = (nPoints - i - 1) * 2;
		res[i * 2] = poly[xPos];
		res[i * 2 + 1] = poly[xPos + 1];
	}
	return res;
};
hxGeomAlgo_PolyTools.flatten = function(array,out) {
	var res = out != null ? out : [];
	var _g = 0;
	while(_g < array.length) {
		var arr = array[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var item = arr[_g1];
			++_g1;
			res.push(item);
		}
	}
	return res;
};
hxGeomAlgo_PolyTools.toPointArray = function(poly,out) {
	if(out == null) {
		out = [];
	}
	var size = poly.length;
	if(poly.length % 2 == 1) {
		--size;
	}
	var _g = 0;
	var _g1 = size >> 1;
	while(_g < _g1) {
		var i = _g++;
		out.push(hxGeomAlgo_HxPoint._new(poly[i * 2],poly[i * 2 + 1]));
	}
	return out;
};
hxGeomAlgo_PolyTools.inflateLine = function(start,end,thickness) {
	var halfWidth = thickness / 2;
	var dx = end.x - start.x;
	var dy = end.y - start.y;
	var len = Math.sqrt(dx * dx + dy * dy);
	var nx = dx / len * halfWidth;
	var ny = dy / len * halfWidth;
	return [hxGeomAlgo_HxPoint._new(start.x - ny,start.y + nx),hxGeomAlgo_HxPoint._new(end.x - ny,end.y + nx),hxGeomAlgo_HxPoint._new(end.x + ny,end.y - nx),hxGeomAlgo_HxPoint._new(start.x + ny,start.y - nx)];
};
hxGeomAlgo_PolyTools.clip = function(subjPoly,clipPoly) {
	var cond = clipPoly.length >= 3 && hxGeomAlgo_PolyTools.isConvex(clipPoly);
	var res = [];
	var output = subjPoly;
	var isInside = hxGeomAlgo_PolyTools.isCCW(clipPoly) ? hxGeomAlgo_PolyTools.isRight : hxGeomAlgo_PolyTools.isLeft;
	var clipEdgeStart;
	var clipEdgeEnd;
	var inputEdgeStart;
	var inputEdgeEnd;
	var clipLen = clipPoly.length;
	var i = 0;
	var _g = 0;
	var _g1 = clipLen;
	while(_g < _g1) {
		var i = _g++;
		clipEdgeStart = clipPoly[i];
		var idx = i + 1;
		var len = clipPoly.length;
		if(idx < 0) {
			idx += len;
		}
		clipEdgeEnd = clipPoly[idx % len];
		var input = output;
		output = [];
		inputEdgeStart = input[input.length - 1];
		var _g2 = 0;
		var _g3 = input.length;
		while(_g2 < _g3) {
			var j = _g2++;
			inputEdgeEnd = input[j];
			if(isInside(inputEdgeEnd,clipEdgeStart,clipEdgeEnd)) {
				if(!isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) {
					var intersectionPoint = hxGeomAlgo_PolyTools.intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
					if(intersectionPoint != null) {
						output.push(intersectionPoint);
					}
				}
				output.push(inputEdgeEnd);
			} else if(isInside(inputEdgeStart,clipEdgeStart,clipEdgeEnd)) {
				var intersectionPoint1 = hxGeomAlgo_PolyTools.intersection(inputEdgeStart,inputEdgeEnd,clipEdgeStart,clipEdgeEnd);
				if(intersectionPoint1 != null) {
					output.push(intersectionPoint1);
				}
			}
			inputEdgeStart = inputEdgeEnd;
		}
		res.push(output);
	}
	return res;
};
hxGeomAlgo_PolyTools.exposeEnum = function(enumClass,as) {
	var dotPath = (as != null ? as : enumClass.__ename__).split(".");
	var exports = $hx_exports;
	var i = 0;
	while(i < dotPath.length - 1) {
		var currPath = dotPath[i];
		exports[currPath] = exports[currPath] || { };
		exports = exports[currPath];
		++i;
	}
	exports[dotPath[i]] = enumClass;
};
var hxGeomAlgo_WindingRule = $hxEnums["hxGeomAlgo.WindingRule"] = { __ename__ : "hxGeomAlgo.WindingRule", __constructs__ : ["ODD","NON_ZERO","POSITIVE","NEGATIVE","ABS_GEQ_TWO"]
	,ODD: {_hx_index:0,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,NON_ZERO: {_hx_index:1,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,POSITIVE: {_hx_index:2,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,NEGATIVE: {_hx_index:3,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
	,ABS_GEQ_TWO: {_hx_index:4,__enum__:"hxGeomAlgo.WindingRule",toString:$estr}
};
var hxGeomAlgo_ResultType = $hxEnums["hxGeomAlgo.ResultType"] = { __ename__ : "hxGeomAlgo.ResultType", __constructs__ : ["POLYGONS","CONNECTED_POLYGONS","BOUNDARY_CONTOURS","EXPERIMENTAL_DELAUNAY"]
	,POLYGONS: {_hx_index:0,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,CONNECTED_POLYGONS: {_hx_index:1,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,BOUNDARY_CONTOURS: {_hx_index:2,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
	,EXPERIMENTAL_DELAUNAY: {_hx_index:3,__enum__:"hxGeomAlgo.ResultType",toString:$estr}
};
var hxGeomAlgo_Tess2 = $hx_exports["hxGeomAlgo"]["Tess2"] = function() { };
$hxClasses["hxGeomAlgo.Tess2"] = hxGeomAlgo_Tess2;
hxGeomAlgo_Tess2.__name__ = "hxGeomAlgo.Tess2";
hxGeomAlgo_Tess2.tesselate = function(contours,windingRule,resultType,polySize,vertexDim,normal) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var tess = new hxGeomAlgo_Tesselator();
	var _g = 0;
	var _g1 = contours.length;
	while(_g < _g1) {
		var i = _g++;
		tess.addContour(vertexDim,contours[i]);
	}
	tess.tesselate(windingRule == null ? hxGeomAlgo_WindingRule.ODD : windingRule,resultType == null ? hxGeomAlgo_ResultType.POLYGONS : resultType,polySize,vertexDim,normal == null ? [0,0,1] : normal);
	return { vertices : tess.vertices, vertexIndices : tess.vertexIndices, vertexCount : tess.vertexCount, elements : tess.elements, elementCount : tess.elementCount};
};
hxGeomAlgo_Tess2.union = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var contours = contoursA.concat(contoursB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.NON_ZERO,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.intersection = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var contours = contoursA.concat(contoursB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.ABS_GEQ_TWO,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.difference = function(contoursA,contoursB,resultType,polySize,vertexDim) {
	if(vertexDim == null) {
		vertexDim = 2;
	}
	if(polySize == null) {
		polySize = 3;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < contoursB.length) {
		var poly = contoursB[_g1];
		++_g1;
		_g.push(hxGeomAlgo_PolyTools.reverseFloatArray(poly));
	}
	var diffB = _g;
	var contours = contoursA.concat(diffB);
	return hxGeomAlgo_Tess2.tesselate(contours,hxGeomAlgo_WindingRule.POSITIVE,resultType,polySize,vertexDim);
};
hxGeomAlgo_Tess2.convertResult = function(vertices,elements,resultType,polySize,out) {
	if(out == null) {
		out = [];
	}
	var tmp = resultType._hx_index != 2;
	var i = 0;
	switch(resultType._hx_index) {
	case 0:case 3:
		while(i < elements.length) {
			var poly = [];
			var _g = 0;
			var _g1 = polySize;
			while(_g < _g1) {
				var j = _g++;
				var idx = elements[i + j];
				if(idx == -1) {
					continue;
				}
				poly.push(hxGeomAlgo_HxPoint._new(vertices[idx * 2],vertices[idx * 2 + 1]));
			}
			out.push(poly);
			i += polySize;
		}
		break;
	case 1:
		while(i < elements.length) {
			var poly = [];
			var _g = 0;
			var _g1 = polySize;
			while(_g < _g1) {
				var j = _g++;
				var idx = elements[i + j];
				if(idx == -1) {
					continue;
				}
				poly.push(hxGeomAlgo_HxPoint._new(vertices[idx * 2],vertices[idx * 2 + 1]));
			}
			out.push(poly);
			i += polySize * 2;
		}
		break;
	case 2:
		while(i < elements.length) {
			var poly = [];
			var start = elements[i];
			var count = elements[i + 1];
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var j = _g++;
				var idx = start + j;
				poly.push(hxGeomAlgo_HxPoint._new(vertices[idx * 2],vertices[idx * 2 + 1]));
			}
			out.push(poly);
			i += 2;
		}
		break;
	}
	return out;
};
var hxGeomAlgo__$Tess2_TessVertex = function() {
	this.idx = 0;
	this.n = 0;
	this.pqHandle = 0;
	this.t = 0.0;
	this.s = 0.0;
	this.coords = [0,0,0];
	this.anEdge = null;
	this.prev = null;
	this.next = null;
};
$hxClasses["hxGeomAlgo._Tess2.TessVertex"] = hxGeomAlgo__$Tess2_TessVertex;
hxGeomAlgo__$Tess2_TessVertex.__name__ = "hxGeomAlgo._Tess2.TessVertex";
hxGeomAlgo__$Tess2_TessVertex.prototype = {
	__class__: hxGeomAlgo__$Tess2_TessVertex
};
var hxGeomAlgo__$Tess2_TessFace = function() {
	this.inside = false;
	this.marked = false;
	this.n = 0;
	this.trail = null;
	this.anEdge = null;
	this.prev = null;
	this.next = null;
};
$hxClasses["hxGeomAlgo._Tess2.TessFace"] = hxGeomAlgo__$Tess2_TessFace;
hxGeomAlgo__$Tess2_TessFace.__name__ = "hxGeomAlgo._Tess2.TessFace";
hxGeomAlgo__$Tess2_TessFace.prototype = {
	__class__: hxGeomAlgo__$Tess2_TessFace
};
var hxGeomAlgo__$Tess2_TessHalfEdge = function(side) {
	this.winding = 0;
	this.activeRegion = null;
	this.Lface = null;
	this.Org = null;
	this.Lnext = null;
	this.Onext = null;
	this.Sym = null;
	this.next = null;
	this.side = side;
};
$hxClasses["hxGeomAlgo._Tess2.TessHalfEdge"] = hxGeomAlgo__$Tess2_TessHalfEdge;
hxGeomAlgo__$Tess2_TessHalfEdge.__name__ = "hxGeomAlgo._Tess2.TessHalfEdge";
hxGeomAlgo__$Tess2_TessHalfEdge.prototype = {
	get_Rface: function() {
		return this.Sym.Lface;
	}
	,set_Rface: function(v) {
		return this.Sym.Lface = v;
	}
	,get_Dst: function() {
		return this.Sym.Org;
	}
	,set_Dst: function(v) {
		return this.Sym.Org = v;
	}
	,get_Oprev: function() {
		return this.Sym.Lnext;
	}
	,set_Oprev: function(v) {
		return this.Sym.Lnext = v;
	}
	,get_Lprev: function() {
		return this.Onext.Sym;
	}
	,set_Lprev: function(v) {
		return this.Onext.Sym = v;
	}
	,get_Dprev: function() {
		return this.Lnext.Sym;
	}
	,set_Dprev: function(v) {
		return this.Lnext.Sym = v;
	}
	,get_Rprev: function() {
		return this.Sym.Onext;
	}
	,set_Rprev: function(v) {
		return this.Sym.Onext = v;
	}
	,get_Dnext: function() {
		return this.Sym.Onext.Sym;
	}
	,set_Dnext: function(v) {
		return this.Sym.Onext.Sym = v;
	}
	,get_Rnext: function() {
		return this.Sym.Lnext.Sym;
	}
	,set_Rnext: function(v) {
		return this.Sym.Lnext.Sym = v;
	}
	,__class__: hxGeomAlgo__$Tess2_TessHalfEdge
};
var hxGeomAlgo__$Tess2_TessMesh = function() {
	this.eSym = new hxGeomAlgo__$Tess2_TessHalfEdge(1);
	this.e = new hxGeomAlgo__$Tess2_TessHalfEdge(0);
	this.f = new hxGeomAlgo__$Tess2_TessFace();
	this.v = new hxGeomAlgo__$Tess2_TessVertex();
	this.v.next = this.v.prev = this.v;
	this.v.anEdge = null;
	this.f.next = this.f.prev = this.f;
	this.f.anEdge = null;
	this.f.trail = null;
	this.f.marked = false;
	this.f.inside = false;
	this.e.next = this.e;
	this.e.Sym = this.eSym;
	this.e.Onext = null;
	this.e.Lnext = null;
	this.e.Org = null;
	this.e.Lface = null;
	this.e.winding = 0;
	this.e.activeRegion = null;
	this.e.mark = false;
	this.eSym.next = this.eSym;
	this.eSym.Sym = this.e;
	this.eSym.Onext = null;
	this.eSym.Lnext = null;
	this.eSym.Org = null;
	this.eSym.Lface = null;
	this.eSym.winding = 0;
	this.eSym.activeRegion = null;
	this.e.Sym.mark = false;
	this.vHead = this.v;
	this.fHead = this.f;
	this.eHead = this.e;
	this.eHeadSym = this.eSym;
};
$hxClasses["hxGeomAlgo._Tess2.TessMesh"] = hxGeomAlgo__$Tess2_TessMesh;
hxGeomAlgo__$Tess2_TessMesh.__name__ = "hxGeomAlgo._Tess2.TessMesh";
hxGeomAlgo__$Tess2_TessMesh.flipEdge = function(mesh,edge) {
	var a0 = edge;
	var a1 = a0.Lnext;
	var a2 = a1.Lnext;
	var b0 = edge.Sym;
	var b1 = b0.Lnext;
	var b2 = b1.Lnext;
	var aOrg = a0.Org;
	var aOpp = a2.Org;
	var bOrg = b0.Org;
	var bOpp = b2.Org;
	var fa = a0.Lface;
	var fb = b0.Lface;
	var cond = hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edge);
	a0.Org = bOpp;
	a0.Onext = b1.Sym;
	b0.Org = aOpp;
	b0.Onext = a1.Sym;
	a2.Onext = b0;
	b2.Onext = a0;
	b1.Onext = a2.Sym;
	a1.Onext = b2.Sym;
	a0.Lnext = a2;
	a2.Lnext = b1;
	b1.Lnext = a0;
	b0.Lnext = b2;
	b2.Lnext = a1;
	a1.Lnext = b0;
	a1.Lface = fb;
	b1.Lface = fa;
	fa.anEdge = a0;
	fb.anEdge = b0;
	if(aOrg.anEdge == a0) {
		aOrg.anEdge = b1;
	}
	if(bOrg.anEdge == b0) {
		bOrg.anEdge = a1;
	}
	var cond = a0.get_Oprev().Onext.Org == a0.Org;
};
hxGeomAlgo__$Tess2_TessMesh.prototype = {
	makeEdge_: function(eNext) {
		var e = new hxGeomAlgo__$Tess2_TessHalfEdge(0);
		var eSym = new hxGeomAlgo__$Tess2_TessHalfEdge(1);
		if(eNext.Sym.side < eNext.side) {
			eNext = eNext.Sym;
		}
		var ePrev = eNext.Sym.next;
		eSym.next = ePrev;
		ePrev.Sym.next = e;
		e.next = eNext;
		eNext.Sym.next = eSym;
		e.Sym = eSym;
		e.Onext = e;
		e.Lnext = eSym;
		e.Org = null;
		e.Lface = null;
		e.winding = 0;
		e.activeRegion = null;
		eSym.Sym = e;
		eSym.Onext = eSym;
		eSym.Lnext = e;
		eSym.Org = null;
		eSym.Lface = null;
		eSym.winding = 0;
		eSym.activeRegion = null;
		return e;
	}
	,splice_: function(a,b) {
		var aOnext = a.Onext;
		var bOnext = b.Onext;
		aOnext.Sym.Lnext = b;
		bOnext.Sym.Lnext = a;
		a.Onext = bOnext;
		b.Onext = aOnext;
	}
	,makeVertex_: function(newVertex,eOrig,vNext) {
		var vNew = newVertex;
		var vPrev = vNext.prev;
		vNew.prev = vPrev;
		vPrev.next = vNew;
		vNew.next = vNext;
		vNext.prev = vNew;
		vNew.anEdge = eOrig;
		var e = eOrig;
		while(true) {
			e.Org = vNew;
			e = e.Onext;
			if(!(e != eOrig)) {
				break;
			}
		}
	}
	,makeFace_: function(newFace,eOrig,fNext) {
		var fNew = newFace;
		var fPrev = fNext.prev;
		fNew.prev = fPrev;
		fPrev.next = fNew;
		fNew.next = fNext;
		fNext.prev = fNew;
		fNew.anEdge = eOrig;
		fNew.trail = null;
		fNew.marked = false;
		fNew.inside = fNext.inside;
		var e = eOrig;
		while(true) {
			e.Lface = fNew;
			e = e.Lnext;
			if(!(e != eOrig)) {
				break;
			}
		}
	}
	,killEdge_: function(eDel) {
		if(eDel.Sym.side < eDel.side) {
			eDel = eDel.Sym;
		}
		var eNext = eDel.next;
		var ePrev = eDel.Sym.next;
		eNext.Sym.next = ePrev;
		ePrev.Sym.next = eNext;
	}
	,killVertex_: function(vDel,newOrg) {
		var eStart = vDel.anEdge;
		var e = eStart;
		while(true) {
			e.Org = newOrg;
			e = e.Onext;
			if(!(e != eStart)) {
				break;
			}
		}
		var vPrev = vDel.prev;
		var vNext = vDel.next;
		vNext.prev = vPrev;
		vPrev.next = vNext;
	}
	,killFace_: function(fDel,newLface) {
		var eStart = fDel.anEdge;
		var e = eStart;
		while(true) {
			e.Lface = newLface;
			e = e.Lnext;
			if(!(e != eStart)) {
				break;
			}
		}
		var fPrev = fDel.prev;
		var fNext = fDel.next;
		fNext.prev = fPrev;
		fPrev.next = fNext;
	}
	,makeEdge: function() {
		var newVertex1 = new hxGeomAlgo__$Tess2_TessVertex();
		var newVertex2 = new hxGeomAlgo__$Tess2_TessVertex();
		var newFace = new hxGeomAlgo__$Tess2_TessFace();
		var e = this.makeEdge_(this.eHead);
		this.makeVertex_(newVertex1,e,this.vHead);
		this.makeVertex_(newVertex2,e.Sym,this.vHead);
		this.makeFace_(newFace,e,this.fHead);
		return e;
	}
	,splice: function(eOrg,eDst) {
		var joiningLoops = false;
		var joiningVertices = false;
		if(eOrg == eDst) {
			return;
		}
		if(eDst.Org != eOrg.Org) {
			joiningVertices = true;
			this.killVertex_(eDst.Org,eOrg.Org);
		}
		if(eDst.Lface != eOrg.Lface) {
			joiningLoops = true;
			this.killFace_(eDst.Lface,eOrg.Lface);
		}
		this.splice_(eDst,eOrg);
		if(!joiningVertices) {
			var newVertex = new hxGeomAlgo__$Tess2_TessVertex();
			this.makeVertex_(newVertex,eDst,eOrg.Org);
			eOrg.Org.anEdge = eOrg;
		}
		if(!joiningLoops) {
			var newFace = new hxGeomAlgo__$Tess2_TessFace();
			this.makeFace_(newFace,eDst,eOrg.Lface);
			eOrg.Lface.anEdge = eOrg;
		}
	}
	,'delete': function(eDel) {
		var eDelSym = eDel.Sym;
		var joiningLoops = false;
		if(eDel.Lface != eDel.get_Rface()) {
			joiningLoops = true;
			this.killFace_(eDel.Lface,eDel.get_Rface());
		}
		if(eDel.Onext == eDel) {
			this.killVertex_(eDel.Org,null);
		} else {
			eDel.get_Rface().anEdge = eDel.get_Oprev();
			eDel.Org.anEdge = eDel.Onext;
			this.splice_(eDel,eDel.get_Oprev());
			if(!joiningLoops) {
				var newFace = new hxGeomAlgo__$Tess2_TessFace();
				this.makeFace_(newFace,eDel,eDel.Lface);
			}
		}
		if(eDelSym.Onext == eDelSym) {
			this.killVertex_(eDelSym.Org,null);
			this.killFace_(eDelSym.Lface,null);
		} else {
			eDel.Lface.anEdge = eDelSym.get_Oprev();
			eDelSym.Org.anEdge = eDelSym.Onext;
			this.splice_(eDelSym,eDelSym.get_Oprev());
		}
		this.killEdge_(eDel);
	}
	,addEdgeVertex: function(eOrg) {
		var eNew = this.makeEdge_(eOrg);
		var eNewSym = eNew.Sym;
		this.splice_(eNew,eOrg.Lnext);
		eNew.Org = eOrg.get_Dst();
		var newVertex = new hxGeomAlgo__$Tess2_TessVertex();
		this.makeVertex_(newVertex,eNewSym,eNew.Org);
		eNew.Lface = eNewSym.Lface = eOrg.Lface;
		return eNew;
	}
	,splitEdge: function(eOrg) {
		var tempHalfEdge = this.addEdgeVertex(eOrg);
		var eNew = tempHalfEdge.Sym;
		this.splice_(eOrg.Sym,eOrg.Sym.get_Oprev());
		this.splice_(eOrg.Sym,eNew);
		eOrg.set_Dst(eNew.Org);
		eNew.get_Dst().anEdge = eNew.Sym;
		eNew.set_Rface(eOrg.get_Rface());
		eNew.winding = eOrg.winding;
		eNew.Sym.winding = eOrg.Sym.winding;
		return eNew;
	}
	,connect: function(eOrg,eDst) {
		var joiningLoops = false;
		var eNew = this.makeEdge_(eOrg);
		var eNewSym = eNew.Sym;
		if(eDst.Lface != eOrg.Lface) {
			joiningLoops = true;
			this.killFace_(eDst.Lface,eOrg.Lface);
		}
		this.splice_(eNew,eOrg.Lnext);
		this.splice_(eNewSym,eDst);
		eNew.Org = eOrg.get_Dst();
		eNewSym.Org = eDst.Org;
		eNew.Lface = eNewSym.Lface = eOrg.Lface;
		eOrg.Lface.anEdge = eNewSym;
		if(!joiningLoops) {
			var newFace = new hxGeomAlgo__$Tess2_TessFace();
			this.makeFace_(newFace,eNew,eOrg.Lface);
		}
		return eNew;
	}
	,zapFace: function(fZap) {
		var eStart = fZap.anEdge;
		var e;
		var eSym;
		var eNext = eStart.Lnext;
		while(true) {
			e = eNext;
			eNext = e.Lnext;
			e.Lface = null;
			if(e.get_Rface() == null) {
				if(e.Onext == e) {
					this.killVertex_(e.Org,null);
				} else {
					e.Org.anEdge = e.Onext;
					this.splice_(e,e.get_Oprev());
				}
				eSym = e.Sym;
				if(eSym.Onext == eSym) {
					this.killVertex_(eSym.Org,null);
				} else {
					eSym.Org.anEdge = eSym.Onext;
					this.splice_(eSym,eSym.get_Oprev());
				}
				this.killEdge_(e);
			}
			if(!(e != eStart)) {
				break;
			}
		}
		var fPrev = fZap.prev;
		var fNext = fZap.next;
		fNext.prev = fPrev;
		fPrev.next = fNext;
	}
	,countFaceVerts_: function(f) {
		var eCur = f.anEdge;
		var n = 0;
		while(true) {
			++n;
			eCur = eCur.Lnext;
			if(!(eCur != f.anEdge)) {
				break;
			}
		}
		return n;
	}
	,mergeConvexFaces: function(maxVertsPerFace) {
		var eCur;
		var eNext;
		var eSym;
		var vStart;
		var curNv;
		var symNv;
		var f = this.fHead.next;
		while(f != this.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			eCur = f.anEdge;
			vStart = eCur.Org;
			while(true) {
				eNext = eCur.Lnext;
				eSym = eCur.Sym;
				if(eSym != null && eSym.Lface != null && eSym.Lface.inside) {
					curNv = this.countFaceVerts_(f);
					symNv = this.countFaceVerts_(eSym.Lface);
					if(curNv + symNv - 2 <= maxVertsPerFace) {
						if(hxGeomAlgo__$Tess2_Geom.vertCCW(eCur.get_Lprev().Org,eCur.Org,eSym.Lnext.Lnext.Org) && hxGeomAlgo__$Tess2_Geom.vertCCW(eSym.get_Lprev().Org,eSym.Org,eCur.Lnext.Lnext.Org)) {
							eNext = eSym.Lnext;
							this.delete(eSym);
							eCur = null;
							eSym = null;
						}
					}
				}
				if(eCur != null && eCur.Lnext.Org == vStart) {
					break;
				}
				eCur = eNext;
			}
			f = f.next;
		}
		return true;
	}
	,check: function() {
		var fHead = this.fHead;
		var vHead = this.vHead;
		var eHead = this.eHead;
		var f;
		var v;
		var e;
		var fPrev = fHead;
		while(true) {
			f = fPrev.next;
			if(!(f != fHead)) {
				break;
			}
			e = f.anEdge;
			while(true) {
				e = e.Lnext;
				if(!(e != f.anEdge)) {
					break;
				}
			}
			fPrev = f;
		}
		var vPrev = vHead;
		while(true) {
			v = vPrev.next;
			if(!(v != vHead)) {
				break;
			}
			e = v.anEdge;
			while(true) {
				e = e.Onext;
				if(!(e != v.anEdge)) {
					break;
				}
			}
			vPrev = v;
		}
		var ePrev = eHead;
		while(true) {
			e = ePrev.next;
			if(!(e != eHead)) {
				break;
			}
			var cond = e.get_Dst() != null;
			ePrev = e;
		}
		var cond = e.Sym.next == ePrev.Sym && e.Sym == this.eHeadSym && e.Sym.Sym == e && e.Org == null && e.get_Dst() == null && e.Lface == null && e.get_Rface() == null;
	}
	,__class__: hxGeomAlgo__$Tess2_TessMesh
};
var hxGeomAlgo__$Tess2_Geom = function() { };
$hxClasses["hxGeomAlgo._Tess2.Geom"] = hxGeomAlgo__$Tess2_Geom;
hxGeomAlgo__$Tess2_Geom.__name__ = "hxGeomAlgo._Tess2.Geom";
hxGeomAlgo__$Tess2_Geom.vertEq = function(u,v) {
	if(u.s == v.s) {
		return u.t == v.t;
	} else {
		return false;
	}
};
hxGeomAlgo__$Tess2_Geom.vertLeq = function(u,v) {
	if(!(u.s < v.s)) {
		if(u.s == v.s) {
			return u.t <= v.t;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxGeomAlgo__$Tess2_Geom.transLeq = function(u,v) {
	if(!(u.t < v.t)) {
		if(u.t == v.t) {
			return u.s <= v.s;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxGeomAlgo__$Tess2_Geom.edgeGoesLeft = function(e) {
	return hxGeomAlgo__$Tess2_Geom.vertLeq(e.get_Dst(),e.Org);
};
hxGeomAlgo__$Tess2_Geom.edgeGoesRight = function(e) {
	return hxGeomAlgo__$Tess2_Geom.vertLeq(e.Org,e.get_Dst());
};
hxGeomAlgo__$Tess2_Geom.edgeIsInternal = function(e) {
	if(e.get_Rface() != null) {
		return e.get_Rface().inside;
	} else {
		return false;
	}
};
hxGeomAlgo__$Tess2_Geom.vertL1dist = function(u,v) {
	return Math.abs(u.s - v.s) + Math.abs(u.t - v.t);
};
hxGeomAlgo__$Tess2_Geom.edgeEval = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(u,v) && hxGeomAlgo__$Tess2_Geom.vertLeq(v,w);
	var gapL = v.s - u.s;
	var gapR = w.s - v.s;
	if(gapL + gapR > 0.0) {
		if(gapL < gapR) {
			return v.t - u.t + (u.t - w.t) * (gapL / (gapL + gapR));
		} else {
			return v.t - w.t + (w.t - u.t) * (gapR / (gapL + gapR));
		}
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.edgeSign = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(u,v) && hxGeomAlgo__$Tess2_Geom.vertLeq(v,w);
	var gapL = v.s - u.s;
	var gapR = w.s - v.s;
	if(gapL + gapR > 0.0) {
		return (v.t - w.t) * gapL + (v.t - u.t) * gapR;
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.transEval = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.transLeq(u,v) && hxGeomAlgo__$Tess2_Geom.transLeq(v,w);
	var gapL = v.t - u.t;
	var gapR = w.t - v.t;
	if(gapL + gapR > 0.0) {
		if(gapL < gapR) {
			return v.s - u.s + (u.s - w.s) * (gapL / (gapL + gapR));
		} else {
			return v.s - w.s + (w.s - u.s) * (gapR / (gapL + gapR));
		}
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.transSign = function(u,v,w) {
	var cond = hxGeomAlgo__$Tess2_Geom.transLeq(u,v) && hxGeomAlgo__$Tess2_Geom.transLeq(v,w);
	var gapL = v.t - u.t;
	var gapR = w.t - v.t;
	if(gapL + gapR > 0.0) {
		return (v.s - w.s) * gapL + (v.s - u.s) * gapR;
	}
	return 0.0;
};
hxGeomAlgo__$Tess2_Geom.vertCCW = function(u,v,w) {
	return u.s * (v.t - w.t) + v.s * (w.t - u.t) + w.s * (u.t - v.t) >= 0.0;
};
hxGeomAlgo__$Tess2_Geom.interpolate = function(a,x,b,y) {
	if(a < 0) {
		a = 0;
	}
	if(b < 0) {
		b = 0;
	}
	if(a <= b) {
		if(b == 0) {
			return (x + y) / 2;
		} else {
			return x + (y - x) * (a / (a + b));
		}
	} else {
		return y + (x - y) * (b / (a + b));
	}
};
hxGeomAlgo__$Tess2_Geom.intersect = function(o1,d1,o2,d2,v) {
	var z1;
	var z2;
	var t;
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o1,d1)) {
		t = o1;
		o1 = d1;
		d1 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o2,d2)) {
		t = o2;
		o2 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o1,o2)) {
		t = o1;
		o1 = o2;
		o2 = t;
		t = d1;
		d1 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertLeq(o2,d1)) {
		v.s = (o2.s + d1.s) / 2;
	} else if(hxGeomAlgo__$Tess2_Geom.vertLeq(d1,d2)) {
		z1 = hxGeomAlgo__$Tess2_Geom.edgeEval(o1,o2,d1);
		z2 = hxGeomAlgo__$Tess2_Geom.edgeEval(o2,d1,d2);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.s = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.s,z2,d1.s);
	} else {
		z1 = hxGeomAlgo__$Tess2_Geom.edgeSign(o1,o2,d1);
		z2 = -hxGeomAlgo__$Tess2_Geom.edgeSign(o1,d2,d1);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.s = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.s,z2,d2.s);
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o1,d1)) {
		t = o1;
		o1 = d1;
		d1 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o2,d2)) {
		t = o2;
		o2 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o1,o2)) {
		t = o1;
		o1 = o2;
		o2 = t;
		t = d1;
		d1 = d2;
		d2 = t;
	}
	if(!hxGeomAlgo__$Tess2_Geom.transLeq(o2,d1)) {
		v.t = (o2.t + d1.t) / 2;
	} else if(hxGeomAlgo__$Tess2_Geom.transLeq(d1,d2)) {
		z1 = hxGeomAlgo__$Tess2_Geom.transEval(o1,o2,d1);
		z2 = hxGeomAlgo__$Tess2_Geom.transEval(o2,d1,d2);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.t = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.t,z2,d1.t);
	} else {
		z1 = hxGeomAlgo__$Tess2_Geom.transSign(o1,o2,d1);
		z2 = -hxGeomAlgo__$Tess2_Geom.transSign(o1,d2,d1);
		if(z1 + z2 < 0) {
			z1 = -z1;
			z2 = -z2;
		}
		v.t = hxGeomAlgo__$Tess2_Geom.interpolate(z1,o2.t,z2,d2.t);
	}
};
hxGeomAlgo__$Tess2_Geom.calcAngle = function(v0,v1,v2) {
	var a_0 = v2.s - v1.s;
	var a_1 = v2.t - v1.t;
	var b_0 = v0.s - v1.s;
	var b_1 = v0.t - v1.t;
	var num = a_0 * b_0 + a_1 * b_1;
	var den = Math.sqrt(a_0 * a_0 + a_1 * a_1) * Math.sqrt(b_0 * b_0 + b_1 * b_1);
	if(den > 0.0) {
		num /= den;
	}
	if(num < -1.0) {
		num = -1.0;
	}
	if(num > 1.0) {
		num = 1.0;
	}
	return Math.acos(num);
};
hxGeomAlgo__$Tess2_Geom.edgeIsLocallyDelaunay = function(e) {
	return hxGeomAlgo__$Tess2_Geom.calcAngle(e.Lnext.Org,e.Lnext.Lnext.Org,e.Org) + hxGeomAlgo__$Tess2_Geom.calcAngle(e.Sym.Lnext.Org,e.Sym.Lnext.Lnext.Org,e.Sym.Org) < Math.PI + 0.01;
};
var hxGeomAlgo__$Tess2_DictNode = function() {
	this.prev = null;
	this.next = null;
	this.key = null;
};
$hxClasses["hxGeomAlgo._Tess2.DictNode"] = hxGeomAlgo__$Tess2_DictNode;
hxGeomAlgo__$Tess2_DictNode.__name__ = "hxGeomAlgo._Tess2.DictNode";
hxGeomAlgo__$Tess2_DictNode.prototype = {
	__class__: hxGeomAlgo__$Tess2_DictNode
};
var hxGeomAlgo__$Tess2_Dict = function(frame,leq) {
	this.head = new hxGeomAlgo__$Tess2_DictNode();
	this.head.next = this.head;
	this.head.prev = this.head;
	this.frame = frame;
	this.leq = leq;
};
$hxClasses["hxGeomAlgo._Tess2.Dict"] = hxGeomAlgo__$Tess2_Dict;
hxGeomAlgo__$Tess2_Dict.__name__ = "hxGeomAlgo._Tess2.Dict";
hxGeomAlgo__$Tess2_Dict.prototype = {
	min: function() {
		return this.head.next;
	}
	,max: function() {
		return this.head.prev;
	}
	,insert: function(k) {
		return this.insertBefore(this.head,k);
	}
	,search: function(key) {
		var node = this.head;
		while(true) {
			node = node.next;
			if(!(node.key != null && !this.leq(this.frame,key,node.key))) {
				break;
			}
		}
		return node;
	}
	,insertBefore: function(node,key) {
		while(true) {
			node = node.prev;
			if(!(node.key != null && !this.leq(this.frame,node.key,key))) {
				break;
			}
		}
		var newNode = new hxGeomAlgo__$Tess2_DictNode();
		newNode.key = key;
		newNode.next = node.next;
		node.next.prev = newNode;
		newNode.prev = node;
		node.next = newNode;
		return newNode;
	}
	,'delete': function(node) {
		node.next.prev = node.prev;
		node.prev.next = node.next;
	}
	,__class__: hxGeomAlgo__$Tess2_Dict
};
var hxGeomAlgo__$Tess2_PQNode = function() {
	this.handle = -1;
};
$hxClasses["hxGeomAlgo._Tess2.PQNode"] = hxGeomAlgo__$Tess2_PQNode;
hxGeomAlgo__$Tess2_PQNode.__name__ = "hxGeomAlgo._Tess2.PQNode";
hxGeomAlgo__$Tess2_PQNode.prototype = {
	__class__: hxGeomAlgo__$Tess2_PQNode
};
var hxGeomAlgo__$Tess2_PQHandleElem = function() {
	this.node = -1;
	this.key = null;
};
$hxClasses["hxGeomAlgo._Tess2.PQHandleElem"] = hxGeomAlgo__$Tess2_PQHandleElem;
hxGeomAlgo__$Tess2_PQHandleElem.__name__ = "hxGeomAlgo._Tess2.PQHandleElem";
hxGeomAlgo__$Tess2_PQHandleElem.prototype = {
	__class__: hxGeomAlgo__$Tess2_PQHandleElem
};
var hxGeomAlgo__$Tess2_PriorityQ = function(size,leq) {
	this.size = 0;
	this.max = size;
	this.nodes = [];
	var _g = 0;
	var _g1 = size + 1;
	while(_g < _g1) {
		var i = _g++;
		this.nodes[i] = new hxGeomAlgo__$Tess2_PQNode();
	}
	this.handles = [];
	var _g = 0;
	var _g1 = size + 1;
	while(_g < _g1) {
		var i = _g++;
		this.handles[i] = new hxGeomAlgo__$Tess2_PQHandleElem();
	}
	this.initialized = false;
	this.freeList = 0;
	this.leq = leq;
	this.nodes[1].handle = 1;
	this.handles[1].key = null;
};
$hxClasses["hxGeomAlgo._Tess2.PriorityQ"] = hxGeomAlgo__$Tess2_PriorityQ;
hxGeomAlgo__$Tess2_PriorityQ.__name__ = "hxGeomAlgo._Tess2.PriorityQ";
hxGeomAlgo__$Tess2_PriorityQ.prototype = {
	floatDown_: function(curr) {
		var n = this.nodes;
		var h = this.handles;
		var hChild;
		var child;
		var hCurr = n[curr].handle;
		while(true) {
			child = curr << 1;
			if(child < this.size && this.leq(h[n[child + 1].handle].key,h[n[child].handle].key)) {
				++child;
			}
			hChild = n[child].handle;
			if(child > this.size || this.leq(h[hCurr].key,h[hChild].key)) {
				n[curr].handle = hCurr;
				h[hCurr].node = curr;
				break;
			}
			n[curr].handle = hChild;
			h[hChild].node = curr;
			curr = child;
		}
	}
	,floatUp_: function(curr) {
		var n = this.nodes;
		var h = this.handles;
		var hParent;
		var parent;
		var hCurr = n[curr].handle;
		while(true) {
			parent = curr >> 1;
			hParent = n[parent].handle;
			if(parent == 0 || this.leq(h[hParent].key,h[hCurr].key)) {
				n[curr].handle = hCurr;
				h[hCurr].node = curr;
				break;
			}
			n[curr].handle = hParent;
			h[hParent].node = curr;
			curr = parent;
		}
	}
	,init: function() {
		var i = this.size;
		while(i >= 1) {
			this.floatDown_(i);
			--i;
		}
		this.initialized = true;
	}
	,min: function() {
		return this.handles[this.nodes[1].handle].key;
	}
	,isEmpty: function() {
		return this.size == 0;
	}
	,insert: function(keyNew) {
		var free;
		var curr = ++this.size;
		if(curr * 2 > this.max) {
			this.max *= 2;
			var s = this.nodes.length;
			var _g = s;
			var _g1 = this.max + 1;
			while(_g < _g1) {
				var i = _g++;
				this.nodes[i] = new hxGeomAlgo__$Tess2_PQNode();
			}
			s = this.handles.length;
			var _g = this.handles.length;
			var _g1 = this.max + 1;
			while(_g < _g1) {
				var i = _g++;
				this.handles[i] = new hxGeomAlgo__$Tess2_PQHandleElem();
			}
		}
		if(this.freeList == 0) {
			free = curr;
		} else {
			free = this.freeList;
			this.freeList = this.handles[free].node;
		}
		this.nodes[curr].handle = free;
		this.handles[free].node = curr;
		this.handles[free].key = keyNew;
		if(this.initialized) {
			this.floatUp_(curr);
		}
		return free;
	}
	,extractMin: function() {
		var n = this.nodes;
		var h = this.handles;
		var hMin = n[1].handle;
		var min = h[hMin].key;
		if(this.size > 0) {
			n[1].handle = n[this.size].handle;
			h[n[1].handle].node = 1;
			h[hMin].key = null;
			h[hMin].node = this.freeList;
			this.freeList = hMin;
			--this.size;
			if(this.size > 0) {
				this.floatDown_(1);
			}
		}
		return min;
	}
	,'delete': function(hCurr) {
		var n = this.nodes;
		var h = this.handles;
		var curr = h[hCurr].node;
		n[curr].handle = n[this.size].handle;
		h[n[curr].handle].node = curr;
		--this.size;
		if(curr <= this.size) {
			if(curr <= 1 || this.leq(h[n[curr >> 1].handle].key,h[n[curr].handle].key)) {
				this.floatDown_(curr);
			} else {
				this.floatUp_(curr);
			}
		}
		h[hCurr].key = null;
		h[hCurr].node = this.freeList;
		this.freeList = hCurr;
	}
	,__class__: hxGeomAlgo__$Tess2_PriorityQ
};
var hxGeomAlgo__$Tess2_ActiveRegion = function() {
	this.fixUpperEdge = false;
	this.dirty = false;
	this.sentinel = false;
	this.inside = false;
	this.windingNumber = 0;
	this.nodeUp = null;
	this.eUp = null;
};
$hxClasses["hxGeomAlgo._Tess2.ActiveRegion"] = hxGeomAlgo__$Tess2_ActiveRegion;
hxGeomAlgo__$Tess2_ActiveRegion.__name__ = "hxGeomAlgo._Tess2.ActiveRegion";
hxGeomAlgo__$Tess2_ActiveRegion.prototype = {
	__class__: hxGeomAlgo__$Tess2_ActiveRegion
};
var hxGeomAlgo__$Tess2_Sweep = function() { };
$hxClasses["hxGeomAlgo._Tess2.Sweep"] = hxGeomAlgo__$Tess2_Sweep;
hxGeomAlgo__$Tess2_Sweep.__name__ = "hxGeomAlgo._Tess2.Sweep";
hxGeomAlgo__$Tess2_Sweep.regionBelow = function(r) {
	return r.nodeUp.prev.key;
};
hxGeomAlgo__$Tess2_Sweep.regionAbove = function(r) {
	return r.nodeUp.next.key;
};
hxGeomAlgo__$Tess2_Sweep.debugEvent = function(tess) {
};
hxGeomAlgo__$Tess2_Sweep.addWinding = function(eDst,eSrc) {
	eDst.winding += eSrc.winding;
	eDst.Sym.winding += eSrc.Sym.winding;
};
hxGeomAlgo__$Tess2_Sweep.edgeLeq = function(tess,reg1,reg2) {
	var ev = tess.event;
	var t1;
	var t2;
	var e1 = reg1.eUp;
	var e2 = reg2.eUp;
	if(e1.get_Dst() == ev) {
		if(e2.get_Dst() == ev) {
			if(hxGeomAlgo__$Tess2_Geom.vertLeq(e1.Org,e2.Org)) {
				return hxGeomAlgo__$Tess2_Geom.edgeSign(e2.get_Dst(),e1.Org,e2.Org) <= 0;
			}
			return hxGeomAlgo__$Tess2_Geom.edgeSign(e1.get_Dst(),e2.Org,e1.Org) >= 0;
		}
		return hxGeomAlgo__$Tess2_Geom.edgeSign(e2.get_Dst(),ev,e2.Org) <= 0;
	}
	if(e2.get_Dst() == ev) {
		return hxGeomAlgo__$Tess2_Geom.edgeSign(e1.get_Dst(),ev,e1.Org) >= 0;
	}
	var t1 = hxGeomAlgo__$Tess2_Geom.edgeEval(e1.get_Dst(),ev,e1.Org);
	var t2 = hxGeomAlgo__$Tess2_Geom.edgeEval(e2.get_Dst(),ev,e2.Org);
	return t1 >= t2;
};
hxGeomAlgo__$Tess2_Sweep.deleteRegion = function(tess,reg) {
	var reg1 = reg.fixUpperEdge;
	reg.eUp.activeRegion = null;
	tess.dict.delete(reg.nodeUp);
};
hxGeomAlgo__$Tess2_Sweep.fixUpperEdge = function(tess,reg,newEdge) {
	tess.mesh.delete(reg.eUp);
	reg.fixUpperEdge = false;
	reg.eUp = newEdge;
	newEdge.activeRegion = reg;
};
hxGeomAlgo__$Tess2_Sweep.topLeftRegion = function(tess,reg) {
	var org = reg.eUp.Org;
	var e;
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
		if(!(reg.eUp.Org == org)) {
			break;
		}
	}
	if(reg.fixUpperEdge) {
		e = tess.mesh.connect(hxGeomAlgo__$Tess2_Sweep.regionBelow(reg).eUp.Sym,reg.eUp.Lnext);
		if(e == null) {
			return null;
		}
		hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,e);
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
	}
	return reg;
};
hxGeomAlgo__$Tess2_Sweep.topRightRegion = function(reg) {
	var dst = reg.eUp.get_Dst();
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg);
		if(!(reg.eUp.get_Dst() == dst)) {
			break;
		}
	}
	return reg;
};
hxGeomAlgo__$Tess2_Sweep.addRegionBelow = function(tess,regAbove,eNewUp) {
	var regNew = new hxGeomAlgo__$Tess2_ActiveRegion();
	regNew.eUp = eNewUp;
	regNew.nodeUp = tess.dict.insertBefore(regAbove.nodeUp,regNew);
	regNew.fixUpperEdge = false;
	regNew.sentinel = false;
	regNew.dirty = false;
	eNewUp.activeRegion = regNew;
	return regNew;
};
hxGeomAlgo__$Tess2_Sweep.isWindingInside = function(tess,n) {
	switch(tess.windingRule._hx_index) {
	case 0:
		return (n & 1) != 0;
	case 1:
		return n != 0;
	case 2:
		return n > 0;
	case 3:
		return n < 0;
	case 4:
		if(n < 2) {
			return n <= -2;
		} else {
			return true;
		}
		break;
	}
};
hxGeomAlgo__$Tess2_Sweep.computeWinding = function(tess,reg) {
	reg.windingNumber = hxGeomAlgo__$Tess2_Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;
	reg.inside = hxGeomAlgo__$Tess2_Sweep.isWindingInside(tess,reg.windingNumber);
};
hxGeomAlgo__$Tess2_Sweep.finishRegion = function(tess,reg) {
	var e = reg.eUp;
	var f = e.Lface;
	f.inside = reg.inside;
	f.anEdge = e;
	hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
};
hxGeomAlgo__$Tess2_Sweep.finishLeftRegions = function(tess,regFirst,regLast) {
	var e;
	var ePrev;
	var reg = null;
	var regPrev = regFirst;
	var ePrev = regFirst.eUp;
	while(regPrev != regLast) {
		regPrev.fixUpperEdge = false;
		reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regPrev);
		e = reg.eUp;
		if(e.Org != ePrev.Org) {
			if(!reg.fixUpperEdge) {
				hxGeomAlgo__$Tess2_Sweep.finishRegion(tess,regPrev);
				break;
			}
			e = tess.mesh.connect(ePrev.get_Lprev(),e.Sym);
			hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,e);
		}
		if(ePrev.Onext != e) {
			tess.mesh.splice(e.get_Oprev(),e);
			tess.mesh.splice(ePrev,e);
		}
		hxGeomAlgo__$Tess2_Sweep.finishRegion(tess,regPrev);
		ePrev = reg.eUp;
		regPrev = reg;
	}
	return ePrev;
};
hxGeomAlgo__$Tess2_Sweep.addRightEdges = function(tess,regUp,eFirst,eLast,eTopLeft,cleanUp) {
	var reg = null;
	var firstTime = true;
	var e = eFirst;
	while(true) {
		var cond = hxGeomAlgo__$Tess2_Geom.vertLeq(e.Org,e.get_Dst());
		hxGeomAlgo__$Tess2_Sweep.addRegionBelow(tess,regUp,e.Sym);
		e = e.Onext;
		if(!(e != eLast)) {
			break;
		}
	}
	if(eTopLeft == null) {
		eTopLeft = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp.get_Rprev();
	}
	var regPrev = regUp;
	var ePrev = eTopLeft;
	while(true) {
		reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regPrev);
		e = reg.eUp.Sym;
		if(e.Org != ePrev.Org) {
			break;
		}
		if(e.Onext != ePrev) {
			tess.mesh.splice(e.get_Oprev(),e);
			tess.mesh.splice(ePrev.get_Oprev(),e);
		}
		reg.windingNumber = regPrev.windingNumber - e.winding;
		reg.inside = hxGeomAlgo__$Tess2_Sweep.isWindingInside(tess,reg.windingNumber);
		regPrev.dirty = true;
		if(!firstTime && hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regPrev)) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(e,ePrev);
			hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regPrev);
			tess.mesh.delete(ePrev);
		}
		firstTime = false;
		regPrev = reg;
		ePrev = e;
	}
	regPrev.dirty = true;
	if(cleanUp) {
		hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions(tess,regPrev);
	}
};
hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices = function(tess,e1,e2) {
	tess.mesh.splice(e1,e2);
};
hxGeomAlgo__$Tess2_Sweep.vertexWeights = function(isect,org,dst) {
	var t1 = hxGeomAlgo__$Tess2_Geom.vertL1dist(org,isect);
	var t2 = hxGeomAlgo__$Tess2_Geom.vertL1dist(dst,isect);
	var w0 = 0.5 * t2 / (t1 + t2);
	var w1 = 0.5 * t1 / (t1 + t2);
	isect.coords[0] += w0 * org.coords[0] + w1 * dst.coords[0];
	isect.coords[1] += w0 * org.coords[1] + w1 * dst.coords[1];
	isect.coords[2] += w0 * org.coords[2] + w1 * dst.coords[2];
};
hxGeomAlgo__$Tess2_Sweep.getIntersectData = function(tess,isect,orgUp,dstUp,orgLo,dstLo) {
	var tmp = isect.coords[1] = isect.coords[2] = 0;
	isect.coords[0] = tmp;
	isect.idx = -1;
	hxGeomAlgo__$Tess2_Sweep.vertexWeights(isect,orgUp,dstUp);
	hxGeomAlgo__$Tess2_Sweep.vertexWeights(isect,orgLo,dstLo);
};
hxGeomAlgo__$Tess2_Sweep.checkForRightSplice = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eUp.Org,eLo.Org)) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eLo.get_Dst(),eUp.Org,eLo.Org) > 0) {
			return false;
		}
		if(!hxGeomAlgo__$Tess2_Geom.vertEq(eUp.Org,eLo.Org)) {
			tess.mesh.splitEdge(eLo.Sym);
			tess.mesh.splice(eUp,eLo.get_Oprev());
			regUp.dirty = regLo.dirty = true;
		} else if(eUp.Org != eLo.Org) {
			tess.pq.delete(eUp.Org.pqHandle);
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,eLo.get_Oprev(),eUp);
		}
	} else {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),eLo.Org,eUp.Org) < 0) {
			return false;
		}
		hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
		tess.mesh.splitEdge(eUp.Sym);
		tess.mesh.splice(eLo.get_Oprev(),eUp);
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.checkForLeftSplice = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var e;
	var cond = !hxGeomAlgo__$Tess2_Geom.vertEq(eUp.get_Dst(),eLo.get_Dst());
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eUp.get_Dst(),eLo.get_Dst())) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),eLo.get_Dst(),eUp.Org) < 0) {
			return false;
		}
		hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
		e = tess.mesh.splitEdge(eUp);
		tess.mesh.splice(eLo.Sym,e);
		e.Lface.inside = regUp.inside;
	} else {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(eLo.get_Dst(),eUp.get_Dst(),eLo.Org) > 0) {
			return false;
		}
		regUp.dirty = regLo.dirty = true;
		e = tess.mesh.splitEdge(eLo);
		tess.mesh.splice(eUp.Lnext,eLo.Sym);
		e.get_Rface().inside = regUp.inside;
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.checkForIntersect = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var orgUp = eUp.Org;
	var orgLo = eLo.Org;
	var dstUp = eUp.get_Dst();
	var dstLo = eLo.get_Dst();
	var isect = new hxGeomAlgo__$Tess2_TessVertex();
	var e;
	var cond = !hxGeomAlgo__$Tess2_Geom.vertEq(dstLo,dstUp);
	var cond = hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,orgUp) <= 0;
	var cond = hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,orgLo) >= 0;
	if(orgUp == orgLo) {
		return false;
	}
	var tMinUp = Math.min(orgUp.t,dstUp.t);
	var tMaxLo = Math.max(orgLo.t,dstLo.t);
	if(tMinUp > tMaxLo) {
		return false;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(orgUp,orgLo)) {
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,orgUp,orgLo) > 0) {
			return false;
		}
	} else if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,orgLo,orgUp) < 0) {
		return false;
	}
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	hxGeomAlgo__$Tess2_Geom.intersect(dstUp,orgUp,dstLo,orgLo,isect);
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(isect,tess.event)) {
		isect.s = tess.event.s;
		isect.t = tess.event.t;
	}
	var orgMin = hxGeomAlgo__$Tess2_Geom.vertLeq(orgUp,orgLo) ? orgUp : orgLo;
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(orgMin,isect)) {
		isect.s = orgMin.s;
		isect.t = orgMin.t;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(isect,orgUp) || hxGeomAlgo__$Tess2_Geom.vertEq(isect,orgLo)) {
		hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regUp);
		return false;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertEq(dstUp,tess.event) && hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,isect) >= 0 || !hxGeomAlgo__$Tess2_Geom.vertEq(dstLo,tess.event) && hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,isect) <= 0) {
		if(dstLo == tess.event) {
			tess.mesh.splitEdge(eUp.Sym);
			tess.mesh.splice(eLo.Sym,eUp);
			regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,regUp);
			eUp = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp;
			hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp),regLo);
			hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eUp.get_Oprev(),eUp,eUp,true);
			return true;
		}
		if(dstUp == tess.event) {
			tess.mesh.splitEdge(eLo.Sym);
			tess.mesh.splice(eUp.Lnext,eLo.get_Oprev());
			regLo = regUp;
			regUp = hxGeomAlgo__$Tess2_Sweep.topRightRegion(regUp);
			e = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp.get_Rprev();
			regLo.eUp = eLo.get_Oprev();
			eLo = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,regLo,null);
			hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eLo.Onext,eUp.get_Rprev(),e,true);
			return true;
		}
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstUp,tess.event,isect) >= 0) {
			hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = true;
			tess.mesh.splitEdge(eUp.Sym);
			eUp.Org.s = tess.event.s;
			eUp.Org.t = tess.event.t;
		}
		if(hxGeomAlgo__$Tess2_Geom.edgeSign(dstLo,tess.event,isect) <= 0) {
			regUp.dirty = regLo.dirty = true;
			tess.mesh.splitEdge(eLo.Sym);
			eLo.Org.s = tess.event.s;
			eLo.Org.t = tess.event.t;
		}
		return false;
	}
	tess.mesh.splitEdge(eUp.Sym);
	tess.mesh.splitEdge(eLo.Sym);
	tess.mesh.splice(eLo.get_Oprev(),eUp);
	eUp.Org.s = isect.s;
	eUp.Org.t = isect.t;
	eUp.Org.pqHandle = tess.pq.insert(eUp.Org);
	hxGeomAlgo__$Tess2_Sweep.getIntersectData(tess,eUp.Org,orgUp,dstUp,orgLo,dstLo);
	hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;
	return false;
};
hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions = function(tess,regUp) {
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp;
	var eLo;
	while(true) {
		while(regLo.dirty) {
			regUp = regLo;
			regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regLo);
		}
		if(!regUp.dirty) {
			regLo = regUp;
			regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regUp);
			if(regUp == null || !regUp.dirty) {
				return;
			}
		}
		regUp.dirty = false;
		eUp = regUp.eUp;
		eLo = regLo.eUp;
		if(eUp.get_Dst() != eLo.get_Dst()) {
			if(hxGeomAlgo__$Tess2_Sweep.checkForLeftSplice(tess,regUp)) {
				if(regLo.fixUpperEdge) {
					hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regLo);
					tess.mesh.delete(eLo);
					regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
					eLo = regLo.eUp;
				} else if(regUp.fixUpperEdge) {
					hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regUp);
					tess.mesh.delete(eUp);
					regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regLo);
					eUp = regUp.eUp;
				}
			}
		}
		if(eUp.Org != eLo.Org) {
			if(eUp.get_Dst() != eLo.get_Dst() && !regUp.fixUpperEdge && !regLo.fixUpperEdge && (eUp.get_Dst() == tess.event || eLo.get_Dst() == tess.event)) {
				if(hxGeomAlgo__$Tess2_Sweep.checkForIntersect(tess,regUp)) {
					return;
				}
			} else {
				hxGeomAlgo__$Tess2_Sweep.checkForRightSplice(tess,regUp);
			}
		}
		if(eUp.Org == eLo.Org && eUp.get_Dst() == eLo.get_Dst()) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(eLo,eUp);
			hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,regUp);
			tess.mesh.delete(eUp);
			regUp = hxGeomAlgo__$Tess2_Sweep.regionAbove(regLo);
		}
	}
};
hxGeomAlgo__$Tess2_Sweep.connectRightVertex = function(tess,regUp,eBottomLeft) {
	var eNew;
	var eTopLeft = eBottomLeft.Onext;
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	var degenerate = false;
	if(eUp.get_Dst() != eLo.get_Dst()) {
		hxGeomAlgo__$Tess2_Sweep.checkForIntersect(tess,regUp);
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(eUp.Org,tess.event)) {
		tess.mesh.splice(eTopLeft.get_Oprev(),eUp);
		regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,regUp);
		eTopLeft = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp).eUp;
		hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp),regLo);
		degenerate = true;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertEq(eLo.Org,tess.event)) {
		tess.mesh.splice(eBottomLeft,eLo.get_Oprev());
		eBottomLeft = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,regLo,null);
		degenerate = true;
	}
	if(degenerate) {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eBottomLeft.Onext,eTopLeft,eTopLeft,true);
		return;
	}
	if(hxGeomAlgo__$Tess2_Geom.vertLeq(eLo.Org,eUp.Org)) {
		eNew = eLo.get_Oprev();
	} else {
		eNew = eUp;
	}
	eNew = tess.mesh.connect(eBottomLeft.get_Lprev(),eNew);
	hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eNew,eNew.Onext,eNew.Onext,false);
	eNew.Sym.activeRegion.fixUpperEdge = true;
	hxGeomAlgo__$Tess2_Sweep.walkDirtyRegions(tess,regUp);
};
hxGeomAlgo__$Tess2_Sweep.connectLeftDegenerate = function(tess,regUp,vEvent) {
	var e = regUp.eUp;
	if(hxGeomAlgo__$Tess2_Geom.vertEq(e.Org,vEvent)) {
		hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,e,vEvent.anEdge);
		return;
	}
	if(!hxGeomAlgo__$Tess2_Geom.vertEq(e.get_Dst(),vEvent)) {
		tess.mesh.splitEdge(e.Sym);
		if(regUp.fixUpperEdge) {
			tess.mesh.delete(e.Onext);
			regUp.fixUpperEdge = false;
		}
		tess.mesh.splice(vEvent.anEdge,e);
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,vEvent);
		return;
	}
	regUp = hxGeomAlgo__$Tess2_Sweep.topRightRegion(regUp);
	var reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eTopRight = reg.eUp.Sym;
	var eLast = eTopRight.Onext;
	var eTopLeft = eLast;
	if(reg.fixUpperEdge) {
		hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
		tess.mesh.delete(eTopRight);
		eTopRight = eTopLeft.get_Oprev();
	}
	tess.mesh.splice(vEvent.anEdge,eTopRight);
	if(!hxGeomAlgo__$Tess2_Geom.edgeGoesLeft(eTopLeft)) {
		eTopLeft = null;
	}
	hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eTopRight.Onext,eLast,eTopLeft,true);
};
hxGeomAlgo__$Tess2_Sweep.connectLeftVertex = function(tess,vEvent) {
	var eNew;
	var tmp = new hxGeomAlgo__$Tess2_ActiveRegion();
	tmp.eUp = vEvent.anEdge.Sym;
	var regUp = tess.dict.search(tmp).key;
	var regLo = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	if(regLo == null) {
		return;
	}
	var eUp = regUp.eUp;
	var eLo = regLo.eUp;
	if(hxGeomAlgo__$Tess2_Geom.edgeSign(eUp.get_Dst(),vEvent,eUp.Org) == 0.0) {
		hxGeomAlgo__$Tess2_Sweep.connectLeftDegenerate(tess,regUp,vEvent);
		return;
	}
	var reg = hxGeomAlgo__$Tess2_Geom.vertLeq(eLo.get_Dst(),eUp.get_Dst()) ? regUp : regLo;
	if(regUp.inside || reg.fixUpperEdge) {
		if(reg == regUp) {
			eNew = tess.mesh.connect(vEvent.anEdge.Sym,eUp.Lnext);
		} else {
			var tempHalfEdge = tess.mesh.connect(eLo.get_Dnext(),vEvent.anEdge);
			eNew = tempHalfEdge.Sym;
		}
		if(reg.fixUpperEdge) {
			hxGeomAlgo__$Tess2_Sweep.fixUpperEdge(tess,reg,eNew);
		} else {
			hxGeomAlgo__$Tess2_Sweep.computeWinding(tess,hxGeomAlgo__$Tess2_Sweep.addRegionBelow(tess,regUp,eNew));
		}
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,vEvent);
	} else {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,vEvent.anEdge,vEvent.anEdge,null,true);
	}
};
hxGeomAlgo__$Tess2_Sweep.sweepEvent = function(tess,vEvent) {
	tess.event = vEvent;
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	var e = vEvent.anEdge;
	while(e.activeRegion == null) {
		e = e.Onext;
		if(e == vEvent.anEdge) {
			hxGeomAlgo__$Tess2_Sweep.connectLeftVertex(tess,vEvent);
			return;
		}
	}
	var regUp = hxGeomAlgo__$Tess2_Sweep.topLeftRegion(tess,e.activeRegion);
	var reg = hxGeomAlgo__$Tess2_Sweep.regionBelow(regUp);
	var eTopLeft = reg.eUp;
	var eBottomLeft = hxGeomAlgo__$Tess2_Sweep.finishLeftRegions(tess,reg,null);
	if(eBottomLeft.Onext == eTopLeft) {
		hxGeomAlgo__$Tess2_Sweep.connectRightVertex(tess,regUp,eBottomLeft);
	} else {
		hxGeomAlgo__$Tess2_Sweep.addRightEdges(tess,regUp,eBottomLeft.Onext,eTopLeft,eTopLeft,true);
	}
};
hxGeomAlgo__$Tess2_Sweep.addSentinel = function(tess,smin,smax,t) {
	var reg = new hxGeomAlgo__$Tess2_ActiveRegion();
	var e = tess.mesh.makeEdge();
	e.Org.s = smax;
	e.Org.t = t;
	e.get_Dst().s = smin;
	e.get_Dst().t = t;
	tess.event = e.get_Dst();
	reg.eUp = e;
	reg.windingNumber = 0;
	reg.inside = false;
	reg.fixUpperEdge = false;
	reg.sentinel = true;
	reg.dirty = false;
	reg.nodeUp = tess.dict.insert(reg);
};
hxGeomAlgo__$Tess2_Sweep.initEdgeDict = function(tess) {
	tess.dict = new hxGeomAlgo__$Tess2_Dict(tess,hxGeomAlgo__$Tess2_Sweep.edgeLeq);
	var w = tess.bmax[0] - tess.bmin[0];
	var h = tess.bmax[1] - tess.bmin[1];
	var smin = tess.bmin[0] - w;
	var smax = tess.bmax[0] + w;
	var tmin = tess.bmin[1] - h;
	var tmax = tess.bmax[1] + h;
	hxGeomAlgo__$Tess2_Sweep.addSentinel(tess,smin,smax,tmin);
	hxGeomAlgo__$Tess2_Sweep.addSentinel(tess,smin,smax,tmax);
};
hxGeomAlgo__$Tess2_Sweep.doneEdgeDict = function(tess) {
	var reg;
	var fixedEdges = 0;
	while(true) {
		reg = tess.dict.min().key;
		if(!(reg != null)) {
			break;
		}
		if(!reg.sentinel) {
			var cond = ++fixedEdges == 1;
		}
		hxGeomAlgo__$Tess2_Sweep.deleteRegion(tess,reg);
	}
};
hxGeomAlgo__$Tess2_Sweep.removeDegenerateEdges = function(tess) {
	var eNext;
	var eLnext;
	var eHead = tess.mesh.eHead;
	var e = eHead.next;
	while(e != eHead) {
		eNext = e.next;
		eLnext = e.Lnext;
		if(hxGeomAlgo__$Tess2_Geom.vertEq(e.Org,e.get_Dst()) && e.Lnext.Lnext != e) {
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,eLnext,e);
			tess.mesh.delete(e);
			e = eLnext;
			eLnext = e.Lnext;
		}
		if(eLnext.Lnext == e) {
			if(eLnext != e) {
				if(eLnext == eNext || eLnext == eNext.Sym) {
					eNext = eNext.next;
				}
				tess.mesh.delete(eLnext);
			}
			if(e == eNext || e == eNext.Sym) {
				eNext = eNext.next;
			}
			tess.mesh.delete(e);
		}
		e = eNext;
	}
};
hxGeomAlgo__$Tess2_Sweep.initPriorityQ = function(tess) {
	var vertexCount = 0;
	var vHead = tess.mesh.vHead;
	var v = vHead.next;
	while(v != vHead) {
		++vertexCount;
		v = v.next;
	}
	vertexCount += 8;
	var pq = tess.pq = new hxGeomAlgo__$Tess2_PriorityQ(vertexCount,hxGeomAlgo__$Tess2_Geom.vertLeq);
	vHead = tess.mesh.vHead;
	v = vHead.next;
	while(v != vHead) {
		v.pqHandle = pq.insert(v);
		v = v.next;
	}
	if(v != vHead) {
		return false;
	}
	pq.init();
	return true;
};
hxGeomAlgo__$Tess2_Sweep.donePriorityQ = function(tess) {
	tess.pq = null;
};
hxGeomAlgo__$Tess2_Sweep.removeDegenerateFaces = function(tess,mesh) {
	var fNext;
	var e;
	var f = mesh.fHead.next;
	while(f != mesh.fHead) {
		fNext = f.next;
		e = f.anEdge;
		if(e.Lnext.Lnext == e) {
			hxGeomAlgo__$Tess2_Sweep.addWinding(e.Onext,e);
			tess.mesh.delete(e);
		}
		f = fNext;
	}
	return true;
};
hxGeomAlgo__$Tess2_Sweep.computeInterior = function(tess) {
	var v;
	var vNext;
	hxGeomAlgo__$Tess2_Sweep.removeDegenerateEdges(tess);
	if(!hxGeomAlgo__$Tess2_Sweep.initPriorityQ(tess)) {
		return false;
	}
	hxGeomAlgo__$Tess2_Sweep.initEdgeDict(tess);
	var pq = tess.pq;
	while(true) {
		v = tess.pq.extractMin();
		if(!(v != null)) {
			break;
		}
		while(true) {
			vNext = tess.pq.min();
			if(vNext == null || !hxGeomAlgo__$Tess2_Geom.vertEq(vNext,v)) {
				break;
			}
			vNext = tess.pq.extractMin();
			hxGeomAlgo__$Tess2_Sweep.spliceMergeVertices(tess,v.anEdge,vNext.anEdge);
		}
		hxGeomAlgo__$Tess2_Sweep.sweepEvent(tess,v);
	}
	tess.event = tess.dict.min().key.eUp.Org;
	hxGeomAlgo__$Tess2_Sweep.debugEvent(tess);
	hxGeomAlgo__$Tess2_Sweep.doneEdgeDict(tess);
	hxGeomAlgo__$Tess2_Sweep.donePriorityQ(tess);
	if(!hxGeomAlgo__$Tess2_Sweep.removeDegenerateFaces(tess,tess.mesh)) {
		return false;
	}
	tess.mesh.check();
	return true;
};
var hxGeomAlgo_Tesselator = $hx_exports["hxGeomAlgo"]["Tesselator"] = function() {
	this.elementCount = 0;
	this.elements = [];
	this.vertexCount = 0;
	this.vertexIndices = [];
	this.vertices = [];
	this.vertexIndexCounter = 0;
	this.event = null;
	this.pq = null;
	this.dict = null;
	this.bmax = [0.0,0.0];
	this.bmin = [0.0,0.0];
	this.tUnit = [0.0,0.0,0.0];
	this.sUnit = [0.0,0.0,0.0];
	this.normal = [0.0,0.0,0.0];
	this.mesh = null;
	this.windingRule = hxGeomAlgo_WindingRule.ODD;
};
$hxClasses["hxGeomAlgo.Tesselator"] = hxGeomAlgo_Tesselator;
hxGeomAlgo_Tesselator.__name__ = "hxGeomAlgo.Tesselator";
hxGeomAlgo_Tesselator.prototype = {
	dot_: function(u,v) {
		return u[0] * v[0] + u[1] * v[1] + u[2] * v[2];
	}
	,normalize_: function(v) {
		var len = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
		len = Math.sqrt(len);
		v[0] /= len;
		v[1] /= len;
		v[2] /= len;
	}
	,longAxis_: function(v) {
		var i = 0;
		if(Math.abs(v[1]) > Math.abs(v[0])) {
			i = 1;
		}
		if(Math.abs(v[2]) > Math.abs(v[i])) {
			i = 2;
		}
		return i;
	}
	,computeNormal_: function(norm) {
		var c;
		var tLen2;
		var maxVal = [.0,.0,.0];
		var minVal = [.0,.0,.0];
		var d1 = [.0,.0,.0];
		var d2_0 = .0;
		var d2_1 = .0;
		var d2_2 = .0;
		var tNorm_0 = .0;
		var tNorm_1 = .0;
		var tNorm_2 = .0;
		var maxVert = [null,null,null];
		var minVert = [null,null,null];
		var vHead = this.mesh.vHead;
		var v = vHead.next;
		c = v.coords[0];
		minVal[0] = c;
		minVert[0] = v;
		maxVal[0] = c;
		maxVert[0] = v;
		c = v.coords[1];
		minVal[1] = c;
		minVert[1] = v;
		maxVal[1] = c;
		maxVert[1] = v;
		c = v.coords[2];
		minVal[2] = c;
		minVert[2] = v;
		maxVal[2] = c;
		maxVert[2] = v;
		v = vHead.next;
		while(v != vHead) {
			c = v.coords[0];
			if(c < minVal[0]) {
				minVal[0] = c;
				minVert[0] = v;
			}
			if(c > maxVal[0]) {
				maxVal[0] = c;
				maxVert[0] = v;
			}
			c = v.coords[1];
			if(c < minVal[1]) {
				minVal[1] = c;
				minVert[1] = v;
			}
			if(c > maxVal[1]) {
				maxVal[1] = c;
				maxVert[1] = v;
			}
			c = v.coords[2];
			if(c < minVal[2]) {
				minVal[2] = c;
				minVert[2] = v;
			}
			if(c > maxVal[2]) {
				maxVal[2] = c;
				maxVert[2] = v;
			}
			v = v.next;
		}
		var i = 0;
		if(maxVal[1] - minVal[1] > maxVal[0] - minVal[0]) {
			i = 1;
		}
		if(maxVal[2] - minVal[2] > maxVal[i] - minVal[i]) {
			i = 2;
		}
		if(minVal[i] >= maxVal[i]) {
			norm[0] = 0;
			norm[1] = 0;
			norm[2] = 1;
			return;
		}
		var maxLen2 = .0;
		var v1 = minVert[i];
		var v2 = maxVert[i];
		d1[0] = v1.coords[0] - v2.coords[0];
		d1[1] = v1.coords[1] - v2.coords[1];
		d1[2] = v1.coords[2] - v2.coords[2];
		v = vHead.next;
		while(v != vHead) {
			d2_0 = v.coords[0] - v2.coords[0];
			d2_1 = v.coords[1] - v2.coords[1];
			d2_2 = v.coords[2] - v2.coords[2];
			tNorm_0 = d1[1] * d2_2 - d1[2] * d2_1;
			tNorm_1 = d1[2] * d2_0 - d1[0] * d2_2;
			tNorm_2 = d1[0] * d2_1 - d1[1] * d2_0;
			tLen2 = tNorm_0 * tNorm_0 + tNorm_1 * tNorm_1 + tNorm_2 * tNorm_2;
			if(tLen2 > maxLen2) {
				maxLen2 = tLen2;
				norm[0] = tNorm_0;
				norm[1] = tNorm_1;
				norm[2] = tNorm_2;
			}
			v = v.next;
		}
		if(maxLen2 <= 0) {
			norm[0] = norm[1] = norm[2] = 0;
			norm[this.longAxis_(d1)] = 1;
		}
	}
	,checkOrientation_: function() {
		var fHead = this.mesh.fHead;
		var v;
		var vHead = this.mesh.vHead;
		var e;
		var area = .0;
		var f = fHead.next;
		while(f != fHead) {
			e = f.anEdge;
			if(e.winding <= 0) {
				f = f.next;
				continue;
			}
			while(true) {
				area += (e.Org.s - e.get_Dst().s) * (e.Org.t + e.get_Dst().t);
				e = e.Lnext;
				if(!(e != f.anEdge)) {
					break;
				}
			}
			f = f.next;
		}
		if(area < 0) {
			v = vHead.next;
			while(v != vHead) {
				v.t = -v.t;
				v = v.next;
			}
			this.tUnit[0] = -this.tUnit[0];
			this.tUnit[1] = -this.tUnit[1];
			this.tUnit[2] = -this.tUnit[2];
		}
	}
	,projectPolygon_: function() {
		var vHead = this.mesh.vHead;
		var norm = [.0,.0,.0];
		var computedNormal = false;
		norm[0] = this.normal[0];
		norm[1] = this.normal[1];
		norm[2] = this.normal[2];
		if(norm[0] == 0.0 && norm[1] == 0.0 && norm[2] == 0.0) {
			this.computeNormal_(norm);
			computedNormal = true;
		}
		var sUnit = this.sUnit;
		var tUnit = this.tUnit;
		var i = this.longAxis_(norm);
		sUnit[i] = 0;
		sUnit[(i + 1) % 3] = 1.0;
		sUnit[(i + 2) % 3] = 0.0;
		tUnit[i] = 0;
		tUnit[(i + 1) % 3] = 0.0;
		tUnit[(i + 2) % 3] = norm[i] > 0 ? 1.0 : -1.0;
		var v = vHead.next;
		while(v != vHead) {
			v.s = this.dot_(v.coords,sUnit);
			v.t = this.dot_(v.coords,tUnit);
			v = v.next;
		}
		if(computedNormal) {
			this.checkOrientation_();
		}
		var first = true;
		v = vHead.next;
		while(v != vHead) {
			if(first) {
				var tmp = this.bmax[0] = v.s;
				this.bmin[0] = tmp;
				var tmp1 = this.bmax[1] = v.t;
				this.bmin[1] = tmp1;
				first = false;
			} else {
				if(v.s < this.bmin[0]) {
					this.bmin[0] = v.s;
				}
				if(v.s > this.bmax[0]) {
					this.bmax[0] = v.s;
				}
				if(v.t < this.bmin[1]) {
					this.bmin[1] = v.t;
				}
				if(v.t > this.bmax[1]) {
					this.bmax[1] = v.t;
				}
			}
			v = v.next;
		}
	}
	,addWinding_: function(eDst,eSrc) {
		eDst.winding += eSrc.winding;
		eDst.Sym.winding += eSrc.Sym.winding;
	}
	,tessellateMonoRegion_: function(mesh,face) {
		var up = face.anEdge;
		while(hxGeomAlgo__$Tess2_Geom.vertLeq(up.get_Dst(),up.Org)) up = up.get_Lprev();
		while(hxGeomAlgo__$Tess2_Geom.vertLeq(up.Org,up.get_Dst())) up = up.Lnext;
		var lo = up.get_Lprev();
		while(up.Lnext != lo) if(hxGeomAlgo__$Tess2_Geom.vertLeq(up.get_Dst(),lo.Org)) {
			while(lo.Lnext != up && (hxGeomAlgo__$Tess2_Geom.edgeGoesLeft(lo.Lnext) || hxGeomAlgo__$Tess2_Geom.edgeSign(lo.Org,lo.get_Dst(),lo.Lnext.get_Dst()) <= 0.0)) {
				var tempHalfEdge = mesh.connect(lo.Lnext,lo);
				lo = tempHalfEdge.Sym;
			}
			lo = lo.get_Lprev();
		} else {
			while(lo.Lnext != up && (hxGeomAlgo__$Tess2_Geom.edgeGoesRight(up.get_Lprev()) || hxGeomAlgo__$Tess2_Geom.edgeSign(up.get_Dst(),up.Org,up.get_Lprev().Org) >= 0.0)) {
				var tempHalfEdge1 = mesh.connect(up,up.get_Lprev());
				up = tempHalfEdge1.Sym;
			}
			up = up.Lnext;
		}
		while(lo.Lnext.Lnext != up) {
			var tempHalfEdge = mesh.connect(lo.Lnext,lo);
			lo = tempHalfEdge.Sym;
		}
		return true;
	}
	,tessellateInterior_: function(mesh) {
		var next;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			next = f.next;
			if(f.inside) {
				if(!this.tessellateMonoRegion_(mesh,f)) {
					return false;
				}
			}
			f = next;
		}
		return true;
	}
	,refineDelaunay_: function(mesh) {
		var stack = [];
		var e;
		var edges_0 = null;
		var edges_1 = null;
		var edges_2 = null;
		var edges_3 = null;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(f.inside) {
				e = f.anEdge;
				while(true) {
					e.mark = hxGeomAlgo__$Tess2_Geom.edgeIsInternal(e);
					if(e.mark && !e.Sym.mark) {
						stack.push(e);
					}
					e = e.Lnext;
					if(!(e != f.anEdge)) {
						break;
					}
				}
			}
			f = f.next;
		}
		while(stack.length > 0) {
			e = stack.pop();
			e.mark = e.Sym.mark = false;
			if(!hxGeomAlgo__$Tess2_Geom.edgeIsLocallyDelaunay(e)) {
				hxGeomAlgo__$Tess2_TessMesh.flipEdge(mesh,e);
				edges_0 = e.Lnext;
				edges_1 = e.get_Lprev();
				edges_2 = e.Sym.Lnext;
				edges_3 = e.Sym.get_Lprev();
				if(!edges_0.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_0)) {
					edges_0.mark = edges_0.Sym.mark = true;
					stack.push(edges_0);
				}
				if(!edges_1.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_1)) {
					edges_1.mark = edges_1.Sym.mark = true;
					stack.push(edges_1);
				}
				if(!edges_2.mark && hxGeomAlgo__$Tess2_Geom.edgeIsInternal(edges_2)) {
					edges_2.mark = edges_2.Sym.mark = true;
					stack.push(edges_2);
				}
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var e = stack[_g];
			++_g;
			stack.pop();
		}
		stack = null;
	}
	,discardExterior_: function(mesh) {
		var next;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			next = f.next;
			if(!f.inside) {
				mesh.zapFace(f);
			}
			f = next;
		}
	}
	,setWindingNumber_: function(mesh,value,keepOnlyBoundary) {
		var eNext;
		var e = mesh.eHead.next;
		while(e != mesh.eHead) {
			eNext = e.next;
			if(e.get_Rface().inside != e.Lface.inside) {
				e.winding = e.Lface.inside ? value : -value;
			} else if(!keepOnlyBoundary) {
				e.winding = 0;
			} else {
				mesh.delete(e);
			}
			e = eNext;
		}
	}
	,getNeighbourFace_: function(edge) {
		if(edge.get_Rface() == null) {
			return -1;
		}
		if(!edge.get_Rface().inside) {
			return -1;
		}
		return edge.get_Rface().n;
	}
	,outputPolymesh_: function(mesh,resultsType,polySize,vertexDim) {
		var edge;
		var maxFaceCount = 0;
		var maxVertexCount = 0;
		var faceVerts;
		var i;
		var elements = 0;
		var vert;
		if(polySize > 3) {
			mesh.mergeConvexFaces(polySize);
		}
		var v = mesh.vHead.next;
		while(v != mesh.vHead) {
			v.n = -1;
			v = v.next;
		}
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			f.n = -1;
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			faceVerts = 0;
			while(true) {
				v = edge.Org;
				if(v.n == -1) {
					v.n = maxVertexCount;
					++maxVertexCount;
				}
				++faceVerts;
				edge = edge.Lnext;
				if(!(edge != f.anEdge)) {
					break;
				}
			}
			f.n = maxFaceCount;
			++maxFaceCount;
			f = f.next;
		}
		this.elementCount = maxFaceCount;
		if(resultsType == hxGeomAlgo_ResultType.CONNECTED_POLYGONS) {
			maxFaceCount *= 2;
		}
		this.elements = [];
		this.vertexCount = maxVertexCount;
		this.vertices = [];
		this.vertexIndices = [];
		v = mesh.vHead.next;
		while(v != mesh.vHead) {
			if(v.n != -1) {
				var idx = v.n * vertexDim;
				this.vertices[idx] = v.coords[0];
				this.vertices[idx + 1] = v.coords[1];
				if(vertexDim > 2) {
					this.vertices[idx + 2] = v.coords[2];
				}
				this.vertexIndices[v.n] = v.idx;
			}
			v = v.next;
		}
		var nel = 0;
		f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			faceVerts = 0;
			while(true) {
				v = edge.Org;
				this.elements[nel++] = v.n;
				++faceVerts;
				edge = edge.Lnext;
				if(!(edge != f.anEdge)) {
					break;
				}
			}
			var _g = faceVerts;
			var _g1 = polySize;
			while(_g < _g1) {
				var i = _g++;
				this.elements[nel++] = -1;
			}
			if(resultsType == hxGeomAlgo_ResultType.CONNECTED_POLYGONS) {
				edge = f.anEdge;
				while(true) {
					this.elements[nel++] = this.getNeighbourFace_(edge);
					edge = edge.Lnext;
					if(!(edge != f.anEdge)) {
						break;
					}
				}
				var _g2 = faceVerts;
				var _g3 = polySize;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.elements[nel++] = -1;
				}
			}
			f = f.next;
		}
	}
	,outputContours_: function(mesh,vertexDim) {
		var edge;
		var start;
		var verts;
		var elements;
		var vertInds;
		var startVert = 0;
		var vertCount = 0;
		this.vertexCount = 0;
		this.elementCount = 0;
		var f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			edge = f.anEdge;
			start = edge;
			while(true) {
				this.vertexCount++;
				edge = edge.Lnext;
				if(!(edge != start)) {
					break;
				}
			}
			this.elementCount++;
			f = f.next;
		}
		this.elements = [];
		this.vertices = [];
		this.vertexIndices = [];
		var nv = 0;
		var nvi = 0;
		var nel = 0;
		startVert = 0;
		f = mesh.fHead.next;
		while(f != mesh.fHead) {
			if(!f.inside) {
				f = f.next;
				continue;
			}
			vertCount = 0;
			edge = f.anEdge;
			start = edge;
			while(true) {
				this.vertices[nv++] = edge.Org.coords[0];
				this.vertices[nv++] = edge.Org.coords[1];
				if(vertexDim > 2) {
					this.vertices[nv++] = edge.Org.coords[2];
				}
				this.vertexIndices[nvi++] = edge.Org.idx;
				++vertCount;
				edge = edge.Lnext;
				if(!(edge != start)) {
					break;
				}
			}
			this.elements[nel++] = startVert;
			this.elements[nel++] = vertCount;
			startVert += vertCount;
			f = f.next;
		}
	}
	,addContour: function(vertexDim,vertices) {
		if(this.mesh == null) {
			this.mesh = new hxGeomAlgo__$Tess2_TessMesh();
		}
		if(vertexDim < 2) {
			vertexDim = 2;
		}
		if(vertexDim > 3) {
			vertexDim = 3;
		}
		var e = null;
		var i = 0;
		while(i < vertices.length) {
			if(e == null) {
				e = this.mesh.makeEdge();
				this.mesh.splice(e,e.Sym);
			} else {
				this.mesh.splitEdge(e);
				e = e.Lnext;
			}
			e.Org.coords[0] = vertices[i];
			e.Org.coords[1] = vertices[i + 1];
			if(vertexDim > 2) {
				e.Org.coords[2] = vertices[i + 2];
			} else {
				e.Org.coords[2] = 0.0;
			}
			e.Org.idx = this.vertexIndexCounter++;
			e.winding = 1;
			e.Sym.winding = -1;
			i += vertexDim;
		}
	}
	,tesselate: function(windingRule,resultType,polySize,vertexDim,normal) {
		this.vertices = [];
		this.elements = [];
		this.vertexIndices = [];
		this.vertexIndexCounter = 0;
		if(normal != null) {
			this.normal[0] = normal[0];
			this.normal[1] = normal[1];
			this.normal[2] = normal[2];
		}
		this.windingRule = windingRule;
		if(vertexDim < 2) {
			vertexDim = 2;
		}
		if(vertexDim > 3) {
			vertexDim = 3;
		}
		if(this.mesh == null) {
			return false;
		}
		this.projectPolygon_();
		hxGeomAlgo__$Tess2_Sweep.computeInterior(this);
		var mesh = this.mesh;
		if(resultType == hxGeomAlgo_ResultType.BOUNDARY_CONTOURS) {
			this.setWindingNumber_(mesh,1,true);
		} else {
			this.tessellateInterior_(mesh);
			if(resultType == hxGeomAlgo_ResultType.EXPERIMENTAL_DELAUNAY) {
				this.refineDelaunay_(mesh);
				polySize = 3;
			}
		}
		mesh.check();
		if(resultType == hxGeomAlgo_ResultType.BOUNDARY_CONTOURS) {
			this.outputContours_(mesh,vertexDim);
		} else {
			this.outputPolymesh_(mesh,resultType,polySize,vertexDim);
		}
		return true;
	}
	,__class__: hxGeomAlgo_Tesselator
};
var hxPolyK_ArrayPairs = {};
hxPolyK_ArrayPairs._new = function(arr) {
	var this1 = arr;
	return this1;
};
hxPolyK_ArrayPairs.get_length = function(this1) {
	return this1.length / 2 | 0;
};
hxPolyK_ArrayPairs.access = function(this1,key) {
	var i = key * 2 | 0;
	return { x : this1[i], y : this1[i + 1]};
};
hxPolyK_ArrayPairs.reverse = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = hxPolyK_ArrayPairs._new(this1);
	while(_g < (_g1.length / 2 | 0)) {
		var i = _g * 2 | 0;
		var i_x = _g1[i];
		var i_y = _g1[i + 1];
		++_g;
		arr.unshift(i_y);
		arr.unshift(i_x);
	}
	this1 = arr;
	return arr;
};
var hxPolyK_ArrayTriple = {};
hxPolyK_ArrayTriple._new = function(arr) {
	var this1 = arr;
	return this1;
};
hxPolyK_ArrayTriple.get_length = function(this1) {
	return this1.length / 3 | 0;
};
hxPolyK_ArrayTriple.access = function(this1,key) {
	var i = key * 3 | 0;
	return { a : this1[i], b : this1[i + 1], c : this1[i + 2]};
};
hxPolyK_ArrayTriple.reverse = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = hxPolyK_ArrayTriple._new(this1);
	while(_g < (_g1.length / 3 | 0)) {
		var i = _g * 3 | 0;
		var i_a = _g1[i];
		var i_b = _g1[i + 1];
		var i_c = _g1[i + 2];
		++_g;
		arr.unshift(i_c);
		arr.unshift(i_b);
		arr.unshift(i_a);
	}
	this1 = arr;
	return arr;
};
var hxPolyK_PolyK = function() {
};
$hxClasses["hxPolyK.PolyK"] = hxPolyK_PolyK;
hxPolyK_PolyK.__name__ = "hxPolyK.PolyK";
hxPolyK_PolyK.isSimple = function(p) {
	var n = p.length >> 1;
	if(n < 4) {
		return true;
	}
	var a1_x = 0.;
	var a1_y = 0.;
	var a1_flag = false;
	var a2_x = 0.;
	var a2_y = 0.;
	var a2_flag = false;
	var b1_x = 0.;
	var b1_y = 0.;
	var b1_flag = false;
	var b2_x = 0.;
	var b2_y = 0.;
	var b2_flag = false;
	var c_x = 0.;
	var c_y = 0.;
	var c_flag = false;
	var ind;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		ind = 2 * i | 0;
		a1_x = p[ind];
		a1_y = p[ind + 1];
		if(i == n - 1) {
			a2_x = p[0];
			a2_y = p[1];
		} else {
			a2_x = p[ind + 2];
			a2_y = p[ind + 3];
		}
		var _g2 = 0;
		var _g3 = n;
		while(_g2 < _g3) {
			var j = _g2++;
			if(Math.abs(i - j) < 2) {
				continue;
			}
			if(j == n - 1 && i == 0) {
				continue;
			}
			if(i == n - 1 && j == 0) {
				continue;
			}
			ind = 2 * j;
			b1_x = p[ind];
			b1_y = p[ind + 1];
			if(j == n - 1) {
				b2_x = p[0];
				b2_y = p[1];
			} else {
				b2_x = p[ind + 2];
				b2_y = p[ind + 3];
			}
			var dax = a1_x - a2_x;
			var dbx = b1_x - b2_x;
			var day = a1_y - a2_y;
			var dby = b1_y - b2_y;
			var Den = dax * dby - day * dbx;
			var c;
			if(Den == 0) {
				c = null;
			} else {
				var A = a1_x * a2_y - a1_y * a2_x;
				var B = b1_x * b2_y - b1_y * b2_x;
				var I = { x : (A * dbx - dax * B) / Den, y : (A * dby - day * B) / Den, flag : false};
				var c1;
				var minx = Math.min(a1_x,a2_x);
				var maxx = Math.max(a1_x,a2_x);
				var miny = Math.min(a1_y,a2_y);
				var maxy = Math.max(a1_y,a2_y);
				if(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy) {
					var minx1 = Math.min(b1_x,b2_x);
					var maxx1 = Math.max(b1_x,b2_x);
					var miny1 = Math.min(b1_y,b2_y);
					var maxy1 = Math.max(b1_y,b2_y);
					c1 = minx1 == maxx1 ? miny1 <= I.y && I.y <= maxy1 : miny1 == maxy1 ? minx1 <= I.x && I.x <= maxx1 : minx1 <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx1 && miny1 <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy1;
				} else {
					c1 = false;
				}
				c = c1 ? I : null;
			}
			if(c != null) {
				return false;
			}
		}
	}
	return true;
};
hxPolyK_PolyK.isConvex = function(p) {
	if(p.length < 6) {
		return true;
	}
	var l = p.length - 4;
	var l2 = l / 2 | 0;
	var i;
	var _g = 0;
	var _g1 = l2;
	while(_g < _g1) {
		var k = _g++;
		i = k * 2;
		var bx = p[i + 2];
		var by = p[i + 3];
		if(!((p[i + 1] - by) * (p[i + 4] - bx) + (bx - p[i]) * (p[i + 5] - by) >= 0)) {
			return false;
		}
	}
	var bx = p[l + 2];
	var by = p[l + 3];
	if(!((p[l + 1] - by) * (p[0] - bx) + (bx - p[l]) * (p[1] - by) >= 0)) {
		return false;
	}
	var bx = p[0];
	var by = p[1];
	if(!((p[l + 3] - by) * (p[2] - bx) + (bx - p[l + 2]) * (p[3] - by) >= 0)) {
		return false;
	}
	return true;
};
hxPolyK_PolyK.getArea = function(p) {
	if(p.length < 6) {
		return 0;
	}
	var l = p.length - 2;
	var sum = 0.;
	var l2 = l / 2 | 0;
	var i;
	var _g = 0;
	var _g1 = l2;
	while(_g < _g1) {
		var k = _g++;
		i = k * 2;
		sum += (p[i + 2] - p[i]) * (p[i + 1] + p[i + 3]);
	}
	sum += (p[0] - p[l]) * (p[l + 1] + p[1]);
	return -sum * 0.5;
};
hxPolyK_PolyK.getAABB = function(p) {
	var minx = Infinity;
	var miny = Infinity;
	var maxx = -Infinity;
	var maxy = -Infinity;
	var _g = 0;
	var _g1 = hxPolyK_ArrayPairs._new(p);
	while(_g < (_g1.length / 2 | 0)) {
		var i = _g * 2 | 0;
		var i_x = _g1[i];
		var i_y = _g1[i + 1];
		++_g;
		minx = Math.min(minx,i_x);
		maxx = Math.max(maxx,i_x);
		miny = Math.min(miny,i_y);
		maxy = Math.max(maxy,i_y);
	}
	return { x : minx, y : miny, width : maxx - minx, height : maxy - miny};
};
hxPolyK_PolyK.reverse = function(p) {
	var ap = hxPolyK_ArrayPairs._new(p);
	var arr = [];
	var _g = 0;
	var _g1 = hxPolyK_ArrayPairs._new(ap);
	while(_g < (_g1.length / 2 | 0)) {
		var i = _g * 2 | 0;
		var i_x = _g1[i];
		var i_y = _g1[i + 1];
		++_g;
		arr.unshift(i_y);
		arr.unshift(i_x);
	}
	ap = arr;
	return arr;
};
hxPolyK_PolyK.triangulate = function(p) {
	var n = p.length >> 1;
	if(n < 3) {
		return [];
	}
	var tgs = [];
	var avl = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		avl.push(i);
	}
	var i = 0;
	var al = n;
	var i0;
	var i1;
	var i2;
	var vi;
	var ax;
	var ay;
	var bx;
	var by;
	var cx;
	var cy;
	var earFound;
	while(al > 3) {
		i0 = avl[i % al];
		i1 = avl[(i + 1) % al];
		i2 = avl[(i + 2) % al];
		ax = p[2 * i0];
		ay = p[2 * i0 + 1];
		bx = p[2 * i1];
		by = p[2 * i1 + 1];
		cx = p[2 * i2];
		cy = p[2 * i2 + 1];
		earFound = false;
		if((ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0) {
			earFound = true;
			var _g = 0;
			var _g1 = al;
			while(_g < _g1) {
				var j = _g++;
				var vi = avl[j];
				if(vi == i0 || vi == i1 || vi == i2) {
					continue;
				}
				var v0x = cx - ax;
				var v0y = cy - ay;
				var v1x = bx - ax;
				var v1y = by - ay;
				var v2x = p[2 * vi] - ax;
				var v2y = p[2 * vi + 1] - ay;
				var dot00 = v0x * v0x + v0y * v0y;
				var dot01 = v0x * v1x + v0y * v1y;
				var dot02 = v0x * v2x + v0y * v2y;
				var dot11 = v1x * v1x + v1y * v1y;
				var dot12 = v1x * v2x + v1y * v2y;
				var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
				var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
				var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
				if(u >= 0 && v >= 0 && u + v < 1) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i1);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			--al;
			i = 0;
		} else if(i++ > 3 * al) {
			break;
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
hxPolyK_PolyK.containsPoint = function(p,px,py) {
	var n = p.length >> 1;
	var ax;
	var ay = p[2 * n - 3] - py;
	var bx = p[2 * n - 2] - px;
	var by = p[2 * n - 1] - py;
	var twoi;
	var lup = by > ay;
	var lx;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		ax = bx;
		ay = by;
		twoi = 2 * i;
		bx = p[twoi] - px;
		by = p[twoi + 1] - py;
		if(ay == by) {
			continue;
		}
		lup = by > ay;
	}
	var depth = 0;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		ax = bx;
		ay = by;
		twoi = 2 * i;
		bx = p[twoi] - px;
		by = p[twoi + 1] - py;
		if(ay < 0 && by < 0) {
			continue;
		}
		if(ay > 0 && by > 0) {
			continue;
		}
		if(ax < 0 && bx < 0) {
			continue;
		}
		if(ay == by && Math.min(ax,bx) <= 0) {
			return true;
		}
		if(ay == by) {
			continue;
		}
		lx = ax + (bx - ax) * -ay / (by - ay);
		if(lx == 0) {
			return true;
		}
		if(lx > 0) {
			++depth;
		}
		if(ay == 0 && lup && by > ay) {
			--depth;
		}
		if(ay == 0 && !lup && by < ay) {
			--depth;
		}
		lup = by > ay;
	}
	return (depth & 1) == 1;
};
hxPolyK_PolyK.slice = function(p,ax,ay,bx,by) {
	if(hxPolyK_PolyK.containsPoint(p,ax,ay) || hxPolyK_PolyK.containsPoint(p,bx,by)) {
		return [p.slice(0)];
	}
	var a_y;
	var a_x = ax;
	a_y = ay;
	var a_flag = false;
	var b_x = ax;
	var b_y = ay;
	var b_flag = false;
	var iscs = [];
	var ps = [];
	var _g = 0;
	var _g1 = hxPolyK_ArrayPairs._new(p);
	while(_g < (_g1.length / 2 | 0)) {
		var i = _g * 2 | 0;
		var i_x = _g1[i];
		var i_y = _g1[i + 1];
		++_g;
		ps.push({ x : i_x, y : i_y, flag : false});
	}
	var l = ps.length;
	var isc;
	var skip = false;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		if(skip) {
			skip = false;
			continue;
		}
		var b1 = ps[i];
		var b2 = ps[(i + 1) % ps.length];
		var dax = a_x - b_x;
		var dbx = b1.x - b2.x;
		var day = a_y - b_y;
		var dby = b1.y - b2.y;
		var Den = dax * dby - day * dbx;
		if(Den == 0) {
			isc = null;
		} else {
			var A = a_x * b_y - a_y * b_x;
			var B = b1.x * b2.y - b1.y * b2.x;
			var I = { x : (A * dbx - dax * B) / Den, y : (A * dby - day * B) / Den, flag : false};
			var isc1;
			var minx = Math.min(a_x,b_x);
			var maxx = Math.max(a_x,b_x);
			var miny = Math.min(a_y,b_y);
			var maxy = Math.max(a_y,b_y);
			if(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy) {
				var minx1 = Math.min(b1.x,b2.x);
				var maxx1 = Math.max(b1.x,b2.x);
				var miny1 = Math.min(b1.y,b2.y);
				var maxy1 = Math.max(b1.y,b2.y);
				isc1 = minx1 == maxx1 ? miny1 <= I.y && I.y <= maxy1 : miny1 == maxy1 ? minx1 <= I.x && I.x <= maxx1 : minx1 <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx1 && miny1 <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy1;
			} else {
				isc1 = false;
			}
			isc = isc1 ? I : null;
		}
		var fisc = iscs[0];
		var lisc = iscs[iscs.length - 1];
		var tmp;
		var tmp1;
		if(isc != null) {
			if(fisc != null) {
				var dx = fisc.x - isc.x;
				var dy = fisc.y - isc.y;
				tmp1 = Math.sqrt(dx * dx + dy * dy) > 0.0000000001;
			} else {
				tmp1 = true;
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			if(lisc != null) {
				var dx1 = lisc.x - isc.x;
				var dy1 = lisc.y - isc.y;
				tmp = Math.sqrt(dx1 * dx1 + dy1 * dy1) > 0.0000000001;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			isc.flag = true;
			iscs.push(isc);
			ps.splice(i + 1,0);
			ps.splice(i + 1,0,isc);
			skip = true;
		}
	}
	if(iscs.length < 2) {
		return [p.slice(0)];
	}
	var comp = function(u,v) {
		var dx = u.x - a_x;
		var dy = u.y - a_y;
		var dx1 = v.x - a_x;
		var dy1 = v.y - a_y;
		var val = Math.sqrt(dx * dx + dy * dy) - Math.sqrt(dx1 * dx1 + dy1 * dy1);
		if(val > 0) {
			return 1;
		}
		if(val < 0) {
			return -1;
		}
		return 0;
	};
	iscs.sort(comp);
	var pgs = [];
	var dir = 0;
	while(iscs.length > 0) {
		var n = ps.length;
		var i0 = iscs[0];
		var i1 = iscs[1];
		var ind0 = ps.indexOf(i0);
		var ind1 = ps.indexOf(i1);
		var solved = false;
		if(hxPolyK_PolyK.firstWithFlag(ps,ind0) == ind1) {
			solved = true;
		} else {
			i0 = iscs[1];
			i1 = iscs[0];
			ind0 = ps.indexOf(i0);
			ind1 = ps.indexOf(i1);
			if(hxPolyK_PolyK.firstWithFlag(ps,ind0) == ind1) {
				solved = true;
			}
		}
		if(solved) {
			--dir;
			var ind11 = ind1;
			var n1 = ps.length;
			var nps = [];
			if(ind11 < ind0) {
				ind11 += n1;
			}
			var l = ind11 + 1;
			var _g = ind0;
			var _g1 = l;
			while(_g < _g1) {
				var i = _g++;
				nps.push(ps[i % n1]);
			}
			var pgn = nps;
			pgs.push(pgn);
			var ind12 = ind0;
			var n2 = ps.length;
			var nps1 = [];
			if(ind12 < ind1) {
				ind12 += n2;
			}
			var l1 = ind12 + 1;
			var _g2 = ind1;
			var _g3 = l1;
			while(_g2 < _g3) {
				var i2 = _g2++;
				nps1.push(ps[i2 % n2]);
			}
			ps = nps1;
			i0.flag = i1.flag = false;
			iscs.splice(0,2);
			if(iscs.length == 0) {
				pgs.push(ps);
			}
		} else {
			++dir;
			iscs.reverse();
		}
		if(dir > 1) {
			break;
		}
	}
	var result = [];
	var l = pgs.length;
	var l2;
	var _g = 0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		var pg = pgs[i];
		var npg = [];
		l2 = pg.length;
		var _g2 = 0;
		var _g3 = l2;
		while(_g2 < _g3) {
			var j = _g2++;
			npg.push(pg[j].x);
			npg.push(pg[j].y);
		}
		result.push(npg);
	}
	return result;
};
hxPolyK_PolyK.raycast = function(p,x,y,dx,dy,isc) {
	var l = p.length - 2;
	var tp = [];
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	var a1 = tp[0];
	var a2 = tp[1];
	var b1 = tp[2];
	var b2 = tp[3];
	var c = tp[4];
	a1.x = x;
	a1.y = y;
	a2.x = x + dx;
	a2.y = y + dy;
	if(isc == null) {
		isc = { dist : 0, edge : 0, norm : { x : 0, y : 0}, refl : { x : 0, y : 0}};
	}
	isc.dist = Infinity;
	var l2 = l / 2 | 0;
	var i;
	var _g = 0;
	var _g1 = l2;
	while(_g < _g1) {
		var k = _g++;
		i = k * 2;
		b1.x = p[i];
		b1.y = p[i + 1];
		b2.x = p[i + 2];
		b2.y = p[i + 3];
		var dax = a1.x - a2.x;
		var dbx = b1.x - b2.x;
		var day = a1.y - a2.y;
		var dby = b1.y - b2.y;
		var Den = dax * dby - day * dbx;
		var nisc;
		if(Den == 0) {
			nisc = null;
		} else {
			var A = a1.x * a2.y - a1.y * a2.x;
			var B = b1.x * b2.y - b1.y * b2.x;
			var I = c;
			var iDen = 1 / Den;
			I.x = (A * dbx - dax * B) * iDen;
			I.y = (A * dby - day * B) * iDen;
			var minx = Math.min(b1.x,b2.x);
			var maxx = Math.max(b1.x,b2.x);
			var miny = Math.min(b1.y,b2.y);
			var maxy = Math.max(b1.y,b2.y);
			nisc = !(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy) ? null : day > 0 && I.y > a1.y || day < 0 && I.y < a1.y ? null : dax > 0 && I.x > a1.x || dax < 0 && I.x < a1.x ? null : I;
		}
		if(nisc != null) {
			var dx1 = c.x - a1.x;
			var dy1 = c.y - a1.y;
			var nrl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			if(nrl < isc.dist) {
				var dx2 = b2.x - b1.x;
				var dy2 = b2.y - b1.y;
				var ibl = 1 / Math.sqrt(dx2 * dx2 + dy2 * dy2);
				var nx = -(b2.y - b1.y) * ibl;
				var ny = (b2.x - b1.x) * ibl;
				var ddot = 2 * (dx * nx + dy * ny);
				isc.dist = nrl;
				isc.norm.x = nx;
				isc.norm.y = ny;
				isc.refl.x = -ddot * nx + dx;
				isc.refl.y = -ddot * ny + dy;
				isc.edge = i / 2;
			}
		}
	}
	b1.x = b2.x;
	b1.y = b2.y;
	b2.x = p[0];
	b2.y = p[1];
	var dax = a1.x - a2.x;
	var dbx = b1.x - b2.x;
	var day = a1.y - a2.y;
	var dby = b1.y - b2.y;
	var Den = dax * dby - day * dbx;
	var nisc;
	if(Den == 0) {
		nisc = null;
	} else {
		var A = a1.x * a2.y - a1.y * a2.x;
		var B = b1.x * b2.y - b1.y * b2.x;
		var I = c;
		var iDen = 1 / Den;
		I.x = (A * dbx - dax * B) * iDen;
		I.y = (A * dby - day * B) * iDen;
		var minx = Math.min(b1.x,b2.x);
		var maxx = Math.max(b1.x,b2.x);
		var miny = Math.min(b1.y,b2.y);
		var maxy = Math.max(b1.y,b2.y);
		nisc = !(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy) ? null : day > 0 && I.y > a1.y || day < 0 && I.y < a1.y ? null : dax > 0 && I.x > a1.x || dax < 0 && I.x < a1.x ? null : I;
	}
	if(nisc != null) {
		var dx1 = c.x - a1.x;
		var dy1 = c.y - a1.y;
		var nrl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
		if(nrl < isc.dist) {
			var dx1 = b2.x - b1.x;
			var dy1 = b2.y - b1.y;
			var ibl = 1 / Math.sqrt(dx1 * dx1 + dy1 * dy1);
			var nx = -(b2.y - b1.y) * ibl;
			var ny = (b2.x - b1.x) * ibl;
			var ddot = 2 * (dx * nx + dy * ny);
			isc.dist = nrl;
			isc.norm.x = nx;
			isc.norm.y = ny;
			isc.refl.x = -ddot * nx + dx;
			isc.refl.y = -ddot * ny + dy;
			isc.edge = p.length / 2 - 1;
		}
	}
	if(isc.dist != Infinity) {
		return isc;
	} else {
		return null;
	}
};
hxPolyK_PolyK.closestEdge = function(p,x,y,isc) {
	var l = p.length - 2;
	var tp = [];
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	tp.push({ x : 0., y : 0., flag : false});
	var a1 = tp[0];
	var b1 = tp[2];
	var b2 = tp[3];
	var c = tp[4];
	a1.x = x;
	a1.y = y;
	if(isc == null) {
		isc = { dist : 0, edge : 0, point : { x : 0, y : 0}, norm : { x : 0, y : 0}};
	}
	isc.dist = Infinity;
	var l2 = l / 2 | 0;
	var i;
	var _g = 0;
	var _g1 = l2;
	while(_g < _g1) {
		var k = _g++;
		i = k * 2;
		b1.x = p[i];
		b1.y = p[i + 1];
		b2.x = p[i + 2];
		b2.y = p[i + 3];
		var x1 = a1.x;
		var y1 = a1.y;
		var x11 = b1.x;
		var y11 = b1.y;
		var x2 = b2.x;
		var y2 = b2.y;
		var A = x1 - x11;
		var B = y1 - y11;
		var C = x2 - x11;
		var D = y2 - y11;
		var dot = A * C + B * D;
		var len_sq = C * C + D * D;
		var param = dot / len_sq;
		var xx;
		var yy;
		if(param < 0 || x11 == x2 && y11 == y2) {
			xx = x11;
			yy = y11;
		} else if(param > 1) {
			xx = x2;
			yy = y2;
		} else {
			xx = x11 + param * C;
			yy = y11 + param * D;
		}
		var dx = x1 - xx;
		var dy = y1 - yy;
		var dst = Math.sqrt(dx * dx + dy * dy);
		if(dst < isc.dist) {
			isc.dist = dst;
			isc.edge = i >> 1;
			isc.point.x = xx;
			isc.point.y = yy;
		}
	}
	b1.x = b2.x;
	b1.y = b2.y;
	b2.x = p[0];
	b2.y = p[1];
	var x1 = a1.x;
	var y1 = a1.y;
	var x11 = b1.x;
	var y11 = b1.y;
	var x2 = b2.x;
	var y2 = b2.y;
	var A = x1 - x11;
	var B = y1 - y11;
	var C = x2 - x11;
	var D = y2 - y11;
	var dot = A * C + B * D;
	var len_sq = C * C + D * D;
	var param = dot / len_sq;
	var xx;
	var yy;
	if(param < 0 || x11 == x2 && y11 == y2) {
		xx = x11;
		yy = y11;
	} else if(param > 1) {
		xx = x2;
		yy = y2;
	} else {
		xx = x11 + param * C;
		yy = y11 + param * D;
	}
	var dx = x1 - xx;
	var dy = y1 - yy;
	var dst = Math.sqrt(dx * dx + dy * dy);
	if(dst < isc.dist) {
		isc.dist = dst;
		isc.edge = l >> 1;
		isc.point.x = xx;
		isc.point.y = yy;
	}
	var idst = 1 / isc.dist;
	isc.norm.x = (x - isc.point.x) * idst;
	isc.norm.y = (y - isc.point.y) * idst;
	return isc;
};
hxPolyK_PolyK.pointLineDist = function(p,a,b,edge,isc) {
	var x = p.x;
	var y = p.y;
	var x1 = a.x;
	var y1 = a.y;
	var x2 = b.x;
	var y2 = b.y;
	var A = x - x1;
	var B = y - y1;
	var C = x2 - x1;
	var D = y2 - y1;
	var dot = A * C + B * D;
	var len_sq = C * C + D * D;
	var param = dot / len_sq;
	var xx;
	var yy;
	if(param < 0 || x1 == x2 && y1 == y2) {
		xx = x1;
		yy = y1;
	} else if(param > 1) {
		xx = x2;
		yy = y2;
	} else {
		xx = x1 + param * C;
		yy = y1 + param * D;
	}
	var dx = x - xx;
	var dy = y - yy;
	var dst = Math.sqrt(dx * dx + dy * dy);
	if(dst < isc.dist) {
		isc.dist = dst;
		isc.edge = edge;
		isc.point.x = xx;
		isc.point.y = yy;
	}
};
hxPolyK_PolyK.updateISC = function(dx,dy,a1,b1,b2,c,edge,isc) {
	var dx1 = c.x - a1.x;
	var dy1 = c.y - a1.y;
	var nrl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
	if(nrl < isc.dist) {
		var dx1 = b2.x - b1.x;
		var dy1 = b2.y - b1.y;
		var ibl = 1 / Math.sqrt(dx1 * dx1 + dy1 * dy1);
		var nx = -(b2.y - b1.y) * ibl;
		var ny = (b2.x - b1.x) * ibl;
		var ddot = 2 * (dx * nx + dy * ny);
		isc.dist = nrl;
		isc.norm.x = nx;
		isc.norm.y = ny;
		isc.refl.x = -ddot * nx + dx;
		isc.refl.y = -ddot * ny + dy;
		isc.edge = edge;
	}
};
hxPolyK_PolyK.getPoints = function(ps,ind0,ind1) {
	var n = ps.length;
	var nps = [];
	if(ind1 < ind0) {
		ind1 += n;
	}
	var l = ind1 + 1;
	var _g = ind0;
	var _g1 = l;
	while(_g < _g1) {
		var i = _g++;
		nps.push(ps[i % n]);
	}
	return nps;
};
hxPolyK_PolyK.firstWithFlag = function(ps,ind) {
	var n = ps.length;
	while(true) {
		ind = (ind + 1) % n;
		if(ps[ind].flag) {
			return ind;
		}
	}
};
hxPolyK_PolyK.pointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax;
	var v0y = cy - ay;
	var v1x = bx - ax;
	var v1y = by - ay;
	var v2x = px - ax;
	var v2y = py - ay;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	if(u >= 0 && v >= 0) {
		return u + v < 1;
	} else {
		return false;
	}
};
hxPolyK_PolyK.rayLineIntersection = function(a1,a2,b1,b2,c) {
	var dax = a1.x - a2.x;
	var dbx = b1.x - b2.x;
	var day = a1.y - a2.y;
	var dby = b1.y - b2.y;
	var Den = dax * dby - day * dbx;
	if(Den == 0) {
		return null;
	}
	var A = a1.x * a2.y - a1.y * a2.x;
	var B = b1.x * b2.y - b1.y * b2.x;
	var I = c;
	var iDen = 1 / Den;
	I.x = (A * dbx - dax * B) * iDen;
	I.y = (A * dby - day * B) * iDen;
	var minx = Math.min(b1.x,b2.x);
	var maxx = Math.max(b1.x,b2.x);
	var miny = Math.min(b1.y,b2.y);
	var maxy = Math.max(b1.y,b2.y);
	if(!(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy)) {
		return null;
	}
	if(day > 0 && I.y > a1.y || day < 0 && I.y < a1.y) {
		return null;
	}
	if(dax > 0 && I.x > a1.x || dax < 0 && I.x < a1.x) {
		return null;
	}
	return I;
};
hxPolyK_PolyK.getLineIntersection = function(a1,a2,b1,b2) {
	var dax = a1.x - a2.x;
	var dbx = b1.x - b2.x;
	var day = a1.y - a2.y;
	var dby = b1.y - b2.y;
	var Den = dax * dby - day * dbx;
	if(Den == 0) {
		return null;
	}
	var A = a1.x * a2.y - a1.y * a2.x;
	var B = b1.x * b2.y - b1.y * b2.x;
	var I = { x : (A * dbx - dax * B) / Den, y : (A * dby - day * B) / Den, flag : false};
	var tmp;
	var minx = Math.min(a1.x,a2.x);
	var maxx = Math.max(a1.x,a2.x);
	var miny = Math.min(a1.y,a2.y);
	var maxy = Math.max(a1.y,a2.y);
	if(minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy) {
		var minx = Math.min(b1.x,b2.x);
		var maxx = Math.max(b1.x,b2.x);
		var miny = Math.min(b1.y,b2.y);
		var maxy = Math.max(b1.y,b2.y);
		tmp = minx == maxx ? miny <= I.y && I.y <= maxy : miny == maxy ? minx <= I.x && I.x <= maxx : minx <= I.x + 0.0000000001 && I.x - 0.0000000001 <= maxx && miny <= I.y + 0.0000000001 && I.y - 0.0000000001 <= maxy;
	} else {
		tmp = false;
	}
	if(tmp) {
		return I;
	}
	return null;
};
hxPolyK_PolyK.inRect = function(a,b,c) {
	var minx = Math.min(b.x,c.x);
	var maxx = Math.max(b.x,c.x);
	var miny = Math.min(b.y,c.y);
	var maxy = Math.max(b.y,c.y);
	if(minx == maxx) {
		if(miny <= a.y) {
			return a.y <= maxy;
		} else {
			return false;
		}
	}
	if(miny == maxy) {
		if(minx <= a.x) {
			return a.x <= maxx;
		} else {
			return false;
		}
	}
	if(minx <= a.x + 0.0000000001 && a.x - 0.0000000001 <= maxx && miny <= a.y + 0.0000000001) {
		return a.y - 0.0000000001 <= maxy;
	} else {
		return false;
	}
};
hxPolyK_PolyK.convex = function(ax,ay,bx,by,cx,cy) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0;
};
hxPolyK_PolyK.dist = function(a,b) {
	var dx = b.x - a.x;
	var dy = b.y - a.y;
	return Math.sqrt(dx * dx + dy * dy);
};
hxPolyK_PolyK.prototype = {
	__class__: hxPolyK_PolyK
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var justPath_EllipseArc = function(arc_) {
	this.arc = arc_;
};
$hxClasses["justPath.EllipseArc"] = justPath_EllipseArc;
justPath_EllipseArc.__name__ = "justPath.EllipseArc";
justPath_EllipseArc.prototype = {
	alphaPoint: function() {
		var theta = this.arc.alpha;
		var px = this.arc.cx + this.arc.rx * Math.cos(theta);
		var py = this.arc.cy + this.arc.ry * Math.sin(theta);
		px -= this.arc.cx;
		py -= this.arc.cy;
		var dx = px;
		var dy = py;
		px = dx * this.arc.phiCos - dy * this.arc.phiSin;
		py = dx * this.arc.phiSin + dy * this.arc.phiCos;
		this.x = px + this.arc.cx;
		this.y = py + this.arc.cy;
	}
	,omegaPoint: function() {
		var theta = this.arc.omega;
		var px = this.arc.cx + this.arc.rx * Math.cos(theta);
		var py = this.arc.cy + this.arc.ry * Math.sin(theta);
		px -= this.arc.cx;
		py -= this.arc.cy;
		var dx = px;
		var dy = py;
		px = dx * this.arc.phiCos - dy * this.arc.phiSin;
		py = dx * this.arc.phiSin + dy * this.arc.phiCos;
		this.x = px + this.arc.cx;
		this.y = py + this.arc.cy;
	}
	,lineRender: function(moveTo,lineTo,dA,renderFirst) {
		if(renderFirst == null) {
			renderFirst = true;
		}
		var sign = this.arc.delta > 0 ? 1 : -1;
		var totalSteps = Math.ceil(Math.abs(this.arc.delta) / dA);
		var theta = this.arc.alpha;
		var step = this.arc.delta / totalSteps;
		if(renderFirst) {
			var px = this.arc.cx + this.arc.rx * Math.cos(theta);
			var py = this.arc.cy + this.arc.ry * Math.sin(theta);
			px -= this.arc.cx;
			py -= this.arc.cy;
			var dx = px;
			var dy = py;
			px = dx * this.arc.phiCos - dy * this.arc.phiSin;
			py = dx * this.arc.phiSin + dy * this.arc.phiCos;
			this.x = px + this.arc.cx;
			this.y = py + this.arc.cy;
			moveTo(this.x,this.y);
		}
		var _g = 1;
		var _g1 = totalSteps;
		while(_g < _g1) {
			var i = _g++;
			theta += step;
			var px = this.arc.cx + this.arc.rx * Math.cos(theta);
			var py = this.arc.cy + this.arc.ry * Math.sin(theta);
			px -= this.arc.cx;
			py -= this.arc.cy;
			var dx = px;
			var dy = py;
			px = dx * this.arc.phiCos - dy * this.arc.phiSin;
			py = dx * this.arc.phiSin + dy * this.arc.phiCos;
			this.x = px + this.arc.cx;
			this.y = py + this.arc.cy;
			lineTo(this.x,this.y);
		}
		var theta = this.arc.omega;
		var px = this.arc.cx + this.arc.rx * Math.cos(theta);
		var py = this.arc.cy + this.arc.ry * Math.sin(theta);
		px -= this.arc.cx;
		py -= this.arc.cy;
		var dx = px;
		var dy = py;
		px = dx * this.arc.phiCos - dy * this.arc.phiSin;
		py = dx * this.arc.phiSin + dy * this.arc.phiCos;
		this.x = px + this.arc.cx;
		this.y = py + this.arc.cy;
		lineTo(this.x,this.y);
	}
	,calculatePoint: function(theta) {
		var px = this.arc.cx + this.arc.rx * Math.cos(theta);
		var py = this.arc.cy + this.arc.ry * Math.sin(theta);
		px -= this.arc.cx;
		py -= this.arc.cy;
		var dx = px;
		var dy = py;
		px = dx * this.arc.phiCos - dy * this.arc.phiSin;
		py = dx * this.arc.phiSin + dy * this.arc.phiCos;
		this.x = px + this.arc.cx;
		this.y = py + this.arc.cy;
	}
	,__class__: justPath_EllipseArc
};
var justPath_ConverterArc = {};
justPath_ConverterArc._new = function(sx,sy,xr,yr,phi,large,sweep,ex,ey) {
	var mx = (sx - ex) / 2;
	var my = (sy - ey) / 2;
	var ax = (sx + ex) / 2;
	var ay = (sy + ey) / 2;
	phi %= 360;
	phi = phi * Math.PI / 180;
	var sin = Math.sin(phi);
	var cos = Math.cos(phi);
	var x1 = mx * cos + my * sin;
	var y1 = -mx * sin + my * cos;
	var rx = Math.abs(xr);
	var ry = Math.abs(yr);
	var rxx = rx * rx;
	var ryy = ry * ry;
	var xx1 = x1 * x1;
	var yy1 = y1 * y1;
	var check = xx1 / rxx + yy1 / ryy;
	if(check > 1) {
		rx *= Math.sqrt(check);
		ry *= Math.sqrt(check);
		rxx = rx * rx;
		ryy = ry * ry;
	}
	var sign = large == sweep ? -1 : 1;
	var sq = (rxx * ryy - rxx * yy1 - ryy * xx1) / (rxx * yy1 + ryy * xx1);
	if(sq < 0) {
		sq = 0;
	}
	var coef = sign * Math.sqrt(sq);
	var cx1 = coef * rx * y1 / ry;
	var cy1 = -coef * ry * x1 / rx;
	var cx = ax + cx1 * cos - cy1 * sin;
	var cy = ay + cx1 * sin + cy1 * cos;
	var phiSin = Math.sin(-phi);
	var phiCos = Math.cos(-phi);
	sx -= cx;
	sy -= cy;
	var dx = sx;
	var dy = sy;
	sx = dx * phiCos - dy * phiSin;
	sy = dx * phiSin + dy * phiCos;
	sx += cx;
	sy += cy;
	ex -= cx;
	ey -= cy;
	var dx = ex;
	var dy = ey;
	ex = dx * phiCos - dy * phiSin;
	ey = dx * phiSin + dy * phiCos;
	ex += cx;
	ey += cy;
	var alpha = Math.atan2(rx * (cy - sy),ry * (cx - sx)) - Math.PI;
	var omega = Math.atan2(rx * (cy - ey),ry * (cx - ex)) - Math.PI;
	var delta = alpha - omega;
	if(sweep == 1 && delta > 0) {
		delta -= 2 * Math.PI;
	} else if(sweep == 0 && delta < 0) {
		delta += 2 * Math.PI;
	}
	var this1 = { cx : cx, cy : cy, rx : rx, ry : ry, alpha : alpha, omega : omega, delta : -delta, phi : phi, phiSin : Math.sin(phi), phiCos : Math.cos(phi)};
	return this1;
};
justPath_ConverterArc.zeroto2pi = function(angle) {
	if(angle >= 0 && angle > Math.PI) {
		return angle;
	} else {
		var a = angle % (2 * Math.PI);
		if(a >= 0) {
			return a;
		} else {
			return a + 2 * Math.PI;
		}
	}
};
var justPath_IPathContext = function() { };
$hxClasses["justPath.IPathContext"] = justPath_IPathContext;
justPath_IPathContext.__name__ = "justPath.IPathContext";
justPath_IPathContext.__isInterface__ = true;
justPath_IPathContext.prototype = {
	__class__: justPath_IPathContext
};
var justPath_StoreF6 = function() {
	this.count = 0;
	this.l = 0;
};
$hxClasses["justPath.StoreF6"] = justPath_StoreF6;
justPath_StoreF6.__name__ = "justPath.StoreF6";
justPath_StoreF6.prototype = {
	clear: function() {
		this.l = 0;
		this.s0 = null;
		this.s1 = null;
		this.s2 = null;
		this.s3 = null;
		this.s4 = null;
		this.s5 = null;
		this.s6 = null;
	}
	,length: function() {
		return this.l;
	}
	,push: function(v) {
		switch(this.l) {
		case 0:
			this.s0 = v;
			break;
		case 1:
			this.s1 = v;
			break;
		case 2:
			this.s2 = v;
			break;
		case 3:
			this.s3 = v;
			break;
		case 4:
			this.s4 = v;
			break;
		case 5:
			this.s5 = v;
			break;
		default:
			if(this.s6 == null) {
				this.s6 = new justPath_StoreF6();
			}
			this.s6.push(v);
		}
		this.l++;
	}
	,pop: function() {
		var out = null;
		switch(this.l) {
		case 0:
			out = this.s0;
			this.s0 = null;
			break;
		case 1:
			out = this.s1;
			this.s1 = null;
			break;
		case 2:
			out = this.s2;
			this.s2 = null;
			break;
		case 3:
			out = this.s3;
			this.s3 = null;
			break;
		case 4:
			out = this.s4;
			this.s4 = null;
			break;
		case 5:
			out = this.s5;
			this.s5 = null;
			break;
		default:
			if(this.s6 != null) {
				this.s6.pop();
			}
		}
		this.l--;
		return out;
	}
	,unshift: function(v) {
		if(this.s6 == null) {
			this.s6 = new justPath_StoreF6();
		}
		this.s6.unshift(this.s5);
		this.s5 = this.s4;
		this.s4 = this.s3;
		this.s3 = this.s2;
		this.s2 = this.s1;
		this.s0 = v;
		this.l++;
	}
	,shift: function() {
		var out = this.s0;
		if(this.l != 0) {
			this.s0 = this.s1;
			this.s1 = this.s2;
			this.s2 = this.s3;
			this.s3 = this.s4;
			this.s4 = this.s5;
			this.s5 = null;
			if(this.s6 != null) {
				this.s5 = this.s6.shift();
			}
			this.l--;
		}
		return out;
	}
	,toString: function() {
		if(this.s6 == null) {
			return "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5;
		} else {
			return "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5 + this.s6.toString();
		}
	}
	,populatedToString: function() {
		var out = "";
		switch(this.l - 1) {
		case 0:
			out = "" + this.s0;
			break;
		case 1:
			out = "" + this.s0 + ", " + this.s1;
			break;
		case 2:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2;
			break;
		case 3:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3;
			break;
		case 4:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4;
			break;
		case 5:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5;
			break;
		default:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5;
			if(this.s6 != null) {
				out += this.s6.populatedToString();
			}
		}
		return out;
	}
	,hasNext: function() {
		return this.count < this.l + 1;
	}
	,resetIterator: function() {
		this.count = 0;
		if(this.s6 != null) {
			this.s6.resetIterator();
		}
	}
	,next: function() {
		var out = null;
		switch(this.count) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		default:
			out = this.s6.next();
		}
		this.count++;
		return out;
	}
	,first: function() {
		return this.s0;
	}
	,last: function() {
		var out = null;
		switch(this.l) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		default:
			out = this.s6.last();
		}
		return out;
	}
	,penultimate: function() {
		var out = null;
		switch(this.l - 1) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		default:
			out = this.s6.penultimate();
		}
		return out;
	}
	,toArray: function() {
		var arr = [];
		this.count = 0;
		var _g = this;
		while(_g.count < _g.l + 1) {
			var out = null;
			switch(_g.count) {
			case 0:
				out = _g.s0;
				break;
			case 1:
				out = _g.s1;
				break;
			case 2:
				out = _g.s2;
				break;
			case 3:
				out = _g.s3;
				break;
			case 4:
				out = _g.s4;
				break;
			case 5:
				out = _g.s5;
				break;
			default:
				var _this = _g.s6;
				var out1 = null;
				switch(_this.count) {
				case 0:
					out1 = _this.s0;
					break;
				case 1:
					out1 = _this.s1;
					break;
				case 2:
					out1 = _this.s2;
					break;
				case 3:
					out1 = _this.s3;
					break;
				case 4:
					out1 = _this.s4;
					break;
				case 5:
					out1 = _this.s5;
					break;
				default:
					out1 = _this.s6.next();
				}
				_this.count++;
				out = out1;
			}
			_g.count++;
			var i = out;
			arr.push(i);
		}
	}
	,__class__: justPath_StoreF6
};
var justPath_StoreF8 = function() {
	this.count = 0;
	this.l = 0;
};
$hxClasses["justPath.StoreF8"] = justPath_StoreF8;
justPath_StoreF8.__name__ = "justPath.StoreF8";
justPath_StoreF8.prototype = {
	clear: function() {
		this.l = 0;
		this.s0 = null;
		this.s1 = null;
		this.s2 = null;
		this.s3 = null;
		this.s4 = null;
		this.s5 = null;
		this.s6 = null;
		this.s7 = null;
	}
	,length: function() {
		return this.l;
	}
	,push: function(v) {
		switch(this.l) {
		case 0:
			this.s0 = v;
			break;
		case 1:
			this.s1 = v;
			break;
		case 2:
			this.s2 = v;
			break;
		case 3:
			this.s3 = v;
			break;
		case 4:
			this.s4 = v;
			break;
		case 5:
			this.s5 = v;
			break;
		case 6:
			this.s6 = v;
			break;
		case 7:
			this.s7 = v;
			break;
		default:
		}
		this.l++;
	}
	,pop: function() {
		var out = null;
		switch(this.l) {
		case 0:
			out = this.s0;
			this.s0 = null;
			break;
		case 1:
			out = this.s1;
			this.s1 = null;
			break;
		case 2:
			out = this.s2;
			this.s2 = null;
			break;
		case 3:
			out = this.s3;
			this.s3 = null;
			break;
		case 4:
			out = this.s4;
			this.s4 = null;
			break;
		case 5:
			out = this.s5;
			this.s5 = null;
			break;
		case 6:
			out = this.s6;
			this.s6 = null;
			break;
		case 7:
			out = this.s7;
			this.s6 = null;
			break;
		default:
		}
		this.l--;
		return out;
	}
	,unshift: function(v) {
		this.s7 = this.s6;
		this.s6 = this.s5;
		this.s5 = this.s4;
		this.s4 = this.s3;
		this.s3 = this.s2;
		this.s2 = this.s1;
		this.s0 = v;
		this.l++;
	}
	,shift: function() {
		var out = this.s0;
		if(this.l != 0) {
			this.s0 = this.s1;
			this.s1 = this.s2;
			this.s2 = this.s3;
			this.s3 = this.s4;
			this.s4 = this.s5;
			this.s5 = this.s6;
			this.s6 = this.s7;
			this.s7 = null;
			this.l--;
		}
		return out;
	}
	,toString: function() {
		return "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5 + ", " + this.s6 + ", " + this.s7;
	}
	,populatedToString: function() {
		var out = "";
		switch(this.l - 1) {
		case 0:
			out = "" + this.s0;
			break;
		case 1:
			out = "" + this.s0 + ", " + this.s1;
			break;
		case 2:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2;
			break;
		case 3:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3;
			break;
		case 4:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4;
			break;
		case 5:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5;
			break;
		case 6:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5 + ", " + this.s6;
			break;
		case 7:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5 + ", " + this.s6 + ", " + this.s7;
			break;
		default:
		}
		return out;
	}
	,hasNext: function() {
		return this.count < this.l + 1;
	}
	,resetIterator: function() {
		this.count = 0;
	}
	,next: function() {
		var out = null;
		switch(this.count) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		case 6:
			out = this.s6;
			break;
		case 7:
			out = this.s7;
			break;
		default:
		}
		this.count++;
		return out;
	}
	,first: function() {
		return this.s0;
	}
	,last: function() {
		var out = null;
		switch(this.l) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		case 6:
			out = this.s6;
			break;
		case 7:
			out = this.s7;
			break;
		default:
		}
		return out;
	}
	,penultimate: function() {
		var out = null;
		switch(this.l - 1) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		case 6:
			out = this.s6;
			break;
		case 7:
			out = this.s7;
			break;
		default:
		}
		return out;
	}
	,toArray: function() {
		var arr = [];
		this.count = 0;
		var _g = this;
		while(_g.count < _g.l + 1) {
			var out = null;
			switch(_g.count) {
			case 0:
				out = _g.s0;
				break;
			case 1:
				out = _g.s1;
				break;
			case 2:
				out = _g.s2;
				break;
			case 3:
				out = _g.s3;
				break;
			case 4:
				out = _g.s4;
				break;
			case 5:
				out = _g.s5;
				break;
			case 6:
				out = _g.s6;
				break;
			case 7:
				out = _g.s7;
				break;
			default:
			}
			_g.count++;
			var i = out;
			arr.push(i);
		}
	}
	,__class__: justPath_StoreF8
};
var justPath_SvgPath = function(pathContext_) {
	this.l = 0;
	this.c = 0;
	this.controlY = 0.;
	this.controlX = 0.;
	this.lastY = 0.;
	this.lastX = 0.;
	this.pos = 0;
	this.str = "";
	this.pathContext = pathContext_;
};
$hxClasses["justPath.SvgPath"] = justPath_SvgPath;
justPath_SvgPath.__name__ = "justPath.SvgPath";
justPath_SvgPath.prototype = {
	quickTriangle: function(x0,y0,off) {
		this.pathContext.moveTo(x0,y0 - off);
		this.pathContext.lineTo(x0 + off,y0 + off);
		this.pathContext.lineTo(x0 - off,y0 + off);
		this.pathContext.lineTo(x0,y0 - off);
	}
	,parse: function(str_) {
		this.str = str_;
		this.pos = 0;
		this.l = this.str.length;
		this.c = this.str.charCodeAt(this.pos++);
		var count = 0;
		this.store = new justPath_StoreF6();
		while(this.pos < this.l) {
			switch(this.c) {
			case 65:
				var _this = this.store;
				_this.l = 0;
				_this.s0 = null;
				_this.s1 = null;
				_this.s2 = null;
				_this.s3 = null;
				_this.s4 = null;
				_this.s5 = null;
				_this.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp = "";
				var exit = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp != "") {
							if((this.store.l & 1) == 0) {
								var _this1 = this.store;
								var v = parseFloat(temp);
								switch(_this1.l) {
								case 0:
									_this1.s0 = v;
									break;
								case 1:
									_this1.s1 = v;
									break;
								case 2:
									_this1.s2 = v;
									break;
								case 3:
									_this1.s3 = v;
									break;
								case 4:
									_this1.s4 = v;
									break;
								case 5:
									_this1.s5 = v;
									break;
								default:
									if(_this1.s6 == null) {
										_this1.s6 = new justPath_StoreF6();
									}
									var _this2 = _this1.s6;
									switch(_this2.l) {
									case 0:
										_this2.s0 = v;
										break;
									case 1:
										_this2.s1 = v;
										break;
									case 2:
										_this2.s2 = v;
										break;
									case 3:
										_this2.s3 = v;
										break;
									case 4:
										_this2.s4 = v;
										break;
									case 5:
										_this2.s5 = v;
										break;
									default:
										if(_this2.s6 == null) {
											_this2.s6 = new justPath_StoreF6();
										}
										_this2.s6.push(v);
									}
									_this2.l++;
								}
								_this1.l++;
							} else {
								var _this3 = this.store;
								var v1 = parseFloat(temp);
								switch(_this3.l) {
								case 0:
									_this3.s0 = v1;
									break;
								case 1:
									_this3.s1 = v1;
									break;
								case 2:
									_this3.s2 = v1;
									break;
								case 3:
									_this3.s3 = v1;
									break;
								case 4:
									_this3.s4 = v1;
									break;
								case 5:
									_this3.s5 = v1;
									break;
								default:
									if(_this3.s6 == null) {
										_this3.s6 = new justPath_StoreF6();
									}
									var _this4 = _this3.s6;
									switch(_this4.l) {
									case 0:
										_this4.s0 = v1;
										break;
									case 1:
										_this4.s1 = v1;
										break;
									case 2:
										_this4.s2 = v1;
										break;
									case 3:
										_this4.s3 = v1;
										break;
									case 4:
										_this4.s4 = v1;
										break;
									case 5:
										_this4.s5 = v1;
										break;
									default:
										if(_this4.s6 == null) {
											_this4.s6 = new justPath_StoreF6();
										}
										_this4.s6.push(v1);
									}
									_this4.l++;
								}
								_this3.l++;
							}
							temp = "";
						}
						break;
					case 45:
						if(temp != "") {
							if((this.store.l & 1) == 0) {
								var _this5 = this.store;
								var v2 = parseFloat(temp);
								switch(_this5.l) {
								case 0:
									_this5.s0 = v2;
									break;
								case 1:
									_this5.s1 = v2;
									break;
								case 2:
									_this5.s2 = v2;
									break;
								case 3:
									_this5.s3 = v2;
									break;
								case 4:
									_this5.s4 = v2;
									break;
								case 5:
									_this5.s5 = v2;
									break;
								default:
									if(_this5.s6 == null) {
										_this5.s6 = new justPath_StoreF6();
									}
									var _this6 = _this5.s6;
									switch(_this6.l) {
									case 0:
										_this6.s0 = v2;
										break;
									case 1:
										_this6.s1 = v2;
										break;
									case 2:
										_this6.s2 = v2;
										break;
									case 3:
										_this6.s3 = v2;
										break;
									case 4:
										_this6.s4 = v2;
										break;
									case 5:
										_this6.s5 = v2;
										break;
									default:
										if(_this6.s6 == null) {
											_this6.s6 = new justPath_StoreF6();
										}
										_this6.s6.push(v2);
									}
									_this6.l++;
								}
								_this5.l++;
							} else {
								var _this7 = this.store;
								var v3 = parseFloat(temp);
								switch(_this7.l) {
								case 0:
									_this7.s0 = v3;
									break;
								case 1:
									_this7.s1 = v3;
									break;
								case 2:
									_this7.s2 = v3;
									break;
								case 3:
									_this7.s3 = v3;
									break;
								case 4:
									_this7.s4 = v3;
									break;
								case 5:
									_this7.s5 = v3;
									break;
								default:
									if(_this7.s6 == null) {
										_this7.s6 = new justPath_StoreF6();
									}
									var _this8 = _this7.s6;
									switch(_this8.l) {
									case 0:
										_this8.s0 = v3;
										break;
									case 1:
										_this8.s1 = v3;
										break;
									case 2:
										_this8.s2 = v3;
										break;
									case 3:
										_this8.s3 = v3;
										break;
									case 4:
										_this8.s4 = v3;
										break;
									case 5:
										_this8.s5 = v3;
										break;
									default:
										if(_this8.s6 == null) {
											_this8.s6 = new justPath_StoreF6();
										}
										_this8.s6.push(v3);
									}
									_this8.l++;
								}
								_this7.l++;
							}
						}
						temp = "-";
						break;
					case 46:
						temp += ".";
						break;
					case 48:
						temp += "0";
						break;
					case 49:
						temp += "1";
						break;
					case 50:
						temp += "2";
						break;
					case 51:
						temp += "3";
						break;
					case 52:
						temp += "4";
						break;
					case 53:
						temp += "5";
						break;
					case 54:
						temp += "6";
						break;
					case 55:
						temp += "7";
						break;
					case 56:
						temp += "8";
						break;
					case 57:
						temp += "9";
						break;
					default:
						if(temp != "") {
							if((this.store.l & 1) == 0) {
								var _this9 = this.store;
								var v4 = parseFloat(temp);
								switch(_this9.l) {
								case 0:
									_this9.s0 = v4;
									break;
								case 1:
									_this9.s1 = v4;
									break;
								case 2:
									_this9.s2 = v4;
									break;
								case 3:
									_this9.s3 = v4;
									break;
								case 4:
									_this9.s4 = v4;
									break;
								case 5:
									_this9.s5 = v4;
									break;
								default:
									if(_this9.s6 == null) {
										_this9.s6 = new justPath_StoreF6();
									}
									var _this10 = _this9.s6;
									switch(_this10.l) {
									case 0:
										_this10.s0 = v4;
										break;
									case 1:
										_this10.s1 = v4;
										break;
									case 2:
										_this10.s2 = v4;
										break;
									case 3:
										_this10.s3 = v4;
										break;
									case 4:
										_this10.s4 = v4;
										break;
									case 5:
										_this10.s5 = v4;
										break;
									default:
										if(_this10.s6 == null) {
											_this10.s6 = new justPath_StoreF6();
										}
										_this10.s6.push(v4);
									}
									_this10.l++;
								}
								_this9.l++;
							} else {
								var _this11 = this.store;
								var v5 = parseFloat(temp);
								switch(_this11.l) {
								case 0:
									_this11.s0 = v5;
									break;
								case 1:
									_this11.s1 = v5;
									break;
								case 2:
									_this11.s2 = v5;
									break;
								case 3:
									_this11.s3 = v5;
									break;
								case 4:
									_this11.s4 = v5;
									break;
								case 5:
									_this11.s5 = v5;
									break;
								default:
									if(_this11.s6 == null) {
										_this11.s6 = new justPath_StoreF6();
									}
									var _this12 = _this11.s6;
									switch(_this12.l) {
									case 0:
										_this12.s0 = v5;
										break;
									case 1:
										_this12.s1 = v5;
										break;
									case 2:
										_this12.s2 = v5;
										break;
									case 3:
										_this12.s3 = v5;
										break;
									case 4:
										_this12.s4 = v5;
										break;
									case 5:
										_this12.s5 = v5;
										break;
									default:
										if(_this12.s6 == null) {
											_this12.s6 = new justPath_StoreF6();
										}
										_this12.s6.push(v5);
									}
									_this12.l++;
								}
								_this11.l++;
							}
							temp = "";
						}
						this.pos--;
						exit = true;
					}
					if(exit) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 7) {
					var sx = this.lastX;
					var sy = this.lastY;
					var _this13 = this.store;
					var out = _this13.s0;
					if(_this13.l != 0) {
						_this13.s0 = _this13.s1;
						_this13.s1 = _this13.s2;
						_this13.s2 = _this13.s3;
						_this13.s3 = _this13.s4;
						_this13.s4 = _this13.s5;
						_this13.s5 = null;
						if(_this13.s6 != null) {
							var _this14 = _this13.s6;
							var out1 = _this14.s0;
							if(_this14.l != 0) {
								_this14.s0 = _this14.s1;
								_this14.s1 = _this14.s2;
								_this14.s2 = _this14.s3;
								_this14.s3 = _this14.s4;
								_this14.s4 = _this14.s5;
								_this14.s5 = null;
								if(_this14.s6 != null) {
									_this14.s5 = _this14.s6.shift();
								}
								_this14.l--;
							}
							_this13.s5 = out1;
						}
						_this13.l--;
					}
					var xr = out;
					var _this15 = this.store;
					var out2 = _this15.s0;
					if(_this15.l != 0) {
						_this15.s0 = _this15.s1;
						_this15.s1 = _this15.s2;
						_this15.s2 = _this15.s3;
						_this15.s3 = _this15.s4;
						_this15.s4 = _this15.s5;
						_this15.s5 = null;
						if(_this15.s6 != null) {
							var _this16 = _this15.s6;
							var out3 = _this16.s0;
							if(_this16.l != 0) {
								_this16.s0 = _this16.s1;
								_this16.s1 = _this16.s2;
								_this16.s2 = _this16.s3;
								_this16.s3 = _this16.s4;
								_this16.s4 = _this16.s5;
								_this16.s5 = null;
								if(_this16.s6 != null) {
									_this16.s5 = _this16.s6.shift();
								}
								_this16.l--;
							}
							_this15.s5 = out3;
						}
						_this15.l--;
					}
					var yr = out2;
					var _this17 = this.store;
					var out4 = _this17.s0;
					if(_this17.l != 0) {
						_this17.s0 = _this17.s1;
						_this17.s1 = _this17.s2;
						_this17.s2 = _this17.s3;
						_this17.s3 = _this17.s4;
						_this17.s4 = _this17.s5;
						_this17.s5 = null;
						if(_this17.s6 != null) {
							var _this18 = _this17.s6;
							var out5 = _this18.s0;
							if(_this18.l != 0) {
								_this18.s0 = _this18.s1;
								_this18.s1 = _this18.s2;
								_this18.s2 = _this18.s3;
								_this18.s3 = _this18.s4;
								_this18.s4 = _this18.s5;
								_this18.s5 = null;
								if(_this18.s6 != null) {
									_this18.s5 = _this18.s6.shift();
								}
								_this18.l--;
							}
							_this17.s5 = out5;
						}
						_this17.l--;
					}
					var phi = out4;
					var _this19 = this.store;
					var out6 = _this19.s0;
					if(_this19.l != 0) {
						_this19.s0 = _this19.s1;
						_this19.s1 = _this19.s2;
						_this19.s2 = _this19.s3;
						_this19.s3 = _this19.s4;
						_this19.s4 = _this19.s5;
						_this19.s5 = null;
						if(_this19.s6 != null) {
							var _this20 = _this19.s6;
							var out7 = _this20.s0;
							if(_this20.l != 0) {
								_this20.s0 = _this20.s1;
								_this20.s1 = _this20.s2;
								_this20.s2 = _this20.s3;
								_this20.s3 = _this20.s4;
								_this20.s4 = _this20.s5;
								_this20.s5 = null;
								if(_this20.s6 != null) {
									var _this21 = _this20.s6;
									var out8 = _this21.s0;
									if(_this21.l != 0) {
										_this21.s0 = _this21.s1;
										_this21.s1 = _this21.s2;
										_this21.s2 = _this21.s3;
										_this21.s3 = _this21.s4;
										_this21.s4 = _this21.s5;
										_this21.s5 = null;
										if(_this21.s6 != null) {
											_this21.s5 = _this21.s6.shift();
										}
										_this21.l--;
									}
									_this20.s5 = out8;
								}
								_this20.l--;
							}
							_this19.s5 = out7;
						}
						_this19.l--;
					}
					var large = out6 | 0;
					var _this22 = this.store;
					var out9 = _this22.s0;
					if(_this22.l != 0) {
						_this22.s0 = _this22.s1;
						_this22.s1 = _this22.s2;
						_this22.s2 = _this22.s3;
						_this22.s3 = _this22.s4;
						_this22.s4 = _this22.s5;
						_this22.s5 = null;
						if(_this22.s6 != null) {
							var _this23 = _this22.s6;
							var out10 = _this23.s0;
							if(_this23.l != 0) {
								_this23.s0 = _this23.s1;
								_this23.s1 = _this23.s2;
								_this23.s2 = _this23.s3;
								_this23.s3 = _this23.s4;
								_this23.s4 = _this23.s5;
								_this23.s5 = null;
								if(_this23.s6 != null) {
									var _this24 = _this23.s6;
									var out11 = _this24.s0;
									if(_this24.l != 0) {
										_this24.s0 = _this24.s1;
										_this24.s1 = _this24.s2;
										_this24.s2 = _this24.s3;
										_this24.s3 = _this24.s4;
										_this24.s4 = _this24.s5;
										_this24.s5 = null;
										if(_this24.s6 != null) {
											_this24.s5 = _this24.s6.shift();
										}
										_this24.l--;
									}
									_this23.s5 = out11;
								}
								_this23.l--;
							}
							_this22.s5 = out10;
						}
						_this22.l--;
					}
					var sweep = out9 | 0;
					var _this25 = this.store;
					var out12 = _this25.s0;
					if(_this25.l != 0) {
						_this25.s0 = _this25.s1;
						_this25.s1 = _this25.s2;
						_this25.s2 = _this25.s3;
						_this25.s3 = _this25.s4;
						_this25.s4 = _this25.s5;
						_this25.s5 = null;
						if(_this25.s6 != null) {
							var _this26 = _this25.s6;
							var out13 = _this26.s0;
							if(_this26.l != 0) {
								_this26.s0 = _this26.s1;
								_this26.s1 = _this26.s2;
								_this26.s2 = _this26.s3;
								_this26.s3 = _this26.s4;
								_this26.s4 = _this26.s5;
								_this26.s5 = null;
								if(_this26.s6 != null) {
									_this26.s5 = _this26.s6.shift();
								}
								_this26.l--;
							}
							_this25.s5 = out13;
						}
						_this25.l--;
					}
					this.lastX = out12;
					var _this27 = this.store;
					var out14 = _this27.s0;
					if(_this27.l != 0) {
						_this27.s0 = _this27.s1;
						_this27.s1 = _this27.s2;
						_this27.s2 = _this27.s3;
						_this27.s3 = _this27.s4;
						_this27.s4 = _this27.s5;
						_this27.s5 = null;
						if(_this27.s6 != null) {
							var _this28 = _this27.s6;
							var out15 = _this28.s0;
							if(_this28.l != 0) {
								_this28.s0 = _this28.s1;
								_this28.s1 = _this28.s2;
								_this28.s2 = _this28.s3;
								_this28.s3 = _this28.s4;
								_this28.s4 = _this28.s5;
								_this28.s5 = null;
								if(_this28.s6 != null) {
									_this28.s5 = _this28.s6.shift();
								}
								_this28.l--;
							}
							_this27.s5 = out15;
						}
						_this27.l--;
					}
					this.lastY = out14;
					var sx1 = sx;
					var sy1 = sy;
					var phi1 = phi;
					var ex = this.lastX;
					var ey = this.lastY;
					var mx = (sx1 - ex) / 2;
					var my = (sy1 - ey) / 2;
					var ax = (sx1 + ex) / 2;
					var ay = (sy1 + ey) / 2;
					phi1 %= 360;
					phi1 = phi1 * Math.PI / 180;
					var sin = Math.sin(phi1);
					var cos = Math.cos(phi1);
					var x1 = mx * cos + my * sin;
					var y1 = -mx * sin + my * cos;
					var rx = Math.abs(xr);
					var ry = Math.abs(yr);
					var rxx = rx * rx;
					var ryy = ry * ry;
					var xx1 = x1 * x1;
					var yy1 = y1 * y1;
					var check = xx1 / rxx + yy1 / ryy;
					if(check > 1) {
						rx *= Math.sqrt(check);
						ry *= Math.sqrt(check);
						rxx = rx * rx;
						ryy = ry * ry;
					}
					var sign = large == sweep ? -1 : 1;
					var sq = (rxx * ryy - rxx * yy1 - ryy * xx1) / (rxx * yy1 + ryy * xx1);
					if(sq < 0) {
						sq = 0;
					}
					var coef = sign * Math.sqrt(sq);
					var cx1 = coef * rx * y1 / ry;
					var cy1 = -coef * ry * x1 / rx;
					var cx = ax + cx1 * cos - cy1 * sin;
					var cy = ay + cx1 * sin + cy1 * cos;
					var phiSin = Math.sin(-phi1);
					var phiCos = Math.cos(-phi1);
					sx1 -= cx;
					sy1 -= cy;
					var dx = sx1;
					var dy = sy1;
					sx1 = dx * phiCos - dy * phiSin;
					sy1 = dx * phiSin + dy * phiCos;
					sx1 += cx;
					sy1 += cy;
					ex -= cx;
					ey -= cy;
					var dx1 = ex;
					var dy1 = ey;
					ex = dx1 * phiCos - dy1 * phiSin;
					ey = dx1 * phiSin + dy1 * phiCos;
					ex += cx;
					ey += cy;
					var alpha = Math.atan2(rx * (cy - sy1),ry * (cx - sx1)) - Math.PI;
					var omega = Math.atan2(rx * (cy - ey),ry * (cx - ex)) - Math.PI;
					var delta = alpha - omega;
					if(sweep == 1 && delta > 0) {
						delta -= 2 * Math.PI;
					} else if(sweep == 0 && delta < 0) {
						delta += 2 * Math.PI;
					}
					var this1 = { cx : cx, cy : cy, rx : rx, ry : ry, alpha : alpha, omega : omega, delta : -delta, phi : phi1, phiSin : Math.sin(phi1), phiCos : Math.cos(phi1)};
					var ellipseData = this1;
					var ellipse = new justPath_EllipseArc(ellipseData);
					ellipse.lineRender(($_=this.pathContext,$bind($_,$_.moveTo)),($_=this.pathContext,$bind($_,$_.lineTo)),Math.PI / 18);
				} else if(this.store.l > 7) {
					while(this.store.l > 6) {
						var sx2 = this.lastX;
						var sy2 = this.lastY;
						var _this29 = this.store;
						var out16 = _this29.s0;
						if(_this29.l != 0) {
							_this29.s0 = _this29.s1;
							_this29.s1 = _this29.s2;
							_this29.s2 = _this29.s3;
							_this29.s3 = _this29.s4;
							_this29.s4 = _this29.s5;
							_this29.s5 = null;
							if(_this29.s6 != null) {
								var _this30 = _this29.s6;
								var out17 = _this30.s0;
								if(_this30.l != 0) {
									_this30.s0 = _this30.s1;
									_this30.s1 = _this30.s2;
									_this30.s2 = _this30.s3;
									_this30.s3 = _this30.s4;
									_this30.s4 = _this30.s5;
									_this30.s5 = null;
									if(_this30.s6 != null) {
										_this30.s5 = _this30.s6.shift();
									}
									_this30.l--;
								}
								_this29.s5 = out17;
							}
							_this29.l--;
						}
						var xr1 = out16;
						var _this31 = this.store;
						var out18 = _this31.s0;
						if(_this31.l != 0) {
							_this31.s0 = _this31.s1;
							_this31.s1 = _this31.s2;
							_this31.s2 = _this31.s3;
							_this31.s3 = _this31.s4;
							_this31.s4 = _this31.s5;
							_this31.s5 = null;
							if(_this31.s6 != null) {
								var _this32 = _this31.s6;
								var out19 = _this32.s0;
								if(_this32.l != 0) {
									_this32.s0 = _this32.s1;
									_this32.s1 = _this32.s2;
									_this32.s2 = _this32.s3;
									_this32.s3 = _this32.s4;
									_this32.s4 = _this32.s5;
									_this32.s5 = null;
									if(_this32.s6 != null) {
										_this32.s5 = _this32.s6.shift();
									}
									_this32.l--;
								}
								_this31.s5 = out19;
							}
							_this31.l--;
						}
						var yr1 = out18;
						var _this33 = this.store;
						var out20 = _this33.s0;
						if(_this33.l != 0) {
							_this33.s0 = _this33.s1;
							_this33.s1 = _this33.s2;
							_this33.s2 = _this33.s3;
							_this33.s3 = _this33.s4;
							_this33.s4 = _this33.s5;
							_this33.s5 = null;
							if(_this33.s6 != null) {
								var _this34 = _this33.s6;
								var out21 = _this34.s0;
								if(_this34.l != 0) {
									_this34.s0 = _this34.s1;
									_this34.s1 = _this34.s2;
									_this34.s2 = _this34.s3;
									_this34.s3 = _this34.s4;
									_this34.s4 = _this34.s5;
									_this34.s5 = null;
									if(_this34.s6 != null) {
										_this34.s5 = _this34.s6.shift();
									}
									_this34.l--;
								}
								_this33.s5 = out21;
							}
							_this33.l--;
						}
						var phi2 = out20;
						var _this35 = this.store;
						var out22 = _this35.s0;
						if(_this35.l != 0) {
							_this35.s0 = _this35.s1;
							_this35.s1 = _this35.s2;
							_this35.s2 = _this35.s3;
							_this35.s3 = _this35.s4;
							_this35.s4 = _this35.s5;
							_this35.s5 = null;
							if(_this35.s6 != null) {
								var _this36 = _this35.s6;
								var out23 = _this36.s0;
								if(_this36.l != 0) {
									_this36.s0 = _this36.s1;
									_this36.s1 = _this36.s2;
									_this36.s2 = _this36.s3;
									_this36.s3 = _this36.s4;
									_this36.s4 = _this36.s5;
									_this36.s5 = null;
									if(_this36.s6 != null) {
										var _this37 = _this36.s6;
										var out24 = _this37.s0;
										if(_this37.l != 0) {
											_this37.s0 = _this37.s1;
											_this37.s1 = _this37.s2;
											_this37.s2 = _this37.s3;
											_this37.s3 = _this37.s4;
											_this37.s4 = _this37.s5;
											_this37.s5 = null;
											if(_this37.s6 != null) {
												_this37.s5 = _this37.s6.shift();
											}
											_this37.l--;
										}
										_this36.s5 = out24;
									}
									_this36.l--;
								}
								_this35.s5 = out23;
							}
							_this35.l--;
						}
						var large1 = out22 | 0;
						var _this38 = this.store;
						var out25 = _this38.s0;
						if(_this38.l != 0) {
							_this38.s0 = _this38.s1;
							_this38.s1 = _this38.s2;
							_this38.s2 = _this38.s3;
							_this38.s3 = _this38.s4;
							_this38.s4 = _this38.s5;
							_this38.s5 = null;
							if(_this38.s6 != null) {
								var _this39 = _this38.s6;
								var out26 = _this39.s0;
								if(_this39.l != 0) {
									_this39.s0 = _this39.s1;
									_this39.s1 = _this39.s2;
									_this39.s2 = _this39.s3;
									_this39.s3 = _this39.s4;
									_this39.s4 = _this39.s5;
									_this39.s5 = null;
									if(_this39.s6 != null) {
										var _this40 = _this39.s6;
										var out27 = _this40.s0;
										if(_this40.l != 0) {
											_this40.s0 = _this40.s1;
											_this40.s1 = _this40.s2;
											_this40.s2 = _this40.s3;
											_this40.s3 = _this40.s4;
											_this40.s4 = _this40.s5;
											_this40.s5 = null;
											if(_this40.s6 != null) {
												_this40.s5 = _this40.s6.shift();
											}
											_this40.l--;
										}
										_this39.s5 = out27;
									}
									_this39.l--;
								}
								_this38.s5 = out26;
							}
							_this38.l--;
						}
						var sweep1 = out25 | 0;
						var _this41 = this.store;
						var out28 = _this41.s0;
						if(_this41.l != 0) {
							_this41.s0 = _this41.s1;
							_this41.s1 = _this41.s2;
							_this41.s2 = _this41.s3;
							_this41.s3 = _this41.s4;
							_this41.s4 = _this41.s5;
							_this41.s5 = null;
							if(_this41.s6 != null) {
								var _this42 = _this41.s6;
								var out29 = _this42.s0;
								if(_this42.l != 0) {
									_this42.s0 = _this42.s1;
									_this42.s1 = _this42.s2;
									_this42.s2 = _this42.s3;
									_this42.s3 = _this42.s4;
									_this42.s4 = _this42.s5;
									_this42.s5 = null;
									if(_this42.s6 != null) {
										_this42.s5 = _this42.s6.shift();
									}
									_this42.l--;
								}
								_this41.s5 = out29;
							}
							_this41.l--;
						}
						this.lastX = out28;
						var _this43 = this.store;
						var out30 = _this43.s0;
						if(_this43.l != 0) {
							_this43.s0 = _this43.s1;
							_this43.s1 = _this43.s2;
							_this43.s2 = _this43.s3;
							_this43.s3 = _this43.s4;
							_this43.s4 = _this43.s5;
							_this43.s5 = null;
							if(_this43.s6 != null) {
								var _this44 = _this43.s6;
								var out31 = _this44.s0;
								if(_this44.l != 0) {
									_this44.s0 = _this44.s1;
									_this44.s1 = _this44.s2;
									_this44.s2 = _this44.s3;
									_this44.s3 = _this44.s4;
									_this44.s4 = _this44.s5;
									_this44.s5 = null;
									if(_this44.s6 != null) {
										_this44.s5 = _this44.s6.shift();
									}
									_this44.l--;
								}
								_this43.s5 = out31;
							}
							_this43.l--;
						}
						this.lastY = out30;
						var sx3 = sx2;
						var sy3 = sy2;
						var phi3 = phi2;
						var ex1 = this.lastX;
						var ey1 = this.lastY;
						var mx1 = (sx3 - ex1) / 2;
						var my1 = (sy3 - ey1) / 2;
						var ax1 = (sx3 + ex1) / 2;
						var ay1 = (sy3 + ey1) / 2;
						phi3 %= 360;
						phi3 = phi3 * Math.PI / 180;
						var sin1 = Math.sin(phi3);
						var cos1 = Math.cos(phi3);
						var x11 = mx1 * cos1 + my1 * sin1;
						var y11 = -mx1 * sin1 + my1 * cos1;
						var rx1 = Math.abs(xr1);
						var ry1 = Math.abs(yr1);
						var rxx1 = rx1 * rx1;
						var ryy1 = ry1 * ry1;
						var xx11 = x11 * x11;
						var yy11 = y11 * y11;
						var check1 = xx11 / rxx1 + yy11 / ryy1;
						if(check1 > 1) {
							rx1 *= Math.sqrt(check1);
							ry1 *= Math.sqrt(check1);
							rxx1 = rx1 * rx1;
							ryy1 = ry1 * ry1;
						}
						var sign1 = large1 == sweep1 ? -1 : 1;
						var sq1 = (rxx1 * ryy1 - rxx1 * yy11 - ryy1 * xx11) / (rxx1 * yy11 + ryy1 * xx11);
						if(sq1 < 0) {
							sq1 = 0;
						}
						var coef1 = sign1 * Math.sqrt(sq1);
						var cx11 = coef1 * rx1 * y11 / ry1;
						var cy11 = -coef1 * ry1 * x11 / rx1;
						var cx2 = ax1 + cx11 * cos1 - cy11 * sin1;
						var cy2 = ay1 + cx11 * sin1 + cy11 * cos1;
						var phiSin1 = Math.sin(-phi3);
						var phiCos1 = Math.cos(-phi3);
						sx3 -= cx2;
						sy3 -= cy2;
						var dx2 = sx3;
						var dy2 = sy3;
						sx3 = dx2 * phiCos1 - dy2 * phiSin1;
						sy3 = dx2 * phiSin1 + dy2 * phiCos1;
						sx3 += cx2;
						sy3 += cy2;
						ex1 -= cx2;
						ey1 -= cy2;
						var dx3 = ex1;
						var dy3 = ey1;
						ex1 = dx3 * phiCos1 - dy3 * phiSin1;
						ey1 = dx3 * phiSin1 + dy3 * phiCos1;
						ex1 += cx2;
						ey1 += cy2;
						var alpha1 = Math.atan2(rx1 * (cy2 - sy3),ry1 * (cx2 - sx3)) - Math.PI;
						var omega1 = Math.atan2(rx1 * (cy2 - ey1),ry1 * (cx2 - ex1)) - Math.PI;
						var delta1 = alpha1 - omega1;
						if(sweep1 == 1 && delta1 > 0) {
							delta1 -= 2 * Math.PI;
						} else if(sweep1 == 0 && delta1 < 0) {
							delta1 += 2 * Math.PI;
						}
						var this2 = { cx : cx2, cy : cy2, rx : rx1, ry : ry1, alpha : alpha1, omega : omega1, delta : -delta1, phi : phi3, phiSin : Math.sin(phi3), phiCos : Math.cos(phi3)};
						var ellipseData1 = this2;
						var ellipse1 = new justPath_EllipseArc(ellipseData1);
						ellipse1.lineRender(($_=this.pathContext,$bind($_,$_.moveTo)),($_=this.pathContext,$bind($_,$_.lineTo)),Math.PI / 18);
					}
				}
				break;
			case 66:
				haxe_Log.trace("bearing - not implemented",{ fileName : "justPath/SvgPath.hx", lineNumber : 377, className : "justPath.SvgPath", methodName : "parse"});
				throw haxe_Exception.thrown("bearing not supported please remove");
			case 67:
				var _this45 = this.store;
				_this45.l = 0;
				_this45.s0 = null;
				_this45.s1 = null;
				_this45.s2 = null;
				_this45.s3 = null;
				_this45.s4 = null;
				_this45.s5 = null;
				_this45.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp1 = "";
				var exit1 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp1 != "") {
							if((this.store.l & 1) == 0) {
								var _this46 = this.store;
								var v6 = parseFloat(temp1);
								switch(_this46.l) {
								case 0:
									_this46.s0 = v6;
									break;
								case 1:
									_this46.s1 = v6;
									break;
								case 2:
									_this46.s2 = v6;
									break;
								case 3:
									_this46.s3 = v6;
									break;
								case 4:
									_this46.s4 = v6;
									break;
								case 5:
									_this46.s5 = v6;
									break;
								default:
									if(_this46.s6 == null) {
										_this46.s6 = new justPath_StoreF6();
									}
									var _this47 = _this46.s6;
									switch(_this47.l) {
									case 0:
										_this47.s0 = v6;
										break;
									case 1:
										_this47.s1 = v6;
										break;
									case 2:
										_this47.s2 = v6;
										break;
									case 3:
										_this47.s3 = v6;
										break;
									case 4:
										_this47.s4 = v6;
										break;
									case 5:
										_this47.s5 = v6;
										break;
									default:
										if(_this47.s6 == null) {
											_this47.s6 = new justPath_StoreF6();
										}
										_this47.s6.push(v6);
									}
									_this47.l++;
								}
								_this46.l++;
							} else {
								var _this48 = this.store;
								var v7 = parseFloat(temp1);
								switch(_this48.l) {
								case 0:
									_this48.s0 = v7;
									break;
								case 1:
									_this48.s1 = v7;
									break;
								case 2:
									_this48.s2 = v7;
									break;
								case 3:
									_this48.s3 = v7;
									break;
								case 4:
									_this48.s4 = v7;
									break;
								case 5:
									_this48.s5 = v7;
									break;
								default:
									if(_this48.s6 == null) {
										_this48.s6 = new justPath_StoreF6();
									}
									var _this49 = _this48.s6;
									switch(_this49.l) {
									case 0:
										_this49.s0 = v7;
										break;
									case 1:
										_this49.s1 = v7;
										break;
									case 2:
										_this49.s2 = v7;
										break;
									case 3:
										_this49.s3 = v7;
										break;
									case 4:
										_this49.s4 = v7;
										break;
									case 5:
										_this49.s5 = v7;
										break;
									default:
										if(_this49.s6 == null) {
											_this49.s6 = new justPath_StoreF6();
										}
										_this49.s6.push(v7);
									}
									_this49.l++;
								}
								_this48.l++;
							}
							temp1 = "";
						}
						break;
					case 45:
						if(temp1 != "") {
							if((this.store.l & 1) == 0) {
								var _this50 = this.store;
								var v8 = parseFloat(temp1);
								switch(_this50.l) {
								case 0:
									_this50.s0 = v8;
									break;
								case 1:
									_this50.s1 = v8;
									break;
								case 2:
									_this50.s2 = v8;
									break;
								case 3:
									_this50.s3 = v8;
									break;
								case 4:
									_this50.s4 = v8;
									break;
								case 5:
									_this50.s5 = v8;
									break;
								default:
									if(_this50.s6 == null) {
										_this50.s6 = new justPath_StoreF6();
									}
									var _this51 = _this50.s6;
									switch(_this51.l) {
									case 0:
										_this51.s0 = v8;
										break;
									case 1:
										_this51.s1 = v8;
										break;
									case 2:
										_this51.s2 = v8;
										break;
									case 3:
										_this51.s3 = v8;
										break;
									case 4:
										_this51.s4 = v8;
										break;
									case 5:
										_this51.s5 = v8;
										break;
									default:
										if(_this51.s6 == null) {
											_this51.s6 = new justPath_StoreF6();
										}
										_this51.s6.push(v8);
									}
									_this51.l++;
								}
								_this50.l++;
							} else {
								var _this52 = this.store;
								var v9 = parseFloat(temp1);
								switch(_this52.l) {
								case 0:
									_this52.s0 = v9;
									break;
								case 1:
									_this52.s1 = v9;
									break;
								case 2:
									_this52.s2 = v9;
									break;
								case 3:
									_this52.s3 = v9;
									break;
								case 4:
									_this52.s4 = v9;
									break;
								case 5:
									_this52.s5 = v9;
									break;
								default:
									if(_this52.s6 == null) {
										_this52.s6 = new justPath_StoreF6();
									}
									var _this53 = _this52.s6;
									switch(_this53.l) {
									case 0:
										_this53.s0 = v9;
										break;
									case 1:
										_this53.s1 = v9;
										break;
									case 2:
										_this53.s2 = v9;
										break;
									case 3:
										_this53.s3 = v9;
										break;
									case 4:
										_this53.s4 = v9;
										break;
									case 5:
										_this53.s5 = v9;
										break;
									default:
										if(_this53.s6 == null) {
											_this53.s6 = new justPath_StoreF6();
										}
										_this53.s6.push(v9);
									}
									_this53.l++;
								}
								_this52.l++;
							}
						}
						temp1 = "-";
						break;
					case 46:
						temp1 += ".";
						break;
					case 48:
						temp1 += "0";
						break;
					case 49:
						temp1 += "1";
						break;
					case 50:
						temp1 += "2";
						break;
					case 51:
						temp1 += "3";
						break;
					case 52:
						temp1 += "4";
						break;
					case 53:
						temp1 += "5";
						break;
					case 54:
						temp1 += "6";
						break;
					case 55:
						temp1 += "7";
						break;
					case 56:
						temp1 += "8";
						break;
					case 57:
						temp1 += "9";
						break;
					default:
						if(temp1 != "") {
							if((this.store.l & 1) == 0) {
								var _this54 = this.store;
								var v10 = parseFloat(temp1);
								switch(_this54.l) {
								case 0:
									_this54.s0 = v10;
									break;
								case 1:
									_this54.s1 = v10;
									break;
								case 2:
									_this54.s2 = v10;
									break;
								case 3:
									_this54.s3 = v10;
									break;
								case 4:
									_this54.s4 = v10;
									break;
								case 5:
									_this54.s5 = v10;
									break;
								default:
									if(_this54.s6 == null) {
										_this54.s6 = new justPath_StoreF6();
									}
									var _this55 = _this54.s6;
									switch(_this55.l) {
									case 0:
										_this55.s0 = v10;
										break;
									case 1:
										_this55.s1 = v10;
										break;
									case 2:
										_this55.s2 = v10;
										break;
									case 3:
										_this55.s3 = v10;
										break;
									case 4:
										_this55.s4 = v10;
										break;
									case 5:
										_this55.s5 = v10;
										break;
									default:
										if(_this55.s6 == null) {
											_this55.s6 = new justPath_StoreF6();
										}
										_this55.s6.push(v10);
									}
									_this55.l++;
								}
								_this54.l++;
							} else {
								var _this56 = this.store;
								var v11 = parseFloat(temp1);
								switch(_this56.l) {
								case 0:
									_this56.s0 = v11;
									break;
								case 1:
									_this56.s1 = v11;
									break;
								case 2:
									_this56.s2 = v11;
									break;
								case 3:
									_this56.s3 = v11;
									break;
								case 4:
									_this56.s4 = v11;
									break;
								case 5:
									_this56.s5 = v11;
									break;
								default:
									if(_this56.s6 == null) {
										_this56.s6 = new justPath_StoreF6();
									}
									var _this57 = _this56.s6;
									switch(_this57.l) {
									case 0:
										_this57.s0 = v11;
										break;
									case 1:
										_this57.s1 = v11;
										break;
									case 2:
										_this57.s2 = v11;
										break;
									case 3:
										_this57.s3 = v11;
										break;
									case 4:
										_this57.s4 = v11;
										break;
									case 5:
										_this57.s5 = v11;
										break;
									default:
										if(_this57.s6 == null) {
											_this57.s6 = new justPath_StoreF6();
										}
										_this57.s6.push(v11);
									}
									_this57.l++;
								}
								_this56.l++;
							}
							temp1 = "";
						}
						this.pos--;
						exit1 = true;
					}
					if(exit1) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 4) {
					this.controlX = this.store.s2;
					this.controlY = this.store.s3;
					this.lastX = this.store.s4;
					this.lastY = this.store.s5;
					this.pathContext.curveTo(this.store.s0,this.store.s1,this.controlX,this.controlY,this.lastX,this.lastY);
				} else if(this.store.l > 4) {
					while(this.store.l > 3) {
						var _this58 = this.store;
						var out32 = _this58.s0;
						if(_this58.l != 0) {
							_this58.s0 = _this58.s1;
							_this58.s1 = _this58.s2;
							_this58.s2 = _this58.s3;
							_this58.s3 = _this58.s4;
							_this58.s4 = _this58.s5;
							_this58.s5 = null;
							if(_this58.s6 != null) {
								var _this59 = _this58.s6;
								var out33 = _this59.s0;
								if(_this59.l != 0) {
									_this59.s0 = _this59.s1;
									_this59.s1 = _this59.s2;
									_this59.s2 = _this59.s3;
									_this59.s3 = _this59.s4;
									_this59.s4 = _this59.s5;
									_this59.s5 = null;
									if(_this59.s6 != null) {
										_this59.s5 = _this59.s6.shift();
									}
									_this59.l--;
								}
								_this58.s5 = out33;
							}
							_this58.l--;
						}
						var firstX = out32;
						var _this60 = this.store;
						var out34 = _this60.s0;
						if(_this60.l != 0) {
							_this60.s0 = _this60.s1;
							_this60.s1 = _this60.s2;
							_this60.s2 = _this60.s3;
							_this60.s3 = _this60.s4;
							_this60.s4 = _this60.s5;
							_this60.s5 = null;
							if(_this60.s6 != null) {
								var _this61 = _this60.s6;
								var out35 = _this61.s0;
								if(_this61.l != 0) {
									_this61.s0 = _this61.s1;
									_this61.s1 = _this61.s2;
									_this61.s2 = _this61.s3;
									_this61.s3 = _this61.s4;
									_this61.s4 = _this61.s5;
									_this61.s5 = null;
									if(_this61.s6 != null) {
										_this61.s5 = _this61.s6.shift();
									}
									_this61.l--;
								}
								_this60.s5 = out35;
							}
							_this60.l--;
						}
						var firstY = out34;
						var _this62 = this.store;
						var out36 = _this62.s0;
						if(_this62.l != 0) {
							_this62.s0 = _this62.s1;
							_this62.s1 = _this62.s2;
							_this62.s2 = _this62.s3;
							_this62.s3 = _this62.s4;
							_this62.s4 = _this62.s5;
							_this62.s5 = null;
							if(_this62.s6 != null) {
								var _this63 = _this62.s6;
								var out37 = _this63.s0;
								if(_this63.l != 0) {
									_this63.s0 = _this63.s1;
									_this63.s1 = _this63.s2;
									_this63.s2 = _this63.s3;
									_this63.s3 = _this63.s4;
									_this63.s4 = _this63.s5;
									_this63.s5 = null;
									if(_this63.s6 != null) {
										_this63.s5 = _this63.s6.shift();
									}
									_this63.l--;
								}
								_this62.s5 = out37;
							}
							_this62.l--;
						}
						this.controlX = out36;
						var _this64 = this.store;
						var out38 = _this64.s0;
						if(_this64.l != 0) {
							_this64.s0 = _this64.s1;
							_this64.s1 = _this64.s2;
							_this64.s2 = _this64.s3;
							_this64.s3 = _this64.s4;
							_this64.s4 = _this64.s5;
							_this64.s5 = null;
							if(_this64.s6 != null) {
								var _this65 = _this64.s6;
								var out39 = _this65.s0;
								if(_this65.l != 0) {
									_this65.s0 = _this65.s1;
									_this65.s1 = _this65.s2;
									_this65.s2 = _this65.s3;
									_this65.s3 = _this65.s4;
									_this65.s4 = _this65.s5;
									_this65.s5 = null;
									if(_this65.s6 != null) {
										_this65.s5 = _this65.s6.shift();
									}
									_this65.l--;
								}
								_this64.s5 = out39;
							}
							_this64.l--;
						}
						this.controlY = out38;
						var _this66 = this.store;
						var out40 = _this66.s0;
						if(_this66.l != 0) {
							_this66.s0 = _this66.s1;
							_this66.s1 = _this66.s2;
							_this66.s2 = _this66.s3;
							_this66.s3 = _this66.s4;
							_this66.s4 = _this66.s5;
							_this66.s5 = null;
							if(_this66.s6 != null) {
								var _this67 = _this66.s6;
								var out41 = _this67.s0;
								if(_this67.l != 0) {
									_this67.s0 = _this67.s1;
									_this67.s1 = _this67.s2;
									_this67.s2 = _this67.s3;
									_this67.s3 = _this67.s4;
									_this67.s4 = _this67.s5;
									_this67.s5 = null;
									if(_this67.s6 != null) {
										_this67.s5 = _this67.s6.shift();
									}
									_this67.l--;
								}
								_this66.s5 = out41;
							}
							_this66.l--;
						}
						this.lastX = out40;
						var _this68 = this.store;
						var out42 = _this68.s0;
						if(_this68.l != 0) {
							_this68.s0 = _this68.s1;
							_this68.s1 = _this68.s2;
							_this68.s2 = _this68.s3;
							_this68.s3 = _this68.s4;
							_this68.s4 = _this68.s5;
							_this68.s5 = null;
							if(_this68.s6 != null) {
								var _this69 = _this68.s6;
								var out43 = _this69.s0;
								if(_this69.l != 0) {
									_this69.s0 = _this69.s1;
									_this69.s1 = _this69.s2;
									_this69.s2 = _this69.s3;
									_this69.s3 = _this69.s4;
									_this69.s4 = _this69.s5;
									_this69.s5 = null;
									if(_this69.s6 != null) {
										_this69.s5 = _this69.s6.shift();
									}
									_this69.l--;
								}
								_this68.s5 = out43;
							}
							_this68.l--;
						}
						this.lastY = out42;
						this.pathContext.curveTo(firstX,firstY,this.controlX,this.controlY,this.lastX,this.lastY);
					}
				}
				break;
			case 72:
				var process = false;
				if(process == null) {
					process = true;
				}
				var _this70 = this.store;
				_this70.l = 0;
				_this70.s0 = null;
				_this70.s1 = null;
				_this70.s2 = null;
				_this70.s3 = null;
				_this70.s4 = null;
				_this70.s5 = null;
				_this70.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp2 = "";
				var exit2 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp2 != "") {
							if(process) {
								if((this.store.l & 1) == 0) {
									var _this71 = this.store;
									var v12 = parseFloat(temp2);
									switch(_this71.l) {
									case 0:
										_this71.s0 = v12;
										break;
									case 1:
										_this71.s1 = v12;
										break;
									case 2:
										_this71.s2 = v12;
										break;
									case 3:
										_this71.s3 = v12;
										break;
									case 4:
										_this71.s4 = v12;
										break;
									case 5:
										_this71.s5 = v12;
										break;
									default:
										if(_this71.s6 == null) {
											_this71.s6 = new justPath_StoreF6();
										}
										var _this72 = _this71.s6;
										switch(_this72.l) {
										case 0:
											_this72.s0 = v12;
											break;
										case 1:
											_this72.s1 = v12;
											break;
										case 2:
											_this72.s2 = v12;
											break;
										case 3:
											_this72.s3 = v12;
											break;
										case 4:
											_this72.s4 = v12;
											break;
										case 5:
											_this72.s5 = v12;
											break;
										default:
											if(_this72.s6 == null) {
												_this72.s6 = new justPath_StoreF6();
											}
											_this72.s6.push(v12);
										}
										_this72.l++;
									}
									_this71.l++;
								} else {
									var _this73 = this.store;
									var v13 = parseFloat(temp2);
									switch(_this73.l) {
									case 0:
										_this73.s0 = v13;
										break;
									case 1:
										_this73.s1 = v13;
										break;
									case 2:
										_this73.s2 = v13;
										break;
									case 3:
										_this73.s3 = v13;
										break;
									case 4:
										_this73.s4 = v13;
										break;
									case 5:
										_this73.s5 = v13;
										break;
									default:
										if(_this73.s6 == null) {
											_this73.s6 = new justPath_StoreF6();
										}
										var _this74 = _this73.s6;
										switch(_this74.l) {
										case 0:
											_this74.s0 = v13;
											break;
										case 1:
											_this74.s1 = v13;
											break;
										case 2:
											_this74.s2 = v13;
											break;
										case 3:
											_this74.s3 = v13;
											break;
										case 4:
											_this74.s4 = v13;
											break;
										case 5:
											_this74.s5 = v13;
											break;
										default:
											if(_this74.s6 == null) {
												_this74.s6 = new justPath_StoreF6();
											}
											_this74.s6.push(v13);
										}
										_this74.l++;
									}
									_this73.l++;
								}
							} else {
								var _this75 = this.store;
								var v14 = parseFloat(temp2);
								switch(_this75.l) {
								case 0:
									_this75.s0 = v14;
									break;
								case 1:
									_this75.s1 = v14;
									break;
								case 2:
									_this75.s2 = v14;
									break;
								case 3:
									_this75.s3 = v14;
									break;
								case 4:
									_this75.s4 = v14;
									break;
								case 5:
									_this75.s5 = v14;
									break;
								default:
									if(_this75.s6 == null) {
										_this75.s6 = new justPath_StoreF6();
									}
									var _this76 = _this75.s6;
									switch(_this76.l) {
									case 0:
										_this76.s0 = v14;
										break;
									case 1:
										_this76.s1 = v14;
										break;
									case 2:
										_this76.s2 = v14;
										break;
									case 3:
										_this76.s3 = v14;
										break;
									case 4:
										_this76.s4 = v14;
										break;
									case 5:
										_this76.s5 = v14;
										break;
									default:
										if(_this76.s6 == null) {
											_this76.s6 = new justPath_StoreF6();
										}
										_this76.s6.push(v14);
									}
									_this76.l++;
								}
								_this75.l++;
							}
							temp2 = "";
						}
						break;
					case 45:
						if(temp2 != "") {
							if(process) {
								if((this.store.l & 1) == 0) {
									var _this77 = this.store;
									var v15 = parseFloat(temp2);
									switch(_this77.l) {
									case 0:
										_this77.s0 = v15;
										break;
									case 1:
										_this77.s1 = v15;
										break;
									case 2:
										_this77.s2 = v15;
										break;
									case 3:
										_this77.s3 = v15;
										break;
									case 4:
										_this77.s4 = v15;
										break;
									case 5:
										_this77.s5 = v15;
										break;
									default:
										if(_this77.s6 == null) {
											_this77.s6 = new justPath_StoreF6();
										}
										var _this78 = _this77.s6;
										switch(_this78.l) {
										case 0:
											_this78.s0 = v15;
											break;
										case 1:
											_this78.s1 = v15;
											break;
										case 2:
											_this78.s2 = v15;
											break;
										case 3:
											_this78.s3 = v15;
											break;
										case 4:
											_this78.s4 = v15;
											break;
										case 5:
											_this78.s5 = v15;
											break;
										default:
											if(_this78.s6 == null) {
												_this78.s6 = new justPath_StoreF6();
											}
											_this78.s6.push(v15);
										}
										_this78.l++;
									}
									_this77.l++;
								} else {
									var _this79 = this.store;
									var v16 = parseFloat(temp2);
									switch(_this79.l) {
									case 0:
										_this79.s0 = v16;
										break;
									case 1:
										_this79.s1 = v16;
										break;
									case 2:
										_this79.s2 = v16;
										break;
									case 3:
										_this79.s3 = v16;
										break;
									case 4:
										_this79.s4 = v16;
										break;
									case 5:
										_this79.s5 = v16;
										break;
									default:
										if(_this79.s6 == null) {
											_this79.s6 = new justPath_StoreF6();
										}
										var _this80 = _this79.s6;
										switch(_this80.l) {
										case 0:
											_this80.s0 = v16;
											break;
										case 1:
											_this80.s1 = v16;
											break;
										case 2:
											_this80.s2 = v16;
											break;
										case 3:
											_this80.s3 = v16;
											break;
										case 4:
											_this80.s4 = v16;
											break;
										case 5:
											_this80.s5 = v16;
											break;
										default:
											if(_this80.s6 == null) {
												_this80.s6 = new justPath_StoreF6();
											}
											_this80.s6.push(v16);
										}
										_this80.l++;
									}
									_this79.l++;
								}
							} else {
								var _this81 = this.store;
								var v17 = parseFloat(temp2);
								switch(_this81.l) {
								case 0:
									_this81.s0 = v17;
									break;
								case 1:
									_this81.s1 = v17;
									break;
								case 2:
									_this81.s2 = v17;
									break;
								case 3:
									_this81.s3 = v17;
									break;
								case 4:
									_this81.s4 = v17;
									break;
								case 5:
									_this81.s5 = v17;
									break;
								default:
									if(_this81.s6 == null) {
										_this81.s6 = new justPath_StoreF6();
									}
									var _this82 = _this81.s6;
									switch(_this82.l) {
									case 0:
										_this82.s0 = v17;
										break;
									case 1:
										_this82.s1 = v17;
										break;
									case 2:
										_this82.s2 = v17;
										break;
									case 3:
										_this82.s3 = v17;
										break;
									case 4:
										_this82.s4 = v17;
										break;
									case 5:
										_this82.s5 = v17;
										break;
									default:
										if(_this82.s6 == null) {
											_this82.s6 = new justPath_StoreF6();
										}
										_this82.s6.push(v17);
									}
									_this82.l++;
								}
								_this81.l++;
							}
						}
						temp2 = "-";
						break;
					case 46:
						temp2 += ".";
						break;
					case 48:
						temp2 += "0";
						break;
					case 49:
						temp2 += "1";
						break;
					case 50:
						temp2 += "2";
						break;
					case 51:
						temp2 += "3";
						break;
					case 52:
						temp2 += "4";
						break;
					case 53:
						temp2 += "5";
						break;
					case 54:
						temp2 += "6";
						break;
					case 55:
						temp2 += "7";
						break;
					case 56:
						temp2 += "8";
						break;
					case 57:
						temp2 += "9";
						break;
					default:
						if(temp2 != "") {
							if(process) {
								if((this.store.l & 1) == 0) {
									var _this83 = this.store;
									var v18 = parseFloat(temp2);
									switch(_this83.l) {
									case 0:
										_this83.s0 = v18;
										break;
									case 1:
										_this83.s1 = v18;
										break;
									case 2:
										_this83.s2 = v18;
										break;
									case 3:
										_this83.s3 = v18;
										break;
									case 4:
										_this83.s4 = v18;
										break;
									case 5:
										_this83.s5 = v18;
										break;
									default:
										if(_this83.s6 == null) {
											_this83.s6 = new justPath_StoreF6();
										}
										var _this84 = _this83.s6;
										switch(_this84.l) {
										case 0:
											_this84.s0 = v18;
											break;
										case 1:
											_this84.s1 = v18;
											break;
										case 2:
											_this84.s2 = v18;
											break;
										case 3:
											_this84.s3 = v18;
											break;
										case 4:
											_this84.s4 = v18;
											break;
										case 5:
											_this84.s5 = v18;
											break;
										default:
											if(_this84.s6 == null) {
												_this84.s6 = new justPath_StoreF6();
											}
											_this84.s6.push(v18);
										}
										_this84.l++;
									}
									_this83.l++;
								} else {
									var _this85 = this.store;
									var v19 = parseFloat(temp2);
									switch(_this85.l) {
									case 0:
										_this85.s0 = v19;
										break;
									case 1:
										_this85.s1 = v19;
										break;
									case 2:
										_this85.s2 = v19;
										break;
									case 3:
										_this85.s3 = v19;
										break;
									case 4:
										_this85.s4 = v19;
										break;
									case 5:
										_this85.s5 = v19;
										break;
									default:
										if(_this85.s6 == null) {
											_this85.s6 = new justPath_StoreF6();
										}
										var _this86 = _this85.s6;
										switch(_this86.l) {
										case 0:
											_this86.s0 = v19;
											break;
										case 1:
											_this86.s1 = v19;
											break;
										case 2:
											_this86.s2 = v19;
											break;
										case 3:
											_this86.s3 = v19;
											break;
										case 4:
											_this86.s4 = v19;
											break;
										case 5:
											_this86.s5 = v19;
											break;
										default:
											if(_this86.s6 == null) {
												_this86.s6 = new justPath_StoreF6();
											}
											_this86.s6.push(v19);
										}
										_this86.l++;
									}
									_this85.l++;
								}
							} else {
								var _this87 = this.store;
								var v20 = parseFloat(temp2);
								switch(_this87.l) {
								case 0:
									_this87.s0 = v20;
									break;
								case 1:
									_this87.s1 = v20;
									break;
								case 2:
									_this87.s2 = v20;
									break;
								case 3:
									_this87.s3 = v20;
									break;
								case 4:
									_this87.s4 = v20;
									break;
								case 5:
									_this87.s5 = v20;
									break;
								default:
									if(_this87.s6 == null) {
										_this87.s6 = new justPath_StoreF6();
									}
									var _this88 = _this87.s6;
									switch(_this88.l) {
									case 0:
										_this88.s0 = v20;
										break;
									case 1:
										_this88.s1 = v20;
										break;
									case 2:
										_this88.s2 = v20;
										break;
									case 3:
										_this88.s3 = v20;
										break;
									case 4:
										_this88.s4 = v20;
										break;
									case 5:
										_this88.s5 = v20;
										break;
									default:
										if(_this88.s6 == null) {
											_this88.s6 = new justPath_StoreF6();
										}
										_this88.s6.push(v20);
									}
									_this88.l++;
								}
								_this87.l++;
							}
							temp2 = "";
						}
						this.pos--;
						exit2 = true;
					}
					if(exit2) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 1) {
					this.lastX = this.store.s0;
					this.pathContext.lineTo(this.lastX,this.lastY);
				} else if(this.store.l > 1) {
					while(this.store.l > 0) {
						var _this89 = this.store;
						var out44 = _this89.s0;
						if(_this89.l != 0) {
							_this89.s0 = _this89.s1;
							_this89.s1 = _this89.s2;
							_this89.s2 = _this89.s3;
							_this89.s3 = _this89.s4;
							_this89.s4 = _this89.s5;
							_this89.s5 = null;
							if(_this89.s6 != null) {
								var _this90 = _this89.s6;
								var out45 = _this90.s0;
								if(_this90.l != 0) {
									_this90.s0 = _this90.s1;
									_this90.s1 = _this90.s2;
									_this90.s2 = _this90.s3;
									_this90.s3 = _this90.s4;
									_this90.s4 = _this90.s5;
									_this90.s5 = null;
									if(_this90.s6 != null) {
										_this90.s5 = _this90.s6.shift();
									}
									_this90.l--;
								}
								_this89.s5 = out45;
							}
							_this89.l--;
						}
						this.lastX = out44;
						this.pathContext.lineTo(this.lastX,this.lastY);
					}
				}
				break;
			case 76:
				var _this91 = this.store;
				_this91.l = 0;
				_this91.s0 = null;
				_this91.s1 = null;
				_this91.s2 = null;
				_this91.s3 = null;
				_this91.s4 = null;
				_this91.s5 = null;
				_this91.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp3 = "";
				var exit3 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp3 != "") {
							if((this.store.l & 1) == 0) {
								var _this92 = this.store;
								var v21 = parseFloat(temp3);
								switch(_this92.l) {
								case 0:
									_this92.s0 = v21;
									break;
								case 1:
									_this92.s1 = v21;
									break;
								case 2:
									_this92.s2 = v21;
									break;
								case 3:
									_this92.s3 = v21;
									break;
								case 4:
									_this92.s4 = v21;
									break;
								case 5:
									_this92.s5 = v21;
									break;
								default:
									if(_this92.s6 == null) {
										_this92.s6 = new justPath_StoreF6();
									}
									var _this93 = _this92.s6;
									switch(_this93.l) {
									case 0:
										_this93.s0 = v21;
										break;
									case 1:
										_this93.s1 = v21;
										break;
									case 2:
										_this93.s2 = v21;
										break;
									case 3:
										_this93.s3 = v21;
										break;
									case 4:
										_this93.s4 = v21;
										break;
									case 5:
										_this93.s5 = v21;
										break;
									default:
										if(_this93.s6 == null) {
											_this93.s6 = new justPath_StoreF6();
										}
										_this93.s6.push(v21);
									}
									_this93.l++;
								}
								_this92.l++;
							} else {
								var _this94 = this.store;
								var v22 = parseFloat(temp3);
								switch(_this94.l) {
								case 0:
									_this94.s0 = v22;
									break;
								case 1:
									_this94.s1 = v22;
									break;
								case 2:
									_this94.s2 = v22;
									break;
								case 3:
									_this94.s3 = v22;
									break;
								case 4:
									_this94.s4 = v22;
									break;
								case 5:
									_this94.s5 = v22;
									break;
								default:
									if(_this94.s6 == null) {
										_this94.s6 = new justPath_StoreF6();
									}
									var _this95 = _this94.s6;
									switch(_this95.l) {
									case 0:
										_this95.s0 = v22;
										break;
									case 1:
										_this95.s1 = v22;
										break;
									case 2:
										_this95.s2 = v22;
										break;
									case 3:
										_this95.s3 = v22;
										break;
									case 4:
										_this95.s4 = v22;
										break;
									case 5:
										_this95.s5 = v22;
										break;
									default:
										if(_this95.s6 == null) {
											_this95.s6 = new justPath_StoreF6();
										}
										_this95.s6.push(v22);
									}
									_this95.l++;
								}
								_this94.l++;
							}
							temp3 = "";
						}
						break;
					case 45:
						if(temp3 != "") {
							if((this.store.l & 1) == 0) {
								var _this96 = this.store;
								var v23 = parseFloat(temp3);
								switch(_this96.l) {
								case 0:
									_this96.s0 = v23;
									break;
								case 1:
									_this96.s1 = v23;
									break;
								case 2:
									_this96.s2 = v23;
									break;
								case 3:
									_this96.s3 = v23;
									break;
								case 4:
									_this96.s4 = v23;
									break;
								case 5:
									_this96.s5 = v23;
									break;
								default:
									if(_this96.s6 == null) {
										_this96.s6 = new justPath_StoreF6();
									}
									var _this97 = _this96.s6;
									switch(_this97.l) {
									case 0:
										_this97.s0 = v23;
										break;
									case 1:
										_this97.s1 = v23;
										break;
									case 2:
										_this97.s2 = v23;
										break;
									case 3:
										_this97.s3 = v23;
										break;
									case 4:
										_this97.s4 = v23;
										break;
									case 5:
										_this97.s5 = v23;
										break;
									default:
										if(_this97.s6 == null) {
											_this97.s6 = new justPath_StoreF6();
										}
										_this97.s6.push(v23);
									}
									_this97.l++;
								}
								_this96.l++;
							} else {
								var _this98 = this.store;
								var v24 = parseFloat(temp3);
								switch(_this98.l) {
								case 0:
									_this98.s0 = v24;
									break;
								case 1:
									_this98.s1 = v24;
									break;
								case 2:
									_this98.s2 = v24;
									break;
								case 3:
									_this98.s3 = v24;
									break;
								case 4:
									_this98.s4 = v24;
									break;
								case 5:
									_this98.s5 = v24;
									break;
								default:
									if(_this98.s6 == null) {
										_this98.s6 = new justPath_StoreF6();
									}
									var _this99 = _this98.s6;
									switch(_this99.l) {
									case 0:
										_this99.s0 = v24;
										break;
									case 1:
										_this99.s1 = v24;
										break;
									case 2:
										_this99.s2 = v24;
										break;
									case 3:
										_this99.s3 = v24;
										break;
									case 4:
										_this99.s4 = v24;
										break;
									case 5:
										_this99.s5 = v24;
										break;
									default:
										if(_this99.s6 == null) {
											_this99.s6 = new justPath_StoreF6();
										}
										_this99.s6.push(v24);
									}
									_this99.l++;
								}
								_this98.l++;
							}
						}
						temp3 = "-";
						break;
					case 46:
						temp3 += ".";
						break;
					case 48:
						temp3 += "0";
						break;
					case 49:
						temp3 += "1";
						break;
					case 50:
						temp3 += "2";
						break;
					case 51:
						temp3 += "3";
						break;
					case 52:
						temp3 += "4";
						break;
					case 53:
						temp3 += "5";
						break;
					case 54:
						temp3 += "6";
						break;
					case 55:
						temp3 += "7";
						break;
					case 56:
						temp3 += "8";
						break;
					case 57:
						temp3 += "9";
						break;
					default:
						if(temp3 != "") {
							if((this.store.l & 1) == 0) {
								var _this100 = this.store;
								var v25 = parseFloat(temp3);
								switch(_this100.l) {
								case 0:
									_this100.s0 = v25;
									break;
								case 1:
									_this100.s1 = v25;
									break;
								case 2:
									_this100.s2 = v25;
									break;
								case 3:
									_this100.s3 = v25;
									break;
								case 4:
									_this100.s4 = v25;
									break;
								case 5:
									_this100.s5 = v25;
									break;
								default:
									if(_this100.s6 == null) {
										_this100.s6 = new justPath_StoreF6();
									}
									var _this101 = _this100.s6;
									switch(_this101.l) {
									case 0:
										_this101.s0 = v25;
										break;
									case 1:
										_this101.s1 = v25;
										break;
									case 2:
										_this101.s2 = v25;
										break;
									case 3:
										_this101.s3 = v25;
										break;
									case 4:
										_this101.s4 = v25;
										break;
									case 5:
										_this101.s5 = v25;
										break;
									default:
										if(_this101.s6 == null) {
											_this101.s6 = new justPath_StoreF6();
										}
										_this101.s6.push(v25);
									}
									_this101.l++;
								}
								_this100.l++;
							} else {
								var _this102 = this.store;
								var v26 = parseFloat(temp3);
								switch(_this102.l) {
								case 0:
									_this102.s0 = v26;
									break;
								case 1:
									_this102.s1 = v26;
									break;
								case 2:
									_this102.s2 = v26;
									break;
								case 3:
									_this102.s3 = v26;
									break;
								case 4:
									_this102.s4 = v26;
									break;
								case 5:
									_this102.s5 = v26;
									break;
								default:
									if(_this102.s6 == null) {
										_this102.s6 = new justPath_StoreF6();
									}
									var _this103 = _this102.s6;
									switch(_this103.l) {
									case 0:
										_this103.s0 = v26;
										break;
									case 1:
										_this103.s1 = v26;
										break;
									case 2:
										_this103.s2 = v26;
										break;
									case 3:
										_this103.s3 = v26;
										break;
									case 4:
										_this103.s4 = v26;
										break;
									case 5:
										_this103.s5 = v26;
										break;
									default:
										if(_this103.s6 == null) {
											_this103.s6 = new justPath_StoreF6();
										}
										_this103.s6.push(v26);
									}
									_this103.l++;
								}
								_this102.l++;
							}
							temp3 = "";
						}
						this.pos--;
						exit3 = true;
					}
					if(exit3) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 2) {
					this.lastX = this.store.s0;
					this.lastY = this.store.s1;
					this.pathContext.lineTo(this.lastX,this.lastY);
				} else if(this.store.l > 2) {
					while(this.store.l > 1) {
						var _this104 = this.store;
						var out46 = _this104.s0;
						if(_this104.l != 0) {
							_this104.s0 = _this104.s1;
							_this104.s1 = _this104.s2;
							_this104.s2 = _this104.s3;
							_this104.s3 = _this104.s4;
							_this104.s4 = _this104.s5;
							_this104.s5 = null;
							if(_this104.s6 != null) {
								var _this105 = _this104.s6;
								var out47 = _this105.s0;
								if(_this105.l != 0) {
									_this105.s0 = _this105.s1;
									_this105.s1 = _this105.s2;
									_this105.s2 = _this105.s3;
									_this105.s3 = _this105.s4;
									_this105.s4 = _this105.s5;
									_this105.s5 = null;
									if(_this105.s6 != null) {
										_this105.s5 = _this105.s6.shift();
									}
									_this105.l--;
								}
								_this104.s5 = out47;
							}
							_this104.l--;
						}
						this.lastX = out46;
						var _this106 = this.store;
						var out48 = _this106.s0;
						if(_this106.l != 0) {
							_this106.s0 = _this106.s1;
							_this106.s1 = _this106.s2;
							_this106.s2 = _this106.s3;
							_this106.s3 = _this106.s4;
							_this106.s4 = _this106.s5;
							_this106.s5 = null;
							if(_this106.s6 != null) {
								var _this107 = _this106.s6;
								var out49 = _this107.s0;
								if(_this107.l != 0) {
									_this107.s0 = _this107.s1;
									_this107.s1 = _this107.s2;
									_this107.s2 = _this107.s3;
									_this107.s3 = _this107.s4;
									_this107.s4 = _this107.s5;
									_this107.s5 = null;
									if(_this107.s6 != null) {
										_this107.s5 = _this107.s6.shift();
									}
									_this107.l--;
								}
								_this106.s5 = out49;
							}
							_this106.l--;
						}
						this.lastY = out48;
						this.pathContext.lineTo(this.lastX,this.lastY);
					}
				}
				break;
			case 77:
				var _this108 = this.store;
				_this108.l = 0;
				_this108.s0 = null;
				_this108.s1 = null;
				_this108.s2 = null;
				_this108.s3 = null;
				_this108.s4 = null;
				_this108.s5 = null;
				_this108.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp4 = "";
				var exit4 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp4 != "") {
							if((this.store.l & 1) == 0) {
								var _this109 = this.store;
								var v27 = parseFloat(temp4);
								switch(_this109.l) {
								case 0:
									_this109.s0 = v27;
									break;
								case 1:
									_this109.s1 = v27;
									break;
								case 2:
									_this109.s2 = v27;
									break;
								case 3:
									_this109.s3 = v27;
									break;
								case 4:
									_this109.s4 = v27;
									break;
								case 5:
									_this109.s5 = v27;
									break;
								default:
									if(_this109.s6 == null) {
										_this109.s6 = new justPath_StoreF6();
									}
									var _this110 = _this109.s6;
									switch(_this110.l) {
									case 0:
										_this110.s0 = v27;
										break;
									case 1:
										_this110.s1 = v27;
										break;
									case 2:
										_this110.s2 = v27;
										break;
									case 3:
										_this110.s3 = v27;
										break;
									case 4:
										_this110.s4 = v27;
										break;
									case 5:
										_this110.s5 = v27;
										break;
									default:
										if(_this110.s6 == null) {
											_this110.s6 = new justPath_StoreF6();
										}
										_this110.s6.push(v27);
									}
									_this110.l++;
								}
								_this109.l++;
							} else {
								var _this111 = this.store;
								var v28 = parseFloat(temp4);
								switch(_this111.l) {
								case 0:
									_this111.s0 = v28;
									break;
								case 1:
									_this111.s1 = v28;
									break;
								case 2:
									_this111.s2 = v28;
									break;
								case 3:
									_this111.s3 = v28;
									break;
								case 4:
									_this111.s4 = v28;
									break;
								case 5:
									_this111.s5 = v28;
									break;
								default:
									if(_this111.s6 == null) {
										_this111.s6 = new justPath_StoreF6();
									}
									var _this112 = _this111.s6;
									switch(_this112.l) {
									case 0:
										_this112.s0 = v28;
										break;
									case 1:
										_this112.s1 = v28;
										break;
									case 2:
										_this112.s2 = v28;
										break;
									case 3:
										_this112.s3 = v28;
										break;
									case 4:
										_this112.s4 = v28;
										break;
									case 5:
										_this112.s5 = v28;
										break;
									default:
										if(_this112.s6 == null) {
											_this112.s6 = new justPath_StoreF6();
										}
										_this112.s6.push(v28);
									}
									_this112.l++;
								}
								_this111.l++;
							}
							temp4 = "";
						}
						break;
					case 45:
						if(temp4 != "") {
							if((this.store.l & 1) == 0) {
								var _this113 = this.store;
								var v29 = parseFloat(temp4);
								switch(_this113.l) {
								case 0:
									_this113.s0 = v29;
									break;
								case 1:
									_this113.s1 = v29;
									break;
								case 2:
									_this113.s2 = v29;
									break;
								case 3:
									_this113.s3 = v29;
									break;
								case 4:
									_this113.s4 = v29;
									break;
								case 5:
									_this113.s5 = v29;
									break;
								default:
									if(_this113.s6 == null) {
										_this113.s6 = new justPath_StoreF6();
									}
									var _this114 = _this113.s6;
									switch(_this114.l) {
									case 0:
										_this114.s0 = v29;
										break;
									case 1:
										_this114.s1 = v29;
										break;
									case 2:
										_this114.s2 = v29;
										break;
									case 3:
										_this114.s3 = v29;
										break;
									case 4:
										_this114.s4 = v29;
										break;
									case 5:
										_this114.s5 = v29;
										break;
									default:
										if(_this114.s6 == null) {
											_this114.s6 = new justPath_StoreF6();
										}
										_this114.s6.push(v29);
									}
									_this114.l++;
								}
								_this113.l++;
							} else {
								var _this115 = this.store;
								var v30 = parseFloat(temp4);
								switch(_this115.l) {
								case 0:
									_this115.s0 = v30;
									break;
								case 1:
									_this115.s1 = v30;
									break;
								case 2:
									_this115.s2 = v30;
									break;
								case 3:
									_this115.s3 = v30;
									break;
								case 4:
									_this115.s4 = v30;
									break;
								case 5:
									_this115.s5 = v30;
									break;
								default:
									if(_this115.s6 == null) {
										_this115.s6 = new justPath_StoreF6();
									}
									var _this116 = _this115.s6;
									switch(_this116.l) {
									case 0:
										_this116.s0 = v30;
										break;
									case 1:
										_this116.s1 = v30;
										break;
									case 2:
										_this116.s2 = v30;
										break;
									case 3:
										_this116.s3 = v30;
										break;
									case 4:
										_this116.s4 = v30;
										break;
									case 5:
										_this116.s5 = v30;
										break;
									default:
										if(_this116.s6 == null) {
											_this116.s6 = new justPath_StoreF6();
										}
										_this116.s6.push(v30);
									}
									_this116.l++;
								}
								_this115.l++;
							}
						}
						temp4 = "-";
						break;
					case 46:
						temp4 += ".";
						break;
					case 48:
						temp4 += "0";
						break;
					case 49:
						temp4 += "1";
						break;
					case 50:
						temp4 += "2";
						break;
					case 51:
						temp4 += "3";
						break;
					case 52:
						temp4 += "4";
						break;
					case 53:
						temp4 += "5";
						break;
					case 54:
						temp4 += "6";
						break;
					case 55:
						temp4 += "7";
						break;
					case 56:
						temp4 += "8";
						break;
					case 57:
						temp4 += "9";
						break;
					default:
						if(temp4 != "") {
							if((this.store.l & 1) == 0) {
								var _this117 = this.store;
								var v31 = parseFloat(temp4);
								switch(_this117.l) {
								case 0:
									_this117.s0 = v31;
									break;
								case 1:
									_this117.s1 = v31;
									break;
								case 2:
									_this117.s2 = v31;
									break;
								case 3:
									_this117.s3 = v31;
									break;
								case 4:
									_this117.s4 = v31;
									break;
								case 5:
									_this117.s5 = v31;
									break;
								default:
									if(_this117.s6 == null) {
										_this117.s6 = new justPath_StoreF6();
									}
									var _this118 = _this117.s6;
									switch(_this118.l) {
									case 0:
										_this118.s0 = v31;
										break;
									case 1:
										_this118.s1 = v31;
										break;
									case 2:
										_this118.s2 = v31;
										break;
									case 3:
										_this118.s3 = v31;
										break;
									case 4:
										_this118.s4 = v31;
										break;
									case 5:
										_this118.s5 = v31;
										break;
									default:
										if(_this118.s6 == null) {
											_this118.s6 = new justPath_StoreF6();
										}
										_this118.s6.push(v31);
									}
									_this118.l++;
								}
								_this117.l++;
							} else {
								var _this119 = this.store;
								var v32 = parseFloat(temp4);
								switch(_this119.l) {
								case 0:
									_this119.s0 = v32;
									break;
								case 1:
									_this119.s1 = v32;
									break;
								case 2:
									_this119.s2 = v32;
									break;
								case 3:
									_this119.s3 = v32;
									break;
								case 4:
									_this119.s4 = v32;
									break;
								case 5:
									_this119.s5 = v32;
									break;
								default:
									if(_this119.s6 == null) {
										_this119.s6 = new justPath_StoreF6();
									}
									var _this120 = _this119.s6;
									switch(_this120.l) {
									case 0:
										_this120.s0 = v32;
										break;
									case 1:
										_this120.s1 = v32;
										break;
									case 2:
										_this120.s2 = v32;
										break;
									case 3:
										_this120.s3 = v32;
										break;
									case 4:
										_this120.s4 = v32;
										break;
									case 5:
										_this120.s5 = v32;
										break;
									default:
										if(_this120.s6 == null) {
											_this120.s6 = new justPath_StoreF6();
										}
										_this120.s6.push(v32);
									}
									_this120.l++;
								}
								_this119.l++;
							}
							temp4 = "";
						}
						this.pos--;
						exit4 = true;
					}
					if(exit4) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 2) {
					this.lastX = this.store.s0;
					this.lastY = this.store.s1;
					this.pathContext.moveTo(this.lastX,this.lastY);
				} else if(this.store.l > 2) {
					var _this121 = this.store;
					var out50 = _this121.s0;
					if(_this121.l != 0) {
						_this121.s0 = _this121.s1;
						_this121.s1 = _this121.s2;
						_this121.s2 = _this121.s3;
						_this121.s3 = _this121.s4;
						_this121.s4 = _this121.s5;
						_this121.s5 = null;
						if(_this121.s6 != null) {
							var _this122 = _this121.s6;
							var out51 = _this122.s0;
							if(_this122.l != 0) {
								_this122.s0 = _this122.s1;
								_this122.s1 = _this122.s2;
								_this122.s2 = _this122.s3;
								_this122.s3 = _this122.s4;
								_this122.s4 = _this122.s5;
								_this122.s5 = null;
								if(_this122.s6 != null) {
									_this122.s5 = _this122.s6.shift();
								}
								_this122.l--;
							}
							_this121.s5 = out51;
						}
						_this121.l--;
					}
					this.lastX = out50;
					var _this123 = this.store;
					var out52 = _this123.s0;
					if(_this123.l != 0) {
						_this123.s0 = _this123.s1;
						_this123.s1 = _this123.s2;
						_this123.s2 = _this123.s3;
						_this123.s3 = _this123.s4;
						_this123.s4 = _this123.s5;
						_this123.s5 = null;
						if(_this123.s6 != null) {
							var _this124 = _this123.s6;
							var out53 = _this124.s0;
							if(_this124.l != 0) {
								_this124.s0 = _this124.s1;
								_this124.s1 = _this124.s2;
								_this124.s2 = _this124.s3;
								_this124.s3 = _this124.s4;
								_this124.s4 = _this124.s5;
								_this124.s5 = null;
								if(_this124.s6 != null) {
									_this124.s5 = _this124.s6.shift();
								}
								_this124.l--;
							}
							_this123.s5 = out53;
						}
						_this123.l--;
					}
					this.lastY = out52;
					this.pathContext.moveTo(this.lastX,this.lastY);
					while(this.store.l > 1) {
						var _this125 = this.store;
						var out54 = _this125.s0;
						if(_this125.l != 0) {
							_this125.s0 = _this125.s1;
							_this125.s1 = _this125.s2;
							_this125.s2 = _this125.s3;
							_this125.s3 = _this125.s4;
							_this125.s4 = _this125.s5;
							_this125.s5 = null;
							if(_this125.s6 != null) {
								var _this126 = _this125.s6;
								var out55 = _this126.s0;
								if(_this126.l != 0) {
									_this126.s0 = _this126.s1;
									_this126.s1 = _this126.s2;
									_this126.s2 = _this126.s3;
									_this126.s3 = _this126.s4;
									_this126.s4 = _this126.s5;
									_this126.s5 = null;
									if(_this126.s6 != null) {
										_this126.s5 = _this126.s6.shift();
									}
									_this126.l--;
								}
								_this125.s5 = out55;
							}
							_this125.l--;
						}
						this.lastX = out54;
						var _this127 = this.store;
						var out56 = _this127.s0;
						if(_this127.l != 0) {
							_this127.s0 = _this127.s1;
							_this127.s1 = _this127.s2;
							_this127.s2 = _this127.s3;
							_this127.s3 = _this127.s4;
							_this127.s4 = _this127.s5;
							_this127.s5 = null;
							if(_this127.s6 != null) {
								var _this128 = _this127.s6;
								var out57 = _this128.s0;
								if(_this128.l != 0) {
									_this128.s0 = _this128.s1;
									_this128.s1 = _this128.s2;
									_this128.s2 = _this128.s3;
									_this128.s3 = _this128.s4;
									_this128.s4 = _this128.s5;
									_this128.s5 = null;
									if(_this128.s6 != null) {
										_this128.s5 = _this128.s6.shift();
									}
									_this128.l--;
								}
								_this127.s5 = out57;
							}
							_this127.l--;
						}
						this.lastY = out56;
						this.pathContext.lineTo(this.lastX,this.lastY);
					}
				}
				break;
			case 81:
				var _this129 = this.store;
				_this129.l = 0;
				_this129.s0 = null;
				_this129.s1 = null;
				_this129.s2 = null;
				_this129.s3 = null;
				_this129.s4 = null;
				_this129.s5 = null;
				_this129.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp5 = "";
				var exit5 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp5 != "") {
							if((this.store.l & 1) == 0) {
								var _this130 = this.store;
								var v33 = parseFloat(temp5);
								switch(_this130.l) {
								case 0:
									_this130.s0 = v33;
									break;
								case 1:
									_this130.s1 = v33;
									break;
								case 2:
									_this130.s2 = v33;
									break;
								case 3:
									_this130.s3 = v33;
									break;
								case 4:
									_this130.s4 = v33;
									break;
								case 5:
									_this130.s5 = v33;
									break;
								default:
									if(_this130.s6 == null) {
										_this130.s6 = new justPath_StoreF6();
									}
									var _this131 = _this130.s6;
									switch(_this131.l) {
									case 0:
										_this131.s0 = v33;
										break;
									case 1:
										_this131.s1 = v33;
										break;
									case 2:
										_this131.s2 = v33;
										break;
									case 3:
										_this131.s3 = v33;
										break;
									case 4:
										_this131.s4 = v33;
										break;
									case 5:
										_this131.s5 = v33;
										break;
									default:
										if(_this131.s6 == null) {
											_this131.s6 = new justPath_StoreF6();
										}
										_this131.s6.push(v33);
									}
									_this131.l++;
								}
								_this130.l++;
							} else {
								var _this132 = this.store;
								var v34 = parseFloat(temp5);
								switch(_this132.l) {
								case 0:
									_this132.s0 = v34;
									break;
								case 1:
									_this132.s1 = v34;
									break;
								case 2:
									_this132.s2 = v34;
									break;
								case 3:
									_this132.s3 = v34;
									break;
								case 4:
									_this132.s4 = v34;
									break;
								case 5:
									_this132.s5 = v34;
									break;
								default:
									if(_this132.s6 == null) {
										_this132.s6 = new justPath_StoreF6();
									}
									var _this133 = _this132.s6;
									switch(_this133.l) {
									case 0:
										_this133.s0 = v34;
										break;
									case 1:
										_this133.s1 = v34;
										break;
									case 2:
										_this133.s2 = v34;
										break;
									case 3:
										_this133.s3 = v34;
										break;
									case 4:
										_this133.s4 = v34;
										break;
									case 5:
										_this133.s5 = v34;
										break;
									default:
										if(_this133.s6 == null) {
											_this133.s6 = new justPath_StoreF6();
										}
										_this133.s6.push(v34);
									}
									_this133.l++;
								}
								_this132.l++;
							}
							temp5 = "";
						}
						break;
					case 45:
						if(temp5 != "") {
							if((this.store.l & 1) == 0) {
								var _this134 = this.store;
								var v35 = parseFloat(temp5);
								switch(_this134.l) {
								case 0:
									_this134.s0 = v35;
									break;
								case 1:
									_this134.s1 = v35;
									break;
								case 2:
									_this134.s2 = v35;
									break;
								case 3:
									_this134.s3 = v35;
									break;
								case 4:
									_this134.s4 = v35;
									break;
								case 5:
									_this134.s5 = v35;
									break;
								default:
									if(_this134.s6 == null) {
										_this134.s6 = new justPath_StoreF6();
									}
									var _this135 = _this134.s6;
									switch(_this135.l) {
									case 0:
										_this135.s0 = v35;
										break;
									case 1:
										_this135.s1 = v35;
										break;
									case 2:
										_this135.s2 = v35;
										break;
									case 3:
										_this135.s3 = v35;
										break;
									case 4:
										_this135.s4 = v35;
										break;
									case 5:
										_this135.s5 = v35;
										break;
									default:
										if(_this135.s6 == null) {
											_this135.s6 = new justPath_StoreF6();
										}
										_this135.s6.push(v35);
									}
									_this135.l++;
								}
								_this134.l++;
							} else {
								var _this136 = this.store;
								var v36 = parseFloat(temp5);
								switch(_this136.l) {
								case 0:
									_this136.s0 = v36;
									break;
								case 1:
									_this136.s1 = v36;
									break;
								case 2:
									_this136.s2 = v36;
									break;
								case 3:
									_this136.s3 = v36;
									break;
								case 4:
									_this136.s4 = v36;
									break;
								case 5:
									_this136.s5 = v36;
									break;
								default:
									if(_this136.s6 == null) {
										_this136.s6 = new justPath_StoreF6();
									}
									var _this137 = _this136.s6;
									switch(_this137.l) {
									case 0:
										_this137.s0 = v36;
										break;
									case 1:
										_this137.s1 = v36;
										break;
									case 2:
										_this137.s2 = v36;
										break;
									case 3:
										_this137.s3 = v36;
										break;
									case 4:
										_this137.s4 = v36;
										break;
									case 5:
										_this137.s5 = v36;
										break;
									default:
										if(_this137.s6 == null) {
											_this137.s6 = new justPath_StoreF6();
										}
										_this137.s6.push(v36);
									}
									_this137.l++;
								}
								_this136.l++;
							}
						}
						temp5 = "-";
						break;
					case 46:
						temp5 += ".";
						break;
					case 48:
						temp5 += "0";
						break;
					case 49:
						temp5 += "1";
						break;
					case 50:
						temp5 += "2";
						break;
					case 51:
						temp5 += "3";
						break;
					case 52:
						temp5 += "4";
						break;
					case 53:
						temp5 += "5";
						break;
					case 54:
						temp5 += "6";
						break;
					case 55:
						temp5 += "7";
						break;
					case 56:
						temp5 += "8";
						break;
					case 57:
						temp5 += "9";
						break;
					default:
						if(temp5 != "") {
							if((this.store.l & 1) == 0) {
								var _this138 = this.store;
								var v37 = parseFloat(temp5);
								switch(_this138.l) {
								case 0:
									_this138.s0 = v37;
									break;
								case 1:
									_this138.s1 = v37;
									break;
								case 2:
									_this138.s2 = v37;
									break;
								case 3:
									_this138.s3 = v37;
									break;
								case 4:
									_this138.s4 = v37;
									break;
								case 5:
									_this138.s5 = v37;
									break;
								default:
									if(_this138.s6 == null) {
										_this138.s6 = new justPath_StoreF6();
									}
									var _this139 = _this138.s6;
									switch(_this139.l) {
									case 0:
										_this139.s0 = v37;
										break;
									case 1:
										_this139.s1 = v37;
										break;
									case 2:
										_this139.s2 = v37;
										break;
									case 3:
										_this139.s3 = v37;
										break;
									case 4:
										_this139.s4 = v37;
										break;
									case 5:
										_this139.s5 = v37;
										break;
									default:
										if(_this139.s6 == null) {
											_this139.s6 = new justPath_StoreF6();
										}
										_this139.s6.push(v37);
									}
									_this139.l++;
								}
								_this138.l++;
							} else {
								var _this140 = this.store;
								var v38 = parseFloat(temp5);
								switch(_this140.l) {
								case 0:
									_this140.s0 = v38;
									break;
								case 1:
									_this140.s1 = v38;
									break;
								case 2:
									_this140.s2 = v38;
									break;
								case 3:
									_this140.s3 = v38;
									break;
								case 4:
									_this140.s4 = v38;
									break;
								case 5:
									_this140.s5 = v38;
									break;
								default:
									if(_this140.s6 == null) {
										_this140.s6 = new justPath_StoreF6();
									}
									var _this141 = _this140.s6;
									switch(_this141.l) {
									case 0:
										_this141.s0 = v38;
										break;
									case 1:
										_this141.s1 = v38;
										break;
									case 2:
										_this141.s2 = v38;
										break;
									case 3:
										_this141.s3 = v38;
										break;
									case 4:
										_this141.s4 = v38;
										break;
									case 5:
										_this141.s5 = v38;
										break;
									default:
										if(_this141.s6 == null) {
											_this141.s6 = new justPath_StoreF6();
										}
										_this141.s6.push(v38);
									}
									_this141.l++;
								}
								_this140.l++;
							}
							temp5 = "";
						}
						this.pos--;
						exit5 = true;
					}
					if(exit5) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 4) {
					this.controlX = this.store.s0;
					this.controlY = this.store.s1;
					this.lastX = this.store.s2;
					this.lastY = this.store.s3;
					this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				} else if(this.store.l > 4) {
					while(this.store.l > 3) {
						var _this142 = this.store;
						var out58 = _this142.s0;
						if(_this142.l != 0) {
							_this142.s0 = _this142.s1;
							_this142.s1 = _this142.s2;
							_this142.s2 = _this142.s3;
							_this142.s3 = _this142.s4;
							_this142.s4 = _this142.s5;
							_this142.s5 = null;
							if(_this142.s6 != null) {
								var _this143 = _this142.s6;
								var out59 = _this143.s0;
								if(_this143.l != 0) {
									_this143.s0 = _this143.s1;
									_this143.s1 = _this143.s2;
									_this143.s2 = _this143.s3;
									_this143.s3 = _this143.s4;
									_this143.s4 = _this143.s5;
									_this143.s5 = null;
									if(_this143.s6 != null) {
										_this143.s5 = _this143.s6.shift();
									}
									_this143.l--;
								}
								_this142.s5 = out59;
							}
							_this142.l--;
						}
						this.controlX = out58;
						var _this144 = this.store;
						var out60 = _this144.s0;
						if(_this144.l != 0) {
							_this144.s0 = _this144.s1;
							_this144.s1 = _this144.s2;
							_this144.s2 = _this144.s3;
							_this144.s3 = _this144.s4;
							_this144.s4 = _this144.s5;
							_this144.s5 = null;
							if(_this144.s6 != null) {
								var _this145 = _this144.s6;
								var out61 = _this145.s0;
								if(_this145.l != 0) {
									_this145.s0 = _this145.s1;
									_this145.s1 = _this145.s2;
									_this145.s2 = _this145.s3;
									_this145.s3 = _this145.s4;
									_this145.s4 = _this145.s5;
									_this145.s5 = null;
									if(_this145.s6 != null) {
										_this145.s5 = _this145.s6.shift();
									}
									_this145.l--;
								}
								_this144.s5 = out61;
							}
							_this144.l--;
						}
						this.controlY = out60;
						var _this146 = this.store;
						var out62 = _this146.s0;
						if(_this146.l != 0) {
							_this146.s0 = _this146.s1;
							_this146.s1 = _this146.s2;
							_this146.s2 = _this146.s3;
							_this146.s3 = _this146.s4;
							_this146.s4 = _this146.s5;
							_this146.s5 = null;
							if(_this146.s6 != null) {
								var _this147 = _this146.s6;
								var out63 = _this147.s0;
								if(_this147.l != 0) {
									_this147.s0 = _this147.s1;
									_this147.s1 = _this147.s2;
									_this147.s2 = _this147.s3;
									_this147.s3 = _this147.s4;
									_this147.s4 = _this147.s5;
									_this147.s5 = null;
									if(_this147.s6 != null) {
										_this147.s5 = _this147.s6.shift();
									}
									_this147.l--;
								}
								_this146.s5 = out63;
							}
							_this146.l--;
						}
						this.lastX = out62;
						var _this148 = this.store;
						var out64 = _this148.s0;
						if(_this148.l != 0) {
							_this148.s0 = _this148.s1;
							_this148.s1 = _this148.s2;
							_this148.s2 = _this148.s3;
							_this148.s3 = _this148.s4;
							_this148.s4 = _this148.s5;
							_this148.s5 = null;
							if(_this148.s6 != null) {
								var _this149 = _this148.s6;
								var out65 = _this149.s0;
								if(_this149.l != 0) {
									_this149.s0 = _this149.s1;
									_this149.s1 = _this149.s2;
									_this149.s2 = _this149.s3;
									_this149.s3 = _this149.s4;
									_this149.s4 = _this149.s5;
									_this149.s5 = null;
									if(_this149.s6 != null) {
										_this149.s5 = _this149.s6.shift();
									}
									_this149.l--;
								}
								_this148.s5 = out65;
							}
							_this148.l--;
						}
						this.lastY = out64;
						this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
					}
				}
				break;
			case 83:
				var _this150 = this.store;
				_this150.l = 0;
				_this150.s0 = null;
				_this150.s1 = null;
				_this150.s2 = null;
				_this150.s3 = null;
				_this150.s4 = null;
				_this150.s5 = null;
				_this150.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp6 = "";
				var exit6 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp6 != "") {
							if((this.store.l & 1) == 0) {
								var _this151 = this.store;
								var v39 = parseFloat(temp6);
								switch(_this151.l) {
								case 0:
									_this151.s0 = v39;
									break;
								case 1:
									_this151.s1 = v39;
									break;
								case 2:
									_this151.s2 = v39;
									break;
								case 3:
									_this151.s3 = v39;
									break;
								case 4:
									_this151.s4 = v39;
									break;
								case 5:
									_this151.s5 = v39;
									break;
								default:
									if(_this151.s6 == null) {
										_this151.s6 = new justPath_StoreF6();
									}
									var _this152 = _this151.s6;
									switch(_this152.l) {
									case 0:
										_this152.s0 = v39;
										break;
									case 1:
										_this152.s1 = v39;
										break;
									case 2:
										_this152.s2 = v39;
										break;
									case 3:
										_this152.s3 = v39;
										break;
									case 4:
										_this152.s4 = v39;
										break;
									case 5:
										_this152.s5 = v39;
										break;
									default:
										if(_this152.s6 == null) {
											_this152.s6 = new justPath_StoreF6();
										}
										_this152.s6.push(v39);
									}
									_this152.l++;
								}
								_this151.l++;
							} else {
								var _this153 = this.store;
								var v40 = parseFloat(temp6);
								switch(_this153.l) {
								case 0:
									_this153.s0 = v40;
									break;
								case 1:
									_this153.s1 = v40;
									break;
								case 2:
									_this153.s2 = v40;
									break;
								case 3:
									_this153.s3 = v40;
									break;
								case 4:
									_this153.s4 = v40;
									break;
								case 5:
									_this153.s5 = v40;
									break;
								default:
									if(_this153.s6 == null) {
										_this153.s6 = new justPath_StoreF6();
									}
									var _this154 = _this153.s6;
									switch(_this154.l) {
									case 0:
										_this154.s0 = v40;
										break;
									case 1:
										_this154.s1 = v40;
										break;
									case 2:
										_this154.s2 = v40;
										break;
									case 3:
										_this154.s3 = v40;
										break;
									case 4:
										_this154.s4 = v40;
										break;
									case 5:
										_this154.s5 = v40;
										break;
									default:
										if(_this154.s6 == null) {
											_this154.s6 = new justPath_StoreF6();
										}
										_this154.s6.push(v40);
									}
									_this154.l++;
								}
								_this153.l++;
							}
							temp6 = "";
						}
						break;
					case 45:
						if(temp6 != "") {
							if((this.store.l & 1) == 0) {
								var _this155 = this.store;
								var v41 = parseFloat(temp6);
								switch(_this155.l) {
								case 0:
									_this155.s0 = v41;
									break;
								case 1:
									_this155.s1 = v41;
									break;
								case 2:
									_this155.s2 = v41;
									break;
								case 3:
									_this155.s3 = v41;
									break;
								case 4:
									_this155.s4 = v41;
									break;
								case 5:
									_this155.s5 = v41;
									break;
								default:
									if(_this155.s6 == null) {
										_this155.s6 = new justPath_StoreF6();
									}
									var _this156 = _this155.s6;
									switch(_this156.l) {
									case 0:
										_this156.s0 = v41;
										break;
									case 1:
										_this156.s1 = v41;
										break;
									case 2:
										_this156.s2 = v41;
										break;
									case 3:
										_this156.s3 = v41;
										break;
									case 4:
										_this156.s4 = v41;
										break;
									case 5:
										_this156.s5 = v41;
										break;
									default:
										if(_this156.s6 == null) {
											_this156.s6 = new justPath_StoreF6();
										}
										_this156.s6.push(v41);
									}
									_this156.l++;
								}
								_this155.l++;
							} else {
								var _this157 = this.store;
								var v42 = parseFloat(temp6);
								switch(_this157.l) {
								case 0:
									_this157.s0 = v42;
									break;
								case 1:
									_this157.s1 = v42;
									break;
								case 2:
									_this157.s2 = v42;
									break;
								case 3:
									_this157.s3 = v42;
									break;
								case 4:
									_this157.s4 = v42;
									break;
								case 5:
									_this157.s5 = v42;
									break;
								default:
									if(_this157.s6 == null) {
										_this157.s6 = new justPath_StoreF6();
									}
									var _this158 = _this157.s6;
									switch(_this158.l) {
									case 0:
										_this158.s0 = v42;
										break;
									case 1:
										_this158.s1 = v42;
										break;
									case 2:
										_this158.s2 = v42;
										break;
									case 3:
										_this158.s3 = v42;
										break;
									case 4:
										_this158.s4 = v42;
										break;
									case 5:
										_this158.s5 = v42;
										break;
									default:
										if(_this158.s6 == null) {
											_this158.s6 = new justPath_StoreF6();
										}
										_this158.s6.push(v42);
									}
									_this158.l++;
								}
								_this157.l++;
							}
						}
						temp6 = "-";
						break;
					case 46:
						temp6 += ".";
						break;
					case 48:
						temp6 += "0";
						break;
					case 49:
						temp6 += "1";
						break;
					case 50:
						temp6 += "2";
						break;
					case 51:
						temp6 += "3";
						break;
					case 52:
						temp6 += "4";
						break;
					case 53:
						temp6 += "5";
						break;
					case 54:
						temp6 += "6";
						break;
					case 55:
						temp6 += "7";
						break;
					case 56:
						temp6 += "8";
						break;
					case 57:
						temp6 += "9";
						break;
					default:
						if(temp6 != "") {
							if((this.store.l & 1) == 0) {
								var _this159 = this.store;
								var v43 = parseFloat(temp6);
								switch(_this159.l) {
								case 0:
									_this159.s0 = v43;
									break;
								case 1:
									_this159.s1 = v43;
									break;
								case 2:
									_this159.s2 = v43;
									break;
								case 3:
									_this159.s3 = v43;
									break;
								case 4:
									_this159.s4 = v43;
									break;
								case 5:
									_this159.s5 = v43;
									break;
								default:
									if(_this159.s6 == null) {
										_this159.s6 = new justPath_StoreF6();
									}
									var _this160 = _this159.s6;
									switch(_this160.l) {
									case 0:
										_this160.s0 = v43;
										break;
									case 1:
										_this160.s1 = v43;
										break;
									case 2:
										_this160.s2 = v43;
										break;
									case 3:
										_this160.s3 = v43;
										break;
									case 4:
										_this160.s4 = v43;
										break;
									case 5:
										_this160.s5 = v43;
										break;
									default:
										if(_this160.s6 == null) {
											_this160.s6 = new justPath_StoreF6();
										}
										_this160.s6.push(v43);
									}
									_this160.l++;
								}
								_this159.l++;
							} else {
								var _this161 = this.store;
								var v44 = parseFloat(temp6);
								switch(_this161.l) {
								case 0:
									_this161.s0 = v44;
									break;
								case 1:
									_this161.s1 = v44;
									break;
								case 2:
									_this161.s2 = v44;
									break;
								case 3:
									_this161.s3 = v44;
									break;
								case 4:
									_this161.s4 = v44;
									break;
								case 5:
									_this161.s5 = v44;
									break;
								default:
									if(_this161.s6 == null) {
										_this161.s6 = new justPath_StoreF6();
									}
									var _this162 = _this161.s6;
									switch(_this162.l) {
									case 0:
										_this162.s0 = v44;
										break;
									case 1:
										_this162.s1 = v44;
										break;
									case 2:
										_this162.s2 = v44;
										break;
									case 3:
										_this162.s3 = v44;
										break;
									case 4:
										_this162.s4 = v44;
										break;
									case 5:
										_this162.s5 = v44;
										break;
									default:
										if(_this162.s6 == null) {
											_this162.s6 = new justPath_StoreF6();
										}
										_this162.s6.push(v44);
									}
									_this162.l++;
								}
								_this161.l++;
							}
							temp6 = "";
						}
						this.pos--;
						exit6 = true;
					}
					if(exit6) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 4) {
					var firstX1 = this.store.s0;
					var firstY1 = this.store.s1;
					this.controlX = 2 * this.lastX - this.controlX;
					this.controlY = 2 * this.lastY - this.controlY;
					var endX = this.store.s2;
					var endY = this.store.s3;
					this.pathContext.curveTo(this.controlX,this.controlY,firstX1,firstY1,endX,endY);
					this.controlX = this.store.s0;
					this.controlY = this.store.s1;
					this.lastX = endX;
					this.lastY = endY;
				} else if(this.store.l > 4) {
					while(this.store.l > 3) {
						var _this163 = this.store;
						var out66 = _this163.s0;
						if(_this163.l != 0) {
							_this163.s0 = _this163.s1;
							_this163.s1 = _this163.s2;
							_this163.s2 = _this163.s3;
							_this163.s3 = _this163.s4;
							_this163.s4 = _this163.s5;
							_this163.s5 = null;
							if(_this163.s6 != null) {
								var _this164 = _this163.s6;
								var out67 = _this164.s0;
								if(_this164.l != 0) {
									_this164.s0 = _this164.s1;
									_this164.s1 = _this164.s2;
									_this164.s2 = _this164.s3;
									_this164.s3 = _this164.s4;
									_this164.s4 = _this164.s5;
									_this164.s5 = null;
									if(_this164.s6 != null) {
										_this164.s5 = _this164.s6.shift();
									}
									_this164.l--;
								}
								_this163.s5 = out67;
							}
							_this163.l--;
						}
						var firstX2 = out66;
						var _this165 = this.store;
						var out68 = _this165.s0;
						if(_this165.l != 0) {
							_this165.s0 = _this165.s1;
							_this165.s1 = _this165.s2;
							_this165.s2 = _this165.s3;
							_this165.s3 = _this165.s4;
							_this165.s4 = _this165.s5;
							_this165.s5 = null;
							if(_this165.s6 != null) {
								var _this166 = _this165.s6;
								var out69 = _this166.s0;
								if(_this166.l != 0) {
									_this166.s0 = _this166.s1;
									_this166.s1 = _this166.s2;
									_this166.s2 = _this166.s3;
									_this166.s3 = _this166.s4;
									_this166.s4 = _this166.s5;
									_this166.s5 = null;
									if(_this166.s6 != null) {
										_this166.s5 = _this166.s6.shift();
									}
									_this166.l--;
								}
								_this165.s5 = out69;
							}
							_this165.l--;
						}
						var firstY2 = out68;
						this.controlX = 2 * this.lastX - this.controlX;
						this.controlY = 2 * this.lastY - this.controlY;
						var _this167 = this.store;
						var out70 = _this167.s0;
						if(_this167.l != 0) {
							_this167.s0 = _this167.s1;
							_this167.s1 = _this167.s2;
							_this167.s2 = _this167.s3;
							_this167.s3 = _this167.s4;
							_this167.s4 = _this167.s5;
							_this167.s5 = null;
							if(_this167.s6 != null) {
								var _this168 = _this167.s6;
								var out71 = _this168.s0;
								if(_this168.l != 0) {
									_this168.s0 = _this168.s1;
									_this168.s1 = _this168.s2;
									_this168.s2 = _this168.s3;
									_this168.s3 = _this168.s4;
									_this168.s4 = _this168.s5;
									_this168.s5 = null;
									if(_this168.s6 != null) {
										_this168.s5 = _this168.s6.shift();
									}
									_this168.l--;
								}
								_this167.s5 = out71;
							}
							_this167.l--;
						}
						this.lastX = out70;
						var _this169 = this.store;
						var out72 = _this169.s0;
						if(_this169.l != 0) {
							_this169.s0 = _this169.s1;
							_this169.s1 = _this169.s2;
							_this169.s2 = _this169.s3;
							_this169.s3 = _this169.s4;
							_this169.s4 = _this169.s5;
							_this169.s5 = null;
							if(_this169.s6 != null) {
								var _this170 = _this169.s6;
								var out73 = _this170.s0;
								if(_this170.l != 0) {
									_this170.s0 = _this170.s1;
									_this170.s1 = _this170.s2;
									_this170.s2 = _this170.s3;
									_this170.s3 = _this170.s4;
									_this170.s4 = _this170.s5;
									_this170.s5 = null;
									if(_this170.s6 != null) {
										_this170.s5 = _this170.s6.shift();
									}
									_this170.l--;
								}
								_this169.s5 = out73;
							}
							_this169.l--;
						}
						this.lastY = out72;
						this.pathContext.curveTo(this.controlX,this.controlY,firstX2,firstY2,this.lastX,this.lastY);
						this.controlX = firstX2;
						this.controlY = firstY2;
					}
				}
				break;
			case 84:
				var _this171 = this.store;
				_this171.l = 0;
				_this171.s0 = null;
				_this171.s1 = null;
				_this171.s2 = null;
				_this171.s3 = null;
				_this171.s4 = null;
				_this171.s5 = null;
				_this171.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp7 = "";
				var exit7 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp7 != "") {
							if((this.store.l & 1) == 0) {
								var _this172 = this.store;
								var v45 = parseFloat(temp7);
								switch(_this172.l) {
								case 0:
									_this172.s0 = v45;
									break;
								case 1:
									_this172.s1 = v45;
									break;
								case 2:
									_this172.s2 = v45;
									break;
								case 3:
									_this172.s3 = v45;
									break;
								case 4:
									_this172.s4 = v45;
									break;
								case 5:
									_this172.s5 = v45;
									break;
								default:
									if(_this172.s6 == null) {
										_this172.s6 = new justPath_StoreF6();
									}
									var _this173 = _this172.s6;
									switch(_this173.l) {
									case 0:
										_this173.s0 = v45;
										break;
									case 1:
										_this173.s1 = v45;
										break;
									case 2:
										_this173.s2 = v45;
										break;
									case 3:
										_this173.s3 = v45;
										break;
									case 4:
										_this173.s4 = v45;
										break;
									case 5:
										_this173.s5 = v45;
										break;
									default:
										if(_this173.s6 == null) {
											_this173.s6 = new justPath_StoreF6();
										}
										_this173.s6.push(v45);
									}
									_this173.l++;
								}
								_this172.l++;
							} else {
								var _this174 = this.store;
								var v46 = parseFloat(temp7);
								switch(_this174.l) {
								case 0:
									_this174.s0 = v46;
									break;
								case 1:
									_this174.s1 = v46;
									break;
								case 2:
									_this174.s2 = v46;
									break;
								case 3:
									_this174.s3 = v46;
									break;
								case 4:
									_this174.s4 = v46;
									break;
								case 5:
									_this174.s5 = v46;
									break;
								default:
									if(_this174.s6 == null) {
										_this174.s6 = new justPath_StoreF6();
									}
									var _this175 = _this174.s6;
									switch(_this175.l) {
									case 0:
										_this175.s0 = v46;
										break;
									case 1:
										_this175.s1 = v46;
										break;
									case 2:
										_this175.s2 = v46;
										break;
									case 3:
										_this175.s3 = v46;
										break;
									case 4:
										_this175.s4 = v46;
										break;
									case 5:
										_this175.s5 = v46;
										break;
									default:
										if(_this175.s6 == null) {
											_this175.s6 = new justPath_StoreF6();
										}
										_this175.s6.push(v46);
									}
									_this175.l++;
								}
								_this174.l++;
							}
							temp7 = "";
						}
						break;
					case 45:
						if(temp7 != "") {
							if((this.store.l & 1) == 0) {
								var _this176 = this.store;
								var v47 = parseFloat(temp7);
								switch(_this176.l) {
								case 0:
									_this176.s0 = v47;
									break;
								case 1:
									_this176.s1 = v47;
									break;
								case 2:
									_this176.s2 = v47;
									break;
								case 3:
									_this176.s3 = v47;
									break;
								case 4:
									_this176.s4 = v47;
									break;
								case 5:
									_this176.s5 = v47;
									break;
								default:
									if(_this176.s6 == null) {
										_this176.s6 = new justPath_StoreF6();
									}
									var _this177 = _this176.s6;
									switch(_this177.l) {
									case 0:
										_this177.s0 = v47;
										break;
									case 1:
										_this177.s1 = v47;
										break;
									case 2:
										_this177.s2 = v47;
										break;
									case 3:
										_this177.s3 = v47;
										break;
									case 4:
										_this177.s4 = v47;
										break;
									case 5:
										_this177.s5 = v47;
										break;
									default:
										if(_this177.s6 == null) {
											_this177.s6 = new justPath_StoreF6();
										}
										_this177.s6.push(v47);
									}
									_this177.l++;
								}
								_this176.l++;
							} else {
								var _this178 = this.store;
								var v48 = parseFloat(temp7);
								switch(_this178.l) {
								case 0:
									_this178.s0 = v48;
									break;
								case 1:
									_this178.s1 = v48;
									break;
								case 2:
									_this178.s2 = v48;
									break;
								case 3:
									_this178.s3 = v48;
									break;
								case 4:
									_this178.s4 = v48;
									break;
								case 5:
									_this178.s5 = v48;
									break;
								default:
									if(_this178.s6 == null) {
										_this178.s6 = new justPath_StoreF6();
									}
									var _this179 = _this178.s6;
									switch(_this179.l) {
									case 0:
										_this179.s0 = v48;
										break;
									case 1:
										_this179.s1 = v48;
										break;
									case 2:
										_this179.s2 = v48;
										break;
									case 3:
										_this179.s3 = v48;
										break;
									case 4:
										_this179.s4 = v48;
										break;
									case 5:
										_this179.s5 = v48;
										break;
									default:
										if(_this179.s6 == null) {
											_this179.s6 = new justPath_StoreF6();
										}
										_this179.s6.push(v48);
									}
									_this179.l++;
								}
								_this178.l++;
							}
						}
						temp7 = "-";
						break;
					case 46:
						temp7 += ".";
						break;
					case 48:
						temp7 += "0";
						break;
					case 49:
						temp7 += "1";
						break;
					case 50:
						temp7 += "2";
						break;
					case 51:
						temp7 += "3";
						break;
					case 52:
						temp7 += "4";
						break;
					case 53:
						temp7 += "5";
						break;
					case 54:
						temp7 += "6";
						break;
					case 55:
						temp7 += "7";
						break;
					case 56:
						temp7 += "8";
						break;
					case 57:
						temp7 += "9";
						break;
					default:
						if(temp7 != "") {
							if((this.store.l & 1) == 0) {
								var _this180 = this.store;
								var v49 = parseFloat(temp7);
								switch(_this180.l) {
								case 0:
									_this180.s0 = v49;
									break;
								case 1:
									_this180.s1 = v49;
									break;
								case 2:
									_this180.s2 = v49;
									break;
								case 3:
									_this180.s3 = v49;
									break;
								case 4:
									_this180.s4 = v49;
									break;
								case 5:
									_this180.s5 = v49;
									break;
								default:
									if(_this180.s6 == null) {
										_this180.s6 = new justPath_StoreF6();
									}
									var _this181 = _this180.s6;
									switch(_this181.l) {
									case 0:
										_this181.s0 = v49;
										break;
									case 1:
										_this181.s1 = v49;
										break;
									case 2:
										_this181.s2 = v49;
										break;
									case 3:
										_this181.s3 = v49;
										break;
									case 4:
										_this181.s4 = v49;
										break;
									case 5:
										_this181.s5 = v49;
										break;
									default:
										if(_this181.s6 == null) {
											_this181.s6 = new justPath_StoreF6();
										}
										_this181.s6.push(v49);
									}
									_this181.l++;
								}
								_this180.l++;
							} else {
								var _this182 = this.store;
								var v50 = parseFloat(temp7);
								switch(_this182.l) {
								case 0:
									_this182.s0 = v50;
									break;
								case 1:
									_this182.s1 = v50;
									break;
								case 2:
									_this182.s2 = v50;
									break;
								case 3:
									_this182.s3 = v50;
									break;
								case 4:
									_this182.s4 = v50;
									break;
								case 5:
									_this182.s5 = v50;
									break;
								default:
									if(_this182.s6 == null) {
										_this182.s6 = new justPath_StoreF6();
									}
									var _this183 = _this182.s6;
									switch(_this183.l) {
									case 0:
										_this183.s0 = v50;
										break;
									case 1:
										_this183.s1 = v50;
										break;
									case 2:
										_this183.s2 = v50;
										break;
									case 3:
										_this183.s3 = v50;
										break;
									case 4:
										_this183.s4 = v50;
										break;
									case 5:
										_this183.s5 = v50;
										break;
									default:
										if(_this183.s6 == null) {
											_this183.s6 = new justPath_StoreF6();
										}
										_this183.s6.push(v50);
									}
									_this183.l++;
								}
								_this182.l++;
							}
							temp7 = "";
						}
						this.pos--;
						exit7 = true;
					}
					if(exit7) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 2) {
					this.controlX = 2 * this.lastX - this.controlX;
					this.controlY = 2 * this.lastY - this.controlY;
					this.lastX = this.store.s0;
					this.lastY = this.store.s1;
					this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				} else if(this.store.l > 2) {
					while(this.store.l > 1) {
						this.controlX = 2 * this.lastX - this.controlX;
						this.controlY = 2 * this.lastY - this.controlY;
						var _this184 = this.store;
						var out74 = _this184.s0;
						if(_this184.l != 0) {
							_this184.s0 = _this184.s1;
							_this184.s1 = _this184.s2;
							_this184.s2 = _this184.s3;
							_this184.s3 = _this184.s4;
							_this184.s4 = _this184.s5;
							_this184.s5 = null;
							if(_this184.s6 != null) {
								var _this185 = _this184.s6;
								var out75 = _this185.s0;
								if(_this185.l != 0) {
									_this185.s0 = _this185.s1;
									_this185.s1 = _this185.s2;
									_this185.s2 = _this185.s3;
									_this185.s3 = _this185.s4;
									_this185.s4 = _this185.s5;
									_this185.s5 = null;
									if(_this185.s6 != null) {
										_this185.s5 = _this185.s6.shift();
									}
									_this185.l--;
								}
								_this184.s5 = out75;
							}
							_this184.l--;
						}
						this.lastX = out74;
						var _this186 = this.store;
						var out76 = _this186.s0;
						if(_this186.l != 0) {
							_this186.s0 = _this186.s1;
							_this186.s1 = _this186.s2;
							_this186.s2 = _this186.s3;
							_this186.s3 = _this186.s4;
							_this186.s4 = _this186.s5;
							_this186.s5 = null;
							if(_this186.s6 != null) {
								var _this187 = _this186.s6;
								var out77 = _this187.s0;
								if(_this187.l != 0) {
									_this187.s0 = _this187.s1;
									_this187.s1 = _this187.s2;
									_this187.s2 = _this187.s3;
									_this187.s3 = _this187.s4;
									_this187.s4 = _this187.s5;
									_this187.s5 = null;
									if(_this187.s6 != null) {
										_this187.s5 = _this187.s6.shift();
									}
									_this187.l--;
								}
								_this186.s5 = out77;
							}
							_this186.l--;
						}
						this.lastY = out76;
						this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
					}
				}
				break;
			case 86:
				var process1 = false;
				if(process1 == null) {
					process1 = true;
				}
				var _this188 = this.store;
				_this188.l = 0;
				_this188.s0 = null;
				_this188.s1 = null;
				_this188.s2 = null;
				_this188.s3 = null;
				_this188.s4 = null;
				_this188.s5 = null;
				_this188.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp8 = "";
				var exit8 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp8 != "") {
							if(process1) {
								if((this.store.l & 1) == 0) {
									var _this189 = this.store;
									var v51 = parseFloat(temp8);
									switch(_this189.l) {
									case 0:
										_this189.s0 = v51;
										break;
									case 1:
										_this189.s1 = v51;
										break;
									case 2:
										_this189.s2 = v51;
										break;
									case 3:
										_this189.s3 = v51;
										break;
									case 4:
										_this189.s4 = v51;
										break;
									case 5:
										_this189.s5 = v51;
										break;
									default:
										if(_this189.s6 == null) {
											_this189.s6 = new justPath_StoreF6();
										}
										var _this190 = _this189.s6;
										switch(_this190.l) {
										case 0:
											_this190.s0 = v51;
											break;
										case 1:
											_this190.s1 = v51;
											break;
										case 2:
											_this190.s2 = v51;
											break;
										case 3:
											_this190.s3 = v51;
											break;
										case 4:
											_this190.s4 = v51;
											break;
										case 5:
											_this190.s5 = v51;
											break;
										default:
											if(_this190.s6 == null) {
												_this190.s6 = new justPath_StoreF6();
											}
											_this190.s6.push(v51);
										}
										_this190.l++;
									}
									_this189.l++;
								} else {
									var _this191 = this.store;
									var v52 = parseFloat(temp8);
									switch(_this191.l) {
									case 0:
										_this191.s0 = v52;
										break;
									case 1:
										_this191.s1 = v52;
										break;
									case 2:
										_this191.s2 = v52;
										break;
									case 3:
										_this191.s3 = v52;
										break;
									case 4:
										_this191.s4 = v52;
										break;
									case 5:
										_this191.s5 = v52;
										break;
									default:
										if(_this191.s6 == null) {
											_this191.s6 = new justPath_StoreF6();
										}
										var _this192 = _this191.s6;
										switch(_this192.l) {
										case 0:
											_this192.s0 = v52;
											break;
										case 1:
											_this192.s1 = v52;
											break;
										case 2:
											_this192.s2 = v52;
											break;
										case 3:
											_this192.s3 = v52;
											break;
										case 4:
											_this192.s4 = v52;
											break;
										case 5:
											_this192.s5 = v52;
											break;
										default:
											if(_this192.s6 == null) {
												_this192.s6 = new justPath_StoreF6();
											}
											_this192.s6.push(v52);
										}
										_this192.l++;
									}
									_this191.l++;
								}
							} else {
								var _this193 = this.store;
								var v53 = parseFloat(temp8);
								switch(_this193.l) {
								case 0:
									_this193.s0 = v53;
									break;
								case 1:
									_this193.s1 = v53;
									break;
								case 2:
									_this193.s2 = v53;
									break;
								case 3:
									_this193.s3 = v53;
									break;
								case 4:
									_this193.s4 = v53;
									break;
								case 5:
									_this193.s5 = v53;
									break;
								default:
									if(_this193.s6 == null) {
										_this193.s6 = new justPath_StoreF6();
									}
									var _this194 = _this193.s6;
									switch(_this194.l) {
									case 0:
										_this194.s0 = v53;
										break;
									case 1:
										_this194.s1 = v53;
										break;
									case 2:
										_this194.s2 = v53;
										break;
									case 3:
										_this194.s3 = v53;
										break;
									case 4:
										_this194.s4 = v53;
										break;
									case 5:
										_this194.s5 = v53;
										break;
									default:
										if(_this194.s6 == null) {
											_this194.s6 = new justPath_StoreF6();
										}
										_this194.s6.push(v53);
									}
									_this194.l++;
								}
								_this193.l++;
							}
							temp8 = "";
						}
						break;
					case 45:
						if(temp8 != "") {
							if(process1) {
								if((this.store.l & 1) == 0) {
									var _this195 = this.store;
									var v54 = parseFloat(temp8);
									switch(_this195.l) {
									case 0:
										_this195.s0 = v54;
										break;
									case 1:
										_this195.s1 = v54;
										break;
									case 2:
										_this195.s2 = v54;
										break;
									case 3:
										_this195.s3 = v54;
										break;
									case 4:
										_this195.s4 = v54;
										break;
									case 5:
										_this195.s5 = v54;
										break;
									default:
										if(_this195.s6 == null) {
											_this195.s6 = new justPath_StoreF6();
										}
										var _this196 = _this195.s6;
										switch(_this196.l) {
										case 0:
											_this196.s0 = v54;
											break;
										case 1:
											_this196.s1 = v54;
											break;
										case 2:
											_this196.s2 = v54;
											break;
										case 3:
											_this196.s3 = v54;
											break;
										case 4:
											_this196.s4 = v54;
											break;
										case 5:
											_this196.s5 = v54;
											break;
										default:
											if(_this196.s6 == null) {
												_this196.s6 = new justPath_StoreF6();
											}
											_this196.s6.push(v54);
										}
										_this196.l++;
									}
									_this195.l++;
								} else {
									var _this197 = this.store;
									var v55 = parseFloat(temp8);
									switch(_this197.l) {
									case 0:
										_this197.s0 = v55;
										break;
									case 1:
										_this197.s1 = v55;
										break;
									case 2:
										_this197.s2 = v55;
										break;
									case 3:
										_this197.s3 = v55;
										break;
									case 4:
										_this197.s4 = v55;
										break;
									case 5:
										_this197.s5 = v55;
										break;
									default:
										if(_this197.s6 == null) {
											_this197.s6 = new justPath_StoreF6();
										}
										var _this198 = _this197.s6;
										switch(_this198.l) {
										case 0:
											_this198.s0 = v55;
											break;
										case 1:
											_this198.s1 = v55;
											break;
										case 2:
											_this198.s2 = v55;
											break;
										case 3:
											_this198.s3 = v55;
											break;
										case 4:
											_this198.s4 = v55;
											break;
										case 5:
											_this198.s5 = v55;
											break;
										default:
											if(_this198.s6 == null) {
												_this198.s6 = new justPath_StoreF6();
											}
											_this198.s6.push(v55);
										}
										_this198.l++;
									}
									_this197.l++;
								}
							} else {
								var _this199 = this.store;
								var v56 = parseFloat(temp8);
								switch(_this199.l) {
								case 0:
									_this199.s0 = v56;
									break;
								case 1:
									_this199.s1 = v56;
									break;
								case 2:
									_this199.s2 = v56;
									break;
								case 3:
									_this199.s3 = v56;
									break;
								case 4:
									_this199.s4 = v56;
									break;
								case 5:
									_this199.s5 = v56;
									break;
								default:
									if(_this199.s6 == null) {
										_this199.s6 = new justPath_StoreF6();
									}
									var _this200 = _this199.s6;
									switch(_this200.l) {
									case 0:
										_this200.s0 = v56;
										break;
									case 1:
										_this200.s1 = v56;
										break;
									case 2:
										_this200.s2 = v56;
										break;
									case 3:
										_this200.s3 = v56;
										break;
									case 4:
										_this200.s4 = v56;
										break;
									case 5:
										_this200.s5 = v56;
										break;
									default:
										if(_this200.s6 == null) {
											_this200.s6 = new justPath_StoreF6();
										}
										_this200.s6.push(v56);
									}
									_this200.l++;
								}
								_this199.l++;
							}
						}
						temp8 = "-";
						break;
					case 46:
						temp8 += ".";
						break;
					case 48:
						temp8 += "0";
						break;
					case 49:
						temp8 += "1";
						break;
					case 50:
						temp8 += "2";
						break;
					case 51:
						temp8 += "3";
						break;
					case 52:
						temp8 += "4";
						break;
					case 53:
						temp8 += "5";
						break;
					case 54:
						temp8 += "6";
						break;
					case 55:
						temp8 += "7";
						break;
					case 56:
						temp8 += "8";
						break;
					case 57:
						temp8 += "9";
						break;
					default:
						if(temp8 != "") {
							if(process1) {
								if((this.store.l & 1) == 0) {
									var _this201 = this.store;
									var v57 = parseFloat(temp8);
									switch(_this201.l) {
									case 0:
										_this201.s0 = v57;
										break;
									case 1:
										_this201.s1 = v57;
										break;
									case 2:
										_this201.s2 = v57;
										break;
									case 3:
										_this201.s3 = v57;
										break;
									case 4:
										_this201.s4 = v57;
										break;
									case 5:
										_this201.s5 = v57;
										break;
									default:
										if(_this201.s6 == null) {
											_this201.s6 = new justPath_StoreF6();
										}
										var _this202 = _this201.s6;
										switch(_this202.l) {
										case 0:
											_this202.s0 = v57;
											break;
										case 1:
											_this202.s1 = v57;
											break;
										case 2:
											_this202.s2 = v57;
											break;
										case 3:
											_this202.s3 = v57;
											break;
										case 4:
											_this202.s4 = v57;
											break;
										case 5:
											_this202.s5 = v57;
											break;
										default:
											if(_this202.s6 == null) {
												_this202.s6 = new justPath_StoreF6();
											}
											_this202.s6.push(v57);
										}
										_this202.l++;
									}
									_this201.l++;
								} else {
									var _this203 = this.store;
									var v58 = parseFloat(temp8);
									switch(_this203.l) {
									case 0:
										_this203.s0 = v58;
										break;
									case 1:
										_this203.s1 = v58;
										break;
									case 2:
										_this203.s2 = v58;
										break;
									case 3:
										_this203.s3 = v58;
										break;
									case 4:
										_this203.s4 = v58;
										break;
									case 5:
										_this203.s5 = v58;
										break;
									default:
										if(_this203.s6 == null) {
											_this203.s6 = new justPath_StoreF6();
										}
										var _this204 = _this203.s6;
										switch(_this204.l) {
										case 0:
											_this204.s0 = v58;
											break;
										case 1:
											_this204.s1 = v58;
											break;
										case 2:
											_this204.s2 = v58;
											break;
										case 3:
											_this204.s3 = v58;
											break;
										case 4:
											_this204.s4 = v58;
											break;
										case 5:
											_this204.s5 = v58;
											break;
										default:
											if(_this204.s6 == null) {
												_this204.s6 = new justPath_StoreF6();
											}
											_this204.s6.push(v58);
										}
										_this204.l++;
									}
									_this203.l++;
								}
							} else {
								var _this205 = this.store;
								var v59 = parseFloat(temp8);
								switch(_this205.l) {
								case 0:
									_this205.s0 = v59;
									break;
								case 1:
									_this205.s1 = v59;
									break;
								case 2:
									_this205.s2 = v59;
									break;
								case 3:
									_this205.s3 = v59;
									break;
								case 4:
									_this205.s4 = v59;
									break;
								case 5:
									_this205.s5 = v59;
									break;
								default:
									if(_this205.s6 == null) {
										_this205.s6 = new justPath_StoreF6();
									}
									var _this206 = _this205.s6;
									switch(_this206.l) {
									case 0:
										_this206.s0 = v59;
										break;
									case 1:
										_this206.s1 = v59;
										break;
									case 2:
										_this206.s2 = v59;
										break;
									case 3:
										_this206.s3 = v59;
										break;
									case 4:
										_this206.s4 = v59;
										break;
									case 5:
										_this206.s5 = v59;
										break;
									default:
										if(_this206.s6 == null) {
											_this206.s6 = new justPath_StoreF6();
										}
										_this206.s6.push(v59);
									}
									_this206.l++;
								}
								_this205.l++;
							}
							temp8 = "";
						}
						this.pos--;
						exit8 = true;
					}
					if(exit8) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 1) {
					var _this207 = this.store;
					var out78 = _this207.s0;
					if(_this207.l != 0) {
						_this207.s0 = _this207.s1;
						_this207.s1 = _this207.s2;
						_this207.s2 = _this207.s3;
						_this207.s3 = _this207.s4;
						_this207.s4 = _this207.s5;
						_this207.s5 = null;
						if(_this207.s6 != null) {
							var _this208 = _this207.s6;
							var out79 = _this208.s0;
							if(_this208.l != 0) {
								_this208.s0 = _this208.s1;
								_this208.s1 = _this208.s2;
								_this208.s2 = _this208.s3;
								_this208.s3 = _this208.s4;
								_this208.s4 = _this208.s5;
								_this208.s5 = null;
								if(_this208.s6 != null) {
									_this208.s5 = _this208.s6.shift();
								}
								_this208.l--;
							}
							_this207.s5 = out79;
						}
						_this207.l--;
					}
					this.lastY = out78;
					this.pathContext.lineTo(this.lastX,this.lastY);
				} else if(this.store.l > 1) {
					while(this.store.l > 0) {
						var _this209 = this.store;
						var out80 = _this209.s0;
						if(_this209.l != 0) {
							_this209.s0 = _this209.s1;
							_this209.s1 = _this209.s2;
							_this209.s2 = _this209.s3;
							_this209.s3 = _this209.s4;
							_this209.s4 = _this209.s5;
							_this209.s5 = null;
							if(_this209.s6 != null) {
								var _this210 = _this209.s6;
								var out81 = _this210.s0;
								if(_this210.l != 0) {
									_this210.s0 = _this210.s1;
									_this210.s1 = _this210.s2;
									_this210.s2 = _this210.s3;
									_this210.s3 = _this210.s4;
									_this210.s4 = _this210.s5;
									_this210.s5 = null;
									if(_this210.s6 != null) {
										_this210.s5 = _this210.s6.shift();
									}
									_this210.l--;
								}
								_this209.s5 = out81;
							}
							_this209.l--;
						}
						this.lastY = out80;
						this.pathContext.lineTo(this.lastX,this.lastY);
					}
				}
				break;
			case 90:case 122:
				this.lastX = 0;
				this.lastY = 0;
				break;
			case 97:
				var _this211 = this.store;
				_this211.l = 0;
				_this211.s0 = null;
				_this211.s1 = null;
				_this211.s2 = null;
				_this211.s3 = null;
				_this211.s4 = null;
				_this211.s5 = null;
				_this211.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp9 = "";
				var exit9 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp9 != "") {
							if((this.store.l & 1) == 0) {
								var _this212 = this.store;
								var v60 = parseFloat(temp9);
								switch(_this212.l) {
								case 0:
									_this212.s0 = v60;
									break;
								case 1:
									_this212.s1 = v60;
									break;
								case 2:
									_this212.s2 = v60;
									break;
								case 3:
									_this212.s3 = v60;
									break;
								case 4:
									_this212.s4 = v60;
									break;
								case 5:
									_this212.s5 = v60;
									break;
								default:
									if(_this212.s6 == null) {
										_this212.s6 = new justPath_StoreF6();
									}
									var _this213 = _this212.s6;
									switch(_this213.l) {
									case 0:
										_this213.s0 = v60;
										break;
									case 1:
										_this213.s1 = v60;
										break;
									case 2:
										_this213.s2 = v60;
										break;
									case 3:
										_this213.s3 = v60;
										break;
									case 4:
										_this213.s4 = v60;
										break;
									case 5:
										_this213.s5 = v60;
										break;
									default:
										if(_this213.s6 == null) {
											_this213.s6 = new justPath_StoreF6();
										}
										_this213.s6.push(v60);
									}
									_this213.l++;
								}
								_this212.l++;
							} else {
								var _this214 = this.store;
								var v61 = parseFloat(temp9);
								switch(_this214.l) {
								case 0:
									_this214.s0 = v61;
									break;
								case 1:
									_this214.s1 = v61;
									break;
								case 2:
									_this214.s2 = v61;
									break;
								case 3:
									_this214.s3 = v61;
									break;
								case 4:
									_this214.s4 = v61;
									break;
								case 5:
									_this214.s5 = v61;
									break;
								default:
									if(_this214.s6 == null) {
										_this214.s6 = new justPath_StoreF6();
									}
									var _this215 = _this214.s6;
									switch(_this215.l) {
									case 0:
										_this215.s0 = v61;
										break;
									case 1:
										_this215.s1 = v61;
										break;
									case 2:
										_this215.s2 = v61;
										break;
									case 3:
										_this215.s3 = v61;
										break;
									case 4:
										_this215.s4 = v61;
										break;
									case 5:
										_this215.s5 = v61;
										break;
									default:
										if(_this215.s6 == null) {
											_this215.s6 = new justPath_StoreF6();
										}
										_this215.s6.push(v61);
									}
									_this215.l++;
								}
								_this214.l++;
							}
							temp9 = "";
						}
						break;
					case 45:
						if(temp9 != "") {
							if((this.store.l & 1) == 0) {
								var _this216 = this.store;
								var v62 = parseFloat(temp9);
								switch(_this216.l) {
								case 0:
									_this216.s0 = v62;
									break;
								case 1:
									_this216.s1 = v62;
									break;
								case 2:
									_this216.s2 = v62;
									break;
								case 3:
									_this216.s3 = v62;
									break;
								case 4:
									_this216.s4 = v62;
									break;
								case 5:
									_this216.s5 = v62;
									break;
								default:
									if(_this216.s6 == null) {
										_this216.s6 = new justPath_StoreF6();
									}
									var _this217 = _this216.s6;
									switch(_this217.l) {
									case 0:
										_this217.s0 = v62;
										break;
									case 1:
										_this217.s1 = v62;
										break;
									case 2:
										_this217.s2 = v62;
										break;
									case 3:
										_this217.s3 = v62;
										break;
									case 4:
										_this217.s4 = v62;
										break;
									case 5:
										_this217.s5 = v62;
										break;
									default:
										if(_this217.s6 == null) {
											_this217.s6 = new justPath_StoreF6();
										}
										_this217.s6.push(v62);
									}
									_this217.l++;
								}
								_this216.l++;
							} else {
								var _this218 = this.store;
								var v63 = parseFloat(temp9);
								switch(_this218.l) {
								case 0:
									_this218.s0 = v63;
									break;
								case 1:
									_this218.s1 = v63;
									break;
								case 2:
									_this218.s2 = v63;
									break;
								case 3:
									_this218.s3 = v63;
									break;
								case 4:
									_this218.s4 = v63;
									break;
								case 5:
									_this218.s5 = v63;
									break;
								default:
									if(_this218.s6 == null) {
										_this218.s6 = new justPath_StoreF6();
									}
									var _this219 = _this218.s6;
									switch(_this219.l) {
									case 0:
										_this219.s0 = v63;
										break;
									case 1:
										_this219.s1 = v63;
										break;
									case 2:
										_this219.s2 = v63;
										break;
									case 3:
										_this219.s3 = v63;
										break;
									case 4:
										_this219.s4 = v63;
										break;
									case 5:
										_this219.s5 = v63;
										break;
									default:
										if(_this219.s6 == null) {
											_this219.s6 = new justPath_StoreF6();
										}
										_this219.s6.push(v63);
									}
									_this219.l++;
								}
								_this218.l++;
							}
						}
						temp9 = "-";
						break;
					case 46:
						temp9 += ".";
						break;
					case 48:
						temp9 += "0";
						break;
					case 49:
						temp9 += "1";
						break;
					case 50:
						temp9 += "2";
						break;
					case 51:
						temp9 += "3";
						break;
					case 52:
						temp9 += "4";
						break;
					case 53:
						temp9 += "5";
						break;
					case 54:
						temp9 += "6";
						break;
					case 55:
						temp9 += "7";
						break;
					case 56:
						temp9 += "8";
						break;
					case 57:
						temp9 += "9";
						break;
					default:
						if(temp9 != "") {
							if((this.store.l & 1) == 0) {
								var _this220 = this.store;
								var v64 = parseFloat(temp9);
								switch(_this220.l) {
								case 0:
									_this220.s0 = v64;
									break;
								case 1:
									_this220.s1 = v64;
									break;
								case 2:
									_this220.s2 = v64;
									break;
								case 3:
									_this220.s3 = v64;
									break;
								case 4:
									_this220.s4 = v64;
									break;
								case 5:
									_this220.s5 = v64;
									break;
								default:
									if(_this220.s6 == null) {
										_this220.s6 = new justPath_StoreF6();
									}
									var _this221 = _this220.s6;
									switch(_this221.l) {
									case 0:
										_this221.s0 = v64;
										break;
									case 1:
										_this221.s1 = v64;
										break;
									case 2:
										_this221.s2 = v64;
										break;
									case 3:
										_this221.s3 = v64;
										break;
									case 4:
										_this221.s4 = v64;
										break;
									case 5:
										_this221.s5 = v64;
										break;
									default:
										if(_this221.s6 == null) {
											_this221.s6 = new justPath_StoreF6();
										}
										_this221.s6.push(v64);
									}
									_this221.l++;
								}
								_this220.l++;
							} else {
								var _this222 = this.store;
								var v65 = parseFloat(temp9);
								switch(_this222.l) {
								case 0:
									_this222.s0 = v65;
									break;
								case 1:
									_this222.s1 = v65;
									break;
								case 2:
									_this222.s2 = v65;
									break;
								case 3:
									_this222.s3 = v65;
									break;
								case 4:
									_this222.s4 = v65;
									break;
								case 5:
									_this222.s5 = v65;
									break;
								default:
									if(_this222.s6 == null) {
										_this222.s6 = new justPath_StoreF6();
									}
									var _this223 = _this222.s6;
									switch(_this223.l) {
									case 0:
										_this223.s0 = v65;
										break;
									case 1:
										_this223.s1 = v65;
										break;
									case 2:
										_this223.s2 = v65;
										break;
									case 3:
										_this223.s3 = v65;
										break;
									case 4:
										_this223.s4 = v65;
										break;
									case 5:
										_this223.s5 = v65;
										break;
									default:
										if(_this223.s6 == null) {
											_this223.s6 = new justPath_StoreF6();
										}
										_this223.s6.push(v65);
									}
									_this223.l++;
								}
								_this222.l++;
							}
							temp9 = "";
						}
						this.pos--;
						exit9 = true;
					}
					if(exit9) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 7) {
					var sx4 = this.lastX;
					var sy4 = this.lastY;
					var _this224 = this.store;
					var out82 = _this224.s0;
					if(_this224.l != 0) {
						_this224.s0 = _this224.s1;
						_this224.s1 = _this224.s2;
						_this224.s2 = _this224.s3;
						_this224.s3 = _this224.s4;
						_this224.s4 = _this224.s5;
						_this224.s5 = null;
						if(_this224.s6 != null) {
							var _this225 = _this224.s6;
							var out83 = _this225.s0;
							if(_this225.l != 0) {
								_this225.s0 = _this225.s1;
								_this225.s1 = _this225.s2;
								_this225.s2 = _this225.s3;
								_this225.s3 = _this225.s4;
								_this225.s4 = _this225.s5;
								_this225.s5 = null;
								if(_this225.s6 != null) {
									_this225.s5 = _this225.s6.shift();
								}
								_this225.l--;
							}
							_this224.s5 = out83;
						}
						_this224.l--;
					}
					var xr2 = out82;
					var _this226 = this.store;
					var out84 = _this226.s0;
					if(_this226.l != 0) {
						_this226.s0 = _this226.s1;
						_this226.s1 = _this226.s2;
						_this226.s2 = _this226.s3;
						_this226.s3 = _this226.s4;
						_this226.s4 = _this226.s5;
						_this226.s5 = null;
						if(_this226.s6 != null) {
							var _this227 = _this226.s6;
							var out85 = _this227.s0;
							if(_this227.l != 0) {
								_this227.s0 = _this227.s1;
								_this227.s1 = _this227.s2;
								_this227.s2 = _this227.s3;
								_this227.s3 = _this227.s4;
								_this227.s4 = _this227.s5;
								_this227.s5 = null;
								if(_this227.s6 != null) {
									_this227.s5 = _this227.s6.shift();
								}
								_this227.l--;
							}
							_this226.s5 = out85;
						}
						_this226.l--;
					}
					var yr2 = out84;
					var _this228 = this.store;
					var out86 = _this228.s0;
					if(_this228.l != 0) {
						_this228.s0 = _this228.s1;
						_this228.s1 = _this228.s2;
						_this228.s2 = _this228.s3;
						_this228.s3 = _this228.s4;
						_this228.s4 = _this228.s5;
						_this228.s5 = null;
						if(_this228.s6 != null) {
							var _this229 = _this228.s6;
							var out87 = _this229.s0;
							if(_this229.l != 0) {
								_this229.s0 = _this229.s1;
								_this229.s1 = _this229.s2;
								_this229.s2 = _this229.s3;
								_this229.s3 = _this229.s4;
								_this229.s4 = _this229.s5;
								_this229.s5 = null;
								if(_this229.s6 != null) {
									_this229.s5 = _this229.s6.shift();
								}
								_this229.l--;
							}
							_this228.s5 = out87;
						}
						_this228.l--;
					}
					var phi4 = out86;
					var _this230 = this.store;
					var out88 = _this230.s0;
					if(_this230.l != 0) {
						_this230.s0 = _this230.s1;
						_this230.s1 = _this230.s2;
						_this230.s2 = _this230.s3;
						_this230.s3 = _this230.s4;
						_this230.s4 = _this230.s5;
						_this230.s5 = null;
						if(_this230.s6 != null) {
							var _this231 = _this230.s6;
							var out89 = _this231.s0;
							if(_this231.l != 0) {
								_this231.s0 = _this231.s1;
								_this231.s1 = _this231.s2;
								_this231.s2 = _this231.s3;
								_this231.s3 = _this231.s4;
								_this231.s4 = _this231.s5;
								_this231.s5 = null;
								if(_this231.s6 != null) {
									var _this232 = _this231.s6;
									var out90 = _this232.s0;
									if(_this232.l != 0) {
										_this232.s0 = _this232.s1;
										_this232.s1 = _this232.s2;
										_this232.s2 = _this232.s3;
										_this232.s3 = _this232.s4;
										_this232.s4 = _this232.s5;
										_this232.s5 = null;
										if(_this232.s6 != null) {
											_this232.s5 = _this232.s6.shift();
										}
										_this232.l--;
									}
									_this231.s5 = out90;
								}
								_this231.l--;
							}
							_this230.s5 = out89;
						}
						_this230.l--;
					}
					var large2 = out88 | 0;
					var _this233 = this.store;
					var out91 = _this233.s0;
					if(_this233.l != 0) {
						_this233.s0 = _this233.s1;
						_this233.s1 = _this233.s2;
						_this233.s2 = _this233.s3;
						_this233.s3 = _this233.s4;
						_this233.s4 = _this233.s5;
						_this233.s5 = null;
						if(_this233.s6 != null) {
							var _this234 = _this233.s6;
							var out92 = _this234.s0;
							if(_this234.l != 0) {
								_this234.s0 = _this234.s1;
								_this234.s1 = _this234.s2;
								_this234.s2 = _this234.s3;
								_this234.s3 = _this234.s4;
								_this234.s4 = _this234.s5;
								_this234.s5 = null;
								if(_this234.s6 != null) {
									var _this235 = _this234.s6;
									var out93 = _this235.s0;
									if(_this235.l != 0) {
										_this235.s0 = _this235.s1;
										_this235.s1 = _this235.s2;
										_this235.s2 = _this235.s3;
										_this235.s3 = _this235.s4;
										_this235.s4 = _this235.s5;
										_this235.s5 = null;
										if(_this235.s6 != null) {
											_this235.s5 = _this235.s6.shift();
										}
										_this235.l--;
									}
									_this234.s5 = out93;
								}
								_this234.l--;
							}
							_this233.s5 = out92;
						}
						_this233.l--;
					}
					var sweep2 = out91 | 0;
					var _this236 = this.store;
					var out94 = _this236.s0;
					if(_this236.l != 0) {
						_this236.s0 = _this236.s1;
						_this236.s1 = _this236.s2;
						_this236.s2 = _this236.s3;
						_this236.s3 = _this236.s4;
						_this236.s4 = _this236.s5;
						_this236.s5 = null;
						if(_this236.s6 != null) {
							var _this237 = _this236.s6;
							var out95 = _this237.s0;
							if(_this237.l != 0) {
								_this237.s0 = _this237.s1;
								_this237.s1 = _this237.s2;
								_this237.s2 = _this237.s3;
								_this237.s3 = _this237.s4;
								_this237.s4 = _this237.s5;
								_this237.s5 = null;
								if(_this237.s6 != null) {
									_this237.s5 = _this237.s6.shift();
								}
								_this237.l--;
							}
							_this236.s5 = out95;
						}
						_this236.l--;
					}
					this.lastX = out94 + this.lastX;
					var _this238 = this.store;
					var out96 = _this238.s0;
					if(_this238.l != 0) {
						_this238.s0 = _this238.s1;
						_this238.s1 = _this238.s2;
						_this238.s2 = _this238.s3;
						_this238.s3 = _this238.s4;
						_this238.s4 = _this238.s5;
						_this238.s5 = null;
						if(_this238.s6 != null) {
							var _this239 = _this238.s6;
							var out97 = _this239.s0;
							if(_this239.l != 0) {
								_this239.s0 = _this239.s1;
								_this239.s1 = _this239.s2;
								_this239.s2 = _this239.s3;
								_this239.s3 = _this239.s4;
								_this239.s4 = _this239.s5;
								_this239.s5 = null;
								if(_this239.s6 != null) {
									_this239.s5 = _this239.s6.shift();
								}
								_this239.l--;
							}
							_this238.s5 = out97;
						}
						_this238.l--;
					}
					this.lastY = out96 + this.lastY;
					var sx5 = sx4;
					var sy5 = sy4;
					var phi5 = phi4;
					var ex2 = this.lastX;
					var ey2 = this.lastY;
					var mx2 = (sx5 - ex2) / 2;
					var my2 = (sy5 - ey2) / 2;
					var ax2 = (sx5 + ex2) / 2;
					var ay2 = (sy5 + ey2) / 2;
					phi5 %= 360;
					phi5 = phi5 * Math.PI / 180;
					var sin2 = Math.sin(phi5);
					var cos2 = Math.cos(phi5);
					var x12 = mx2 * cos2 + my2 * sin2;
					var y12 = -mx2 * sin2 + my2 * cos2;
					var rx2 = Math.abs(xr2);
					var ry2 = Math.abs(yr2);
					var rxx2 = rx2 * rx2;
					var ryy2 = ry2 * ry2;
					var xx12 = x12 * x12;
					var yy12 = y12 * y12;
					var check2 = xx12 / rxx2 + yy12 / ryy2;
					if(check2 > 1) {
						rx2 *= Math.sqrt(check2);
						ry2 *= Math.sqrt(check2);
						rxx2 = rx2 * rx2;
						ryy2 = ry2 * ry2;
					}
					var sign2 = large2 == sweep2 ? -1 : 1;
					var sq2 = (rxx2 * ryy2 - rxx2 * yy12 - ryy2 * xx12) / (rxx2 * yy12 + ryy2 * xx12);
					if(sq2 < 0) {
						sq2 = 0;
					}
					var coef2 = sign2 * Math.sqrt(sq2);
					var cx12 = coef2 * rx2 * y12 / ry2;
					var cy12 = -coef2 * ry2 * x12 / rx2;
					var cx3 = ax2 + cx12 * cos2 - cy12 * sin2;
					var cy3 = ay2 + cx12 * sin2 + cy12 * cos2;
					var phiSin2 = Math.sin(-phi5);
					var phiCos2 = Math.cos(-phi5);
					sx5 -= cx3;
					sy5 -= cy3;
					var dx4 = sx5;
					var dy4 = sy5;
					sx5 = dx4 * phiCos2 - dy4 * phiSin2;
					sy5 = dx4 * phiSin2 + dy4 * phiCos2;
					sx5 += cx3;
					sy5 += cy3;
					ex2 -= cx3;
					ey2 -= cy3;
					var dx5 = ex2;
					var dy5 = ey2;
					ex2 = dx5 * phiCos2 - dy5 * phiSin2;
					ey2 = dx5 * phiSin2 + dy5 * phiCos2;
					ex2 += cx3;
					ey2 += cy3;
					var alpha2 = Math.atan2(rx2 * (cy3 - sy5),ry2 * (cx3 - sx5)) - Math.PI;
					var omega2 = Math.atan2(rx2 * (cy3 - ey2),ry2 * (cx3 - ex2)) - Math.PI;
					var delta2 = alpha2 - omega2;
					if(sweep2 == 1 && delta2 > 0) {
						delta2 -= 2 * Math.PI;
					} else if(sweep2 == 0 && delta2 < 0) {
						delta2 += 2 * Math.PI;
					}
					var this3 = { cx : cx3, cy : cy3, rx : rx2, ry : ry2, alpha : alpha2, omega : omega2, delta : -delta2, phi : phi5, phiSin : Math.sin(phi5), phiCos : Math.cos(phi5)};
					var ellipseData2 = this3;
					var ellipse2 = new justPath_EllipseArc(ellipseData2);
					ellipse2.lineRender(($_=this.pathContext,$bind($_,$_.moveTo)),($_=this.pathContext,$bind($_,$_.lineTo)),Math.PI / 18);
				} else if(this.store.l > 7) {
					while(this.store.l > 6) {
						var sx6 = this.lastX;
						var sy6 = this.lastY;
						var _this240 = this.store;
						var out98 = _this240.s0;
						if(_this240.l != 0) {
							_this240.s0 = _this240.s1;
							_this240.s1 = _this240.s2;
							_this240.s2 = _this240.s3;
							_this240.s3 = _this240.s4;
							_this240.s4 = _this240.s5;
							_this240.s5 = null;
							if(_this240.s6 != null) {
								var _this241 = _this240.s6;
								var out99 = _this241.s0;
								if(_this241.l != 0) {
									_this241.s0 = _this241.s1;
									_this241.s1 = _this241.s2;
									_this241.s2 = _this241.s3;
									_this241.s3 = _this241.s4;
									_this241.s4 = _this241.s5;
									_this241.s5 = null;
									if(_this241.s6 != null) {
										_this241.s5 = _this241.s6.shift();
									}
									_this241.l--;
								}
								_this240.s5 = out99;
							}
							_this240.l--;
						}
						var xr3 = out98;
						var _this242 = this.store;
						var out100 = _this242.s0;
						if(_this242.l != 0) {
							_this242.s0 = _this242.s1;
							_this242.s1 = _this242.s2;
							_this242.s2 = _this242.s3;
							_this242.s3 = _this242.s4;
							_this242.s4 = _this242.s5;
							_this242.s5 = null;
							if(_this242.s6 != null) {
								var _this243 = _this242.s6;
								var out101 = _this243.s0;
								if(_this243.l != 0) {
									_this243.s0 = _this243.s1;
									_this243.s1 = _this243.s2;
									_this243.s2 = _this243.s3;
									_this243.s3 = _this243.s4;
									_this243.s4 = _this243.s5;
									_this243.s5 = null;
									if(_this243.s6 != null) {
										_this243.s5 = _this243.s6.shift();
									}
									_this243.l--;
								}
								_this242.s5 = out101;
							}
							_this242.l--;
						}
						var yr3 = out100;
						var _this244 = this.store;
						var out102 = _this244.s0;
						if(_this244.l != 0) {
							_this244.s0 = _this244.s1;
							_this244.s1 = _this244.s2;
							_this244.s2 = _this244.s3;
							_this244.s3 = _this244.s4;
							_this244.s4 = _this244.s5;
							_this244.s5 = null;
							if(_this244.s6 != null) {
								var _this245 = _this244.s6;
								var out103 = _this245.s0;
								if(_this245.l != 0) {
									_this245.s0 = _this245.s1;
									_this245.s1 = _this245.s2;
									_this245.s2 = _this245.s3;
									_this245.s3 = _this245.s4;
									_this245.s4 = _this245.s5;
									_this245.s5 = null;
									if(_this245.s6 != null) {
										_this245.s5 = _this245.s6.shift();
									}
									_this245.l--;
								}
								_this244.s5 = out103;
							}
							_this244.l--;
						}
						var phi6 = out102;
						var _this246 = this.store;
						var out104 = _this246.s0;
						if(_this246.l != 0) {
							_this246.s0 = _this246.s1;
							_this246.s1 = _this246.s2;
							_this246.s2 = _this246.s3;
							_this246.s3 = _this246.s4;
							_this246.s4 = _this246.s5;
							_this246.s5 = null;
							if(_this246.s6 != null) {
								var _this247 = _this246.s6;
								var out105 = _this247.s0;
								if(_this247.l != 0) {
									_this247.s0 = _this247.s1;
									_this247.s1 = _this247.s2;
									_this247.s2 = _this247.s3;
									_this247.s3 = _this247.s4;
									_this247.s4 = _this247.s5;
									_this247.s5 = null;
									if(_this247.s6 != null) {
										var _this248 = _this247.s6;
										var out106 = _this248.s0;
										if(_this248.l != 0) {
											_this248.s0 = _this248.s1;
											_this248.s1 = _this248.s2;
											_this248.s2 = _this248.s3;
											_this248.s3 = _this248.s4;
											_this248.s4 = _this248.s5;
											_this248.s5 = null;
											if(_this248.s6 != null) {
												_this248.s5 = _this248.s6.shift();
											}
											_this248.l--;
										}
										_this247.s5 = out106;
									}
									_this247.l--;
								}
								_this246.s5 = out105;
							}
							_this246.l--;
						}
						var large3 = out104 | 0;
						var _this249 = this.store;
						var out107 = _this249.s0;
						if(_this249.l != 0) {
							_this249.s0 = _this249.s1;
							_this249.s1 = _this249.s2;
							_this249.s2 = _this249.s3;
							_this249.s3 = _this249.s4;
							_this249.s4 = _this249.s5;
							_this249.s5 = null;
							if(_this249.s6 != null) {
								var _this250 = _this249.s6;
								var out108 = _this250.s0;
								if(_this250.l != 0) {
									_this250.s0 = _this250.s1;
									_this250.s1 = _this250.s2;
									_this250.s2 = _this250.s3;
									_this250.s3 = _this250.s4;
									_this250.s4 = _this250.s5;
									_this250.s5 = null;
									if(_this250.s6 != null) {
										var _this251 = _this250.s6;
										var out109 = _this251.s0;
										if(_this251.l != 0) {
											_this251.s0 = _this251.s1;
											_this251.s1 = _this251.s2;
											_this251.s2 = _this251.s3;
											_this251.s3 = _this251.s4;
											_this251.s4 = _this251.s5;
											_this251.s5 = null;
											if(_this251.s6 != null) {
												_this251.s5 = _this251.s6.shift();
											}
											_this251.l--;
										}
										_this250.s5 = out109;
									}
									_this250.l--;
								}
								_this249.s5 = out108;
							}
							_this249.l--;
						}
						var sweep3 = out107 | 0;
						var _this252 = this.store;
						var out110 = _this252.s0;
						if(_this252.l != 0) {
							_this252.s0 = _this252.s1;
							_this252.s1 = _this252.s2;
							_this252.s2 = _this252.s3;
							_this252.s3 = _this252.s4;
							_this252.s4 = _this252.s5;
							_this252.s5 = null;
							if(_this252.s6 != null) {
								var _this253 = _this252.s6;
								var out111 = _this253.s0;
								if(_this253.l != 0) {
									_this253.s0 = _this253.s1;
									_this253.s1 = _this253.s2;
									_this253.s2 = _this253.s3;
									_this253.s3 = _this253.s4;
									_this253.s4 = _this253.s5;
									_this253.s5 = null;
									if(_this253.s6 != null) {
										_this253.s5 = _this253.s6.shift();
									}
									_this253.l--;
								}
								_this252.s5 = out111;
							}
							_this252.l--;
						}
						this.lastX = out110 + this.lastX;
						var _this254 = this.store;
						var out112 = _this254.s0;
						if(_this254.l != 0) {
							_this254.s0 = _this254.s1;
							_this254.s1 = _this254.s2;
							_this254.s2 = _this254.s3;
							_this254.s3 = _this254.s4;
							_this254.s4 = _this254.s5;
							_this254.s5 = null;
							if(_this254.s6 != null) {
								var _this255 = _this254.s6;
								var out113 = _this255.s0;
								if(_this255.l != 0) {
									_this255.s0 = _this255.s1;
									_this255.s1 = _this255.s2;
									_this255.s2 = _this255.s3;
									_this255.s3 = _this255.s4;
									_this255.s4 = _this255.s5;
									_this255.s5 = null;
									if(_this255.s6 != null) {
										_this255.s5 = _this255.s6.shift();
									}
									_this255.l--;
								}
								_this254.s5 = out113;
							}
							_this254.l--;
						}
						this.lastY = out112 + this.lastY;
						var sx7 = sx6;
						var sy7 = sy6;
						var phi7 = phi6;
						var ex3 = this.lastX;
						var ey3 = this.lastY;
						var mx3 = (sx7 - ex3) / 2;
						var my3 = (sy7 - ey3) / 2;
						var ax3 = (sx7 + ex3) / 2;
						var ay3 = (sy7 + ey3) / 2;
						phi7 %= 360;
						phi7 = phi7 * Math.PI / 180;
						var sin3 = Math.sin(phi7);
						var cos3 = Math.cos(phi7);
						var x13 = mx3 * cos3 + my3 * sin3;
						var y13 = -mx3 * sin3 + my3 * cos3;
						var rx3 = Math.abs(xr3);
						var ry3 = Math.abs(yr3);
						var rxx3 = rx3 * rx3;
						var ryy3 = ry3 * ry3;
						var xx13 = x13 * x13;
						var yy13 = y13 * y13;
						var check3 = xx13 / rxx3 + yy13 / ryy3;
						if(check3 > 1) {
							rx3 *= Math.sqrt(check3);
							ry3 *= Math.sqrt(check3);
							rxx3 = rx3 * rx3;
							ryy3 = ry3 * ry3;
						}
						var sign3 = large3 == sweep3 ? -1 : 1;
						var sq3 = (rxx3 * ryy3 - rxx3 * yy13 - ryy3 * xx13) / (rxx3 * yy13 + ryy3 * xx13);
						if(sq3 < 0) {
							sq3 = 0;
						}
						var coef3 = sign3 * Math.sqrt(sq3);
						var cx13 = coef3 * rx3 * y13 / ry3;
						var cy13 = -coef3 * ry3 * x13 / rx3;
						var cx4 = ax3 + cx13 * cos3 - cy13 * sin3;
						var cy4 = ay3 + cx13 * sin3 + cy13 * cos3;
						var phiSin3 = Math.sin(-phi7);
						var phiCos3 = Math.cos(-phi7);
						sx7 -= cx4;
						sy7 -= cy4;
						var dx6 = sx7;
						var dy6 = sy7;
						sx7 = dx6 * phiCos3 - dy6 * phiSin3;
						sy7 = dx6 * phiSin3 + dy6 * phiCos3;
						sx7 += cx4;
						sy7 += cy4;
						ex3 -= cx4;
						ey3 -= cy4;
						var dx7 = ex3;
						var dy7 = ey3;
						ex3 = dx7 * phiCos3 - dy7 * phiSin3;
						ey3 = dx7 * phiSin3 + dy7 * phiCos3;
						ex3 += cx4;
						ey3 += cy4;
						var alpha3 = Math.atan2(rx3 * (cy4 - sy7),ry3 * (cx4 - sx7)) - Math.PI;
						var omega3 = Math.atan2(rx3 * (cy4 - ey3),ry3 * (cx4 - ex3)) - Math.PI;
						var delta3 = alpha3 - omega3;
						if(sweep3 == 1 && delta3 > 0) {
							delta3 -= 2 * Math.PI;
						} else if(sweep3 == 0 && delta3 < 0) {
							delta3 += 2 * Math.PI;
						}
						var this4 = { cx : cx4, cy : cy4, rx : rx3, ry : ry3, alpha : alpha3, omega : omega3, delta : -delta3, phi : phi7, phiSin : Math.sin(phi7), phiCos : Math.cos(phi7)};
						var ellipseData3 = this4;
						var ellipse3 = new justPath_EllipseArc(ellipseData3);
						ellipse3.lineRender(($_=this.pathContext,$bind($_,$_.moveTo)),($_=this.pathContext,$bind($_,$_.lineTo)),Math.PI / 18);
					}
				}
				break;
			case 99:
				var _this256 = this.store;
				_this256.l = 0;
				_this256.s0 = null;
				_this256.s1 = null;
				_this256.s2 = null;
				_this256.s3 = null;
				_this256.s4 = null;
				_this256.s5 = null;
				_this256.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp10 = "";
				var exit10 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp10 != "") {
							if((this.store.l & 1) == 0) {
								var _this257 = this.store;
								var v66 = parseFloat(temp10);
								switch(_this257.l) {
								case 0:
									_this257.s0 = v66;
									break;
								case 1:
									_this257.s1 = v66;
									break;
								case 2:
									_this257.s2 = v66;
									break;
								case 3:
									_this257.s3 = v66;
									break;
								case 4:
									_this257.s4 = v66;
									break;
								case 5:
									_this257.s5 = v66;
									break;
								default:
									if(_this257.s6 == null) {
										_this257.s6 = new justPath_StoreF6();
									}
									var _this258 = _this257.s6;
									switch(_this258.l) {
									case 0:
										_this258.s0 = v66;
										break;
									case 1:
										_this258.s1 = v66;
										break;
									case 2:
										_this258.s2 = v66;
										break;
									case 3:
										_this258.s3 = v66;
										break;
									case 4:
										_this258.s4 = v66;
										break;
									case 5:
										_this258.s5 = v66;
										break;
									default:
										if(_this258.s6 == null) {
											_this258.s6 = new justPath_StoreF6();
										}
										_this258.s6.push(v66);
									}
									_this258.l++;
								}
								_this257.l++;
							} else {
								var _this259 = this.store;
								var v67 = parseFloat(temp10);
								switch(_this259.l) {
								case 0:
									_this259.s0 = v67;
									break;
								case 1:
									_this259.s1 = v67;
									break;
								case 2:
									_this259.s2 = v67;
									break;
								case 3:
									_this259.s3 = v67;
									break;
								case 4:
									_this259.s4 = v67;
									break;
								case 5:
									_this259.s5 = v67;
									break;
								default:
									if(_this259.s6 == null) {
										_this259.s6 = new justPath_StoreF6();
									}
									var _this260 = _this259.s6;
									switch(_this260.l) {
									case 0:
										_this260.s0 = v67;
										break;
									case 1:
										_this260.s1 = v67;
										break;
									case 2:
										_this260.s2 = v67;
										break;
									case 3:
										_this260.s3 = v67;
										break;
									case 4:
										_this260.s4 = v67;
										break;
									case 5:
										_this260.s5 = v67;
										break;
									default:
										if(_this260.s6 == null) {
											_this260.s6 = new justPath_StoreF6();
										}
										_this260.s6.push(v67);
									}
									_this260.l++;
								}
								_this259.l++;
							}
							temp10 = "";
						}
						break;
					case 45:
						if(temp10 != "") {
							if((this.store.l & 1) == 0) {
								var _this261 = this.store;
								var v68 = parseFloat(temp10);
								switch(_this261.l) {
								case 0:
									_this261.s0 = v68;
									break;
								case 1:
									_this261.s1 = v68;
									break;
								case 2:
									_this261.s2 = v68;
									break;
								case 3:
									_this261.s3 = v68;
									break;
								case 4:
									_this261.s4 = v68;
									break;
								case 5:
									_this261.s5 = v68;
									break;
								default:
									if(_this261.s6 == null) {
										_this261.s6 = new justPath_StoreF6();
									}
									var _this262 = _this261.s6;
									switch(_this262.l) {
									case 0:
										_this262.s0 = v68;
										break;
									case 1:
										_this262.s1 = v68;
										break;
									case 2:
										_this262.s2 = v68;
										break;
									case 3:
										_this262.s3 = v68;
										break;
									case 4:
										_this262.s4 = v68;
										break;
									case 5:
										_this262.s5 = v68;
										break;
									default:
										if(_this262.s6 == null) {
											_this262.s6 = new justPath_StoreF6();
										}
										_this262.s6.push(v68);
									}
									_this262.l++;
								}
								_this261.l++;
							} else {
								var _this263 = this.store;
								var v69 = parseFloat(temp10);
								switch(_this263.l) {
								case 0:
									_this263.s0 = v69;
									break;
								case 1:
									_this263.s1 = v69;
									break;
								case 2:
									_this263.s2 = v69;
									break;
								case 3:
									_this263.s3 = v69;
									break;
								case 4:
									_this263.s4 = v69;
									break;
								case 5:
									_this263.s5 = v69;
									break;
								default:
									if(_this263.s6 == null) {
										_this263.s6 = new justPath_StoreF6();
									}
									var _this264 = _this263.s6;
									switch(_this264.l) {
									case 0:
										_this264.s0 = v69;
										break;
									case 1:
										_this264.s1 = v69;
										break;
									case 2:
										_this264.s2 = v69;
										break;
									case 3:
										_this264.s3 = v69;
										break;
									case 4:
										_this264.s4 = v69;
										break;
									case 5:
										_this264.s5 = v69;
										break;
									default:
										if(_this264.s6 == null) {
											_this264.s6 = new justPath_StoreF6();
										}
										_this264.s6.push(v69);
									}
									_this264.l++;
								}
								_this263.l++;
							}
						}
						temp10 = "-";
						break;
					case 46:
						temp10 += ".";
						break;
					case 48:
						temp10 += "0";
						break;
					case 49:
						temp10 += "1";
						break;
					case 50:
						temp10 += "2";
						break;
					case 51:
						temp10 += "3";
						break;
					case 52:
						temp10 += "4";
						break;
					case 53:
						temp10 += "5";
						break;
					case 54:
						temp10 += "6";
						break;
					case 55:
						temp10 += "7";
						break;
					case 56:
						temp10 += "8";
						break;
					case 57:
						temp10 += "9";
						break;
					default:
						if(temp10 != "") {
							if((this.store.l & 1) == 0) {
								var _this265 = this.store;
								var v70 = parseFloat(temp10);
								switch(_this265.l) {
								case 0:
									_this265.s0 = v70;
									break;
								case 1:
									_this265.s1 = v70;
									break;
								case 2:
									_this265.s2 = v70;
									break;
								case 3:
									_this265.s3 = v70;
									break;
								case 4:
									_this265.s4 = v70;
									break;
								case 5:
									_this265.s5 = v70;
									break;
								default:
									if(_this265.s6 == null) {
										_this265.s6 = new justPath_StoreF6();
									}
									var _this266 = _this265.s6;
									switch(_this266.l) {
									case 0:
										_this266.s0 = v70;
										break;
									case 1:
										_this266.s1 = v70;
										break;
									case 2:
										_this266.s2 = v70;
										break;
									case 3:
										_this266.s3 = v70;
										break;
									case 4:
										_this266.s4 = v70;
										break;
									case 5:
										_this266.s5 = v70;
										break;
									default:
										if(_this266.s6 == null) {
											_this266.s6 = new justPath_StoreF6();
										}
										_this266.s6.push(v70);
									}
									_this266.l++;
								}
								_this265.l++;
							} else {
								var _this267 = this.store;
								var v71 = parseFloat(temp10);
								switch(_this267.l) {
								case 0:
									_this267.s0 = v71;
									break;
								case 1:
									_this267.s1 = v71;
									break;
								case 2:
									_this267.s2 = v71;
									break;
								case 3:
									_this267.s3 = v71;
									break;
								case 4:
									_this267.s4 = v71;
									break;
								case 5:
									_this267.s5 = v71;
									break;
								default:
									if(_this267.s6 == null) {
										_this267.s6 = new justPath_StoreF6();
									}
									var _this268 = _this267.s6;
									switch(_this268.l) {
									case 0:
										_this268.s0 = v71;
										break;
									case 1:
										_this268.s1 = v71;
										break;
									case 2:
										_this268.s2 = v71;
										break;
									case 3:
										_this268.s3 = v71;
										break;
									case 4:
										_this268.s4 = v71;
										break;
									case 5:
										_this268.s5 = v71;
										break;
									default:
										if(_this268.s6 == null) {
											_this268.s6 = new justPath_StoreF6();
										}
										_this268.s6.push(v71);
									}
									_this268.l++;
								}
								_this267.l++;
							}
							temp10 = "";
						}
						this.pos--;
						exit10 = true;
					}
					if(exit10) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 4) {
					var firstX3 = this.store.s0 + this.lastX;
					var firstY3 = this.store.s1 + this.lastY;
					this.controlX = this.store.s2 + this.lastX;
					this.controlY = this.store.s3 + this.lastY;
					this.lastX = this.store.s4 + this.lastX;
					this.lastY = this.store.s5 + this.lastY;
					this.pathContext.curveTo(firstX3,firstY3,this.controlX,this.controlY,this.lastX,this.lastY);
				} else if(this.store.l > 4) {
					while(this.store.l > 3) {
						var _this269 = this.store;
						var out114 = _this269.s0;
						if(_this269.l != 0) {
							_this269.s0 = _this269.s1;
							_this269.s1 = _this269.s2;
							_this269.s2 = _this269.s3;
							_this269.s3 = _this269.s4;
							_this269.s4 = _this269.s5;
							_this269.s5 = null;
							if(_this269.s6 != null) {
								var _this270 = _this269.s6;
								var out115 = _this270.s0;
								if(_this270.l != 0) {
									_this270.s0 = _this270.s1;
									_this270.s1 = _this270.s2;
									_this270.s2 = _this270.s3;
									_this270.s3 = _this270.s4;
									_this270.s4 = _this270.s5;
									_this270.s5 = null;
									if(_this270.s6 != null) {
										_this270.s5 = _this270.s6.shift();
									}
									_this270.l--;
								}
								_this269.s5 = out115;
							}
							_this269.l--;
						}
						var firstX4 = out114 + this.lastX;
						var _this271 = this.store;
						var out116 = _this271.s0;
						if(_this271.l != 0) {
							_this271.s0 = _this271.s1;
							_this271.s1 = _this271.s2;
							_this271.s2 = _this271.s3;
							_this271.s3 = _this271.s4;
							_this271.s4 = _this271.s5;
							_this271.s5 = null;
							if(_this271.s6 != null) {
								var _this272 = _this271.s6;
								var out117 = _this272.s0;
								if(_this272.l != 0) {
									_this272.s0 = _this272.s1;
									_this272.s1 = _this272.s2;
									_this272.s2 = _this272.s3;
									_this272.s3 = _this272.s4;
									_this272.s4 = _this272.s5;
									_this272.s5 = null;
									if(_this272.s6 != null) {
										_this272.s5 = _this272.s6.shift();
									}
									_this272.l--;
								}
								_this271.s5 = out117;
							}
							_this271.l--;
						}
						var firstY4 = out116 + this.lastY;
						var _this273 = this.store;
						var out118 = _this273.s0;
						if(_this273.l != 0) {
							_this273.s0 = _this273.s1;
							_this273.s1 = _this273.s2;
							_this273.s2 = _this273.s3;
							_this273.s3 = _this273.s4;
							_this273.s4 = _this273.s5;
							_this273.s5 = null;
							if(_this273.s6 != null) {
								var _this274 = _this273.s6;
								var out119 = _this274.s0;
								if(_this274.l != 0) {
									_this274.s0 = _this274.s1;
									_this274.s1 = _this274.s2;
									_this274.s2 = _this274.s3;
									_this274.s3 = _this274.s4;
									_this274.s4 = _this274.s5;
									_this274.s5 = null;
									if(_this274.s6 != null) {
										_this274.s5 = _this274.s6.shift();
									}
									_this274.l--;
								}
								_this273.s5 = out119;
							}
							_this273.l--;
						}
						this.controlX = out118 + this.lastX;
						var _this275 = this.store;
						var out120 = _this275.s0;
						if(_this275.l != 0) {
							_this275.s0 = _this275.s1;
							_this275.s1 = _this275.s2;
							_this275.s2 = _this275.s3;
							_this275.s3 = _this275.s4;
							_this275.s4 = _this275.s5;
							_this275.s5 = null;
							if(_this275.s6 != null) {
								var _this276 = _this275.s6;
								var out121 = _this276.s0;
								if(_this276.l != 0) {
									_this276.s0 = _this276.s1;
									_this276.s1 = _this276.s2;
									_this276.s2 = _this276.s3;
									_this276.s3 = _this276.s4;
									_this276.s4 = _this276.s5;
									_this276.s5 = null;
									if(_this276.s6 != null) {
										_this276.s5 = _this276.s6.shift();
									}
									_this276.l--;
								}
								_this275.s5 = out121;
							}
							_this275.l--;
						}
						this.controlY = out120 + this.lastY;
						var _this277 = this.store;
						var out122 = _this277.s0;
						if(_this277.l != 0) {
							_this277.s0 = _this277.s1;
							_this277.s1 = _this277.s2;
							_this277.s2 = _this277.s3;
							_this277.s3 = _this277.s4;
							_this277.s4 = _this277.s5;
							_this277.s5 = null;
							if(_this277.s6 != null) {
								var _this278 = _this277.s6;
								var out123 = _this278.s0;
								if(_this278.l != 0) {
									_this278.s0 = _this278.s1;
									_this278.s1 = _this278.s2;
									_this278.s2 = _this278.s3;
									_this278.s3 = _this278.s4;
									_this278.s4 = _this278.s5;
									_this278.s5 = null;
									if(_this278.s6 != null) {
										_this278.s5 = _this278.s6.shift();
									}
									_this278.l--;
								}
								_this277.s5 = out123;
							}
							_this277.l--;
						}
						this.lastX = out122 + this.lastX;
						var _this279 = this.store;
						var out124 = _this279.s0;
						if(_this279.l != 0) {
							_this279.s0 = _this279.s1;
							_this279.s1 = _this279.s2;
							_this279.s2 = _this279.s3;
							_this279.s3 = _this279.s4;
							_this279.s4 = _this279.s5;
							_this279.s5 = null;
							if(_this279.s6 != null) {
								var _this280 = _this279.s6;
								var out125 = _this280.s0;
								if(_this280.l != 0) {
									_this280.s0 = _this280.s1;
									_this280.s1 = _this280.s2;
									_this280.s2 = _this280.s3;
									_this280.s3 = _this280.s4;
									_this280.s4 = _this280.s5;
									_this280.s5 = null;
									if(_this280.s6 != null) {
										_this280.s5 = _this280.s6.shift();
									}
									_this280.l--;
								}
								_this279.s5 = out125;
							}
							_this279.l--;
						}
						this.lastY = out124 + this.lastY;
						this.pathContext.curveTo(firstX4,firstY4,this.controlX,this.controlY,this.lastX,this.lastY);
					}
				}
				break;
			case 104:
				var process2 = false;
				if(process2 == null) {
					process2 = true;
				}
				var _this281 = this.store;
				_this281.l = 0;
				_this281.s0 = null;
				_this281.s1 = null;
				_this281.s2 = null;
				_this281.s3 = null;
				_this281.s4 = null;
				_this281.s5 = null;
				_this281.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp11 = "";
				var exit11 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp11 != "") {
							if(process2) {
								if((this.store.l & 1) == 0) {
									var _this282 = this.store;
									var v72 = parseFloat(temp11);
									switch(_this282.l) {
									case 0:
										_this282.s0 = v72;
										break;
									case 1:
										_this282.s1 = v72;
										break;
									case 2:
										_this282.s2 = v72;
										break;
									case 3:
										_this282.s3 = v72;
										break;
									case 4:
										_this282.s4 = v72;
										break;
									case 5:
										_this282.s5 = v72;
										break;
									default:
										if(_this282.s6 == null) {
											_this282.s6 = new justPath_StoreF6();
										}
										var _this283 = _this282.s6;
										switch(_this283.l) {
										case 0:
											_this283.s0 = v72;
											break;
										case 1:
											_this283.s1 = v72;
											break;
										case 2:
											_this283.s2 = v72;
											break;
										case 3:
											_this283.s3 = v72;
											break;
										case 4:
											_this283.s4 = v72;
											break;
										case 5:
											_this283.s5 = v72;
											break;
										default:
											if(_this283.s6 == null) {
												_this283.s6 = new justPath_StoreF6();
											}
											_this283.s6.push(v72);
										}
										_this283.l++;
									}
									_this282.l++;
								} else {
									var _this284 = this.store;
									var v73 = parseFloat(temp11);
									switch(_this284.l) {
									case 0:
										_this284.s0 = v73;
										break;
									case 1:
										_this284.s1 = v73;
										break;
									case 2:
										_this284.s2 = v73;
										break;
									case 3:
										_this284.s3 = v73;
										break;
									case 4:
										_this284.s4 = v73;
										break;
									case 5:
										_this284.s5 = v73;
										break;
									default:
										if(_this284.s6 == null) {
											_this284.s6 = new justPath_StoreF6();
										}
										var _this285 = _this284.s6;
										switch(_this285.l) {
										case 0:
											_this285.s0 = v73;
											break;
										case 1:
											_this285.s1 = v73;
											break;
										case 2:
											_this285.s2 = v73;
											break;
										case 3:
											_this285.s3 = v73;
											break;
										case 4:
											_this285.s4 = v73;
											break;
										case 5:
											_this285.s5 = v73;
											break;
										default:
											if(_this285.s6 == null) {
												_this285.s6 = new justPath_StoreF6();
											}
											_this285.s6.push(v73);
										}
										_this285.l++;
									}
									_this284.l++;
								}
							} else {
								var _this286 = this.store;
								var v74 = parseFloat(temp11);
								switch(_this286.l) {
								case 0:
									_this286.s0 = v74;
									break;
								case 1:
									_this286.s1 = v74;
									break;
								case 2:
									_this286.s2 = v74;
									break;
								case 3:
									_this286.s3 = v74;
									break;
								case 4:
									_this286.s4 = v74;
									break;
								case 5:
									_this286.s5 = v74;
									break;
								default:
									if(_this286.s6 == null) {
										_this286.s6 = new justPath_StoreF6();
									}
									var _this287 = _this286.s6;
									switch(_this287.l) {
									case 0:
										_this287.s0 = v74;
										break;
									case 1:
										_this287.s1 = v74;
										break;
									case 2:
										_this287.s2 = v74;
										break;
									case 3:
										_this287.s3 = v74;
										break;
									case 4:
										_this287.s4 = v74;
										break;
									case 5:
										_this287.s5 = v74;
										break;
									default:
										if(_this287.s6 == null) {
											_this287.s6 = new justPath_StoreF6();
										}
										_this287.s6.push(v74);
									}
									_this287.l++;
								}
								_this286.l++;
							}
							temp11 = "";
						}
						break;
					case 45:
						if(temp11 != "") {
							if(process2) {
								if((this.store.l & 1) == 0) {
									var _this288 = this.store;
									var v75 = parseFloat(temp11);
									switch(_this288.l) {
									case 0:
										_this288.s0 = v75;
										break;
									case 1:
										_this288.s1 = v75;
										break;
									case 2:
										_this288.s2 = v75;
										break;
									case 3:
										_this288.s3 = v75;
										break;
									case 4:
										_this288.s4 = v75;
										break;
									case 5:
										_this288.s5 = v75;
										break;
									default:
										if(_this288.s6 == null) {
											_this288.s6 = new justPath_StoreF6();
										}
										var _this289 = _this288.s6;
										switch(_this289.l) {
										case 0:
											_this289.s0 = v75;
											break;
										case 1:
											_this289.s1 = v75;
											break;
										case 2:
											_this289.s2 = v75;
											break;
										case 3:
											_this289.s3 = v75;
											break;
										case 4:
											_this289.s4 = v75;
											break;
										case 5:
											_this289.s5 = v75;
											break;
										default:
											if(_this289.s6 == null) {
												_this289.s6 = new justPath_StoreF6();
											}
											_this289.s6.push(v75);
										}
										_this289.l++;
									}
									_this288.l++;
								} else {
									var _this290 = this.store;
									var v76 = parseFloat(temp11);
									switch(_this290.l) {
									case 0:
										_this290.s0 = v76;
										break;
									case 1:
										_this290.s1 = v76;
										break;
									case 2:
										_this290.s2 = v76;
										break;
									case 3:
										_this290.s3 = v76;
										break;
									case 4:
										_this290.s4 = v76;
										break;
									case 5:
										_this290.s5 = v76;
										break;
									default:
										if(_this290.s6 == null) {
											_this290.s6 = new justPath_StoreF6();
										}
										var _this291 = _this290.s6;
										switch(_this291.l) {
										case 0:
											_this291.s0 = v76;
											break;
										case 1:
											_this291.s1 = v76;
											break;
										case 2:
											_this291.s2 = v76;
											break;
										case 3:
											_this291.s3 = v76;
											break;
										case 4:
											_this291.s4 = v76;
											break;
										case 5:
											_this291.s5 = v76;
											break;
										default:
											if(_this291.s6 == null) {
												_this291.s6 = new justPath_StoreF6();
											}
											_this291.s6.push(v76);
										}
										_this291.l++;
									}
									_this290.l++;
								}
							} else {
								var _this292 = this.store;
								var v77 = parseFloat(temp11);
								switch(_this292.l) {
								case 0:
									_this292.s0 = v77;
									break;
								case 1:
									_this292.s1 = v77;
									break;
								case 2:
									_this292.s2 = v77;
									break;
								case 3:
									_this292.s3 = v77;
									break;
								case 4:
									_this292.s4 = v77;
									break;
								case 5:
									_this292.s5 = v77;
									break;
								default:
									if(_this292.s6 == null) {
										_this292.s6 = new justPath_StoreF6();
									}
									var _this293 = _this292.s6;
									switch(_this293.l) {
									case 0:
										_this293.s0 = v77;
										break;
									case 1:
										_this293.s1 = v77;
										break;
									case 2:
										_this293.s2 = v77;
										break;
									case 3:
										_this293.s3 = v77;
										break;
									case 4:
										_this293.s4 = v77;
										break;
									case 5:
										_this293.s5 = v77;
										break;
									default:
										if(_this293.s6 == null) {
											_this293.s6 = new justPath_StoreF6();
										}
										_this293.s6.push(v77);
									}
									_this293.l++;
								}
								_this292.l++;
							}
						}
						temp11 = "-";
						break;
					case 46:
						temp11 += ".";
						break;
					case 48:
						temp11 += "0";
						break;
					case 49:
						temp11 += "1";
						break;
					case 50:
						temp11 += "2";
						break;
					case 51:
						temp11 += "3";
						break;
					case 52:
						temp11 += "4";
						break;
					case 53:
						temp11 += "5";
						break;
					case 54:
						temp11 += "6";
						break;
					case 55:
						temp11 += "7";
						break;
					case 56:
						temp11 += "8";
						break;
					case 57:
						temp11 += "9";
						break;
					default:
						if(temp11 != "") {
							if(process2) {
								if((this.store.l & 1) == 0) {
									var _this294 = this.store;
									var v78 = parseFloat(temp11);
									switch(_this294.l) {
									case 0:
										_this294.s0 = v78;
										break;
									case 1:
										_this294.s1 = v78;
										break;
									case 2:
										_this294.s2 = v78;
										break;
									case 3:
										_this294.s3 = v78;
										break;
									case 4:
										_this294.s4 = v78;
										break;
									case 5:
										_this294.s5 = v78;
										break;
									default:
										if(_this294.s6 == null) {
											_this294.s6 = new justPath_StoreF6();
										}
										var _this295 = _this294.s6;
										switch(_this295.l) {
										case 0:
											_this295.s0 = v78;
											break;
										case 1:
											_this295.s1 = v78;
											break;
										case 2:
											_this295.s2 = v78;
											break;
										case 3:
											_this295.s3 = v78;
											break;
										case 4:
											_this295.s4 = v78;
											break;
										case 5:
											_this295.s5 = v78;
											break;
										default:
											if(_this295.s6 == null) {
												_this295.s6 = new justPath_StoreF6();
											}
											_this295.s6.push(v78);
										}
										_this295.l++;
									}
									_this294.l++;
								} else {
									var _this296 = this.store;
									var v79 = parseFloat(temp11);
									switch(_this296.l) {
									case 0:
										_this296.s0 = v79;
										break;
									case 1:
										_this296.s1 = v79;
										break;
									case 2:
										_this296.s2 = v79;
										break;
									case 3:
										_this296.s3 = v79;
										break;
									case 4:
										_this296.s4 = v79;
										break;
									case 5:
										_this296.s5 = v79;
										break;
									default:
										if(_this296.s6 == null) {
											_this296.s6 = new justPath_StoreF6();
										}
										var _this297 = _this296.s6;
										switch(_this297.l) {
										case 0:
											_this297.s0 = v79;
											break;
										case 1:
											_this297.s1 = v79;
											break;
										case 2:
											_this297.s2 = v79;
											break;
										case 3:
											_this297.s3 = v79;
											break;
										case 4:
											_this297.s4 = v79;
											break;
										case 5:
											_this297.s5 = v79;
											break;
										default:
											if(_this297.s6 == null) {
												_this297.s6 = new justPath_StoreF6();
											}
											_this297.s6.push(v79);
										}
										_this297.l++;
									}
									_this296.l++;
								}
							} else {
								var _this298 = this.store;
								var v80 = parseFloat(temp11);
								switch(_this298.l) {
								case 0:
									_this298.s0 = v80;
									break;
								case 1:
									_this298.s1 = v80;
									break;
								case 2:
									_this298.s2 = v80;
									break;
								case 3:
									_this298.s3 = v80;
									break;
								case 4:
									_this298.s4 = v80;
									break;
								case 5:
									_this298.s5 = v80;
									break;
								default:
									if(_this298.s6 == null) {
										_this298.s6 = new justPath_StoreF6();
									}
									var _this299 = _this298.s6;
									switch(_this299.l) {
									case 0:
										_this299.s0 = v80;
										break;
									case 1:
										_this299.s1 = v80;
										break;
									case 2:
										_this299.s2 = v80;
										break;
									case 3:
										_this299.s3 = v80;
										break;
									case 4:
										_this299.s4 = v80;
										break;
									case 5:
										_this299.s5 = v80;
										break;
									default:
										if(_this299.s6 == null) {
											_this299.s6 = new justPath_StoreF6();
										}
										_this299.s6.push(v80);
									}
									_this299.l++;
								}
								_this298.l++;
							}
							temp11 = "";
						}
						this.pos--;
						exit11 = true;
					}
					if(exit11) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 1) {
					this.lastX += this.store.s0;
					this.pathContext.lineTo(this.lastX,this.lastY);
				} else if(this.store.l > 1) {
					while(this.store.l > 0) {
						var tmp = this.lastX;
						var _this300 = this.store;
						var out126 = _this300.s0;
						if(_this300.l != 0) {
							_this300.s0 = _this300.s1;
							_this300.s1 = _this300.s2;
							_this300.s2 = _this300.s3;
							_this300.s3 = _this300.s4;
							_this300.s4 = _this300.s5;
							_this300.s5 = null;
							if(_this300.s6 != null) {
								var _this301 = _this300.s6;
								var out127 = _this301.s0;
								if(_this301.l != 0) {
									_this301.s0 = _this301.s1;
									_this301.s1 = _this301.s2;
									_this301.s2 = _this301.s3;
									_this301.s3 = _this301.s4;
									_this301.s4 = _this301.s5;
									_this301.s5 = null;
									if(_this301.s6 != null) {
										_this301.s5 = _this301.s6.shift();
									}
									_this301.l--;
								}
								_this300.s5 = out127;
							}
							_this300.l--;
						}
						this.lastX = tmp + out126;
						this.pathContext.lineTo(this.lastX,this.lastY);
					}
				}
				break;
			case 108:
				var _this302 = this.store;
				_this302.l = 0;
				_this302.s0 = null;
				_this302.s1 = null;
				_this302.s2 = null;
				_this302.s3 = null;
				_this302.s4 = null;
				_this302.s5 = null;
				_this302.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp12 = "";
				var exit12 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp12 != "") {
							if((this.store.l & 1) == 0) {
								var _this303 = this.store;
								var v81 = parseFloat(temp12);
								switch(_this303.l) {
								case 0:
									_this303.s0 = v81;
									break;
								case 1:
									_this303.s1 = v81;
									break;
								case 2:
									_this303.s2 = v81;
									break;
								case 3:
									_this303.s3 = v81;
									break;
								case 4:
									_this303.s4 = v81;
									break;
								case 5:
									_this303.s5 = v81;
									break;
								default:
									if(_this303.s6 == null) {
										_this303.s6 = new justPath_StoreF6();
									}
									var _this304 = _this303.s6;
									switch(_this304.l) {
									case 0:
										_this304.s0 = v81;
										break;
									case 1:
										_this304.s1 = v81;
										break;
									case 2:
										_this304.s2 = v81;
										break;
									case 3:
										_this304.s3 = v81;
										break;
									case 4:
										_this304.s4 = v81;
										break;
									case 5:
										_this304.s5 = v81;
										break;
									default:
										if(_this304.s6 == null) {
											_this304.s6 = new justPath_StoreF6();
										}
										_this304.s6.push(v81);
									}
									_this304.l++;
								}
								_this303.l++;
							} else {
								var _this305 = this.store;
								var v82 = parseFloat(temp12);
								switch(_this305.l) {
								case 0:
									_this305.s0 = v82;
									break;
								case 1:
									_this305.s1 = v82;
									break;
								case 2:
									_this305.s2 = v82;
									break;
								case 3:
									_this305.s3 = v82;
									break;
								case 4:
									_this305.s4 = v82;
									break;
								case 5:
									_this305.s5 = v82;
									break;
								default:
									if(_this305.s6 == null) {
										_this305.s6 = new justPath_StoreF6();
									}
									var _this306 = _this305.s6;
									switch(_this306.l) {
									case 0:
										_this306.s0 = v82;
										break;
									case 1:
										_this306.s1 = v82;
										break;
									case 2:
										_this306.s2 = v82;
										break;
									case 3:
										_this306.s3 = v82;
										break;
									case 4:
										_this306.s4 = v82;
										break;
									case 5:
										_this306.s5 = v82;
										break;
									default:
										if(_this306.s6 == null) {
											_this306.s6 = new justPath_StoreF6();
										}
										_this306.s6.push(v82);
									}
									_this306.l++;
								}
								_this305.l++;
							}
							temp12 = "";
						}
						break;
					case 45:
						if(temp12 != "") {
							if((this.store.l & 1) == 0) {
								var _this307 = this.store;
								var v83 = parseFloat(temp12);
								switch(_this307.l) {
								case 0:
									_this307.s0 = v83;
									break;
								case 1:
									_this307.s1 = v83;
									break;
								case 2:
									_this307.s2 = v83;
									break;
								case 3:
									_this307.s3 = v83;
									break;
								case 4:
									_this307.s4 = v83;
									break;
								case 5:
									_this307.s5 = v83;
									break;
								default:
									if(_this307.s6 == null) {
										_this307.s6 = new justPath_StoreF6();
									}
									var _this308 = _this307.s6;
									switch(_this308.l) {
									case 0:
										_this308.s0 = v83;
										break;
									case 1:
										_this308.s1 = v83;
										break;
									case 2:
										_this308.s2 = v83;
										break;
									case 3:
										_this308.s3 = v83;
										break;
									case 4:
										_this308.s4 = v83;
										break;
									case 5:
										_this308.s5 = v83;
										break;
									default:
										if(_this308.s6 == null) {
											_this308.s6 = new justPath_StoreF6();
										}
										_this308.s6.push(v83);
									}
									_this308.l++;
								}
								_this307.l++;
							} else {
								var _this309 = this.store;
								var v84 = parseFloat(temp12);
								switch(_this309.l) {
								case 0:
									_this309.s0 = v84;
									break;
								case 1:
									_this309.s1 = v84;
									break;
								case 2:
									_this309.s2 = v84;
									break;
								case 3:
									_this309.s3 = v84;
									break;
								case 4:
									_this309.s4 = v84;
									break;
								case 5:
									_this309.s5 = v84;
									break;
								default:
									if(_this309.s6 == null) {
										_this309.s6 = new justPath_StoreF6();
									}
									var _this310 = _this309.s6;
									switch(_this310.l) {
									case 0:
										_this310.s0 = v84;
										break;
									case 1:
										_this310.s1 = v84;
										break;
									case 2:
										_this310.s2 = v84;
										break;
									case 3:
										_this310.s3 = v84;
										break;
									case 4:
										_this310.s4 = v84;
										break;
									case 5:
										_this310.s5 = v84;
										break;
									default:
										if(_this310.s6 == null) {
											_this310.s6 = new justPath_StoreF6();
										}
										_this310.s6.push(v84);
									}
									_this310.l++;
								}
								_this309.l++;
							}
						}
						temp12 = "-";
						break;
					case 46:
						temp12 += ".";
						break;
					case 48:
						temp12 += "0";
						break;
					case 49:
						temp12 += "1";
						break;
					case 50:
						temp12 += "2";
						break;
					case 51:
						temp12 += "3";
						break;
					case 52:
						temp12 += "4";
						break;
					case 53:
						temp12 += "5";
						break;
					case 54:
						temp12 += "6";
						break;
					case 55:
						temp12 += "7";
						break;
					case 56:
						temp12 += "8";
						break;
					case 57:
						temp12 += "9";
						break;
					default:
						if(temp12 != "") {
							if((this.store.l & 1) == 0) {
								var _this311 = this.store;
								var v85 = parseFloat(temp12);
								switch(_this311.l) {
								case 0:
									_this311.s0 = v85;
									break;
								case 1:
									_this311.s1 = v85;
									break;
								case 2:
									_this311.s2 = v85;
									break;
								case 3:
									_this311.s3 = v85;
									break;
								case 4:
									_this311.s4 = v85;
									break;
								case 5:
									_this311.s5 = v85;
									break;
								default:
									if(_this311.s6 == null) {
										_this311.s6 = new justPath_StoreF6();
									}
									var _this312 = _this311.s6;
									switch(_this312.l) {
									case 0:
										_this312.s0 = v85;
										break;
									case 1:
										_this312.s1 = v85;
										break;
									case 2:
										_this312.s2 = v85;
										break;
									case 3:
										_this312.s3 = v85;
										break;
									case 4:
										_this312.s4 = v85;
										break;
									case 5:
										_this312.s5 = v85;
										break;
									default:
										if(_this312.s6 == null) {
											_this312.s6 = new justPath_StoreF6();
										}
										_this312.s6.push(v85);
									}
									_this312.l++;
								}
								_this311.l++;
							} else {
								var _this313 = this.store;
								var v86 = parseFloat(temp12);
								switch(_this313.l) {
								case 0:
									_this313.s0 = v86;
									break;
								case 1:
									_this313.s1 = v86;
									break;
								case 2:
									_this313.s2 = v86;
									break;
								case 3:
									_this313.s3 = v86;
									break;
								case 4:
									_this313.s4 = v86;
									break;
								case 5:
									_this313.s5 = v86;
									break;
								default:
									if(_this313.s6 == null) {
										_this313.s6 = new justPath_StoreF6();
									}
									var _this314 = _this313.s6;
									switch(_this314.l) {
									case 0:
										_this314.s0 = v86;
										break;
									case 1:
										_this314.s1 = v86;
										break;
									case 2:
										_this314.s2 = v86;
										break;
									case 3:
										_this314.s3 = v86;
										break;
									case 4:
										_this314.s4 = v86;
										break;
									case 5:
										_this314.s5 = v86;
										break;
									default:
										if(_this314.s6 == null) {
											_this314.s6 = new justPath_StoreF6();
										}
										_this314.s6.push(v86);
									}
									_this314.l++;
								}
								_this313.l++;
							}
							temp12 = "";
						}
						this.pos--;
						exit12 = true;
					}
					if(exit12) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 2) {
					this.lastX = this.store.s0 + this.lastX;
					this.lastY = this.store.s1 + this.lastY;
					this.pathContext.lineTo(this.lastX,this.lastY);
				} else if(this.store.l > 2) {
					while(this.store.l > 2) {
						var _this315 = this.store;
						var out128 = _this315.s0;
						if(_this315.l != 0) {
							_this315.s0 = _this315.s1;
							_this315.s1 = _this315.s2;
							_this315.s2 = _this315.s3;
							_this315.s3 = _this315.s4;
							_this315.s4 = _this315.s5;
							_this315.s5 = null;
							if(_this315.s6 != null) {
								var _this316 = _this315.s6;
								var out129 = _this316.s0;
								if(_this316.l != 0) {
									_this316.s0 = _this316.s1;
									_this316.s1 = _this316.s2;
									_this316.s2 = _this316.s3;
									_this316.s3 = _this316.s4;
									_this316.s4 = _this316.s5;
									_this316.s5 = null;
									if(_this316.s6 != null) {
										_this316.s5 = _this316.s6.shift();
									}
									_this316.l--;
								}
								_this315.s5 = out129;
							}
							_this315.l--;
						}
						this.lastX = out128 + this.lastX;
						var _this317 = this.store;
						var out130 = _this317.s0;
						if(_this317.l != 0) {
							_this317.s0 = _this317.s1;
							_this317.s1 = _this317.s2;
							_this317.s2 = _this317.s3;
							_this317.s3 = _this317.s4;
							_this317.s4 = _this317.s5;
							_this317.s5 = null;
							if(_this317.s6 != null) {
								var _this318 = _this317.s6;
								var out131 = _this318.s0;
								if(_this318.l != 0) {
									_this318.s0 = _this318.s1;
									_this318.s1 = _this318.s2;
									_this318.s2 = _this318.s3;
									_this318.s3 = _this318.s4;
									_this318.s4 = _this318.s5;
									_this318.s5 = null;
									if(_this318.s6 != null) {
										_this318.s5 = _this318.s6.shift();
									}
									_this318.l--;
								}
								_this317.s5 = out131;
							}
							_this317.l--;
						}
						this.lastY = out130 + this.lastY;
						this.pathContext.lineTo(this.lastX,this.lastY);
					}
				}
				break;
			case 109:
				var _this319 = this.store;
				_this319.l = 0;
				_this319.s0 = null;
				_this319.s1 = null;
				_this319.s2 = null;
				_this319.s3 = null;
				_this319.s4 = null;
				_this319.s5 = null;
				_this319.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp13 = "";
				var exit13 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp13 != "") {
							if((this.store.l & 1) == 0) {
								var _this320 = this.store;
								var v87 = parseFloat(temp13);
								switch(_this320.l) {
								case 0:
									_this320.s0 = v87;
									break;
								case 1:
									_this320.s1 = v87;
									break;
								case 2:
									_this320.s2 = v87;
									break;
								case 3:
									_this320.s3 = v87;
									break;
								case 4:
									_this320.s4 = v87;
									break;
								case 5:
									_this320.s5 = v87;
									break;
								default:
									if(_this320.s6 == null) {
										_this320.s6 = new justPath_StoreF6();
									}
									var _this321 = _this320.s6;
									switch(_this321.l) {
									case 0:
										_this321.s0 = v87;
										break;
									case 1:
										_this321.s1 = v87;
										break;
									case 2:
										_this321.s2 = v87;
										break;
									case 3:
										_this321.s3 = v87;
										break;
									case 4:
										_this321.s4 = v87;
										break;
									case 5:
										_this321.s5 = v87;
										break;
									default:
										if(_this321.s6 == null) {
											_this321.s6 = new justPath_StoreF6();
										}
										_this321.s6.push(v87);
									}
									_this321.l++;
								}
								_this320.l++;
							} else {
								var _this322 = this.store;
								var v88 = parseFloat(temp13);
								switch(_this322.l) {
								case 0:
									_this322.s0 = v88;
									break;
								case 1:
									_this322.s1 = v88;
									break;
								case 2:
									_this322.s2 = v88;
									break;
								case 3:
									_this322.s3 = v88;
									break;
								case 4:
									_this322.s4 = v88;
									break;
								case 5:
									_this322.s5 = v88;
									break;
								default:
									if(_this322.s6 == null) {
										_this322.s6 = new justPath_StoreF6();
									}
									var _this323 = _this322.s6;
									switch(_this323.l) {
									case 0:
										_this323.s0 = v88;
										break;
									case 1:
										_this323.s1 = v88;
										break;
									case 2:
										_this323.s2 = v88;
										break;
									case 3:
										_this323.s3 = v88;
										break;
									case 4:
										_this323.s4 = v88;
										break;
									case 5:
										_this323.s5 = v88;
										break;
									default:
										if(_this323.s6 == null) {
											_this323.s6 = new justPath_StoreF6();
										}
										_this323.s6.push(v88);
									}
									_this323.l++;
								}
								_this322.l++;
							}
							temp13 = "";
						}
						break;
					case 45:
						if(temp13 != "") {
							if((this.store.l & 1) == 0) {
								var _this324 = this.store;
								var v89 = parseFloat(temp13);
								switch(_this324.l) {
								case 0:
									_this324.s0 = v89;
									break;
								case 1:
									_this324.s1 = v89;
									break;
								case 2:
									_this324.s2 = v89;
									break;
								case 3:
									_this324.s3 = v89;
									break;
								case 4:
									_this324.s4 = v89;
									break;
								case 5:
									_this324.s5 = v89;
									break;
								default:
									if(_this324.s6 == null) {
										_this324.s6 = new justPath_StoreF6();
									}
									var _this325 = _this324.s6;
									switch(_this325.l) {
									case 0:
										_this325.s0 = v89;
										break;
									case 1:
										_this325.s1 = v89;
										break;
									case 2:
										_this325.s2 = v89;
										break;
									case 3:
										_this325.s3 = v89;
										break;
									case 4:
										_this325.s4 = v89;
										break;
									case 5:
										_this325.s5 = v89;
										break;
									default:
										if(_this325.s6 == null) {
											_this325.s6 = new justPath_StoreF6();
										}
										_this325.s6.push(v89);
									}
									_this325.l++;
								}
								_this324.l++;
							} else {
								var _this326 = this.store;
								var v90 = parseFloat(temp13);
								switch(_this326.l) {
								case 0:
									_this326.s0 = v90;
									break;
								case 1:
									_this326.s1 = v90;
									break;
								case 2:
									_this326.s2 = v90;
									break;
								case 3:
									_this326.s3 = v90;
									break;
								case 4:
									_this326.s4 = v90;
									break;
								case 5:
									_this326.s5 = v90;
									break;
								default:
									if(_this326.s6 == null) {
										_this326.s6 = new justPath_StoreF6();
									}
									var _this327 = _this326.s6;
									switch(_this327.l) {
									case 0:
										_this327.s0 = v90;
										break;
									case 1:
										_this327.s1 = v90;
										break;
									case 2:
										_this327.s2 = v90;
										break;
									case 3:
										_this327.s3 = v90;
										break;
									case 4:
										_this327.s4 = v90;
										break;
									case 5:
										_this327.s5 = v90;
										break;
									default:
										if(_this327.s6 == null) {
											_this327.s6 = new justPath_StoreF6();
										}
										_this327.s6.push(v90);
									}
									_this327.l++;
								}
								_this326.l++;
							}
						}
						temp13 = "-";
						break;
					case 46:
						temp13 += ".";
						break;
					case 48:
						temp13 += "0";
						break;
					case 49:
						temp13 += "1";
						break;
					case 50:
						temp13 += "2";
						break;
					case 51:
						temp13 += "3";
						break;
					case 52:
						temp13 += "4";
						break;
					case 53:
						temp13 += "5";
						break;
					case 54:
						temp13 += "6";
						break;
					case 55:
						temp13 += "7";
						break;
					case 56:
						temp13 += "8";
						break;
					case 57:
						temp13 += "9";
						break;
					default:
						if(temp13 != "") {
							if((this.store.l & 1) == 0) {
								var _this328 = this.store;
								var v91 = parseFloat(temp13);
								switch(_this328.l) {
								case 0:
									_this328.s0 = v91;
									break;
								case 1:
									_this328.s1 = v91;
									break;
								case 2:
									_this328.s2 = v91;
									break;
								case 3:
									_this328.s3 = v91;
									break;
								case 4:
									_this328.s4 = v91;
									break;
								case 5:
									_this328.s5 = v91;
									break;
								default:
									if(_this328.s6 == null) {
										_this328.s6 = new justPath_StoreF6();
									}
									var _this329 = _this328.s6;
									switch(_this329.l) {
									case 0:
										_this329.s0 = v91;
										break;
									case 1:
										_this329.s1 = v91;
										break;
									case 2:
										_this329.s2 = v91;
										break;
									case 3:
										_this329.s3 = v91;
										break;
									case 4:
										_this329.s4 = v91;
										break;
									case 5:
										_this329.s5 = v91;
										break;
									default:
										if(_this329.s6 == null) {
											_this329.s6 = new justPath_StoreF6();
										}
										_this329.s6.push(v91);
									}
									_this329.l++;
								}
								_this328.l++;
							} else {
								var _this330 = this.store;
								var v92 = parseFloat(temp13);
								switch(_this330.l) {
								case 0:
									_this330.s0 = v92;
									break;
								case 1:
									_this330.s1 = v92;
									break;
								case 2:
									_this330.s2 = v92;
									break;
								case 3:
									_this330.s3 = v92;
									break;
								case 4:
									_this330.s4 = v92;
									break;
								case 5:
									_this330.s5 = v92;
									break;
								default:
									if(_this330.s6 == null) {
										_this330.s6 = new justPath_StoreF6();
									}
									var _this331 = _this330.s6;
									switch(_this331.l) {
									case 0:
										_this331.s0 = v92;
										break;
									case 1:
										_this331.s1 = v92;
										break;
									case 2:
										_this331.s2 = v92;
										break;
									case 3:
										_this331.s3 = v92;
										break;
									case 4:
										_this331.s4 = v92;
										break;
									case 5:
										_this331.s5 = v92;
										break;
									default:
										if(_this331.s6 == null) {
											_this331.s6 = new justPath_StoreF6();
										}
										_this331.s6.push(v92);
									}
									_this331.l++;
								}
								_this330.l++;
							}
							temp13 = "";
						}
						this.pos--;
						exit13 = true;
					}
					if(exit13) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 2) {
					this.lastX = this.store.s0 + this.lastX;
					this.lastY = this.store.s1 + this.lastY;
					this.pathContext.moveTo(this.lastX,this.lastY);
				} else if(this.store.l > 2) {
					var _this332 = this.store;
					var out132 = _this332.s0;
					if(_this332.l != 0) {
						_this332.s0 = _this332.s1;
						_this332.s1 = _this332.s2;
						_this332.s2 = _this332.s3;
						_this332.s3 = _this332.s4;
						_this332.s4 = _this332.s5;
						_this332.s5 = null;
						if(_this332.s6 != null) {
							var _this333 = _this332.s6;
							var out133 = _this333.s0;
							if(_this333.l != 0) {
								_this333.s0 = _this333.s1;
								_this333.s1 = _this333.s2;
								_this333.s2 = _this333.s3;
								_this333.s3 = _this333.s4;
								_this333.s4 = _this333.s5;
								_this333.s5 = null;
								if(_this333.s6 != null) {
									_this333.s5 = _this333.s6.shift();
								}
								_this333.l--;
							}
							_this332.s5 = out133;
						}
						_this332.l--;
					}
					this.lastX = out132 + this.lastX;
					var _this334 = this.store;
					var out134 = _this334.s0;
					if(_this334.l != 0) {
						_this334.s0 = _this334.s1;
						_this334.s1 = _this334.s2;
						_this334.s2 = _this334.s3;
						_this334.s3 = _this334.s4;
						_this334.s4 = _this334.s5;
						_this334.s5 = null;
						if(_this334.s6 != null) {
							var _this335 = _this334.s6;
							var out135 = _this335.s0;
							if(_this335.l != 0) {
								_this335.s0 = _this335.s1;
								_this335.s1 = _this335.s2;
								_this335.s2 = _this335.s3;
								_this335.s3 = _this335.s4;
								_this335.s4 = _this335.s5;
								_this335.s5 = null;
								if(_this335.s6 != null) {
									_this335.s5 = _this335.s6.shift();
								}
								_this335.l--;
							}
							_this334.s5 = out135;
						}
						_this334.l--;
					}
					this.lastY = out134 + this.lastY;
					this.pathContext.moveTo(this.lastX,this.lastY);
					while(this.store.l > 1) {
						var _this336 = this.store;
						var out136 = _this336.s0;
						if(_this336.l != 0) {
							_this336.s0 = _this336.s1;
							_this336.s1 = _this336.s2;
							_this336.s2 = _this336.s3;
							_this336.s3 = _this336.s4;
							_this336.s4 = _this336.s5;
							_this336.s5 = null;
							if(_this336.s6 != null) {
								var _this337 = _this336.s6;
								var out137 = _this337.s0;
								if(_this337.l != 0) {
									_this337.s0 = _this337.s1;
									_this337.s1 = _this337.s2;
									_this337.s2 = _this337.s3;
									_this337.s3 = _this337.s4;
									_this337.s4 = _this337.s5;
									_this337.s5 = null;
									if(_this337.s6 != null) {
										_this337.s5 = _this337.s6.shift();
									}
									_this337.l--;
								}
								_this336.s5 = out137;
							}
							_this336.l--;
						}
						this.lastX = out136 + this.lastX;
						var _this338 = this.store;
						var out138 = _this338.s0;
						if(_this338.l != 0) {
							_this338.s0 = _this338.s1;
							_this338.s1 = _this338.s2;
							_this338.s2 = _this338.s3;
							_this338.s3 = _this338.s4;
							_this338.s4 = _this338.s5;
							_this338.s5 = null;
							if(_this338.s6 != null) {
								var _this339 = _this338.s6;
								var out139 = _this339.s0;
								if(_this339.l != 0) {
									_this339.s0 = _this339.s1;
									_this339.s1 = _this339.s2;
									_this339.s2 = _this339.s3;
									_this339.s3 = _this339.s4;
									_this339.s4 = _this339.s5;
									_this339.s5 = null;
									if(_this339.s6 != null) {
										_this339.s5 = _this339.s6.shift();
									}
									_this339.l--;
								}
								_this338.s5 = out139;
							}
							_this338.l--;
						}
						this.lastY = out138 + this.lastY;
						this.pathContext.lineTo(this.lastX,this.lastY);
					}
				}
				break;
			case 113:
				var _this340 = this.store;
				_this340.l = 0;
				_this340.s0 = null;
				_this340.s1 = null;
				_this340.s2 = null;
				_this340.s3 = null;
				_this340.s4 = null;
				_this340.s5 = null;
				_this340.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp14 = "";
				var exit14 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp14 != "") {
							if((this.store.l & 1) == 0) {
								var _this341 = this.store;
								var v93 = parseFloat(temp14);
								switch(_this341.l) {
								case 0:
									_this341.s0 = v93;
									break;
								case 1:
									_this341.s1 = v93;
									break;
								case 2:
									_this341.s2 = v93;
									break;
								case 3:
									_this341.s3 = v93;
									break;
								case 4:
									_this341.s4 = v93;
									break;
								case 5:
									_this341.s5 = v93;
									break;
								default:
									if(_this341.s6 == null) {
										_this341.s6 = new justPath_StoreF6();
									}
									var _this342 = _this341.s6;
									switch(_this342.l) {
									case 0:
										_this342.s0 = v93;
										break;
									case 1:
										_this342.s1 = v93;
										break;
									case 2:
										_this342.s2 = v93;
										break;
									case 3:
										_this342.s3 = v93;
										break;
									case 4:
										_this342.s4 = v93;
										break;
									case 5:
										_this342.s5 = v93;
										break;
									default:
										if(_this342.s6 == null) {
											_this342.s6 = new justPath_StoreF6();
										}
										_this342.s6.push(v93);
									}
									_this342.l++;
								}
								_this341.l++;
							} else {
								var _this343 = this.store;
								var v94 = parseFloat(temp14);
								switch(_this343.l) {
								case 0:
									_this343.s0 = v94;
									break;
								case 1:
									_this343.s1 = v94;
									break;
								case 2:
									_this343.s2 = v94;
									break;
								case 3:
									_this343.s3 = v94;
									break;
								case 4:
									_this343.s4 = v94;
									break;
								case 5:
									_this343.s5 = v94;
									break;
								default:
									if(_this343.s6 == null) {
										_this343.s6 = new justPath_StoreF6();
									}
									var _this344 = _this343.s6;
									switch(_this344.l) {
									case 0:
										_this344.s0 = v94;
										break;
									case 1:
										_this344.s1 = v94;
										break;
									case 2:
										_this344.s2 = v94;
										break;
									case 3:
										_this344.s3 = v94;
										break;
									case 4:
										_this344.s4 = v94;
										break;
									case 5:
										_this344.s5 = v94;
										break;
									default:
										if(_this344.s6 == null) {
											_this344.s6 = new justPath_StoreF6();
										}
										_this344.s6.push(v94);
									}
									_this344.l++;
								}
								_this343.l++;
							}
							temp14 = "";
						}
						break;
					case 45:
						if(temp14 != "") {
							if((this.store.l & 1) == 0) {
								var _this345 = this.store;
								var v95 = parseFloat(temp14);
								switch(_this345.l) {
								case 0:
									_this345.s0 = v95;
									break;
								case 1:
									_this345.s1 = v95;
									break;
								case 2:
									_this345.s2 = v95;
									break;
								case 3:
									_this345.s3 = v95;
									break;
								case 4:
									_this345.s4 = v95;
									break;
								case 5:
									_this345.s5 = v95;
									break;
								default:
									if(_this345.s6 == null) {
										_this345.s6 = new justPath_StoreF6();
									}
									var _this346 = _this345.s6;
									switch(_this346.l) {
									case 0:
										_this346.s0 = v95;
										break;
									case 1:
										_this346.s1 = v95;
										break;
									case 2:
										_this346.s2 = v95;
										break;
									case 3:
										_this346.s3 = v95;
										break;
									case 4:
										_this346.s4 = v95;
										break;
									case 5:
										_this346.s5 = v95;
										break;
									default:
										if(_this346.s6 == null) {
											_this346.s6 = new justPath_StoreF6();
										}
										_this346.s6.push(v95);
									}
									_this346.l++;
								}
								_this345.l++;
							} else {
								var _this347 = this.store;
								var v96 = parseFloat(temp14);
								switch(_this347.l) {
								case 0:
									_this347.s0 = v96;
									break;
								case 1:
									_this347.s1 = v96;
									break;
								case 2:
									_this347.s2 = v96;
									break;
								case 3:
									_this347.s3 = v96;
									break;
								case 4:
									_this347.s4 = v96;
									break;
								case 5:
									_this347.s5 = v96;
									break;
								default:
									if(_this347.s6 == null) {
										_this347.s6 = new justPath_StoreF6();
									}
									var _this348 = _this347.s6;
									switch(_this348.l) {
									case 0:
										_this348.s0 = v96;
										break;
									case 1:
										_this348.s1 = v96;
										break;
									case 2:
										_this348.s2 = v96;
										break;
									case 3:
										_this348.s3 = v96;
										break;
									case 4:
										_this348.s4 = v96;
										break;
									case 5:
										_this348.s5 = v96;
										break;
									default:
										if(_this348.s6 == null) {
											_this348.s6 = new justPath_StoreF6();
										}
										_this348.s6.push(v96);
									}
									_this348.l++;
								}
								_this347.l++;
							}
						}
						temp14 = "-";
						break;
					case 46:
						temp14 += ".";
						break;
					case 48:
						temp14 += "0";
						break;
					case 49:
						temp14 += "1";
						break;
					case 50:
						temp14 += "2";
						break;
					case 51:
						temp14 += "3";
						break;
					case 52:
						temp14 += "4";
						break;
					case 53:
						temp14 += "5";
						break;
					case 54:
						temp14 += "6";
						break;
					case 55:
						temp14 += "7";
						break;
					case 56:
						temp14 += "8";
						break;
					case 57:
						temp14 += "9";
						break;
					default:
						if(temp14 != "") {
							if((this.store.l & 1) == 0) {
								var _this349 = this.store;
								var v97 = parseFloat(temp14);
								switch(_this349.l) {
								case 0:
									_this349.s0 = v97;
									break;
								case 1:
									_this349.s1 = v97;
									break;
								case 2:
									_this349.s2 = v97;
									break;
								case 3:
									_this349.s3 = v97;
									break;
								case 4:
									_this349.s4 = v97;
									break;
								case 5:
									_this349.s5 = v97;
									break;
								default:
									if(_this349.s6 == null) {
										_this349.s6 = new justPath_StoreF6();
									}
									var _this350 = _this349.s6;
									switch(_this350.l) {
									case 0:
										_this350.s0 = v97;
										break;
									case 1:
										_this350.s1 = v97;
										break;
									case 2:
										_this350.s2 = v97;
										break;
									case 3:
										_this350.s3 = v97;
										break;
									case 4:
										_this350.s4 = v97;
										break;
									case 5:
										_this350.s5 = v97;
										break;
									default:
										if(_this350.s6 == null) {
											_this350.s6 = new justPath_StoreF6();
										}
										_this350.s6.push(v97);
									}
									_this350.l++;
								}
								_this349.l++;
							} else {
								var _this351 = this.store;
								var v98 = parseFloat(temp14);
								switch(_this351.l) {
								case 0:
									_this351.s0 = v98;
									break;
								case 1:
									_this351.s1 = v98;
									break;
								case 2:
									_this351.s2 = v98;
									break;
								case 3:
									_this351.s3 = v98;
									break;
								case 4:
									_this351.s4 = v98;
									break;
								case 5:
									_this351.s5 = v98;
									break;
								default:
									if(_this351.s6 == null) {
										_this351.s6 = new justPath_StoreF6();
									}
									var _this352 = _this351.s6;
									switch(_this352.l) {
									case 0:
										_this352.s0 = v98;
										break;
									case 1:
										_this352.s1 = v98;
										break;
									case 2:
										_this352.s2 = v98;
										break;
									case 3:
										_this352.s3 = v98;
										break;
									case 4:
										_this352.s4 = v98;
										break;
									case 5:
										_this352.s5 = v98;
										break;
									default:
										if(_this352.s6 == null) {
											_this352.s6 = new justPath_StoreF6();
										}
										_this352.s6.push(v98);
									}
									_this352.l++;
								}
								_this351.l++;
							}
							temp14 = "";
						}
						this.pos--;
						exit14 = true;
					}
					if(exit14) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 4) {
					this.controlX = this.lastX + this.store.s0;
					this.controlY = this.lastY + this.store.s1;
					this.lastX = this.store.s0 + this.lastX;
					this.lastY = this.store.s1 + this.lastY;
					this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				} else if(this.store.l > 4) {
					while(this.store.l > 3) {
						var tmp1 = this.lastX;
						var _this353 = this.store;
						var out140 = _this353.s0;
						if(_this353.l != 0) {
							_this353.s0 = _this353.s1;
							_this353.s1 = _this353.s2;
							_this353.s2 = _this353.s3;
							_this353.s3 = _this353.s4;
							_this353.s4 = _this353.s5;
							_this353.s5 = null;
							if(_this353.s6 != null) {
								var _this354 = _this353.s6;
								var out141 = _this354.s0;
								if(_this354.l != 0) {
									_this354.s0 = _this354.s1;
									_this354.s1 = _this354.s2;
									_this354.s2 = _this354.s3;
									_this354.s3 = _this354.s4;
									_this354.s4 = _this354.s5;
									_this354.s5 = null;
									if(_this354.s6 != null) {
										_this354.s5 = _this354.s6.shift();
									}
									_this354.l--;
								}
								_this353.s5 = out141;
							}
							_this353.l--;
						}
						this.controlX = tmp1 + out140;
						var tmp2 = this.lastY;
						var _this355 = this.store;
						var out142 = _this355.s0;
						if(_this355.l != 0) {
							_this355.s0 = _this355.s1;
							_this355.s1 = _this355.s2;
							_this355.s2 = _this355.s3;
							_this355.s3 = _this355.s4;
							_this355.s4 = _this355.s5;
							_this355.s5 = null;
							if(_this355.s6 != null) {
								var _this356 = _this355.s6;
								var out143 = _this356.s0;
								if(_this356.l != 0) {
									_this356.s0 = _this356.s1;
									_this356.s1 = _this356.s2;
									_this356.s2 = _this356.s3;
									_this356.s3 = _this356.s4;
									_this356.s4 = _this356.s5;
									_this356.s5 = null;
									if(_this356.s6 != null) {
										_this356.s5 = _this356.s6.shift();
									}
									_this356.l--;
								}
								_this355.s5 = out143;
							}
							_this355.l--;
						}
						this.controlY = tmp2 + out142;
						var _this357 = this.store;
						var out144 = _this357.s0;
						if(_this357.l != 0) {
							_this357.s0 = _this357.s1;
							_this357.s1 = _this357.s2;
							_this357.s2 = _this357.s3;
							_this357.s3 = _this357.s4;
							_this357.s4 = _this357.s5;
							_this357.s5 = null;
							if(_this357.s6 != null) {
								var _this358 = _this357.s6;
								var out145 = _this358.s0;
								if(_this358.l != 0) {
									_this358.s0 = _this358.s1;
									_this358.s1 = _this358.s2;
									_this358.s2 = _this358.s3;
									_this358.s3 = _this358.s4;
									_this358.s4 = _this358.s5;
									_this358.s5 = null;
									if(_this358.s6 != null) {
										_this358.s5 = _this358.s6.shift();
									}
									_this358.l--;
								}
								_this357.s5 = out145;
							}
							_this357.l--;
						}
						this.lastX = out144 + this.lastX;
						var _this359 = this.store;
						var out146 = _this359.s0;
						if(_this359.l != 0) {
							_this359.s0 = _this359.s1;
							_this359.s1 = _this359.s2;
							_this359.s2 = _this359.s3;
							_this359.s3 = _this359.s4;
							_this359.s4 = _this359.s5;
							_this359.s5 = null;
							if(_this359.s6 != null) {
								var _this360 = _this359.s6;
								var out147 = _this360.s0;
								if(_this360.l != 0) {
									_this360.s0 = _this360.s1;
									_this360.s1 = _this360.s2;
									_this360.s2 = _this360.s3;
									_this360.s3 = _this360.s4;
									_this360.s4 = _this360.s5;
									_this360.s5 = null;
									if(_this360.s6 != null) {
										_this360.s5 = _this360.s6.shift();
									}
									_this360.l--;
								}
								_this359.s5 = out147;
							}
							_this359.l--;
						}
						this.lastY = out146 + this.lastY;
						this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
					}
				}
				break;
			case 115:
				var _this361 = this.store;
				_this361.l = 0;
				_this361.s0 = null;
				_this361.s1 = null;
				_this361.s2 = null;
				_this361.s3 = null;
				_this361.s4 = null;
				_this361.s5 = null;
				_this361.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp15 = "";
				var exit15 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp15 != "") {
							if((this.store.l & 1) == 0) {
								var _this362 = this.store;
								var v99 = parseFloat(temp15);
								switch(_this362.l) {
								case 0:
									_this362.s0 = v99;
									break;
								case 1:
									_this362.s1 = v99;
									break;
								case 2:
									_this362.s2 = v99;
									break;
								case 3:
									_this362.s3 = v99;
									break;
								case 4:
									_this362.s4 = v99;
									break;
								case 5:
									_this362.s5 = v99;
									break;
								default:
									if(_this362.s6 == null) {
										_this362.s6 = new justPath_StoreF6();
									}
									var _this363 = _this362.s6;
									switch(_this363.l) {
									case 0:
										_this363.s0 = v99;
										break;
									case 1:
										_this363.s1 = v99;
										break;
									case 2:
										_this363.s2 = v99;
										break;
									case 3:
										_this363.s3 = v99;
										break;
									case 4:
										_this363.s4 = v99;
										break;
									case 5:
										_this363.s5 = v99;
										break;
									default:
										if(_this363.s6 == null) {
											_this363.s6 = new justPath_StoreF6();
										}
										_this363.s6.push(v99);
									}
									_this363.l++;
								}
								_this362.l++;
							} else {
								var _this364 = this.store;
								var v100 = parseFloat(temp15);
								switch(_this364.l) {
								case 0:
									_this364.s0 = v100;
									break;
								case 1:
									_this364.s1 = v100;
									break;
								case 2:
									_this364.s2 = v100;
									break;
								case 3:
									_this364.s3 = v100;
									break;
								case 4:
									_this364.s4 = v100;
									break;
								case 5:
									_this364.s5 = v100;
									break;
								default:
									if(_this364.s6 == null) {
										_this364.s6 = new justPath_StoreF6();
									}
									var _this365 = _this364.s6;
									switch(_this365.l) {
									case 0:
										_this365.s0 = v100;
										break;
									case 1:
										_this365.s1 = v100;
										break;
									case 2:
										_this365.s2 = v100;
										break;
									case 3:
										_this365.s3 = v100;
										break;
									case 4:
										_this365.s4 = v100;
										break;
									case 5:
										_this365.s5 = v100;
										break;
									default:
										if(_this365.s6 == null) {
											_this365.s6 = new justPath_StoreF6();
										}
										_this365.s6.push(v100);
									}
									_this365.l++;
								}
								_this364.l++;
							}
							temp15 = "";
						}
						break;
					case 45:
						if(temp15 != "") {
							if((this.store.l & 1) == 0) {
								var _this366 = this.store;
								var v101 = parseFloat(temp15);
								switch(_this366.l) {
								case 0:
									_this366.s0 = v101;
									break;
								case 1:
									_this366.s1 = v101;
									break;
								case 2:
									_this366.s2 = v101;
									break;
								case 3:
									_this366.s3 = v101;
									break;
								case 4:
									_this366.s4 = v101;
									break;
								case 5:
									_this366.s5 = v101;
									break;
								default:
									if(_this366.s6 == null) {
										_this366.s6 = new justPath_StoreF6();
									}
									var _this367 = _this366.s6;
									switch(_this367.l) {
									case 0:
										_this367.s0 = v101;
										break;
									case 1:
										_this367.s1 = v101;
										break;
									case 2:
										_this367.s2 = v101;
										break;
									case 3:
										_this367.s3 = v101;
										break;
									case 4:
										_this367.s4 = v101;
										break;
									case 5:
										_this367.s5 = v101;
										break;
									default:
										if(_this367.s6 == null) {
											_this367.s6 = new justPath_StoreF6();
										}
										_this367.s6.push(v101);
									}
									_this367.l++;
								}
								_this366.l++;
							} else {
								var _this368 = this.store;
								var v102 = parseFloat(temp15);
								switch(_this368.l) {
								case 0:
									_this368.s0 = v102;
									break;
								case 1:
									_this368.s1 = v102;
									break;
								case 2:
									_this368.s2 = v102;
									break;
								case 3:
									_this368.s3 = v102;
									break;
								case 4:
									_this368.s4 = v102;
									break;
								case 5:
									_this368.s5 = v102;
									break;
								default:
									if(_this368.s6 == null) {
										_this368.s6 = new justPath_StoreF6();
									}
									var _this369 = _this368.s6;
									switch(_this369.l) {
									case 0:
										_this369.s0 = v102;
										break;
									case 1:
										_this369.s1 = v102;
										break;
									case 2:
										_this369.s2 = v102;
										break;
									case 3:
										_this369.s3 = v102;
										break;
									case 4:
										_this369.s4 = v102;
										break;
									case 5:
										_this369.s5 = v102;
										break;
									default:
										if(_this369.s6 == null) {
											_this369.s6 = new justPath_StoreF6();
										}
										_this369.s6.push(v102);
									}
									_this369.l++;
								}
								_this368.l++;
							}
						}
						temp15 = "-";
						break;
					case 46:
						temp15 += ".";
						break;
					case 48:
						temp15 += "0";
						break;
					case 49:
						temp15 += "1";
						break;
					case 50:
						temp15 += "2";
						break;
					case 51:
						temp15 += "3";
						break;
					case 52:
						temp15 += "4";
						break;
					case 53:
						temp15 += "5";
						break;
					case 54:
						temp15 += "6";
						break;
					case 55:
						temp15 += "7";
						break;
					case 56:
						temp15 += "8";
						break;
					case 57:
						temp15 += "9";
						break;
					default:
						if(temp15 != "") {
							if((this.store.l & 1) == 0) {
								var _this370 = this.store;
								var v103 = parseFloat(temp15);
								switch(_this370.l) {
								case 0:
									_this370.s0 = v103;
									break;
								case 1:
									_this370.s1 = v103;
									break;
								case 2:
									_this370.s2 = v103;
									break;
								case 3:
									_this370.s3 = v103;
									break;
								case 4:
									_this370.s4 = v103;
									break;
								case 5:
									_this370.s5 = v103;
									break;
								default:
									if(_this370.s6 == null) {
										_this370.s6 = new justPath_StoreF6();
									}
									var _this371 = _this370.s6;
									switch(_this371.l) {
									case 0:
										_this371.s0 = v103;
										break;
									case 1:
										_this371.s1 = v103;
										break;
									case 2:
										_this371.s2 = v103;
										break;
									case 3:
										_this371.s3 = v103;
										break;
									case 4:
										_this371.s4 = v103;
										break;
									case 5:
										_this371.s5 = v103;
										break;
									default:
										if(_this371.s6 == null) {
											_this371.s6 = new justPath_StoreF6();
										}
										_this371.s6.push(v103);
									}
									_this371.l++;
								}
								_this370.l++;
							} else {
								var _this372 = this.store;
								var v104 = parseFloat(temp15);
								switch(_this372.l) {
								case 0:
									_this372.s0 = v104;
									break;
								case 1:
									_this372.s1 = v104;
									break;
								case 2:
									_this372.s2 = v104;
									break;
								case 3:
									_this372.s3 = v104;
									break;
								case 4:
									_this372.s4 = v104;
									break;
								case 5:
									_this372.s5 = v104;
									break;
								default:
									if(_this372.s6 == null) {
										_this372.s6 = new justPath_StoreF6();
									}
									var _this373 = _this372.s6;
									switch(_this373.l) {
									case 0:
										_this373.s0 = v104;
										break;
									case 1:
										_this373.s1 = v104;
										break;
									case 2:
										_this373.s2 = v104;
										break;
									case 3:
										_this373.s3 = v104;
										break;
									case 4:
										_this373.s4 = v104;
										break;
									case 5:
										_this373.s5 = v104;
										break;
									default:
										if(_this373.s6 == null) {
											_this373.s6 = new justPath_StoreF6();
										}
										_this373.s6.push(v104);
									}
									_this373.l++;
								}
								_this372.l++;
							}
							temp15 = "";
						}
						this.pos--;
						exit15 = true;
					}
					if(exit15) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 4) {
					var firstX5 = this.store.s0 + this.lastX;
					var firstY5 = this.store.s1 + this.lastY;
					this.controlX = 2 * this.lastX - this.controlX;
					this.controlY = 2 * this.lastY - this.controlY;
					this.lastX = this.store.s2 + this.lastX;
					this.lastY = this.store.s3 + this.lastY;
					this.pathContext.curveTo(this.controlX,this.controlY,firstX5,firstY5,this.lastX,this.lastY);
					this.controlX = firstX5;
					this.controlY = firstY5;
				} else if(this.store.l > 4) {
					while(this.store.l > 3) {
						var _this374 = this.store;
						var out148 = _this374.s0;
						if(_this374.l != 0) {
							_this374.s0 = _this374.s1;
							_this374.s1 = _this374.s2;
							_this374.s2 = _this374.s3;
							_this374.s3 = _this374.s4;
							_this374.s4 = _this374.s5;
							_this374.s5 = null;
							if(_this374.s6 != null) {
								var _this375 = _this374.s6;
								var out149 = _this375.s0;
								if(_this375.l != 0) {
									_this375.s0 = _this375.s1;
									_this375.s1 = _this375.s2;
									_this375.s2 = _this375.s3;
									_this375.s3 = _this375.s4;
									_this375.s4 = _this375.s5;
									_this375.s5 = null;
									if(_this375.s6 != null) {
										_this375.s5 = _this375.s6.shift();
									}
									_this375.l--;
								}
								_this374.s5 = out149;
							}
							_this374.l--;
						}
						var firstX6 = out148 + this.lastX;
						var _this376 = this.store;
						var out150 = _this376.s0;
						if(_this376.l != 0) {
							_this376.s0 = _this376.s1;
							_this376.s1 = _this376.s2;
							_this376.s2 = _this376.s3;
							_this376.s3 = _this376.s4;
							_this376.s4 = _this376.s5;
							_this376.s5 = null;
							if(_this376.s6 != null) {
								var _this377 = _this376.s6;
								var out151 = _this377.s0;
								if(_this377.l != 0) {
									_this377.s0 = _this377.s1;
									_this377.s1 = _this377.s2;
									_this377.s2 = _this377.s3;
									_this377.s3 = _this377.s4;
									_this377.s4 = _this377.s5;
									_this377.s5 = null;
									if(_this377.s6 != null) {
										_this377.s5 = _this377.s6.shift();
									}
									_this377.l--;
								}
								_this376.s5 = out151;
							}
							_this376.l--;
						}
						var firstY6 = out150 + this.lastY;
						this.controlX = 2 * this.lastX - this.controlX;
						this.controlY = 2 * this.lastY - this.controlY;
						var _this378 = this.store;
						var out152 = _this378.s0;
						if(_this378.l != 0) {
							_this378.s0 = _this378.s1;
							_this378.s1 = _this378.s2;
							_this378.s2 = _this378.s3;
							_this378.s3 = _this378.s4;
							_this378.s4 = _this378.s5;
							_this378.s5 = null;
							if(_this378.s6 != null) {
								var _this379 = _this378.s6;
								var out153 = _this379.s0;
								if(_this379.l != 0) {
									_this379.s0 = _this379.s1;
									_this379.s1 = _this379.s2;
									_this379.s2 = _this379.s3;
									_this379.s3 = _this379.s4;
									_this379.s4 = _this379.s5;
									_this379.s5 = null;
									if(_this379.s6 != null) {
										_this379.s5 = _this379.s6.shift();
									}
									_this379.l--;
								}
								_this378.s5 = out153;
							}
							_this378.l--;
						}
						this.lastX = out152 + this.lastX;
						var _this380 = this.store;
						var out154 = _this380.s0;
						if(_this380.l != 0) {
							_this380.s0 = _this380.s1;
							_this380.s1 = _this380.s2;
							_this380.s2 = _this380.s3;
							_this380.s3 = _this380.s4;
							_this380.s4 = _this380.s5;
							_this380.s5 = null;
							if(_this380.s6 != null) {
								var _this381 = _this380.s6;
								var out155 = _this381.s0;
								if(_this381.l != 0) {
									_this381.s0 = _this381.s1;
									_this381.s1 = _this381.s2;
									_this381.s2 = _this381.s3;
									_this381.s3 = _this381.s4;
									_this381.s4 = _this381.s5;
									_this381.s5 = null;
									if(_this381.s6 != null) {
										_this381.s5 = _this381.s6.shift();
									}
									_this381.l--;
								}
								_this380.s5 = out155;
							}
							_this380.l--;
						}
						this.lastY = out154 + this.lastY;
						this.pathContext.curveTo(this.controlX,this.controlY,firstX6,firstY6,this.lastX,this.lastY);
						this.controlX = firstX6;
						this.controlY = firstY6;
					}
				}
				break;
			case 116:
				var _this382 = this.store;
				_this382.l = 0;
				_this382.s0 = null;
				_this382.s1 = null;
				_this382.s2 = null;
				_this382.s3 = null;
				_this382.s4 = null;
				_this382.s5 = null;
				_this382.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp16 = "";
				var exit16 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp16 != "") {
							if((this.store.l & 1) == 0) {
								var _this383 = this.store;
								var v105 = parseFloat(temp16);
								switch(_this383.l) {
								case 0:
									_this383.s0 = v105;
									break;
								case 1:
									_this383.s1 = v105;
									break;
								case 2:
									_this383.s2 = v105;
									break;
								case 3:
									_this383.s3 = v105;
									break;
								case 4:
									_this383.s4 = v105;
									break;
								case 5:
									_this383.s5 = v105;
									break;
								default:
									if(_this383.s6 == null) {
										_this383.s6 = new justPath_StoreF6();
									}
									var _this384 = _this383.s6;
									switch(_this384.l) {
									case 0:
										_this384.s0 = v105;
										break;
									case 1:
										_this384.s1 = v105;
										break;
									case 2:
										_this384.s2 = v105;
										break;
									case 3:
										_this384.s3 = v105;
										break;
									case 4:
										_this384.s4 = v105;
										break;
									case 5:
										_this384.s5 = v105;
										break;
									default:
										if(_this384.s6 == null) {
											_this384.s6 = new justPath_StoreF6();
										}
										_this384.s6.push(v105);
									}
									_this384.l++;
								}
								_this383.l++;
							} else {
								var _this385 = this.store;
								var v106 = parseFloat(temp16);
								switch(_this385.l) {
								case 0:
									_this385.s0 = v106;
									break;
								case 1:
									_this385.s1 = v106;
									break;
								case 2:
									_this385.s2 = v106;
									break;
								case 3:
									_this385.s3 = v106;
									break;
								case 4:
									_this385.s4 = v106;
									break;
								case 5:
									_this385.s5 = v106;
									break;
								default:
									if(_this385.s6 == null) {
										_this385.s6 = new justPath_StoreF6();
									}
									var _this386 = _this385.s6;
									switch(_this386.l) {
									case 0:
										_this386.s0 = v106;
										break;
									case 1:
										_this386.s1 = v106;
										break;
									case 2:
										_this386.s2 = v106;
										break;
									case 3:
										_this386.s3 = v106;
										break;
									case 4:
										_this386.s4 = v106;
										break;
									case 5:
										_this386.s5 = v106;
										break;
									default:
										if(_this386.s6 == null) {
											_this386.s6 = new justPath_StoreF6();
										}
										_this386.s6.push(v106);
									}
									_this386.l++;
								}
								_this385.l++;
							}
							temp16 = "";
						}
						break;
					case 45:
						if(temp16 != "") {
							if((this.store.l & 1) == 0) {
								var _this387 = this.store;
								var v107 = parseFloat(temp16);
								switch(_this387.l) {
								case 0:
									_this387.s0 = v107;
									break;
								case 1:
									_this387.s1 = v107;
									break;
								case 2:
									_this387.s2 = v107;
									break;
								case 3:
									_this387.s3 = v107;
									break;
								case 4:
									_this387.s4 = v107;
									break;
								case 5:
									_this387.s5 = v107;
									break;
								default:
									if(_this387.s6 == null) {
										_this387.s6 = new justPath_StoreF6();
									}
									var _this388 = _this387.s6;
									switch(_this388.l) {
									case 0:
										_this388.s0 = v107;
										break;
									case 1:
										_this388.s1 = v107;
										break;
									case 2:
										_this388.s2 = v107;
										break;
									case 3:
										_this388.s3 = v107;
										break;
									case 4:
										_this388.s4 = v107;
										break;
									case 5:
										_this388.s5 = v107;
										break;
									default:
										if(_this388.s6 == null) {
											_this388.s6 = new justPath_StoreF6();
										}
										_this388.s6.push(v107);
									}
									_this388.l++;
								}
								_this387.l++;
							} else {
								var _this389 = this.store;
								var v108 = parseFloat(temp16);
								switch(_this389.l) {
								case 0:
									_this389.s0 = v108;
									break;
								case 1:
									_this389.s1 = v108;
									break;
								case 2:
									_this389.s2 = v108;
									break;
								case 3:
									_this389.s3 = v108;
									break;
								case 4:
									_this389.s4 = v108;
									break;
								case 5:
									_this389.s5 = v108;
									break;
								default:
									if(_this389.s6 == null) {
										_this389.s6 = new justPath_StoreF6();
									}
									var _this390 = _this389.s6;
									switch(_this390.l) {
									case 0:
										_this390.s0 = v108;
										break;
									case 1:
										_this390.s1 = v108;
										break;
									case 2:
										_this390.s2 = v108;
										break;
									case 3:
										_this390.s3 = v108;
										break;
									case 4:
										_this390.s4 = v108;
										break;
									case 5:
										_this390.s5 = v108;
										break;
									default:
										if(_this390.s6 == null) {
											_this390.s6 = new justPath_StoreF6();
										}
										_this390.s6.push(v108);
									}
									_this390.l++;
								}
								_this389.l++;
							}
						}
						temp16 = "-";
						break;
					case 46:
						temp16 += ".";
						break;
					case 48:
						temp16 += "0";
						break;
					case 49:
						temp16 += "1";
						break;
					case 50:
						temp16 += "2";
						break;
					case 51:
						temp16 += "3";
						break;
					case 52:
						temp16 += "4";
						break;
					case 53:
						temp16 += "5";
						break;
					case 54:
						temp16 += "6";
						break;
					case 55:
						temp16 += "7";
						break;
					case 56:
						temp16 += "8";
						break;
					case 57:
						temp16 += "9";
						break;
					default:
						if(temp16 != "") {
							if((this.store.l & 1) == 0) {
								var _this391 = this.store;
								var v109 = parseFloat(temp16);
								switch(_this391.l) {
								case 0:
									_this391.s0 = v109;
									break;
								case 1:
									_this391.s1 = v109;
									break;
								case 2:
									_this391.s2 = v109;
									break;
								case 3:
									_this391.s3 = v109;
									break;
								case 4:
									_this391.s4 = v109;
									break;
								case 5:
									_this391.s5 = v109;
									break;
								default:
									if(_this391.s6 == null) {
										_this391.s6 = new justPath_StoreF6();
									}
									var _this392 = _this391.s6;
									switch(_this392.l) {
									case 0:
										_this392.s0 = v109;
										break;
									case 1:
										_this392.s1 = v109;
										break;
									case 2:
										_this392.s2 = v109;
										break;
									case 3:
										_this392.s3 = v109;
										break;
									case 4:
										_this392.s4 = v109;
										break;
									case 5:
										_this392.s5 = v109;
										break;
									default:
										if(_this392.s6 == null) {
											_this392.s6 = new justPath_StoreF6();
										}
										_this392.s6.push(v109);
									}
									_this392.l++;
								}
								_this391.l++;
							} else {
								var _this393 = this.store;
								var v110 = parseFloat(temp16);
								switch(_this393.l) {
								case 0:
									_this393.s0 = v110;
									break;
								case 1:
									_this393.s1 = v110;
									break;
								case 2:
									_this393.s2 = v110;
									break;
								case 3:
									_this393.s3 = v110;
									break;
								case 4:
									_this393.s4 = v110;
									break;
								case 5:
									_this393.s5 = v110;
									break;
								default:
									if(_this393.s6 == null) {
										_this393.s6 = new justPath_StoreF6();
									}
									var _this394 = _this393.s6;
									switch(_this394.l) {
									case 0:
										_this394.s0 = v110;
										break;
									case 1:
										_this394.s1 = v110;
										break;
									case 2:
										_this394.s2 = v110;
										break;
									case 3:
										_this394.s3 = v110;
										break;
									case 4:
										_this394.s4 = v110;
										break;
									case 5:
										_this394.s5 = v110;
										break;
									default:
										if(_this394.s6 == null) {
											_this394.s6 = new justPath_StoreF6();
										}
										_this394.s6.push(v110);
									}
									_this394.l++;
								}
								_this393.l++;
							}
							temp16 = "";
						}
						this.pos--;
						exit16 = true;
					}
					if(exit16) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 2) {
					this.controlX = 2 * this.lastX - this.controlX;
					this.controlY = 2 * this.lastY - this.controlY;
					this.lastX = this.store.s0 + this.lastY;
					this.lastY = this.store.s1 + this.lastX;
					this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				} else if(this.store.l > 2) {
					while(this.store.l > 1) {
						this.controlX = 2 * this.lastX - this.controlX;
						this.controlY = 2 * this.lastY - this.controlY;
						var _this395 = this.store;
						var out156 = _this395.s0;
						if(_this395.l != 0) {
							_this395.s0 = _this395.s1;
							_this395.s1 = _this395.s2;
							_this395.s2 = _this395.s3;
							_this395.s3 = _this395.s4;
							_this395.s4 = _this395.s5;
							_this395.s5 = null;
							if(_this395.s6 != null) {
								var _this396 = _this395.s6;
								var out157 = _this396.s0;
								if(_this396.l != 0) {
									_this396.s0 = _this396.s1;
									_this396.s1 = _this396.s2;
									_this396.s2 = _this396.s3;
									_this396.s3 = _this396.s4;
									_this396.s4 = _this396.s5;
									_this396.s5 = null;
									if(_this396.s6 != null) {
										_this396.s5 = _this396.s6.shift();
									}
									_this396.l--;
								}
								_this395.s5 = out157;
							}
							_this395.l--;
						}
						this.lastX = out156 + this.lastY;
						var _this397 = this.store;
						var out158 = _this397.s0;
						if(_this397.l != 0) {
							_this397.s0 = _this397.s1;
							_this397.s1 = _this397.s2;
							_this397.s2 = _this397.s3;
							_this397.s3 = _this397.s4;
							_this397.s4 = _this397.s5;
							_this397.s5 = null;
							if(_this397.s6 != null) {
								var _this398 = _this397.s6;
								var out159 = _this398.s0;
								if(_this398.l != 0) {
									_this398.s0 = _this398.s1;
									_this398.s1 = _this398.s2;
									_this398.s2 = _this398.s3;
									_this398.s3 = _this398.s4;
									_this398.s4 = _this398.s5;
									_this398.s5 = null;
									if(_this398.s6 != null) {
										_this398.s5 = _this398.s6.shift();
									}
									_this398.l--;
								}
								_this397.s5 = out159;
							}
							_this397.l--;
						}
						this.lastY = out158 + this.lastX;
						this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
					}
				}
				break;
			case 118:
				var process3 = false;
				if(process3 == null) {
					process3 = true;
				}
				var _this399 = this.store;
				_this399.l = 0;
				_this399.s0 = null;
				_this399.s1 = null;
				_this399.s2 = null;
				_this399.s3 = null;
				_this399.s4 = null;
				_this399.s5 = null;
				_this399.s6 = null;
				this.c = this.str.charCodeAt(this.pos++);
				var temp17 = "";
				var exit17 = false;
				while(true) {
					switch(this.c) {
					case 32:case 44:
						if(temp17 != "") {
							if(process3) {
								if((this.store.l & 1) == 0) {
									var _this400 = this.store;
									var v111 = parseFloat(temp17);
									switch(_this400.l) {
									case 0:
										_this400.s0 = v111;
										break;
									case 1:
										_this400.s1 = v111;
										break;
									case 2:
										_this400.s2 = v111;
										break;
									case 3:
										_this400.s3 = v111;
										break;
									case 4:
										_this400.s4 = v111;
										break;
									case 5:
										_this400.s5 = v111;
										break;
									default:
										if(_this400.s6 == null) {
											_this400.s6 = new justPath_StoreF6();
										}
										var _this401 = _this400.s6;
										switch(_this401.l) {
										case 0:
											_this401.s0 = v111;
											break;
										case 1:
											_this401.s1 = v111;
											break;
										case 2:
											_this401.s2 = v111;
											break;
										case 3:
											_this401.s3 = v111;
											break;
										case 4:
											_this401.s4 = v111;
											break;
										case 5:
											_this401.s5 = v111;
											break;
										default:
											if(_this401.s6 == null) {
												_this401.s6 = new justPath_StoreF6();
											}
											_this401.s6.push(v111);
										}
										_this401.l++;
									}
									_this400.l++;
								} else {
									var _this402 = this.store;
									var v112 = parseFloat(temp17);
									switch(_this402.l) {
									case 0:
										_this402.s0 = v112;
										break;
									case 1:
										_this402.s1 = v112;
										break;
									case 2:
										_this402.s2 = v112;
										break;
									case 3:
										_this402.s3 = v112;
										break;
									case 4:
										_this402.s4 = v112;
										break;
									case 5:
										_this402.s5 = v112;
										break;
									default:
										if(_this402.s6 == null) {
											_this402.s6 = new justPath_StoreF6();
										}
										var _this403 = _this402.s6;
										switch(_this403.l) {
										case 0:
											_this403.s0 = v112;
											break;
										case 1:
											_this403.s1 = v112;
											break;
										case 2:
											_this403.s2 = v112;
											break;
										case 3:
											_this403.s3 = v112;
											break;
										case 4:
											_this403.s4 = v112;
											break;
										case 5:
											_this403.s5 = v112;
											break;
										default:
											if(_this403.s6 == null) {
												_this403.s6 = new justPath_StoreF6();
											}
											_this403.s6.push(v112);
										}
										_this403.l++;
									}
									_this402.l++;
								}
							} else {
								var _this404 = this.store;
								var v113 = parseFloat(temp17);
								switch(_this404.l) {
								case 0:
									_this404.s0 = v113;
									break;
								case 1:
									_this404.s1 = v113;
									break;
								case 2:
									_this404.s2 = v113;
									break;
								case 3:
									_this404.s3 = v113;
									break;
								case 4:
									_this404.s4 = v113;
									break;
								case 5:
									_this404.s5 = v113;
									break;
								default:
									if(_this404.s6 == null) {
										_this404.s6 = new justPath_StoreF6();
									}
									var _this405 = _this404.s6;
									switch(_this405.l) {
									case 0:
										_this405.s0 = v113;
										break;
									case 1:
										_this405.s1 = v113;
										break;
									case 2:
										_this405.s2 = v113;
										break;
									case 3:
										_this405.s3 = v113;
										break;
									case 4:
										_this405.s4 = v113;
										break;
									case 5:
										_this405.s5 = v113;
										break;
									default:
										if(_this405.s6 == null) {
											_this405.s6 = new justPath_StoreF6();
										}
										_this405.s6.push(v113);
									}
									_this405.l++;
								}
								_this404.l++;
							}
							temp17 = "";
						}
						break;
					case 45:
						if(temp17 != "") {
							if(process3) {
								if((this.store.l & 1) == 0) {
									var _this406 = this.store;
									var v114 = parseFloat(temp17);
									switch(_this406.l) {
									case 0:
										_this406.s0 = v114;
										break;
									case 1:
										_this406.s1 = v114;
										break;
									case 2:
										_this406.s2 = v114;
										break;
									case 3:
										_this406.s3 = v114;
										break;
									case 4:
										_this406.s4 = v114;
										break;
									case 5:
										_this406.s5 = v114;
										break;
									default:
										if(_this406.s6 == null) {
											_this406.s6 = new justPath_StoreF6();
										}
										var _this407 = _this406.s6;
										switch(_this407.l) {
										case 0:
											_this407.s0 = v114;
											break;
										case 1:
											_this407.s1 = v114;
											break;
										case 2:
											_this407.s2 = v114;
											break;
										case 3:
											_this407.s3 = v114;
											break;
										case 4:
											_this407.s4 = v114;
											break;
										case 5:
											_this407.s5 = v114;
											break;
										default:
											if(_this407.s6 == null) {
												_this407.s6 = new justPath_StoreF6();
											}
											_this407.s6.push(v114);
										}
										_this407.l++;
									}
									_this406.l++;
								} else {
									var _this408 = this.store;
									var v115 = parseFloat(temp17);
									switch(_this408.l) {
									case 0:
										_this408.s0 = v115;
										break;
									case 1:
										_this408.s1 = v115;
										break;
									case 2:
										_this408.s2 = v115;
										break;
									case 3:
										_this408.s3 = v115;
										break;
									case 4:
										_this408.s4 = v115;
										break;
									case 5:
										_this408.s5 = v115;
										break;
									default:
										if(_this408.s6 == null) {
											_this408.s6 = new justPath_StoreF6();
										}
										var _this409 = _this408.s6;
										switch(_this409.l) {
										case 0:
											_this409.s0 = v115;
											break;
										case 1:
											_this409.s1 = v115;
											break;
										case 2:
											_this409.s2 = v115;
											break;
										case 3:
											_this409.s3 = v115;
											break;
										case 4:
											_this409.s4 = v115;
											break;
										case 5:
											_this409.s5 = v115;
											break;
										default:
											if(_this409.s6 == null) {
												_this409.s6 = new justPath_StoreF6();
											}
											_this409.s6.push(v115);
										}
										_this409.l++;
									}
									_this408.l++;
								}
							} else {
								var _this410 = this.store;
								var v116 = parseFloat(temp17);
								switch(_this410.l) {
								case 0:
									_this410.s0 = v116;
									break;
								case 1:
									_this410.s1 = v116;
									break;
								case 2:
									_this410.s2 = v116;
									break;
								case 3:
									_this410.s3 = v116;
									break;
								case 4:
									_this410.s4 = v116;
									break;
								case 5:
									_this410.s5 = v116;
									break;
								default:
									if(_this410.s6 == null) {
										_this410.s6 = new justPath_StoreF6();
									}
									var _this411 = _this410.s6;
									switch(_this411.l) {
									case 0:
										_this411.s0 = v116;
										break;
									case 1:
										_this411.s1 = v116;
										break;
									case 2:
										_this411.s2 = v116;
										break;
									case 3:
										_this411.s3 = v116;
										break;
									case 4:
										_this411.s4 = v116;
										break;
									case 5:
										_this411.s5 = v116;
										break;
									default:
										if(_this411.s6 == null) {
											_this411.s6 = new justPath_StoreF6();
										}
										_this411.s6.push(v116);
									}
									_this411.l++;
								}
								_this410.l++;
							}
						}
						temp17 = "-";
						break;
					case 46:
						temp17 += ".";
						break;
					case 48:
						temp17 += "0";
						break;
					case 49:
						temp17 += "1";
						break;
					case 50:
						temp17 += "2";
						break;
					case 51:
						temp17 += "3";
						break;
					case 52:
						temp17 += "4";
						break;
					case 53:
						temp17 += "5";
						break;
					case 54:
						temp17 += "6";
						break;
					case 55:
						temp17 += "7";
						break;
					case 56:
						temp17 += "8";
						break;
					case 57:
						temp17 += "9";
						break;
					default:
						if(temp17 != "") {
							if(process3) {
								if((this.store.l & 1) == 0) {
									var _this412 = this.store;
									var v117 = parseFloat(temp17);
									switch(_this412.l) {
									case 0:
										_this412.s0 = v117;
										break;
									case 1:
										_this412.s1 = v117;
										break;
									case 2:
										_this412.s2 = v117;
										break;
									case 3:
										_this412.s3 = v117;
										break;
									case 4:
										_this412.s4 = v117;
										break;
									case 5:
										_this412.s5 = v117;
										break;
									default:
										if(_this412.s6 == null) {
											_this412.s6 = new justPath_StoreF6();
										}
										var _this413 = _this412.s6;
										switch(_this413.l) {
										case 0:
											_this413.s0 = v117;
											break;
										case 1:
											_this413.s1 = v117;
											break;
										case 2:
											_this413.s2 = v117;
											break;
										case 3:
											_this413.s3 = v117;
											break;
										case 4:
											_this413.s4 = v117;
											break;
										case 5:
											_this413.s5 = v117;
											break;
										default:
											if(_this413.s6 == null) {
												_this413.s6 = new justPath_StoreF6();
											}
											_this413.s6.push(v117);
										}
										_this413.l++;
									}
									_this412.l++;
								} else {
									var _this414 = this.store;
									var v118 = parseFloat(temp17);
									switch(_this414.l) {
									case 0:
										_this414.s0 = v118;
										break;
									case 1:
										_this414.s1 = v118;
										break;
									case 2:
										_this414.s2 = v118;
										break;
									case 3:
										_this414.s3 = v118;
										break;
									case 4:
										_this414.s4 = v118;
										break;
									case 5:
										_this414.s5 = v118;
										break;
									default:
										if(_this414.s6 == null) {
											_this414.s6 = new justPath_StoreF6();
										}
										var _this415 = _this414.s6;
										switch(_this415.l) {
										case 0:
											_this415.s0 = v118;
											break;
										case 1:
											_this415.s1 = v118;
											break;
										case 2:
											_this415.s2 = v118;
											break;
										case 3:
											_this415.s3 = v118;
											break;
										case 4:
											_this415.s4 = v118;
											break;
										case 5:
											_this415.s5 = v118;
											break;
										default:
											if(_this415.s6 == null) {
												_this415.s6 = new justPath_StoreF6();
											}
											_this415.s6.push(v118);
										}
										_this415.l++;
									}
									_this414.l++;
								}
							} else {
								var _this416 = this.store;
								var v119 = parseFloat(temp17);
								switch(_this416.l) {
								case 0:
									_this416.s0 = v119;
									break;
								case 1:
									_this416.s1 = v119;
									break;
								case 2:
									_this416.s2 = v119;
									break;
								case 3:
									_this416.s3 = v119;
									break;
								case 4:
									_this416.s4 = v119;
									break;
								case 5:
									_this416.s5 = v119;
									break;
								default:
									if(_this416.s6 == null) {
										_this416.s6 = new justPath_StoreF6();
									}
									var _this417 = _this416.s6;
									switch(_this417.l) {
									case 0:
										_this417.s0 = v119;
										break;
									case 1:
										_this417.s1 = v119;
										break;
									case 2:
										_this417.s2 = v119;
										break;
									case 3:
										_this417.s3 = v119;
										break;
									case 4:
										_this417.s4 = v119;
										break;
									case 5:
										_this417.s5 = v119;
										break;
									default:
										if(_this417.s6 == null) {
											_this417.s6 = new justPath_StoreF6();
										}
										_this417.s6.push(v119);
									}
									_this417.l++;
								}
								_this416.l++;
							}
							temp17 = "";
						}
						this.pos--;
						exit17 = true;
					}
					if(exit17) {
						break;
					}
					this.c = this.str.charCodeAt(this.pos++);
				}
				if(this.store.l == 1) {
					this.lastY += this.store.s0;
					this.pathContext.lineTo(this.lastX,this.lastY);
				} else if(this.store.l > 1) {
					while(this.store.l > 0) {
						var tmp3 = this.lastY;
						var _this418 = this.store;
						var out160 = _this418.s0;
						if(_this418.l != 0) {
							_this418.s0 = _this418.s1;
							_this418.s1 = _this418.s2;
							_this418.s2 = _this418.s3;
							_this418.s3 = _this418.s4;
							_this418.s4 = _this418.s5;
							_this418.s5 = null;
							if(_this418.s6 != null) {
								var _this419 = _this418.s6;
								var out161 = _this419.s0;
								if(_this419.l != 0) {
									_this419.s0 = _this419.s1;
									_this419.s1 = _this419.s2;
									_this419.s2 = _this419.s3;
									_this419.s3 = _this419.s4;
									_this419.s4 = _this419.s5;
									_this419.s5 = null;
									if(_this419.s6 != null) {
										_this419.s5 = _this419.s6.shift();
									}
									_this419.l--;
								}
								_this418.s5 = out161;
							}
							_this418.l--;
						}
						this.lastY = tmp3 + out160;
						this.pathContext.lineTo(this.lastX,this.lastY);
					}
				}
				break;
			default:
				++count;
			}
			this.c = this.str.charCodeAt(this.pos++);
		}
		return str_;
	}
	,extractArgs: function(process) {
		if(process == null) {
			process = true;
		}
		var _this = this.store;
		_this.l = 0;
		_this.s0 = null;
		_this.s1 = null;
		_this.s2 = null;
		_this.s3 = null;
		_this.s4 = null;
		_this.s5 = null;
		_this.s6 = null;
		this.c = this.str.charCodeAt(this.pos++);
		var count = 0;
		var temp = "";
		var exit = false;
		while(true) {
			switch(this.c) {
			case 32:case 44:
				if(temp != "") {
					if(process) {
						if((this.store.l & 1) == 0) {
							var _this = this.store;
							var v = parseFloat(temp);
							switch(_this.l) {
							case 0:
								_this.s0 = v;
								break;
							case 1:
								_this.s1 = v;
								break;
							case 2:
								_this.s2 = v;
								break;
							case 3:
								_this.s3 = v;
								break;
							case 4:
								_this.s4 = v;
								break;
							case 5:
								_this.s5 = v;
								break;
							default:
								if(_this.s6 == null) {
									_this.s6 = new justPath_StoreF6();
								}
								var _this1 = _this.s6;
								switch(_this1.l) {
								case 0:
									_this1.s0 = v;
									break;
								case 1:
									_this1.s1 = v;
									break;
								case 2:
									_this1.s2 = v;
									break;
								case 3:
									_this1.s3 = v;
									break;
								case 4:
									_this1.s4 = v;
									break;
								case 5:
									_this1.s5 = v;
									break;
								default:
									if(_this1.s6 == null) {
										_this1.s6 = new justPath_StoreF6();
									}
									_this1.s6.push(v);
								}
								_this1.l++;
							}
							_this.l++;
						} else {
							var _this2 = this.store;
							var v1 = parseFloat(temp);
							switch(_this2.l) {
							case 0:
								_this2.s0 = v1;
								break;
							case 1:
								_this2.s1 = v1;
								break;
							case 2:
								_this2.s2 = v1;
								break;
							case 3:
								_this2.s3 = v1;
								break;
							case 4:
								_this2.s4 = v1;
								break;
							case 5:
								_this2.s5 = v1;
								break;
							default:
								if(_this2.s6 == null) {
									_this2.s6 = new justPath_StoreF6();
								}
								var _this3 = _this2.s6;
								switch(_this3.l) {
								case 0:
									_this3.s0 = v1;
									break;
								case 1:
									_this3.s1 = v1;
									break;
								case 2:
									_this3.s2 = v1;
									break;
								case 3:
									_this3.s3 = v1;
									break;
								case 4:
									_this3.s4 = v1;
									break;
								case 5:
									_this3.s5 = v1;
									break;
								default:
									if(_this3.s6 == null) {
										_this3.s6 = new justPath_StoreF6();
									}
									_this3.s6.push(v1);
								}
								_this3.l++;
							}
							_this2.l++;
						}
					} else {
						var _this4 = this.store;
						var v2 = parseFloat(temp);
						switch(_this4.l) {
						case 0:
							_this4.s0 = v2;
							break;
						case 1:
							_this4.s1 = v2;
							break;
						case 2:
							_this4.s2 = v2;
							break;
						case 3:
							_this4.s3 = v2;
							break;
						case 4:
							_this4.s4 = v2;
							break;
						case 5:
							_this4.s5 = v2;
							break;
						default:
							if(_this4.s6 == null) {
								_this4.s6 = new justPath_StoreF6();
							}
							var _this5 = _this4.s6;
							switch(_this5.l) {
							case 0:
								_this5.s0 = v2;
								break;
							case 1:
								_this5.s1 = v2;
								break;
							case 2:
								_this5.s2 = v2;
								break;
							case 3:
								_this5.s3 = v2;
								break;
							case 4:
								_this5.s4 = v2;
								break;
							case 5:
								_this5.s5 = v2;
								break;
							default:
								if(_this5.s6 == null) {
									_this5.s6 = new justPath_StoreF6();
								}
								_this5.s6.push(v2);
							}
							_this5.l++;
						}
						_this4.l++;
					}
					temp = "";
				}
				break;
			case 45:
				if(temp != "") {
					if(process) {
						if((this.store.l & 1) == 0) {
							var _this6 = this.store;
							var v3 = parseFloat(temp);
							switch(_this6.l) {
							case 0:
								_this6.s0 = v3;
								break;
							case 1:
								_this6.s1 = v3;
								break;
							case 2:
								_this6.s2 = v3;
								break;
							case 3:
								_this6.s3 = v3;
								break;
							case 4:
								_this6.s4 = v3;
								break;
							case 5:
								_this6.s5 = v3;
								break;
							default:
								if(_this6.s6 == null) {
									_this6.s6 = new justPath_StoreF6();
								}
								var _this7 = _this6.s6;
								switch(_this7.l) {
								case 0:
									_this7.s0 = v3;
									break;
								case 1:
									_this7.s1 = v3;
									break;
								case 2:
									_this7.s2 = v3;
									break;
								case 3:
									_this7.s3 = v3;
									break;
								case 4:
									_this7.s4 = v3;
									break;
								case 5:
									_this7.s5 = v3;
									break;
								default:
									if(_this7.s6 == null) {
										_this7.s6 = new justPath_StoreF6();
									}
									_this7.s6.push(v3);
								}
								_this7.l++;
							}
							_this6.l++;
						} else {
							var _this8 = this.store;
							var v4 = parseFloat(temp);
							switch(_this8.l) {
							case 0:
								_this8.s0 = v4;
								break;
							case 1:
								_this8.s1 = v4;
								break;
							case 2:
								_this8.s2 = v4;
								break;
							case 3:
								_this8.s3 = v4;
								break;
							case 4:
								_this8.s4 = v4;
								break;
							case 5:
								_this8.s5 = v4;
								break;
							default:
								if(_this8.s6 == null) {
									_this8.s6 = new justPath_StoreF6();
								}
								var _this9 = _this8.s6;
								switch(_this9.l) {
								case 0:
									_this9.s0 = v4;
									break;
								case 1:
									_this9.s1 = v4;
									break;
								case 2:
									_this9.s2 = v4;
									break;
								case 3:
									_this9.s3 = v4;
									break;
								case 4:
									_this9.s4 = v4;
									break;
								case 5:
									_this9.s5 = v4;
									break;
								default:
									if(_this9.s6 == null) {
										_this9.s6 = new justPath_StoreF6();
									}
									_this9.s6.push(v4);
								}
								_this9.l++;
							}
							_this8.l++;
						}
					} else {
						var _this10 = this.store;
						var v5 = parseFloat(temp);
						switch(_this10.l) {
						case 0:
							_this10.s0 = v5;
							break;
						case 1:
							_this10.s1 = v5;
							break;
						case 2:
							_this10.s2 = v5;
							break;
						case 3:
							_this10.s3 = v5;
							break;
						case 4:
							_this10.s4 = v5;
							break;
						case 5:
							_this10.s5 = v5;
							break;
						default:
							if(_this10.s6 == null) {
								_this10.s6 = new justPath_StoreF6();
							}
							var _this11 = _this10.s6;
							switch(_this11.l) {
							case 0:
								_this11.s0 = v5;
								break;
							case 1:
								_this11.s1 = v5;
								break;
							case 2:
								_this11.s2 = v5;
								break;
							case 3:
								_this11.s3 = v5;
								break;
							case 4:
								_this11.s4 = v5;
								break;
							case 5:
								_this11.s5 = v5;
								break;
							default:
								if(_this11.s6 == null) {
									_this11.s6 = new justPath_StoreF6();
								}
								_this11.s6.push(v5);
							}
							_this11.l++;
						}
						_this10.l++;
					}
				}
				temp = "-";
				break;
			case 46:
				temp += ".";
				break;
			case 48:
				temp += "0";
				break;
			case 49:
				temp += "1";
				break;
			case 50:
				temp += "2";
				break;
			case 51:
				temp += "3";
				break;
			case 52:
				temp += "4";
				break;
			case 53:
				temp += "5";
				break;
			case 54:
				temp += "6";
				break;
			case 55:
				temp += "7";
				break;
			case 56:
				temp += "8";
				break;
			case 57:
				temp += "9";
				break;
			default:
				if(temp != "") {
					if(process) {
						if((this.store.l & 1) == 0) {
							var _this12 = this.store;
							var v6 = parseFloat(temp);
							switch(_this12.l) {
							case 0:
								_this12.s0 = v6;
								break;
							case 1:
								_this12.s1 = v6;
								break;
							case 2:
								_this12.s2 = v6;
								break;
							case 3:
								_this12.s3 = v6;
								break;
							case 4:
								_this12.s4 = v6;
								break;
							case 5:
								_this12.s5 = v6;
								break;
							default:
								if(_this12.s6 == null) {
									_this12.s6 = new justPath_StoreF6();
								}
								var _this13 = _this12.s6;
								switch(_this13.l) {
								case 0:
									_this13.s0 = v6;
									break;
								case 1:
									_this13.s1 = v6;
									break;
								case 2:
									_this13.s2 = v6;
									break;
								case 3:
									_this13.s3 = v6;
									break;
								case 4:
									_this13.s4 = v6;
									break;
								case 5:
									_this13.s5 = v6;
									break;
								default:
									if(_this13.s6 == null) {
										_this13.s6 = new justPath_StoreF6();
									}
									_this13.s6.push(v6);
								}
								_this13.l++;
							}
							_this12.l++;
						} else {
							var _this14 = this.store;
							var v7 = parseFloat(temp);
							switch(_this14.l) {
							case 0:
								_this14.s0 = v7;
								break;
							case 1:
								_this14.s1 = v7;
								break;
							case 2:
								_this14.s2 = v7;
								break;
							case 3:
								_this14.s3 = v7;
								break;
							case 4:
								_this14.s4 = v7;
								break;
							case 5:
								_this14.s5 = v7;
								break;
							default:
								if(_this14.s6 == null) {
									_this14.s6 = new justPath_StoreF6();
								}
								var _this15 = _this14.s6;
								switch(_this15.l) {
								case 0:
									_this15.s0 = v7;
									break;
								case 1:
									_this15.s1 = v7;
									break;
								case 2:
									_this15.s2 = v7;
									break;
								case 3:
									_this15.s3 = v7;
									break;
								case 4:
									_this15.s4 = v7;
									break;
								case 5:
									_this15.s5 = v7;
									break;
								default:
									if(_this15.s6 == null) {
										_this15.s6 = new justPath_StoreF6();
									}
									_this15.s6.push(v7);
								}
								_this15.l++;
							}
							_this14.l++;
						}
					} else {
						var _this16 = this.store;
						var v8 = parseFloat(temp);
						switch(_this16.l) {
						case 0:
							_this16.s0 = v8;
							break;
						case 1:
							_this16.s1 = v8;
							break;
						case 2:
							_this16.s2 = v8;
							break;
						case 3:
							_this16.s3 = v8;
							break;
						case 4:
							_this16.s4 = v8;
							break;
						case 5:
							_this16.s5 = v8;
							break;
						default:
							if(_this16.s6 == null) {
								_this16.s6 = new justPath_StoreF6();
							}
							var _this17 = _this16.s6;
							switch(_this17.l) {
							case 0:
								_this17.s0 = v8;
								break;
							case 1:
								_this17.s1 = v8;
								break;
							case 2:
								_this17.s2 = v8;
								break;
							case 3:
								_this17.s3 = v8;
								break;
							case 4:
								_this17.s4 = v8;
								break;
							case 5:
								_this17.s5 = v8;
								break;
							default:
								if(_this17.s6 == null) {
									_this17.s6 = new justPath_StoreF6();
								}
								_this17.s6.push(v8);
							}
							_this17.l++;
						}
						_this16.l++;
					}
					temp = "";
				}
				this.pos--;
				exit = true;
			}
			if(exit) {
				break;
			}
			this.c = this.str.charCodeAt(this.pos++);
		}
	}
	,nextChar: function() {
		return this.str.charCodeAt(this.pos++);
	}
	,__class__: justPath_SvgPath
};
var justPath_transform_ScaleContext = function(pathContext_,sx_,sy_) {
	this.pathContext = pathContext_;
	this.sx = sx_;
	this.sy = sy_;
};
$hxClasses["justPath.transform.ScaleContext"] = justPath_transform_ScaleContext;
justPath_transform_ScaleContext.__name__ = "justPath.transform.ScaleContext";
justPath_transform_ScaleContext.__interfaces__ = [justPath_IPathContext];
justPath_transform_ScaleContext.prototype = {
	moveTo: function(x,y) {
		this.pathContext.moveTo(x * this.sx,y * this.sy);
	}
	,lineTo: function(x,y) {
		this.pathContext.lineTo(x * this.sx,y * this.sy);
	}
	,quadTo: function(x1,y1,x2,y2) {
		this.pathContext.quadTo(x1 * this.sx,y1 * this.sy,x2 * this.sx,y2 * this.sy);
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		this.pathContext.curveTo(x1 * this.sx,y1 * this.sy,x2 * this.sx,y2 * this.sy,x3 * this.sx,y3 * this.sy);
	}
	,__class__: justPath_transform_ScaleContext
};
var justPath_transform_ScaleTranslateContext = function(pathContext_,dx_,dy_,sx_,sy_) {
	this.pathContext = pathContext_;
	this.dx = dx_;
	this.dy = dy_;
	this.sx = sx_;
	this.sy = sy_;
};
$hxClasses["justPath.transform.ScaleTranslateContext"] = justPath_transform_ScaleTranslateContext;
justPath_transform_ScaleTranslateContext.__name__ = "justPath.transform.ScaleTranslateContext";
justPath_transform_ScaleTranslateContext.__interfaces__ = [justPath_IPathContext];
justPath_transform_ScaleTranslateContext.prototype = {
	moveTo: function(x,y) {
		this.pathContext.moveTo(x * this.sx + this.dx,y * this.sy + this.dy);
	}
	,lineTo: function(x,y) {
		this.pathContext.lineTo(x * this.sx + this.dx,y * this.sy + this.dy);
	}
	,quadTo: function(x1,y1,x2,y2) {
		this.pathContext.quadTo(x1 * this.sx + this.dx,y1 * this.sy + this.dy,x2 * this.sx + this.dx,y2 * this.sy + this.dy);
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		this.pathContext.curveTo(x1 * this.sx + this.dx,y1 * this.sy + this.dy,x2 * this.sx + this.dx,y2 * this.sy + this.dy,x3 * this.sx + this.dx,y3 * this.sy + this.dy);
	}
	,__class__: justPath_transform_ScaleTranslateContext
};
var justPath_transform_TranslationContext = function(pathContext_,dx_,dy_) {
	this.pathContext = pathContext_;
	this.dx = dx_;
	this.dy = dy_;
};
$hxClasses["justPath.transform.TranslationContext"] = justPath_transform_TranslationContext;
justPath_transform_TranslationContext.__name__ = "justPath.transform.TranslationContext";
justPath_transform_TranslationContext.__interfaces__ = [justPath_IPathContext];
justPath_transform_TranslationContext.prototype = {
	moveTo: function(x,y) {
		this.pathContext.moveTo(x + this.dx,y + this.dy);
	}
	,lineTo: function(x,y) {
		this.pathContext.lineTo(x + this.dx,y + this.dy);
	}
	,quadTo: function(x1,y1,x2,y2) {
		this.pathContext.quadTo(x1 + this.dx,y1 + this.dy,x2 + this.dx,y2 + this.dy);
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		this.pathContext.curveTo(x1 + this.dx,y1 + this.dy,x2 + this.dx,y2 + this.dy,x3 + this.dx,y3 + this.dy);
	}
	,__class__: justPath_transform_TranslationContext
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = "lime._internal.backend.html5.GameDeviceData";
lime__$internal_backend_html5_GameDeviceData.prototype = {
	__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,0);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 0});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes = function(bytes,type) {
	var uri = URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
	if(uri != null) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,1);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 1});
		}
		return promise.future;
	} else {
		return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + lime__$internal_format_Base64.encode(bytes));
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise,queueItem.options);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__createBlobURIFromBytes = function(bytes,type) {
	return URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI = function(uri) {
	if(!StringTools.startsWith(uri,"data:")) {
		return StringTools.startsWith(uri,"blob:");
	} else {
		return true;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(path == null || path == "") {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(path)) {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname($global.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol($global.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort($global.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise,options) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(uri)) {
		image.addEventListener("load",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event) {
			promise.progress(event.loaded,event.total);
		},false);
		image.addEventListener("error",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img) {
				promise.complete(img);
			});
		};
		request.onerror = function(event) {
			promise.error(event.message);
		};
		request.onprogress = function(event) {
			if(event.lengthComputable) {
				promise.progress(event.loaded,event.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI = function(uri,options) {
	if((options & 1) != 0) {
		URL.revokeObjectURL(uri);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = haxe_ds_StringMap.keysIterator(this.parent.formData.h);
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var value = this.parent.formData.h[key1];
				if(key1.indexOf("[]") > -1 && ((value) instanceof Array)) {
					var _g = [];
					var x = $getIterator(value);
					while(x.hasNext()) {
						var x1 = x.next();
						_g.push(encodeURIComponent(x1));
					}
					var arrayValue = _g.join("&amp;" + key1 + "=");
					query += encodeURIComponent(key1) + "=" + arrayValue;
				} else {
					var query1 = encodeURIComponent(key1) + "=";
					var s = Std.string(value);
					query += query1 + encodeURIComponent(s);
				}
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY", options : 0});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT", options : 0});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new haxe_ds_List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(((element) instanceof HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style = this.div.style;
		style.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style.setProperty("transform","translate3D(0,0,0)",null);
		style.position = "relative";
		style.overflow = "hidden";
		style.setProperty("-webkit-user-select","none",null);
		style.setProperty("-moz-user-select","none",null);
		style.setProperty("-ms-user-select","none",null);
		style.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("dragstart",$bind(this,this.handleDragEvent),true);
		element.addEventListener("dragover",$bind(this,this.handleDragEvent),true);
		element.addEventListener("drop",$bind(this,this.handleDragEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = "lime._internal.backend.html5.HTML5Window";
lime__$internal_backend_html5_HTML5Window.prototype = {
	alert: function(message,title) {
		if(message != null) {
			window.alert(Std.string(message));
		}
	}
	,close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing") && contextAttributes.antialiasing > 0;
				var options1 = Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true;
				var options2 = Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil;
				var options3 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false, failIfMajorPerformanceCaveat : true};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options3);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics_WebGLRenderContext.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,focus: function() {
	}
	,getCursor: function() {
		return this.cursor;
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,getMouseLock: function() {
		return false;
	}
	,getTextInputEnabled: function() {
		return this.textInputEnabled;
	}
	,handleContextEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleDragEvent: function(event) {
		switch(event.type) {
		case "dragover":
			event.preventDefault();
			return false;
		case "dragstart":
			if((js_Boot.__cast(event.target , HTMLElement)).nodeName.toLowerCase() == "img" && event.cancelable) {
				event.preventDefault();
				return false;
			}
			break;
		case "drop":
			if(event.dataTransfer != null && event.dataTransfer.files.length > 0) {
				this.parent.onDropFile.dispatch(event.dataTransfer.files);
				event.preventDefault();
				return false;
			}
			break;
		}
		return true;
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			this.parent.onRestore.dispatch();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g = 0;
			var _g1 = changeEvents.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect = this.div.getBoundingClientRect();
					x = event.clientX - rect.left;
					y = event.clientY - rect.top;
				} else {
					var rect = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			switch(event.type) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			switch(event.deltaMode) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,move: function(x,y) {
	}
	,readPixels: function(rect) {
		if(this.canvas != null) {
			var stageRect = new lime_math_Rectangle(0,0,this.canvas.width,this.canvas.height);
			if(rect == null) {
				rect = stageRect;
			} else {
				rect.intersection(stageRect,rect);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas2 = window.document.createElement("canvas");
				canvas2.width = rect.width | 0;
				canvas2.height = rect.height | 0;
				var context = canvas2.getContext("2d");
				context.drawImage(this.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas2);
			}
		}
		return null;
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		if(lime__$internal_backend_html5_HTML5Window.textArea == null) {
			lime__$internal_backend_html5_HTML5Window.textArea = window.document.createElement("textarea");
			lime__$internal_backend_html5_HTML5Window.textArea.style.height = "0px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.left = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.opacity = "0";
			lime__$internal_backend_html5_HTML5Window.textArea.style.position = "fixed";
			lime__$internal_backend_html5_HTML5Window.textArea.style.top = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.width = "0px";
			window.document.body.appendChild(lime__$internal_backend_html5_HTML5Window.textArea);
		}
		lime__$internal_backend_html5_HTML5Window.textArea.value = value;
		lime__$internal_backend_html5_HTML5Window.textArea.focus();
		lime__$internal_backend_html5_HTML5Window.textArea.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = "none";
			} else {
				var tmp;
				switch(value._hx_index) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,setFrameRate: function(value) {
		if(this.parent.application != null) {
			if(value >= 60) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = -1;
				}
			} else if(value > 0) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = 1000 / value;
				}
			} else if(this.parent == this.parent.application.__window) {
				this.parent.application.__backend.framePeriod = 1000;
			}
		}
		return value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.parent.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.requestFullscreen();
				} else if(this.parent.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.mozRequestFullScreen();
				} else if(this.parent.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.webkitRequestFullscreen();
				} else if(this.parent.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setIcon: function(image) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) {
			link = window.document.createElement("link");
		}
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setMouseLock: function(value) {
	}
	,setResizable: function(value) {
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,setTitle: function(value) {
		if(value != null) {
			window.document.title = value;
		}
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,warpMouse: function(x,y) {
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_backend_native_NativeCFFI = function() { };
$hxClasses["lime._internal.backend.native.NativeCFFI"] = lime__$internal_backend_native_NativeCFFI;
lime__$internal_backend_native_NativeCFFI.__name__ = "lime._internal.backend.native.NativeCFFI";
var lime__$internal_format_BMP = function() { };
$hxClasses["lime._internal.format.BMP"] = lime__$internal_format_BMP;
lime__$internal_format_BMP.__name__ = "lime._internal.format.BMP";
lime__$internal_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime__$internal_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			pixelValuesLength = (image.width * 3 + image.width * 3 % 4) * image.height;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime__$internal_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime__$internal_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime__$internal_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime__$internal_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g4 = 0;
				var _g5 = image.width * 3 % 4;
				while(_g4 < _g5) {
					var i = _g4++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g = 0;
			var _g1 = image.height;
			while(_g < _g1) {
				var y = _g++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g2 = 0;
				var _g3 = image.width;
				while(_g2 < _g3) {
					var x = _g2++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime__$internal_format_BMPType = $hxEnums["lime._internal.format.BMPType"] = { __ename__ : "lime._internal.format.BMPType", __constructs__ : ["RGB","BITFIELD","ICO"]
	,RGB: {_hx_index:0,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,BITFIELD: {_hx_index:1,__enum__:"lime._internal.format.BMPType",toString:$estr}
	,ICO: {_hx_index:2,__enum__:"lime._internal.format.BMPType",toString:$estr}
};
var lime__$internal_format_Base64 = function() { };
$hxClasses["lime._internal.format.Base64"] = lime__$internal_format_Base64;
lime__$internal_format_Base64.__name__ = "lime._internal.format.Base64";
lime__$internal_format_Base64.decode = function(source) {
	return haxe_crypto_Base64.decode(source);
};
lime__$internal_format_Base64.encode = function(source) {
	var result = [];
	var dictionary = lime__$internal_format_Base64.DICTIONARY;
	var extendedDictionary = lime__$internal_format_Base64.EXTENDED_DICTIONARY;
	var numBytes = source.length;
	var numInputTriplets = Math.floor(numBytes / 3);
	var numChunksToWrite = numInputTriplets * 2;
	result.length = Math.ceil(numBytes / 3) * 2;
	var numBytesRead = 0;
	var numChunksWritten = 0;
	var inputTriplet;
	while(numChunksWritten < numChunksToWrite) {
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8 | source.b[numBytesRead + 2];
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = extendedDictionary[inputTriplet & 4095];
		numBytesRead += 3;
		numChunksWritten += 2;
	}
	switch(numBytes - numInputTriplets * 3) {
	case 1:
		inputTriplet = source.b[numBytesRead] << 16;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = "==";
		break;
	case 2:
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = dictionary[inputTriplet >> 6 & 63] + "=";
		break;
	default:
	}
	return result.join("");
};
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = "lime._internal.format.Deflate";
lime__$internal_format_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = "lime._internal.format.GZip";
lime__$internal_format_GZip.compress = function(bytes) {
	var data = pako.gzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = pako.ungzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_JPEG = function() { };
$hxClasses["lime._internal.format.JPEG"] = lime__$internal_format_JPEG;
lime__$internal_format_JPEG.__name__ = "lime._internal.format.JPEG";
lime__$internal_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = "lime._internal.format.LZMA";
lime__$internal_format_LZMA.compress = function(bytes) {
	return null;
};
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_PNG = function() { };
$hxClasses["lime._internal.format.PNG"] = lime__$internal_format_PNG;
lime__$internal_format_PNG.__name__ = "lime._internal.format.PNG";
lime__$internal_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = "lime._internal.format.Zlib";
lime__$internal_format_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = "lime._internal.graphics.ImageCanvasUtil";
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var array = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = sourceImage.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(sourceRect.x + alphaPoint.x,sourceRect.y + alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var array = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer1,0);
			} else {
				this1 = new Uint8Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.get_transparent() ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.get_transparent() ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel32(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixels(image,rect,format);
};
lime__$internal_graphics_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime__$internal_graphics_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = "lime._internal.graphics.ImageDataUtil";
lime__$internal_graphics_ImageDataUtil.displaceMap = function(target,source,map,mapPoint,componentX,componentY,smooth) {
	var targetData = target.buffer.data;
	var sourceData = source.buffer.data;
	var mapData = map.buffer.data;
	var targetFormat = target.buffer.format;
	var sourceFormat = source.buffer.format;
	var mapFormat = map.buffer.format;
	var targetPremultiplied = target.get_premultiplied();
	var sourcePremultiplied = source.get_premultiplied();
	var mapPremultiplied = map.get_premultiplied();
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(source);
	var mapView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(map);
	var row;
	var sourceOffset;
	var sourcePixel;
	var mapPixel;
	var targetPixel;
	var mapPixelX;
	var mapPixelY;
	var mapPixelA;
	var s1;
	var s2;
	var s3;
	var s4;
	var mPointXFloor;
	var mPointYFloor;
	var disOffsetXFloor;
	var disOffsetYFloor;
	var disX;
	var disY;
	var _g = 0;
	var _g1 = sourceView.height;
	while(_g < _g1) {
		var y = _g++;
		row = sourceView.byteOffset + sourceView.stride * y;
		var _g2 = 0;
		var _g3 = sourceView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceOffset = row + x * 4;
			mPointXFloor = mapPoint.x | 0;
			mPointYFloor = mapPoint.y | 0;
			if(smooth) {
				var offset = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor) * 4;
				var format = mapFormat;
				var premultiplied = mapPremultiplied;
				if(premultiplied == null) {
					premultiplied = false;
				}
				if(format == null) {
					format = 0;
				}
				switch(format) {
				case 0:
					s1 = (mapData[offset] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset + 2] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				case 1:
					s1 = (mapData[offset + 1] & 255) << 24 | (mapData[offset + 2] & 255) << 16 | (mapData[offset + 3] & 255) << 8 | mapData[offset] & 255;
					break;
				case 2:
					s1 = (mapData[offset + 2] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				}
				if(premultiplied) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset1 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor + 1) * 4;
				var format1 = mapFormat;
				var premultiplied1 = mapPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				switch(format1) {
				case 0:
					s2 = (mapData[offset1] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1 + 2] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				case 1:
					s2 = (mapData[offset1 + 1] & 255) << 24 | (mapData[offset1 + 2] & 255) << 16 | (mapData[offset1 + 3] & 255) << 8 | mapData[offset1] & 255;
					break;
				case 2:
					s2 = (mapData[offset1 + 2] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				}
				if(premultiplied1) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset2 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor + 1) * 4;
				var format2 = mapFormat;
				var premultiplied2 = mapPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				switch(format2) {
				case 0:
					s3 = (mapData[offset2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2 + 2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				case 1:
					s3 = (mapData[offset2 + 1] & 255) << 24 | (mapData[offset2 + 2] & 255) << 16 | (mapData[offset2 + 3] & 255) << 8 | mapData[offset2] & 255;
					break;
				case 2:
					s3 = (mapData[offset2 + 2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				}
				if(premultiplied2) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset3 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format3 = mapFormat;
				var premultiplied3 = mapPremultiplied;
				if(premultiplied3 == null) {
					premultiplied3 = false;
				}
				if(format3 == null) {
					format3 = 0;
				}
				switch(format3) {
				case 0:
					s4 = (mapData[offset3] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3 + 2] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				case 1:
					s4 = (mapData[offset3 + 1] & 255) << 24 | (mapData[offset3 + 2] & 255) << 16 | (mapData[offset3 + 3] & 255) << 8 | mapData[offset3] & 255;
					break;
				case 2:
					s4 = (mapData[offset3 + 2] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				}
				if(premultiplied3) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				mapPixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,mapPoint.x - mPointXFloor,mapPoint.y - mPointYFloor);
			} else {
				var offset4 = mapView.byteOffset + mapView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				var format4 = mapFormat;
				var premultiplied4 = mapPremultiplied;
				if(premultiplied4 == null) {
					premultiplied4 = false;
				}
				if(format4 == null) {
					format4 = 0;
				}
				switch(format4) {
				case 0:
					mapPixel = (mapData[offset4] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4 + 2] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				case 1:
					mapPixel = (mapData[offset4 + 1] & 255) << 24 | (mapData[offset4 + 2] & 255) << 16 | (mapData[offset4 + 3] & 255) << 8 | mapData[offset4] & 255;
					break;
				case 2:
					mapPixel = (mapData[offset4 + 2] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				}
				if(premultiplied4) {
					if((mapPixel & 255) != 0 && (mapPixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (mapPixel & 255);
						mapPixel = (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((mapPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | mapPixel & 255 & 255;
					}
				}
			}
			mapPixelA = (mapPixel & 255) / 255.0;
			mapPixelX = ((mapPixel >>> 24 & 255) - 128) / 255.0 * mapPixelA;
			mapPixelY = ((mapPixel >>> 16 & 255) - 128) / 255.0 * mapPixelA;
			disX = mapPixelX * componentX.x + mapPixelY * componentY.x;
			disY = mapPixelX * componentX.y + mapPixelY * componentY.y;
			disOffsetXFloor = Math.floor(disX * sourceView.width);
			disOffsetYFloor = Math.floor(disY * sourceView.height);
			if(smooth) {
				var offset5 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor) * 4;
				var format5 = sourceFormat;
				var premultiplied5 = sourcePremultiplied;
				if(premultiplied5 == null) {
					premultiplied5 = false;
				}
				if(format5 == null) {
					format5 = 0;
				}
				switch(format5) {
				case 0:
					s1 = (sourceData[offset5] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5 + 2] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				case 1:
					s1 = (sourceData[offset5 + 1] & 255) << 24 | (sourceData[offset5 + 2] & 255) << 16 | (sourceData[offset5 + 3] & 255) << 8 | sourceData[offset5] & 255;
					break;
				case 2:
					s1 = (sourceData[offset5 + 2] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				}
				if(premultiplied5) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math_RGBA.__clamp[Math.round((s1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset6 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor + 1) * 4;
				var format6 = sourceFormat;
				var premultiplied6 = sourcePremultiplied;
				if(premultiplied6 == null) {
					premultiplied6 = false;
				}
				if(format6 == null) {
					format6 = 0;
				}
				switch(format6) {
				case 0:
					s2 = (sourceData[offset6] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6 + 2] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				case 1:
					s2 = (sourceData[offset6 + 1] & 255) << 24 | (sourceData[offset6 + 2] & 255) << 16 | (sourceData[offset6 + 3] & 255) << 8 | sourceData[offset6] & 255;
					break;
				case 2:
					s2 = (sourceData[offset6 + 2] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				}
				if(premultiplied6) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math_RGBA.__clamp[Math.round((s2 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s2 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset7 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor + 1) * 4;
				var format7 = sourceFormat;
				var premultiplied7 = sourcePremultiplied;
				if(premultiplied7 == null) {
					premultiplied7 = false;
				}
				if(format7 == null) {
					format7 = 0;
				}
				switch(format7) {
				case 0:
					s3 = (sourceData[offset7] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7 + 2] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				case 1:
					s3 = (sourceData[offset7 + 1] & 255) << 24 | (sourceData[offset7 + 2] & 255) << 16 | (sourceData[offset7 + 3] & 255) << 8 | sourceData[offset7] & 255;
					break;
				case 2:
					s3 = (sourceData[offset7 + 2] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				}
				if(premultiplied7) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math_RGBA.__clamp[Math.round((s3 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s3 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset8 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format8 = sourceFormat;
				var premultiplied8 = sourcePremultiplied;
				if(premultiplied8 == null) {
					premultiplied8 = false;
				}
				if(format8 == null) {
					format8 = 0;
				}
				switch(format8) {
				case 0:
					s4 = (sourceData[offset8] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8 + 2] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				case 1:
					s4 = (sourceData[offset8 + 1] & 255) << 24 | (sourceData[offset8 + 2] & 255) << 16 | (sourceData[offset8 + 3] & 255) << 8 | sourceData[offset8] & 255;
					break;
				case 2:
					s4 = (sourceData[offset8 + 2] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				}
				if(premultiplied8) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math_RGBA.__clamp[Math.round((s4 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((s4 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				sourcePixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,disX * sourceView.width - disOffsetXFloor,disY * sourceView.height - disOffsetYFloor);
			} else {
				var offset9 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				var format9 = sourceFormat;
				var premultiplied9 = sourcePremultiplied;
				if(premultiplied9 == null) {
					premultiplied9 = false;
				}
				if(format9 == null) {
					format9 = 0;
				}
				switch(format9) {
				case 0:
					sourcePixel = (sourceData[offset9] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9 + 2] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[offset9 + 1] & 255) << 24 | (sourceData[offset9 + 2] & 255) << 16 | (sourceData[offset9 + 3] & 255) << 8 | sourceData[offset9] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[offset9 + 2] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				}
				if(premultiplied9) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
			}
			var format10 = targetFormat;
			var premultiplied10 = targetPremultiplied;
			if(premultiplied10 == null) {
				premultiplied10 = false;
			}
			if(format10 == null) {
				format10 = 0;
			}
			if(premultiplied10) {
				if((sourcePixel & 255) == 0) {
					if(sourcePixel != 0) {
						sourcePixel = 0;
					}
				} else if((sourcePixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
					sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(format10) {
			case 0:
				targetData[sourceOffset] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			case 1:
				targetData[sourceOffset] = sourcePixel & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 3] = sourcePixel >>> 8 & 255;
				break;
			case 2:
				targetData[sourceOffset] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			}
		}
	}
	target.dirty = true;
	target.version++;
};
lime__$internal_graphics_ImageDataUtil.bilinear = function(s1,s2,s3,s4,su,sv) {
	return lime__$internal_graphics_ImageDataUtil.lerpRGBA(lime__$internal_graphics_ImageDataUtil.lerpRGBA(s4,s2,su),lime__$internal_graphics_ImageDataUtil.lerpRGBA(s1,s3,su),sv);
};
lime__$internal_graphics_ImageDataUtil.lerpRGBA = function(v0,v1,x) {
	var this1 = 0;
	var result = this1;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 24 & 255,v1 >>> 24 & 255,x));
	result = (value & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 16 & 255,v1 >>> 16 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 8 & 255,v1 >>> 8 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | result & 255 & 255;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 & 255,v1 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | value & 255;
	return result;
};
lime__$internal_graphics_ImageDataUtil.lerp4f = function(v0,v1,x) {
	return new lime_math_Vector4(lime__$internal_graphics_ImageDataUtil.lerp(v0.x,v1.x,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.y,v1.y,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.z,v1.z,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.w,v1.w,x));
};
lime__$internal_graphics_ImageDataUtil.lerp = function(v0,v1,x) {
	return (1.0 - x) * v0 + x * v1;
};
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math_ColorMatrix.getAlphaTable(colorMatrix);
	var redTable = lime_math_ColorMatrix.getRedTable(colorMatrix);
	var greenTable = lime_math_ColorMatrix.getGreenTable(colorMatrix);
	var blueTable = lime_math_ColorMatrix.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			offset = row + x * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			var format2 = format;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel._hx_index) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel._hx_index) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent() || !mergeAlpha && !image.get_transparent() && sourceImage.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						if(premultiplied1) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format1) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(sourceView.x + (alphaPoint == null ? 0 : alphaPoint.x),sourceView.y + (alphaPoint == null ? 0 : alphaPoint.y),sourceView.width,sourceView.height));
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						var format2 = alphaFormat;
						var premultiplied2 = false;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						switch(format2) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied2) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
							var format3 = destFormat;
							var premultiplied3 = destPremultiplied;
							if(premultiplied3 == null) {
								premultiplied3 = false;
							}
							if(format3 == null) {
								format3 = 0;
							}
							if(premultiplied3) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(format3) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = alphaFormat;
						var premultiplied1 = false;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						var value = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value & 255;
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var offset = row + x * 4;
			var format1 = format;
			var premultiplied = false;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
					fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var format1 = format;
	var premultiplied1 = premultiplied;
	if(premultiplied1 == null) {
		premultiplied1 = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied1) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_RGBA.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_RGBA.__clamp[Math.round((readColor >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((readColor >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				var format2 = format;
				var premultiplied2 = false;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) {
							fillColor = 0;
						}
					} else if((fillColor & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
						fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength,color) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	lime__$internal_graphics_StackBlur.blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
	image.dirty = true;
	image.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	return image;
};
lime__$internal_graphics_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		ix = image.width - 1 - x;
		hit = false;
		var _g2 = 0;
		var _g3 = image.height;
		while(_g2 < _g3) {
			var y = _g2++;
			pixel = image.getPixel32(ix,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(y < top) {
					top = y;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g = 0;
	var _g1 = image.height;
	while(_g < _g1) {
		var y = _g++;
		iy = image.height - 1 - y;
		hit = false;
		var _g2 = 0;
		var _g3 = image.width;
		while(_g2 < _g3) {
			var x = _g2++;
			pixel = image.getPixel32(x,iy,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime__$internal_graphics_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this1 = 0;
		var bgra = this1;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this1 = 0;
		var bgra = this1;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime__$internal_graphics_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = sourceFormat;
			var premultiplied = sourcePremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = false;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = true;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var array = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	var _g1 = newHeight;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = newWidth;
		while(_g2 < _g3) {
			var x = _g2++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			sourceIndexX = sourceX < imageWidth - 1 ? sourceIndex + 4 : sourceIndex;
			sourceIndexY = sourceY < imageHeight - 1 ? sourceIndex + imageWidth * 4 : sourceIndex;
			sourceIndexXY = sourceIndexX != sourceIndex ? sourceIndexY + 4 : sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (UInt.toFloat(data[sourceIndex]) * uOpposite + UInt.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY]) * uOpposite + UInt.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (UInt.toFloat(data[sourceIndex + 1]) * uOpposite + UInt.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 1]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (UInt.toFloat(data[sourceIndex + 2]) * uOpposite + UInt.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (UInt.toFloat(data[sourceIndexY + 2]) * uOpposite + UInt.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var array = null;
	var view = null;
	var buffer1 = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer1 != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer1,0);
		} else {
			this1 = new Uint8Array(buffer1,0,len);
		}
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g = 0;
	var _g1 = buffer.height;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = buffer.width;
		while(_g2 < _g3) {
			var x = _g2++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	var this1 = 0;
	var source = this1;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (source & 255);
			source = (lime_math_RGBA.__clamp[Math.round((source >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((source >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((source >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			var format1 = sourceFormat;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied1) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_mask = rgba;
		var argb = threshold;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_threshold = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba;
		var bgra = mask;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_mask = rgba;
		var bgra = threshold;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_threshold = rgba;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1 = pixelMask >>> 24 & 255;
			var tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				value = UInt.gt(tmp1,tmp2) ? 1 : -1;
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					value = UInt.gt(tmp1,tmp2) ? 1 : -1;
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						value = UInt.gt(tmp1,tmp2) ? 1 : -1;
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						value = tmp1 != tmp2 ? UInt.gt(tmp1,tmp2) ? 1 : -1 : 0;
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				var format1 = destFormat;
				var premultiplied1 = destPremultiplied;
				if(premultiplied1 == null) {
					premultiplied1 = false;
				}
				if(format1 == null) {
					format1 = 0;
				}
				if(premultiplied1) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(format1) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				var format2 = destFormat;
				var premultiplied2 = destPremultiplied;
				if(premultiplied2 == null) {
					premultiplied2 = false;
				}
				if(format2 == null) {
					format2 = 0;
				}
				if(premultiplied2) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(format2) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = true;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = false;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.__boxBlur = function(imgA,imgB,w,h,bx,by) {
	imgB.set(imgA);
	var bx1 = bx | 0;
	var by1 = by | 0;
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,0);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,1);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,2);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,3);
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 1;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 2;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + 3;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g2 = 0;
		var _g3 = by1;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = by1 + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = by1 + 1;
		var _g7 = h - by1;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - by1;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurH = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = h;
	while(_g < _g1) {
		var i = _g++;
		ti = i * w;
		li = ti;
		ri = ti + r;
		fv = imgA[ti * 4 + off];
		lv = imgA[(ti + w - 1) * 4 + off];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[(ti + j) * 4 + off];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri * 4 + off] - fv);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++ti;
		}
		var _g6 = r + 1;
		var _g7 = w - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++ri;
			++li;
			++ti;
		}
		var _g8 = w - r;
		var _g9 = w;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(UInt.toFloat(val) * iarr);
			++li;
			++ti;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurT = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g = 0;
	var _g1 = w;
	while(_g < _g1) {
		var i = _g++;
		ti = i * 4 + off;
		li = ti;
		ri = ti + r * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (r + 1) * fv;
		var _g2 = 0;
		var _g3 = r;
		while(_g2 < _g3) {
			var j = _g2++;
			val = val + imgA[ti + j * ws];
		}
		var _g4 = 0;
		var _g5 = r + 1;
		while(_g4 < _g5) {
			var j1 = _g4++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g6 = r + 1;
		var _g7 = h - r;
		while(_g6 < _g7) {
			var j2 = _g6++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g8 = h - r;
		var _g9 = h;
		while(_g8 < _g9) {
			var j3 = _g8++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(UInt.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	var offset = 0;
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		offset = -1;
	} else {
		offset = 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	}
	return offset;
};
lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur = function(sigma,n) {
	var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
	var wl = Math.floor(wIdeal);
	if(wl % 2 == 0) {
		--wl;
	}
	var wu = wl + 2;
	var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
	var m = Math.round(mIdeal);
	var sizes = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		sizes.push(i < m ? wl : wu);
	}
	return sizes;
};
lime__$internal_graphics_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1 = n1 >>> 24 & 255;
	var tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(UInt.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(UInt.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(UInt.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(UInt.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * (destRect.width | 0) + destX);
	var s = lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset(sourceRect,destPoint,destX,destY);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = UInt.toFloat(imgB[s + 3]) * strength | 0;
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,hasRow: function(y) {
		if(y >= 0) {
			return y < this.height;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_graphics_StackBlur = function() { };
$hxClasses["lime._internal.graphics.StackBlur"] = lime__$internal_graphics_StackBlur;
lime__$internal_graphics_StackBlur.__name__ = "lime._internal.graphics.StackBlur";
lime__$internal_graphics_StackBlur.blur = function(dest,source,sourceRect,destPoint,blurX,blurY,quality) {
	dest.copyPixels(source,sourceRect,destPoint);
	lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA(dest,sourceRect.width | 0,sourceRect.height | 0,blurX,blurY,quality);
};
lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA = function(image,width,height,blurX,blurY,quality) {
	var radiusX = Math.round(blurX) >> 1;
	var radiusY = Math.round(blurY) >> 1;
	if(lime__$internal_graphics_StackBlur.MUL_TABLE == null) {
		return;
	}
	if(radiusX >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusX = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusY >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusY = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusX < 0 || radiusY < 0) {
		return;
	}
	var iterations = quality;
	if(iterations < 1) {
		iterations = 1;
	}
	if(iterations > 3) {
		iterations = 3;
	}
	var px = image.get_data();
	var x;
	var y;
	var i;
	var p;
	var yp;
	var yi;
	var yw;
	var r;
	var g;
	var b;
	var a;
	var pr;
	var pg;
	var pb;
	var pa;
	var f;
	var divx = radiusX + radiusX + 1;
	var divy = radiusY + radiusY + 1;
	var w = width;
	var h = height;
	var w1 = w - 1;
	var h1 = h - 1;
	var rxp1 = radiusX + 1;
	var ryp1 = radiusY + 1;
	var ssx = new lime__$internal_graphics_BlurStack();
	var sx = ssx;
	var _g = 1;
	var _g1 = divx;
	while(_g < _g1) {
		var i1 = _g++;
		sx = sx.n = new lime__$internal_graphics_BlurStack();
	}
	sx.n = ssx;
	var ssy = new lime__$internal_graphics_BlurStack();
	var sy = ssy;
	var _g = 1;
	var _g1 = divy;
	while(_g < _g1) {
		var i1 = _g++;
		sy = sy.n = new lime__$internal_graphics_BlurStack();
	}
	sy.n = ssy;
	var si = null;
	var mtx = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusX];
	var stx = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusX];
	var mty = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusY];
	var sty = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusY];
	while(iterations > 0) {
		--iterations;
		yi = 0;
		yw = yi;
		var ms = mtx;
		var ss = stx;
		y = h;
		while(true) {
			pr = px[yi];
			r = rxp1 * pr;
			pg = px[yi + 1];
			g = rxp1 * pg;
			pb = px[yi + 2];
			b = rxp1 * pb;
			pa = px[yi + 3];
			a = rxp1 * pa;
			sx = ssx;
			i = rxp1;
			while(true) {
				sx.r = pr;
				sx.g = pg;
				sx.b = pb;
				sx.a = pa;
				sx = sx.n;
				if(!(--i > -1)) {
					break;
				}
			}
			var _g = 1;
			var _g1 = rxp1;
			while(_g < _g1) {
				var i1 = _g++;
				p = yi + ((w1 < i1 ? w1 : i1) << 2);
				r += sx.r = px[p];
				g += sx.g = px[p + 1];
				b += sx.b = px[p + 2];
				a += sx.a = px[p + 3];
				sx = sx.n;
			}
			si = ssx;
			var _g2 = 0;
			var _g3 = w;
			while(_g2 < _g3) {
				var x = _g2++;
				px[yi++] = r * ms >>> ss;
				px[yi++] = g * ms >>> ss;
				px[yi++] = b * ms >>> ss;
				px[yi++] = a * ms >>> ss;
				p = x + radiusX + 1;
				p = yw + (p < w1 ? p : w1) << 2;
				r -= si.r - (si.r = px[p]);
				g -= si.g - (si.g = px[p + 1]);
				b -= si.b - (si.b = px[p + 2]);
				a -= si.a - (si.a = px[p + 3]);
				si = si.n;
			}
			yw += w;
			if(!(--y > 0)) {
				break;
			}
		}
		ms = mty;
		ss = sty;
		var _g4 = 0;
		var _g5 = w;
		while(_g4 < _g5) {
			var x1 = _g4++;
			yi = x1 << 2;
			pr = px[yi];
			r = ryp1 * pr;
			pg = px[yi + 1];
			g = ryp1 * pg;
			pb = px[yi + 2];
			b = ryp1 * pb;
			pa = px[yi + 3];
			a = ryp1 * pa;
			sy = ssy;
			var _g6 = 0;
			var _g7 = ryp1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				sy.r = pr;
				sy.g = pg;
				sy.b = pb;
				sy.a = pa;
				sy = sy.n;
			}
			yp = w;
			var _g8 = 1;
			var _g9 = radiusY + 1;
			while(_g8 < _g9) {
				var i3 = _g8++;
				yi = yp + x1 << 2;
				r += sy.r = px[yi];
				g += sy.g = px[yi + 1];
				b += sy.b = px[yi + 2];
				a += sy.a = px[yi + 3];
				sy = sy.n;
				if(i3 < h1) {
					yp += w;
				}
			}
			yi = x1;
			si = ssy;
			if(iterations > 0) {
				var _g10 = 0;
				var _g11 = h;
				while(_g10 < _g11) {
					var y1 = _g10++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						px[p] = r * ms >>> ss;
						px[p + 1] = g * ms >>> ss;
						px[p + 2] = b * ms >>> ss;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y1 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			} else {
				var _g12 = 0;
				var _g13 = h;
				while(_g12 < _g13) {
					var y2 = _g12++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						f = 255 / pa;
						pr = (r * ms >>> ss) * f | 0;
						pg = (g * ms >>> ss) * f | 0;
						pb = (b * ms >>> ss) * f | 0;
						px[p] = pr > 255 ? 255 : pr;
						px[p + 1] = pg > 255 ? 255 : pg;
						px[p + 2] = pb > 255 ? 255 : pb;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y2 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			}
		}
	}
};
var lime__$internal_graphics_BlurStack = function() {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	this.a = 0;
	this.n = null;
};
$hxClasses["lime._internal.graphics.BlurStack"] = lime__$internal_graphics_BlurStack;
lime__$internal_graphics_BlurStack.__name__ = "lime._internal.graphics.BlurStack";
lime__$internal_graphics_BlurStack.prototype = {
	__class__: lime__$internal_graphics_BlurStack
};
var lime__$internal_macros_AssetsMacro = function() { };
$hxClasses["lime._internal.macros.AssetsMacro"] = lime__$internal_macros_AssetsMacro;
lime__$internal_macros_AssetsMacro.__name__ = "lime._internal.macros.AssetsMacro";
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = "lime.app.Event";
lime_app_Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = "lime.app.Future";
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "lime/app/Future.hx", lineNumber : 209, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future = next(val);
				future.onError($bind(promise,promise.error));
				future.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = "lime.app._Future.FutureWork";
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = "lime.app.Promise";
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = "lime.app._Event_Dynamic_Void";
lime_app__$Event_$Dynamic_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = "lime.app._Event_Float_Float_Int_Void";
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Float_Void";
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Void";
lime_app__$Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = "lime.app._Event_Int_Int_Void";
lime_app__$Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = "lime.app._Event_Int_Void";
lime_app__$Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = "lime.app._Event_String_Int_Int_Void";
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = "lime.app._Event_String_Void";
lime_app__$Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = "lime.app._Event_Void_Void";
lime_app__$Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = "lime.app._Event_lime_ui_Touch_Void";
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = "lime.app._Event_lime_ui_Window_Void";
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = "lime.app._Event_ofEvents_T_Void";
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics_CairoRenderContext = {};
lime_graphics_CairoRenderContext.fromRenderContext = function(context) {
	return context.cairo;
};
var lime_graphics_Canvas2DRenderContext = {};
lime_graphics_Canvas2DRenderContext.fromRenderContext = function(context) {
	return context.canvas2D;
};
var lime_graphics_DOMRenderContext = {};
lime_graphics_DOMRenderContext.fromRenderContext = function(context) {
	return context.dom;
};
var lime_graphics_FlashRenderContext = {};
lime_graphics_FlashRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type._hx_index) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var array = null;
				var view = null;
				var buffer1 = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer1 != null) {
					if(len == null) {
						this1 = new Uint8Array(buffer1,0);
					} else {
						this1 = new Uint8Array(buffer1,0,len);
					}
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = "lime.graphics.Image";
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromBytes(bytes)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes(bytes,type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math_ColorMatrix.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel._hx_index) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel._hx_index) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		if(alphaImage == sourceImage && (alphaPoint == null || alphaPoint.x == 0 && alphaPoint.y == 0)) {
			alphaImage = null;
			alphaPoint = null;
		}
		switch(this.type._hx_index) {
		case 0:
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			return lime__$internal_format_PNG.encode(this);
		} else {
			switch(format._hx_index) {
			case 0:
				return lime__$internal_format_BMP.encode(this);
			case 1:
				return lime__$internal_format_JPEG.encode(this,quality);
			case 2:
				return lime__$internal_format_PNG.encode(this);
			}
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this1 = 0;
					var bgra = this1;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this1 = 0;
					var rgba = this1;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this1 = 0;
					var bgra = this1;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this1 = 0;
					var rgba = this1;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			lime__$internal_graphics_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime__$internal_graphics_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		if(endian == null) {
			endian = lime_system_Endian.BIG_ENDIAN;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			return lime__$internal_graphics_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb = this1;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb = this1;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_color = argb;
				}
			}
			var _mask;
			if(format == null) {
				var rgba = mask;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_mask = argb;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra = mask;
					var this1 = 0;
					var argb = this1;
					argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_mask = argb;
					break;
				default:
					var rgba = mask;
					var this1 = 0;
					var argb = this1;
					argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					_mask = argb;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime__$internal_format_Base64.encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			if(newWidth == this.buffer.width && newHeight == this.buffer.height) {
				return value;
			}
			switch(this.type._hx_index) {
			case 0:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 1:
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type._hx_index) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = "lime.graphics.ImageBuffer";
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var array = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var elements = null;
			var array = null;
			var view = this.data;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			var copy = this1;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(((value) instanceof Image)) {
			this.__srcImage = value;
		} else if(((value) instanceof HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * (this.bitsPerPixel / 8 | 0);
	}
	,__class__: lime_graphics_ImageBuffer
};
var lime_graphics_ImageChannel = $hxEnums["lime.graphics.ImageChannel"] = { __ename__ : "lime.graphics.ImageChannel", __constructs__ : ["RED","GREEN","BLUE","ALPHA"]
	,RED: {_hx_index:0,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,GREEN: {_hx_index:1,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,BLUE: {_hx_index:2,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,ALPHA: {_hx_index:3,__enum__:"lime.graphics.ImageChannel",toString:$estr}
};
var lime_graphics_ImageFileFormat = $hxEnums["lime.graphics.ImageFileFormat"] = { __ename__ : "lime.graphics.ImageFileFormat", __constructs__ : ["BMP","JPEG","PNG"]
	,BMP: {_hx_index:0,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,JPEG: {_hx_index:1,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
	,PNG: {_hx_index:2,__enum__:"lime.graphics.ImageFileFormat",toString:$estr}
};
var lime_graphics_ImageType = $hxEnums["lime.graphics.ImageType"] = { __ename__ : "lime.graphics.ImageType", __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"]
	,CANVAS: {_hx_index:0,__enum__:"lime.graphics.ImageType",toString:$estr}
	,DATA: {_hx_index:1,__enum__:"lime.graphics.ImageType",toString:$estr}
	,FLASH: {_hx_index:2,__enum__:"lime.graphics.ImageType",toString:$estr}
	,CUSTOM: {_hx_index:3,__enum__:"lime.graphics.ImageType",toString:$estr}
};
var lime_graphics_OpenGLES2RenderContext = {};
lime_graphics_OpenGLES2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromOpenGLES3RenderContext = function(gl) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES2RenderContext.fromWebGLRenderContext = function(gl) {
	return null;
};
var lime_graphics_OpenGLES3RenderContext = {};
lime_graphics_OpenGLES3RenderContext.fromRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromOpenGLES2RenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGLRenderContext = function(context) {
	return null;
};
lime_graphics_OpenGLES3RenderContext.fromWebGL2RenderContext = function(context) {
	return null;
};
var lime_graphics_OpenGLRenderContext = {};
lime_graphics_OpenGLRenderContext.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = "lime.graphics.RenderContext";
lime_graphics_RenderContext.prototype = {
	__class__: lime_graphics_RenderContext
};
var lime_graphics_WebGL2RenderContext = {};
lime_graphics_WebGL2RenderContext.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGL2RenderContext.bufferSubData = function(this1,target,dstByteOffset,srcData,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGL2RenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGL2RenderContext.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_WebGL2RenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGL2RenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGL2RenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGL2RenderContext.uniform1fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform1iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform2iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform3iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniform4iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix2fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix3fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.uniformMatrix4fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGL2RenderContext.fromGL = function(gl) {
	return null;
};
lime_graphics_WebGL2RenderContext.fromRenderContext = function(context) {
	return context.webgl2;
};
lime_graphics_WebGL2RenderContext.toWebGLRenderContext = function(gl) {
	return gl;
};
var lime_graphics_WebGLRenderContext = {};
lime_graphics_WebGLRenderContext.bufferData = function(this1,target,srcData,usage) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,null);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGLRenderContext.bufferSubData = function(this1,target,offset,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferSubData(target,offset,srcData,srcOffset,null);
	} else {
		this1.bufferSubData(target,offset,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,null);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_WebGLRenderContext.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,null);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_WebGLRenderContext.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	var dstOffset = null;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_WebGLRenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGLRenderContext.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix2fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix3fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix4fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.fromWebGL2RenderContext = function(gl) {
	return gl;
};
lime_graphics_WebGLRenderContext.fromRenderContext = function(context) {
	return context.webgl;
};
lime_graphics_WebGLRenderContext.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = "lime.graphics.cairo.Cairo";
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,getOperator: function() {
		return 0;
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,rotate: function(amount) {
	}
	,save: function() {
	}
	,scale: function(x,y) {
	}
	,setFontSize: function(size) {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
};
var lime_graphics_cairo_CairoFontFace = {};
lime_graphics_cairo_CairoFontFace._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo_CairoFontFace.status = function(this1) {
	return 0;
};
var lime_graphics_cairo_CairoFontOptions = {};
lime_graphics_cairo_CairoFontOptions._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo_CairoFontOptions.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoFontOptions.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoFontOptions.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = "lime.graphics.cairo.CairoGlyph";
lime_graphics_cairo_CairoGlyph.prototype = {
	__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo_CairoPattern = {};
lime_graphics_cairo_CairoPattern._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_graphics_cairo_CairoPattern.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo_CairoPattern.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo_CairoPattern.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo_CairoPattern.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo_CairoPattern.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo_CairoPattern.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo_CairoPattern.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoSurface = {};
lime_graphics_cairo_CairoSurface.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = "lime.graphics.opengl.GL";
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.bindBufferRange(target,index,buffer,offset,lime_utils_DataPointer.fromFloat(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.drawRangeElements(mode,start,end,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils_DataPointer.fromFloat(lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_WebGL2RenderContext.uniform2fv(lime_graphics_opengl_GL.context,location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribIPointer(index,size,type,stride,offset);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(index,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) {
		return 0;
	} else {
		return object.id;
	}
};
var lime_graphics_opengl_GLProgram = {};
lime_graphics_opengl_GLProgram.fromSources = function(gl,vertexSource,fragmentSource) {
	var vertexShader = lime_graphics_opengl_GLShader.fromSource(gl,vertexSource,gl.VERTEX_SHADER);
	var fragmentShader = lime_graphics_opengl_GLShader.fromSource(gl,fragmentSource,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	gl.attachShader(program,vertexShader);
	gl.attachShader(program,fragmentShader);
	gl.linkProgram(program);
	if(gl.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLProgram.hx", lineNumber : 39, className : "lime.graphics.opengl._GLProgram.GLProgram_Impl_", methodName : "fromSources"});
	}
	return program;
};
var lime_graphics_opengl_GLShader = {};
lime_graphics_opengl_GLShader.fromSource = function(gl,source,type) {
	var shader = gl.createShader(type);
	gl.shaderSource(shader,source);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		var message;
		if(type == gl.VERTEX_SHADER) {
			message = "Error compiling vertex shader";
		} else if(type == gl.FRAGMENT_SHADER) {
			message = "Error compiling fragment shader";
		} else {
			message = "Error compiling unknown shader type";
		}
		message += "\n" + gl.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "lime/graphics/opengl/GLShader.hx", lineNumber : 40, className : "lime.graphics.opengl._GLShader.GLShader_Impl_", methodName : "fromSource"});
	}
	return shader;
};
var lime_math_ARGB = {};
lime_math_ARGB._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
lime_math_ARGB.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_ARGB.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math_ARGB.a16 = lime_math_RGBA.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_ARGB.a16 >> 16 & 255;
	}
};
lime_math_ARGB.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_ARGB.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_ARGB.unmult)] & 255) << 8 | lime_math_RGBA.__clamp[Math.floor((this1 & 255) * lime_math_ARGB.unmult)] & 255;
		}
	}
};
lime_math_ARGB.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_ARGB.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math_ARGB.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_ARGB.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_ARGB.unmult)] & 255) << 8 | lime_math_RGBA.__clamp[Math.floor((this1 & 255) * lime_math_ARGB.unmult)] & 255;
	}
};
lime_math_ARGB.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math_ARGB.a16 = lime_math_RGBA.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_ARGB.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_ARGB.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math_ARGB.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math_ARGB.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math_ARGB.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_ARGB.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_ARGB.get_b = function(this1) {
	return this1 & 255;
};
lime_math_ARGB.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_ARGB.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_ARGB.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_ARGB.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_ARGB.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_BGRA = {};
lime_math_BGRA._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
lime_math_BGRA.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_BGRA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_BGRA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_BGRA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_BGRA.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_RGBA.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_BGRA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_BGRA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_BGRA.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_BGRA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_BGRA.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_RGBA.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math_BGRA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math_BGRA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math_BGRA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_BGRA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_BGRA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_BGRA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_BGRA.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math_BGRA.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_BGRA.get_a = function(this1) {
	return this1 & 255;
};
lime_math_BGRA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_BGRA.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_BGRA.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_BGRA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_BGRA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_BGRA.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_BGRA.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_ColorMatrix = {};
lime_math_ColorMatrix._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math_ColorMatrix.__identity;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math_ColorMatrix.clone = function(this1) {
	var elements = null;
	var array = null;
	var view = lime_utils_Float32Array.toArrayBufferView(this1);
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return lime_math_ColorMatrix._new(this1);
};
lime_math_ColorMatrix.concat = function(this1,second) {
	this1[0] += second[0];
	this1[6] += second[6];
	this1[12] += second[12];
	this1[18] += second[18];
};
lime_math_ColorMatrix.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math_ColorMatrix.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math_ColorMatrix.getAlphaTable = function(this1) {
	if(lime_math_ColorMatrix.__alphaTable == null) {
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__alphaTable = this2;
	}
	var value;
	lime_math_ColorMatrix.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__alphaTable[i] = value;
	}
	return lime_math_ColorMatrix.__alphaTable;
};
lime_math_ColorMatrix.getBlueTable = function(this1) {
	if(lime_math_ColorMatrix.__blueTable == null) {
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__blueTable[i] = value;
	}
	return lime_math_ColorMatrix.__blueTable;
};
lime_math_ColorMatrix.getGreenTable = function(this1) {
	if(lime_math_ColorMatrix.__greenTable == null) {
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__greenTable[i] = value;
	}
	return lime_math_ColorMatrix.__greenTable;
};
lime_math_ColorMatrix.getRedTable = function(this1) {
	if(lime_math_ColorMatrix.__redTable == null) {
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__redTable[i] = value;
	}
	return lime_math_ColorMatrix.__redTable;
};
lime_math_ColorMatrix.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math_ColorMatrix.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math_ColorMatrix.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math_ColorMatrix.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math_ColorMatrix.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math_ColorMatrix.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math_ColorMatrix.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math_ColorMatrix.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math_ColorMatrix.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math_ColorMatrix.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math_ColorMatrix.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math_ColorMatrix.get_color(this1);
};
lime_math_ColorMatrix.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math_ColorMatrix.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math_ColorMatrix.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math_ColorMatrix.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math_ColorMatrix.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math_ColorMatrix.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math_ColorMatrix.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math_ColorMatrix.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math_ColorMatrix.get = function(this1,index) {
	return this1[index];
};
lime_math_ColorMatrix.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var lime_math_Matrix4 = {};
lime_math_Matrix4._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math_Matrix4.__identity;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math_Matrix4.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math_Matrix4.get(lhs,0);
	var m221 = lime_math_Matrix4.get(lhs,4);
	var m231 = lime_math_Matrix4.get(lhs,8);
	var m241 = lime_math_Matrix4.get(lhs,12);
	var m212 = lime_math_Matrix4.get(lhs,1);
	var m222 = lime_math_Matrix4.get(lhs,5);
	var m232 = lime_math_Matrix4.get(lhs,9);
	var m242 = lime_math_Matrix4.get(lhs,13);
	var m213 = lime_math_Matrix4.get(lhs,2);
	var m223 = lime_math_Matrix4.get(lhs,6);
	var m233 = lime_math_Matrix4.get(lhs,10);
	var m243 = lime_math_Matrix4.get(lhs,14);
	var m214 = lime_math_Matrix4.get(lhs,3);
	var m224 = lime_math_Matrix4.get(lhs,7);
	var m234 = lime_math_Matrix4.get(lhs,11);
	var m244 = lime_math_Matrix4.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math_Matrix4.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math_Matrix4.append(this1,m);
};
lime_math_Matrix4.appendScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math_Matrix4.append(this1,lime_math_Matrix4._new(this2));
};
lime_math_Matrix4.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
lime_math_Matrix4.clone = function(this1) {
	var elements = null;
	var array = null;
	var view = lime_utils_Float32Array.toArrayBufferView(this1);
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return lime_math_Matrix4._new(this1);
};
lime_math_Matrix4.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 187, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
lime_math_Matrix4.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 225, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
lime_math_Matrix4.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math_Matrix4.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 272, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
lime_math_Matrix4.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "lime/math/Matrix4.hx", lineNumber : 310, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
lime_math_Matrix4.create2D = function(this1,a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	this1[0] = a;
	this1[1] = b;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = c;
	this1[5] = d;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = tx;
	this1[13] = ty;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math_Matrix4.createOrtho = function(this1,left,right,bottom,top,zNear,zFar) {
	var sx = 1.0 / (right - left);
	var sy = 1.0 / (top - bottom);
	var sz = 1.0 / (zFar - zNear);
	this1[0] = 2 * sx;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 2 * sy;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = -2 * sz;
	this1[11] = 0;
	this1[12] = -(left + right) * sx;
	this1[13] = -(bottom + top) * sy;
	this1[14] = -(zNear + zFar) * sz;
	this1[15] = 1;
};
lime_math_Matrix4.deltaTransformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[3];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[7];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[11];
	return result;
};
lime_math_Matrix4.fromMatrix3 = function(matrix3) {
	var mat = lime_math_Matrix4._new();
	lime_math_Matrix4.create2D(mat,matrix3.a,matrix3.b,matrix3.c,matrix3.d,matrix3.tx,matrix3.ty);
	return mat;
};
lime_math_Matrix4.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math_Matrix4.interpolate = function(thisMat,toMat,percent,result) {
	if(result == null) {
		result = lime_math_Matrix4._new();
	}
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math_Matrix4.set(result,i,lime_math_Matrix4.get(thisMat,i) + (lime_math_Matrix4.get(toMat,i) - lime_math_Matrix4.get(thisMat,i)) * percent);
	}
	return result;
};
lime_math_Matrix4.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += (lime_math_Matrix4.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math_Matrix4.invert = function(this1) {
	var d = lime_math_Matrix4.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math_Matrix4.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,1,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = pos.x - at.x;
	result.y = pos.y - at.y;
	result.z = pos.z - at.z;
	var dir = result;
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l != 0) {
		vup.x /= l;
		vup.y /= l;
		vup.z /= l;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = vup.x - dir2.x;
	result.y = vup.y - dir2.y;
	result.z = vup.z - dir2.z;
	vup = result;
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l != 0) {
			vup.x /= l;
			vup.y /= l;
			vup.z /= l;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var ya = vup.z * dir.x - vup.x * dir.z;
	var za = vup.x * dir.y - vup.y * dir.x;
	result.x = vup.y * dir.z - vup.z * dir.y;
	result.y = ya;
	result.z = za;
	result.w = 1;
	var right = result;
	var l = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l != 0) {
		right.x /= l;
		right.y /= l;
		right.z /= l;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math_Matrix4.prepend = function(this1,rhs) {
	var m111 = lime_math_Matrix4.get(rhs,0);
	var m121 = lime_math_Matrix4.get(rhs,4);
	var m131 = lime_math_Matrix4.get(rhs,8);
	var m141 = lime_math_Matrix4.get(rhs,12);
	var m112 = lime_math_Matrix4.get(rhs,1);
	var m122 = lime_math_Matrix4.get(rhs,5);
	var m132 = lime_math_Matrix4.get(rhs,9);
	var m142 = lime_math_Matrix4.get(rhs,13);
	var m113 = lime_math_Matrix4.get(rhs,2);
	var m123 = lime_math_Matrix4.get(rhs,6);
	var m133 = lime_math_Matrix4.get(rhs,10);
	var m143 = lime_math_Matrix4.get(rhs,14);
	var m114 = lime_math_Matrix4.get(rhs,3);
	var m124 = lime_math_Matrix4.get(rhs,7);
	var m134 = lime_math_Matrix4.get(rhs,11);
	var m144 = lime_math_Matrix4.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math_Matrix4.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math_Matrix4.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math_Matrix4.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math_Matrix4.prepend(this1,m);
};
lime_math_Matrix4.prependScale = function(this1,xScale,yScale,zScale) {
	var elements = null;
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var view = null;
	var buffer = null;
	var len = null;
	var this2;
	if(elements != null) {
		this2 = new Float32Array(elements);
	} else if(array != null) {
		this2 = new Float32Array(array);
	} else if(view != null) {
		this2 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this2 = new Float32Array(buffer,0);
		} else {
			this2 = new Float32Array(buffer,0,len);
		}
	} else {
		this2 = null;
	}
	lime_math_Matrix4.prepend(this1,lime_math_Matrix4._new(this2));
};
lime_math_Matrix4.prependTranslation = function(this1,x,y,z) {
	var m = lime_math_Matrix4._new();
	lime_math_Matrix4.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math_Matrix4.prepend(this1,m);
};
lime_math_Matrix4.transformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
	result.w = x * this1[3] + y * this1[7] + z * this1[11] + this1[15];
	return result;
};
lime_math_Matrix4.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math_Matrix4.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp = this1[2];
	this1[2] = this1[8];
	this1[8] = temp;
	var temp = this1[3];
	this1[3] = this1[12];
	this1[12] = temp;
	var temp = this1[6];
	this1[6] = this1[9];
	this1[9] = temp;
	var temp = this1[7];
	this1[7] = this1[13];
	this1[13] = temp;
	var temp = this1[11];
	this1[11] = this1[14];
	this1[14] = temp;
};
lime_math_Matrix4.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = lime_math_Matrix4._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math_Matrix4.set(m,0,c + a1.x * a1.x * t);
	lime_math_Matrix4.set(m,5,c + a1.y * a1.y * t);
	lime_math_Matrix4.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math_Matrix4.set(m,4,tmp1 + tmp2);
	lime_math_Matrix4.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math_Matrix4.set(m,8,tmp1 - tmp2);
	lime_math_Matrix4.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math_Matrix4.set(m,9,tmp1 + tmp2);
	lime_math_Matrix4.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math_Matrix4.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
lime_math_Matrix4.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math_Matrix4.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math_Matrix4.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math_Matrix4.get = function(this1,index) {
	return this1[index];
};
lime_math_Matrix4.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_RGBA = {};
lime_math_RGBA._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
lime_math_RGBA.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_RGBA.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_RGBA.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_RGBA.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_RGBA.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_RGBA.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_RGBA.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_RGBA.__clamp[Math.round((this1 >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((this1 >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_RGBA.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_RGBA.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math_RGBA.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_RGBA.get_a = function(this1) {
	return this1 & 255;
};
lime_math_RGBA.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_RGBA.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math_RGBA.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_RGBA.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math_RGBA.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_RGBA.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math_RGBA.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = "lime.math.Rectangle";
lime_math_Rectangle.prototype = {
	clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.containsVector(point);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,containsVector: function(vector) {
		return this.contains(vector.x,vector.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflateVector: function(vector) {
		this.inflate(vector.x,vector.y);
	}
	,intersection: function(toIntersect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			result.setEmpty();
			return result;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			result.setEmpty();
			return result;
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetVector: function(vector) {
		this.x += vector.x;
		this.y += vector.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,union: function(toUnion,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		if(this.width == 0 || this.height == 0) {
			result.copyFrom(toUnion);
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			result.copyFrom(this);
		} else {
			var x0 = this.x > toUnion.x ? toUnion.x : this.x;
			var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
			var y0 = this.y > toUnion.y ? toUnion.y : this.y;
			var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
			result.setTo(x0,y0,x1 - x0,y1 - y0);
		}
		return result;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = "lime.math.Vector4";
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l != 0) {
		b0.x /= l;
		b0.y /= l;
		b0.z /= l;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.distanceSquared = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return x * x + y * y + z * z;
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	add: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x + a.x;
		result.y = this.y + a.y;
		result.z = this.z + a.z;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		var ya = this.z * a.x - this.x * a.z;
		var za = this.x * a.y - this.y * a.x;
		result.x = this.y * a.z - this.z * a.y;
		result.y = ya;
		result.z = za;
		result.w = 1;
		return result;
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x - a.x;
		result.y = this.y - a.y;
		result.z = this.z - a.z;
		return result;
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = "lime.media.AudioBuffer";
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(lime__$internal_format_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + lime__$internal_format_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			switch(bytes.b[0]) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g = bytes.b[2];
		var _g1 = bytes.b[1];
		switch(bytes.b[0]) {
		case 73:
			if(_g1 == 68) {
				if(_g == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g1) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "lime/media/AudioBuffer.hx", lineNumber : 362, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( _g ) {
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = "lime.media.AudioContext";
lime_media_AudioContext.prototype = {
	__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = "lime.media.AudioManager";
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
lime_media_AudioManager.resume = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.resumeDevice(device);
			alc.processContext(currentContext);
		}
	}
};
lime_media_AudioManager.shutdown = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.makeContextCurrent(null);
			alc.destroyContext(currentContext);
			if(device != null) {
				alc.closeDevice(device);
			}
		}
	}
	lime_media_AudioManager.context = null;
};
lime_media_AudioManager.suspend = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			alc.suspendContext(currentContext);
			var device = alc.getContextsDevice(currentContext);
			if(device != null) {
				alc.pauseDevice(device);
			}
		}
	}
};
var lime_media_FlashAudioContext = function() {
};
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = "lime.media.FlashAudioContext";
lime_media_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_media_FlashAudioContext
};
var lime_media_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = "lime.media.HTML5AudioContext";
lime_media_HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_media_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = "lime.media.OpenALAudioContext";
lime_media_OpenALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime_media_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_media_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_media_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_media_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_media_openal_AL.bufferiv(buffer,param,values);
	}
	,closeDevice: function(device) {
		return lime_media_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,createBuffer: function() {
		return lime_media_openal_AL.createBuffer();
	}
	,createSource: function() {
		return lime_media_openal_AL.createSource();
	}
	,deleteBuffer: function(buffer) {
		lime_media_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_media_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_media_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_media_openal_AL.deleteSources(sources);
	}
	,destroyContext: function(context) {
		if(context == null) {
			return;
		}
		lime_media_openal_ALC.destroyContext(context);
	}
	,disable: function(capability) {
		lime_media_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_media_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_media_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_media_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_media_openal_AL.enable(capability);
	}
	,genSource: function() {
		return this.createSource();
	}
	,genSources: function(n) {
		return lime_media_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return this.createBuffer();
	}
	,genBuffers: function(n) {
		return lime_media_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_media_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_media_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_media_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferiv(buffer,param,count);
	}
	,getContextsDevice: function(context) {
		if(context == null) {
			return null;
		}
		return lime_media_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_media_openal_ALC.getCurrentContext();
	}
	,getDouble: function(param) {
		return lime_media_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_media_openal_AL.getEnumValue(ename);
	}
	,getError: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getError();
		} else {
			return lime_media_openal_ALC.getError(device);
		}
	}
	,getErrorString: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getErrorString();
		} else {
			return lime_media_openal_ALC.getErrorString(device);
		}
	}
	,getFloat: function(param) {
		return lime_media_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_media_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count,device) {
		if(count == null) {
			count = 1;
		}
		if(device == null) {
			return lime_media_openal_AL.getIntegerv(param,count);
		} else {
			return lime_media_openal_ALC.getIntegerv(device,param,count);
		}
	}
	,getListener3f: function(param) {
		return lime_media_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_media_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_media_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_media_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_media_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_media_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_media_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_media_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_media_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param,device) {
		if(device == null) {
			return lime_media_openal_AL.getString(param);
		} else {
			return lime_media_openal_ALC.getString(device,param);
		}
	}
	,isBuffer: function(buffer) {
		return lime_media_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_media_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_media_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_media_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_media_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_media_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_media_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_media_openal_AL.listeneriv(param,values);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_media_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_media_openal_ALC.resumeDevice(device);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_media_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_media_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_media_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_media_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_media_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_media_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_media_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_media_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_media_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_media_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_media_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_media_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_media_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_media_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_media_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_media_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_media_openal_AL.speedOfSound(value);
	}
	,suspendContext: function(context) {
		lime_media_openal_ALC.suspendContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_AL = function() { };
$hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
lime_media_openal_AL.__name__ = "lime.media.openal.AL";
lime_media_openal_AL.removeDirectFilter = function(source) {
};
lime_media_openal_AL.removeSend = function(source,index) {
};
lime_media_openal_AL.auxf = function(aux,param,value) {
};
lime_media_openal_AL.auxfv = function(aux,param,values) {
};
lime_media_openal_AL.auxi = function(aux,param,value) {
};
lime_media_openal_AL.auxiv = function(aux,param,values) {
};
lime_media_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_media_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.bufferf = function(buffer,param,value) {
};
lime_media_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_media_openal_AL.bufferi = function(buffer,param,value) {
};
lime_media_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_media_openal_AL.createAux = function() {
	return null;
};
lime_media_openal_AL.createBuffer = function() {
	return null;
};
lime_media_openal_AL.createEffect = function() {
	return null;
};
lime_media_openal_AL.createFilter = function() {
	return null;
};
lime_media_openal_AL.createSource = function() {
	return null;
};
lime_media_openal_AL.deleteBuffer = function(buffer) {
};
lime_media_openal_AL.deleteBuffers = function(buffers) {
};
lime_media_openal_AL.deleteSource = function(source) {
};
lime_media_openal_AL.deleteSources = function(sources) {
};
lime_media_openal_AL.disable = function(capability) {
};
lime_media_openal_AL.distanceModel = function(distanceModel) {
};
lime_media_openal_AL.dopplerFactor = function(value) {
};
lime_media_openal_AL.dopplerVelocity = function(value) {
};
lime_media_openal_AL.effectf = function(effect,param,value) {
};
lime_media_openal_AL.effectfv = function(effect,param,values) {
};
lime_media_openal_AL.effecti = function(effect,param,value) {
};
lime_media_openal_AL.effectiv = function(effect,param,values) {
};
lime_media_openal_AL.enable = function(capability) {
};
lime_media_openal_AL.genSource = function() {
	return null;
};
lime_media_openal_AL.genSources = function(n) {
	return null;
};
lime_media_openal_AL.genBuffer = function() {
	return null;
};
lime_media_openal_AL.genBuffers = function(n) {
	return null;
};
lime_media_openal_AL.getBoolean = function(param) {
	return false;
};
lime_media_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getDouble = function(param) {
	return 0;
};
lime_media_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_media_openal_AL.getError = function() {
	return 0;
};
lime_media_openal_AL.getErrorString = function() {
	switch(lime_media_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_AL.getFilteri = function(filter,param) {
	return 0;
};
lime_media_openal_AL.getFloat = function(param) {
	return 0;
};
lime_media_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getInteger = function(param) {
	return 0;
};
lime_media_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListener3f = function(param) {
	return null;
};
lime_media_openal_AL.getListener3i = function(param) {
	return null;
};
lime_media_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_media_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_media_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getParameter = function(param) {
	return null;
};
lime_media_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_media_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getString = function(param) {
	return null;
};
lime_media_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_media_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_media_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_media_openal_AL.isAux = function(aux) {
	return false;
};
lime_media_openal_AL.isEffect = function(effect) {
	return false;
};
lime_media_openal_AL.isFilter = function(filter) {
	return false;
};
lime_media_openal_AL.isSource = function(source) {
	return false;
};
lime_media_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listenerf = function(param,value) {
};
lime_media_openal_AL.listenerfv = function(param,values) {
};
lime_media_openal_AL.listeneri = function(param,value) {
};
lime_media_openal_AL.listeneriv = function(param,values) {
};
lime_media_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.sourcef = function(source,param,value) {
};
lime_media_openal_AL.sourcefv = function(source,param,values) {
};
lime_media_openal_AL.sourcei = function(source,param,value) {
};
lime_media_openal_AL.filteri = function(filter,param,value) {
};
lime_media_openal_AL.filterf = function(filter,param,value) {
};
lime_media_openal_AL.sourceiv = function(source,param,values) {
};
lime_media_openal_AL.sourcePlay = function(source) {
};
lime_media_openal_AL.sourcePlayv = function(sources) {
};
lime_media_openal_AL.sourceStop = function(source) {
};
lime_media_openal_AL.sourceStopv = function(sources) {
};
lime_media_openal_AL.sourceRewind = function(source) {
};
lime_media_openal_AL.sourceRewindv = function(sources) {
};
lime_media_openal_AL.sourcePause = function(source) {
};
lime_media_openal_AL.sourcePausev = function(sources) {
};
lime_media_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_media_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_media_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_media_openal_AL.speedOfSound = function(value) {
};
var lime_media_openal_ALAuxiliaryEffectSlot = {};
lime_media_openal_ALAuxiliaryEffectSlot._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALBuffer = {};
lime_media_openal_ALBuffer._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = "lime.media.openal.ALC";
lime_media_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.destroyContext = function(context) {
};
lime_media_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_media_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_media_openal_ALC.getError = function(device) {
	return 0;
};
lime_media_openal_ALC.getErrorString = function(device) {
	switch(lime_media_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_media_openal_ALC.getString = function(device,param) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.pauseDevice = function(device) {
};
lime_media_openal_ALC.processContext = function(context) {
};
lime_media_openal_ALC.resumeDevice = function(device) {
};
lime_media_openal_ALC.suspendContext = function(context) {
};
var lime_media_openal_ALContext = {};
lime_media_openal_ALContext._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALDevice = {};
lime_media_openal_ALDevice._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALEffect = {};
lime_media_openal_ALEffect._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALFilter = {};
lime_media_openal_ALFilter._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALSource = {};
lime_media_openal_ALSource._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_vorbis_VorbisComment = function() {
};
$hxClasses["lime.media.vorbis.VorbisComment"] = lime_media_vorbis_VorbisComment;
lime_media_vorbis_VorbisComment.__name__ = "lime.media.vorbis.VorbisComment";
lime_media_vorbis_VorbisComment.prototype = {
	__class__: lime_media_vorbis_VorbisComment
};
var lime_media_vorbis_VorbisFile = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.media.vorbis.VorbisFile"] = lime_media_vorbis_VorbisFile;
lime_media_vorbis_VorbisFile.__name__ = "lime.media.vorbis.VorbisFile";
lime_media_vorbis_VorbisFile.fromBytes = function(bytes) {
	return null;
};
lime_media_vorbis_VorbisFile.fromFile = function(path) {
	return null;
};
lime_media_vorbis_VorbisFile.prototype = {
	bitrate: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,bitrateInstant: function() {
		return 0;
	}
	,clear: function() {
	}
	,comment: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,crosslap: function(other) {
		return 0;
	}
	,info: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,pcmSeek: function(pos) {
		return 0;
	}
	,pcmSeekLap: function(pos) {
		return 0;
	}
	,pcmSeekPage: function(pos) {
		return 0;
	}
	,pcmSeekPageLap: function(pos) {
		return 0;
	}
	,pcmTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,pcmTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawSeek: function(pos) {
		return 0;
	}
	,rawSeekLap: function(pos) {
		return 0;
	}
	,rawTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,read: function(buffer,position,length,bigEndianPacking,wordSize,signed) {
		if(signed == null) {
			signed = true;
		}
		if(wordSize == null) {
			wordSize = 2;
		}
		if(bigEndianPacking == null) {
			bigEndianPacking = false;
		}
		if(length == null) {
			length = 4096;
		}
		return 0;
	}
	,readFloat: function(pcmChannels,samples) {
		return 0;
	}
	,seekable: function() {
		return false;
	}
	,serialNumber: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,streams: function() {
		return 0;
	}
	,timeSeek: function(s) {
		return 0;
	}
	,timeSeekLap: function(s) {
		return 0;
	}
	,timeSeekPage: function(s) {
		return 0;
	}
	,timeSeekPageLap: function(s) {
		return 0;
	}
	,timeTell: function() {
		return 0;
	}
	,timeTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,__class__: lime_media_vorbis_VorbisFile
};
var lime_media_vorbis_VorbisInfo = function() {
};
$hxClasses["lime.media.vorbis.VorbisInfo"] = lime_media_vorbis_VorbisInfo;
lime_media_vorbis_VorbisInfo.__name__ = "lime.media.vorbis.VorbisInfo";
lime_media_vorbis_VorbisInfo.prototype = {
	__class__: lime_media_vorbis_VorbisInfo
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = "lime.net._IHTTPRequest";
lime_net__$IHTTPRequest.__isInterface__ = true;
lime_net__$IHTTPRequest.prototype = {
	__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	cancel: function() {
		this.__backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = "lime.net.HTTPRequest";
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = "lime.net._HTTPRequest_Bytes";
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = "lime.net._HTTPRequest_String";
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = "lime.net.HTTPRequestHeader";
lime_net_HTTPRequestHeader.prototype = {
	__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = "lime.net._HTTPRequest_lime_text_Font";
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_text_Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils_Bytes.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = "lime.system.CFFI";
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system_CFFIPointer = {};
lime_system_CFFIPointer._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_system_CFFIPointer.get = function(this1) {
	var tmp = this1 != null;
	return 0;
};
lime_system_CFFIPointer.equals = function(a,b) {
	return lime_system_CFFIPointer.get(a) == b;
};
lime_system_CFFIPointer.equalsPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) == lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.greaterThan = function(a,b) {
	return lime_system_CFFIPointer.get(a) > b;
};
lime_system_CFFIPointer.greaterThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) > lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.greaterThanOrEqual = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= b;
};
lime_system_CFFIPointer.greaterThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.lessThan = function(a,b) {
	return lime_system_CFFIPointer.get(a) < b;
};
lime_system_CFFIPointer.lessThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) < lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.lessThanOrEqual = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= b;
};
lime_system_CFFIPointer.lessThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= lime_system_CFFIPointer.get(b);
};
lime_system_CFFIPointer.notEquals = function(a,b) {
	return lime_system_CFFIPointer.get(a) != b;
};
lime_system_CFFIPointer.notEqualsPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) != lime_system_CFFIPointer.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = "lime.system.Clipboard";
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = null;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	lime_system_Clipboard.__update();
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__window;
	if($window != null) {
		$window.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = "lime.system.Display";
lime_system_Display.prototype = {
	__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = "lime.system.DisplayMode";
lime_system_DisplayMode.prototype = {
	__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxEnums["lime.system.Endian"] = { __ename__ : "lime.system.Endian", __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"]
	,LITTLE_ENDIAN: {_hx_index:0,__enum__:"lime.system.Endian",toString:$estr}
	,BIG_ENDIAN: {_hx_index:1,__enum__:"lime.system.Endian",toString:$estr}
};
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = "lime.system.Sensor";
lime_system_Sensor.getSensors = function(type) {
	if(type == null) {
		return lime_system_Sensor.sensors.slice();
	} else {
		var result = [];
		var _g = 0;
		var _g1 = lime_system_Sensor.sensors;
		while(_g < _g1.length) {
			var sensor = _g1[_g];
			++_g;
			if(sensor.type == type) {
				result.push(sensor);
			}
		}
		return result;
	}
};
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxEnums["lime.system.SensorType"] = { __ename__ : "lime.system.SensorType", __constructs__ : ["ACCELEROMETER"]
	,ACCELEROMETER: {_hx_index:0,__enum__:"lime.system.SensorType",toString:$estr}
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = "lime.system.System";
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	if(Object.prototype.hasOwnProperty.call(lime_system_System.__applicationEntryPoint.h,projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		lime_system_System.__applicationEntryPoint.h[projectName](config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96 * window.devicePixelRatio;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.__parseBool = function(value) {
	return value == "true";
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	lime_system_System.__applicationEntryPoint.h[projectName] = entryPoint;
};
lime_system_System.__runProcess = function(command,args) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	if(lime_system_System.__applicationDirectory == null) {
		lime_system_System.__applicationDirectory = lime_system_System.__getDirectory(0);
	}
	return lime_system_System.__applicationDirectory;
};
lime_system_System.get_applicationStorageDirectory = function() {
	if(lime_system_System.__applicationStorageDirectory == null) {
		lime_system_System.__applicationStorageDirectory = lime_system_System.__getDirectory(1);
	}
	return lime_system_System.__applicationStorageDirectory;
};
lime_system_System.get_deviceModel = function() {
	var tmp = lime_system_System.__deviceModel == null;
	return lime_system_System.__deviceModel;
};
lime_system_System.get_deviceVendor = function() {
	var tmp = lime_system_System.__deviceVendor == null;
	return lime_system_System.__deviceVendor;
};
lime_system_System.get_desktopDirectory = function() {
	if(lime_system_System.__desktopDirectory == null) {
		lime_system_System.__desktopDirectory = lime_system_System.__getDirectory(2);
	}
	return lime_system_System.__desktopDirectory;
};
lime_system_System.get_documentsDirectory = function() {
	if(lime_system_System.__documentsDirectory == null) {
		lime_system_System.__documentsDirectory = lime_system_System.__getDirectory(3);
	}
	return lime_system_System.__documentsDirectory;
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var elements = null;
		var array = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint8Array(arrayBuffer,0);
			} else {
				this1 = new Uint8Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var elements = null;
		var array = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint16Array(elements);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint16Array(arrayBuffer,0);
			} else {
				this1 = new Uint16Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint16array = this1;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
lime_system_System.get_fontsDirectory = function() {
	if(lime_system_System.__fontsDirectory == null) {
		lime_system_System.__fontsDirectory = lime_system_System.__getDirectory(4);
	}
	return lime_system_System.__fontsDirectory;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_platformLabel = function() {
	if(lime_system_System.__platformLabel == null) {
		var name = lime_system_System.get_platformName();
		var version = lime_system_System.get_platformVersion();
		if(name != null && version != null) {
			lime_system_System.__platformLabel = name + " " + version;
		} else if(name != null) {
			lime_system_System.__platformLabel = name;
		}
	}
	return lime_system_System.__platformLabel;
};
lime_system_System.get_platformName = function() {
	if(lime_system_System.__platformName == null) {
		lime_system_System.__platformName = "HTML5";
	}
	return lime_system_System.__platformName;
};
lime_system_System.get_platformVersion = function() {
	var tmp = lime_system_System.__platformVersion == null;
	return lime_system_System.__platformVersion;
};
lime_system_System.get_userDirectory = function() {
	if(lime_system_System.__userDirectory == null) {
		lime_system_System.__userDirectory = lime_system_System.__getDirectory(5);
	}
	return lime_system_System.__userDirectory;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$Dynamic_$Void();
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = "lime.system.ThreadPool";
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxEnums["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : "lime.system._ThreadPool.ThreadPoolMessageType", __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"]
	,COMPLETE: {_hx_index:0,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,ERROR: {_hx_index:1,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,EXIT: {_hx_index:2,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,PROGRESS: {_hx_index:3,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
	,WORK: {_hx_index:4,__enum__:"lime.system._ThreadPool.ThreadPoolMessageType",toString:$estr}
};
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = "lime.system._ThreadPool.ThreadPoolMessage";
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = $global.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var lime_text_Glyph = {};
lime_text_Glyph._new = function(i) {
	var this1 = i;
	return this1;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = "lime.text.GlyphMetrics";
lime_text_GlyphMetrics.prototype = {
	__class__: lime_text_GlyphMetrics
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = "lime.ui.Gamepad";
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
};
var lime_ui_GamepadAxis = {};
lime_ui_GamepadAxis.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_GamepadButton = {};
lime_ui_GamepadButton.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = "lime.ui.Joystick";
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
};
var lime_ui_JoystickHatPosition = {};
lime_ui_JoystickHatPosition._new = function(value) {
	var this1 = value;
	return this1;
};
lime_ui_JoystickHatPosition.get_center = function(this1) {
	return this1 == 0;
};
lime_ui_JoystickHatPosition.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui_JoystickHatPosition.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435455 - 4;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui_JoystickHatPosition.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435455 - 8;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui_JoystickHatPosition.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435455 - 2;
	}
	return value;
};
lime_ui_JoystickHatPosition.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui_JoystickHatPosition.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435455 - 1;
	}
	return value;
};
var lime_ui_KeyCode = {};
lime_ui_KeyCode.fromScanCode = function(scanCode) {
	return 0;
};
lime_ui_KeyCode.toScanCode = function(keyCode) {
	return 0;
};
lime_ui_KeyCode.gt = function(a,b) {
	return a > b;
};
lime_ui_KeyCode.gte = function(a,b) {
	return a >= b;
};
lime_ui_KeyCode.lt = function(a,b) {
	return a < b;
};
lime_ui_KeyCode.lte = function(a,b) {
	return a <= b;
};
lime_ui_KeyCode.plus = function(a,b) {
	return a + b;
};
var lime_ui_KeyModifier = {};
lime_ui_KeyModifier.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
lime_ui_KeyModifier.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
lime_ui_KeyModifier.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
lime_ui_KeyModifier.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
lime_ui_KeyModifier.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
lime_ui_KeyModifier.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var lime_ui_MouseCursor = $hxEnums["lime.ui.MouseCursor"] = { __ename__ : "lime.ui.MouseCursor", __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"]
	,ARROW: {_hx_index:0,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CROSSHAIR: {_hx_index:1,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,DEFAULT: {_hx_index:2,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,MOVE: {_hx_index:3,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,POINTER: {_hx_index:4,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NESW: {_hx_index:5,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NS: {_hx_index:6,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NWSE: {_hx_index:7,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_WE: {_hx_index:8,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,TEXT: {_hx_index:9,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT: {_hx_index:10,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT_ARROW: {_hx_index:11,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CUSTOM: {_hx_index:12,__enum__:"lime.ui.MouseCursor",toString:$estr}
};
var lime_ui_MouseWheelMode = $hxEnums["lime.ui.MouseWheelMode"] = { __ename__ : "lime.ui.MouseWheelMode", __constructs__ : ["PIXELS","LINES","PAGES","UNKNOWN"]
	,PIXELS: {_hx_index:0,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,LINES: {_hx_index:1,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,PAGES: {_hx_index:2,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,UNKNOWN: {_hx_index:3,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
};
var lime_ui_ScanCode = {};
lime_ui_ScanCode.fromKeyCode = function(keyCode) {
	return lime_ui_KeyCode.toScanCode(keyCode);
};
lime_ui_ScanCode.toKeyCode = function(scanCode) {
	return lime_ui_KeyCode.fromScanCode(scanCode);
};
lime_ui_ScanCode.gt = function(a,b) {
	return a > b;
};
lime_ui_ScanCode.gte = function(a,b) {
	return a >= b;
};
lime_ui_ScanCode.lt = function(a,b) {
	return a < b;
};
lime_ui_ScanCode.lte = function(a,b) {
	return a <= b;
};
lime_ui_ScanCode.plus = function(a,b) {
	return a + b;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = "lime.ui.Touch";
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onMaximize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = "lime.ui.Window";
lime_ui_Window.prototype = {
	alert: function(message,title) {
		this.__backend.alert(message,title);
	}
	,close: function() {
		this.__backend.close();
	}
	,focus: function() {
		this.__backend.focus();
	}
	,move: function(x,y) {
		this.__backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,readPixels: function(rect) {
		return this.__backend.readPixels(rect);
	}
	,resize: function(width,height) {
		this.__backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.__backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,warpMouse: function(x,y) {
		this.__backend.warpMouse(x,y);
	}
	,get_cursor: function() {
		return this.__backend.getCursor();
	}
	,set_cursor: function(value) {
		return this.__backend.setCursor(value);
	}
	,get_display: function() {
		return this.__backend.getDisplay();
	}
	,get_displayMode: function() {
		return this.__backend.getDisplayMode();
	}
	,set_displayMode: function(value) {
		return this.__backend.setDisplayMode(value);
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.__backend.setBorderless(value);
	}
	,get_frameRate: function() {
		return this.__backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.__backend.setFrameRate(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.__backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_hidden: function() {
		return this.__hidden;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.__backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.__backend.setMinimized(value);
	}
	,get_mouseLock: function() {
		return this.__backend.getMouseLock();
	}
	,set_mouseLock: function(value) {
		this.__backend.setMouseLock(value);
		return value;
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.__backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_textInputEnabled: function() {
		return this.__backend.getTextInputEnabled();
	}
	,set_textInputEnabled: function(value) {
		return this.__backend.setTextInputEnabled(value);
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.__backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
};
var lime_utils_TAError = $hxEnums["lime.utils.TAError"] = { __ename__ : "lime.utils.TAError", __constructs__ : ["RangeError"]
	,RangeError: {_hx_index:0,__enum__:"lime.utils.TAError",toString:$estr}
};
var lime_utils_AssetBundle = function() {
	this.data = new haxe_ds_StringMap();
	this.paths = [];
};
$hxClasses["lime.utils.AssetBundle"] = lime_utils_AssetBundle;
lime_utils_AssetBundle.__name__ = "lime.utils.AssetBundle";
lime_utils_AssetBundle.fromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	return lime_utils_AssetBundle.__extractBundle(input);
};
lime_utils_AssetBundle.fromFile = function(path) {
	return null;
};
lime_utils_AssetBundle.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetBundle.fromBytes(bytes));
};
lime_utils_AssetBundle.loadFromFile = function(path) {
	return lime_utils_Bytes.loadFromFile(path).then(lime_utils_AssetBundle.loadFromBytes);
};
lime_utils_AssetBundle.__extractBundle = function(input) {
	var entries = haxe_zip_Reader.readZip(input);
	var bundle = new lime_utils_AssetBundle();
	var _g_head = entries.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var entry = val;
		if(entry.compressed) {
			var bytes = entry.data;
			var this1 = bundle.data;
			var key = entry.fileName;
			var value = lime_utils_Bytes.decompress(bytes,lime_utils_CompressionAlgorithm.DEFLATE);
			this1.h[key] = value;
		} else {
			bundle.data.h[entry.fileName] = entry.data;
		}
		bundle.paths.push(entry.fileName);
	}
	return bundle;
};
lime_utils_AssetBundle.prototype = {
	__class__: lime_utils_AssetBundle
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 175899;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = "lime.utils.AssetCache";
lime_utils_AssetCache.prototype = {
	exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.image.h,id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.font.h,id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.audio.h,id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.h[id] = asset;
			break;
		case "IMAGE":
			if(!((asset) instanceof lime_graphics_Image)) {
				throw haxe_Exception.thrown("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.h[id] = asset;
			break;
		case "MUSIC":case "SOUND":
			if(!((asset) instanceof lime_media_AudioBuffer)) {
				throw haxe_Exception.thrown("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.h[id] = asset;
			break;
		default:
			throw haxe_Exception.thrown(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = haxe_ds_StringMap.keysIterator(this.audio.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					var _this = this.audio;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.font.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					var _this = this.font;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
			}
			var keys = haxe_ds_StringMap.keysIterator(this.image.h);
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					var _this = this.image;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = "lime.utils.AssetLibrary";
lime_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
lime_utils_AssetLibrary.fromBundle = function(bundle) {
	if(Object.prototype.hasOwnProperty.call(bundle.data.h,"library.json")) {
		var manifest = lime_utils_AssetManifest.fromBytes(bundle.data.h["library.json"]);
		if(manifest != null) {
			var library = null;
			if(manifest.libraryType == null) {
				library = new lime_utils_AssetLibrary();
			} else {
				var name = manifest.libraryType;
				var libraryClass = $hxClasses[name];
				if(libraryClass != null) {
					library = Type.createInstance(libraryClass,manifest.libraryArgs);
				} else {
					lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 122, className : "lime.utils.AssetLibrary", methodName : "fromBundle"});
					return null;
				}
			}
			library.__fromBundle(bundle,manifest);
			return library;
		}
	} else {
		var library = new lime_utils_AssetLibrary();
		library.__fromBundle(bundle);
		return library;
	}
	return null;
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var name = manifest.libraryType;
		var libraryClass = $hxClasses[name];
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 160, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(bytes,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load();
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
lime_utils_AssetLibrary.prototype = {
	exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var assetType = this.types.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		case "TEXT":
			return this.getText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return this.cachedAudioBuffers.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes));
		} else {
			return lime_media_AudioBuffer.fromFile(this.paths.h[id]);
		}
	}
	,getBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return this.cachedBytes.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			var bytes = lime_utils_Bytes.ofString(this.cachedText.h[id]);
			this.cachedBytes.h[id] = bytes;
			return bytes;
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes);
		} else {
			return lime_utils_Bytes.fromFile(this.paths.h[id]);
		}
	}
	,getFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return this.cachedFonts.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_text_Font);
		} else {
			return lime_text_Font.fromFile(this.paths.h[id]);
		}
	}
	,getImage: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return this.cachedImages.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_graphics_Image);
		} else {
			return lime_graphics_Image.fromFile(this.paths.h[id]);
		}
	}
	,getPath: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.paths.h,id)) {
			return this.paths.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return this.pathGroups.h[id][0];
		} else {
			return null;
		}
	}
	,getText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return this.cachedText.h[id];
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		if(requestedType == null) {
			if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
				return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
			} else {
				return true;
			}
		} else {
			switch(requestedType) {
			case "FONT":
				return Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id);
			case "IMAGE":
				return Object.prototype.hasOwnProperty.call(this.cachedImages.h,id);
			case "MUSIC":case "SOUND":
				return Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id);
			default:
				if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
					return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
				} else {
					return true;
				}
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var id = haxe_ds_StringMap.keysIterator(this.types.h);
		while(id.hasNext()) {
			var id1 = id.next();
			if(requestedType == null || this.exists(id1,type)) {
				items.push(id1);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to load template: " + id);
		case "TEXT":
			return this.loadText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = haxe_ds_StringMap.keysIterator(this.preload.h);
			while(id.hasNext()) {
				var id1 = id.next();
				if(!this.preload.h[id1]) {
					continue;
				}
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + this.types.h[id1] + "]",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 405, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.h[id1];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id,_g) {
							return function(bytes) {
								_g[0](id[0],bytes);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id,_g) {
							return function(font) {
								_g[0](id[0],font);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id,_g) {
							return function(image) {
								_g[0](id[0],image);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id,_g) {
							return function(audioBuffer) {
								_g[0](id[0],audioBuffer);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id,_g) {
							return function(text) {
								_g[0](id[0],text);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return lime_app_Future.withValue(this.cachedAudioBuffers.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return lime_media_AudioBuffer.loadFromFiles(this.pathGroups.h[id]);
		} else {
			return lime_media_AudioBuffer.loadFromFile(this.paths.h[id]);
		}
	}
	,loadBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_app_Future.withValue(this.cachedBytes.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else {
			return lime_utils_Bytes.loadFromFile(this.paths.h[id]);
		}
	}
	,loadFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return lime_app_Future.withValue(this.cachedFonts.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var font = Type.createInstance(this.classTypes.h[id],[]);
			return font.__loadFromName(font.name);
		} else {
			return lime_text_Font.loadFromName(this.paths.h[id]);
		}
	}
	,loadImage: function(id) {
		var _gthis = this;
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return lime_app_Future.withValue(this.cachedImages.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_graphics_Image.loadFromBytes(this.cachedBytes.h[id]).then(function(image) {
				var _this = _gthis.cachedBytes;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				_gthis.cachedImages.h[id] = image;
				return lime_app_Future.withValue(image);
			});
		} else {
			return lime_graphics_Image.loadFromFile(this.paths.h[id]);
		}
	}
	,loadText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return lime_app_Future.withValue(this.cachedText.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id) || Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return lime_app_Future.withValue(null);
			} else {
				var text = bytes.getString(0,bytes.length);
				this.cachedText.h[id] = text;
				return lime_app_Future.withValue(text);
			}
		} else {
			var request = new lime_net__$HTTPRequest_$String();
			return request.load(this.paths.h[id]);
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + this.types.h[id] + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 619, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var size = Object.prototype.hasOwnProperty.call(this.sizes.h,id) ? this.sizes.h[id] : 0;
			if(!Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				this.bytesLoaded += size;
			} else {
				var cache = this.bytesLoadedCache.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			this.bytesLoadedCache.h[id] = size;
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		return lime_utils_Assets.__cacheBreak(path);
	}
	,__fromBundle: function(bundle,manifest) {
		if(manifest != null) {
			var id;
			var data;
			var type;
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
				data = bundle.data.h[asset.path];
				if(Object.prototype.hasOwnProperty.call(asset,"type")) {
					type = asset.type;
					if(type == "TEXT") {
						this.cachedText.h[id] = data != null ? Std.string(data) : null;
					} else {
						this.cachedBytes.h[id] = data;
					}
					this.types.h[id] = asset.type;
				} else {
					this.cachedBytes.h[id] = data;
					this.types.h[id] = "BINARY";
				}
			}
		} else {
			var _g = 0;
			var _g1 = bundle.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				this.cachedBytes.h[path] = bundle.data.h[path];
				this.types.h[path] = "BINARY";
			}
		}
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			size = hasSize && Object.prototype.hasOwnProperty.call(asset,"size") ? asset.size : 100;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(this.__resolvePath(basePath + Std.string(Reflect.field(asset,"path"))));
				this1.h[id] = value;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g2 = 0;
				var _g3 = pathGroup.length;
				while(_g2 < _g3) {
					var i = _g2++;
					pathGroup[i] = this.__cacheBreak(this.__resolvePath(basePath + pathGroup[i]));
				}
				this.pathGroups.h[id] = pathGroup;
			}
			this.sizes.h[id] = size;
			this.types.h[id] = asset.type;
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				this.preload.h[id] = Reflect.field(asset,"preload");
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				var name = Reflect.field(asset,"className");
				classRef = $hxClasses[name];
				this.classTypes.h[id] = classRef;
			}
		}
		this.bytesTotal = 0;
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(this.preload.h,id) && this.preload.h[id] && Object.prototype.hasOwnProperty.call(this.sizes.h,id)) {
				this.bytesTotal += this.sizes.h[id];
			}
		}
	}
	,__resolvePath: function(path) {
		path = StringTools.replace(path,"\\","/");
		var colonIdx = path.indexOf(":");
		if(StringTools.startsWith(path,"http") && colonIdx > 0) {
			var lastSlashIdx = colonIdx + 3;
			var httpSection = HxOverrides.substr(path,0,lastSlashIdx);
			path = httpSection + StringTools.replace(HxOverrides.substr(path,lastSlashIdx,null),"//","/");
		} else {
			path = StringTools.replace(path,"//","/");
		}
		if(path.indexOf("./") > -1) {
			var split = path.split("/");
			var newPath = [];
			var _g = 0;
			var _g1 = split.length;
			while(_g < _g1) {
				var i = _g++;
				if(split[i] == "..") {
					if(i == 0 || newPath[i - 1] == "..") {
						newPath.push("..");
					} else {
						newPath.pop();
					}
				} else if(split[i] == ".") {
					if(i == 0) {
						newPath.push(".");
					}
				} else {
					newPath.push(split[i]);
				}
			}
			path = newPath.join("/");
		}
		return path;
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		this.cachedAudioBuffers.h[id] = audioBuffer;
		if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			var pathGroup = this.pathGroups.h[id];
			var otherID = haxe_ds_StringMap.keysIterator(this.pathGroups.h);
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					if(this.pathGroups.h[otherID1].indexOf(path) > -1) {
						this.cachedAudioBuffers.h[otherID1] = audioBuffer;
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 865, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 869, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		this.cachedBytes.h[id] = bytes;
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		this.cachedFonts.h[id] = font;
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		this.cachedImages.h[id] = image;
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		this.cachedText.h[id] = text;
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var size = this.sizes.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			if(Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				var cache = this.bytesLoadedCache.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			this.bytesLoadedCache.h[id] = bytesLoaded;
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = "lime.utils.AssetManifest";
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils_Bytes.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_Bytes.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(Object.prototype.hasOwnProperty.call(manifestData,"name")) {
		manifest.name = manifestData.name;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryType")) {
		manifest.libraryType = manifestData.libraryType;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryArgs")) {
		manifest.libraryArgs = manifestData.libraryArgs;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"assets")) {
		var assets = manifestData.assets;
		if(Object.prototype.hasOwnProperty.call(manifestData,"version") && manifestData.version <= 2) {
			manifest.assets = haxe_Unserializer.run(assets);
		} else {
			manifest.assets = assets;
		}
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	basePath = StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	rootPath = StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		manifestData.rootPath = this.rootPath;
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = "lime.utils.Assets";
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "lime/utils/Assets.hx", lineNumber : 133, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 138, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 143, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return lime_utils_Assets.libraries.h[name];
};
lime_utils_Assets.getPath = function(id) {
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.error("There is no asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 224, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 229, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.hasLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var library = haxe_ds_StringMap.valueIterator(lime_utils_Assets.libraries.h);
	while(library.hasNext()) {
		var library1 = library.next();
		var libraryItems = library1.list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.bundlePaths.h,id)) {
		lime_utils_AssetBundle.loadFromFile(lime_utils_Assets.bundlePaths.h[id]).onComplete(function(bundle) {
			if(bundle == null) {
				promise.error("Cannot load bundle for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromBundle(bundle);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	} else {
		if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraryPaths.h,id)) {
			path = lime_utils_Assets.libraryPaths.h[id];
			rootPath = haxe_io_Path.directory(path);
		} else {
			if(StringTools.endsWith(path,".bundle")) {
				rootPath = path;
				path += "/library.json";
			} else {
				rootPath = haxe_io_Path.directory(path);
			}
			path = lime_utils_Assets.__cacheBreak(path);
		}
		lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
			if(manifest == null) {
				promise.error("Cannot parse asset manifest for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	}
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	return lime_utils_Assets.loadAsset(id,"TEXT",false);
};
lime_utils_Assets.registerLibrary = function(name,library) {
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name)) {
		if(lime_utils_Assets.libraries.h[name] == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	lime_utils_Assets.libraries.h[name] = library;
};
lime_utils_Assets.unloadLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var library = lime_utils_Assets.libraries.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	var _this = lime_utils_Assets.libraries;
	if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
		delete(_this.h[name]);
	}
};
lime_utils_Assets.__cacheBreak = function(path) {
	if(lime_utils_Assets.cache.version > 0) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
	}
	return path;
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = "lime.utils._Assets.LibrarySymbol";
lime_utils__$Assets_LibrarySymbol.prototype = {
	isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils_BytePointer = {};
lime_utils_BytePointer._new = function(bytes,offset) {
	if(offset == null) {
		offset = 0;
	}
	var this1 = new lime_utils_BytePointerData(bytes,offset);
	return this1;
};
lime_utils_BytePointer.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) {
		bytes = haxe_io_Bytes.ofData(buffer);
	}
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		this1.offset = offset != null ? offset : 0;
	} else {
		this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
		this1.offset = offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
	}
};
lime_utils_BytePointer.__arrayGet = function(this1,index) {
	if(this1.bytes != null) {
		return this1.bytes.b[index + this1.offset];
	} else {
		return 0;
	}
};
lime_utils_BytePointer.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) {
		this1.bytes.b[index + this1.offset] = value & 255;
	}
	return value;
};
lime_utils_BytePointer.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
lime_utils_BytePointer.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer),0);
};
lime_utils_BytePointer.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils_BytePointer.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return new lime_utils_BytePointerData(null,0);
	} else {
		return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData),0);
	}
};
lime_utils_BytePointer.fromFile = function(path) {
	return new lime_utils_BytePointerData(lime_utils_Bytes.fromFile(path),0);
};
lime_utils_BytePointer.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils_BytePointer.toUInt8Array = function(bytePointer) {
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else if(array != null) {
		this1 = new Uint8Array(array);
	} else if(view != null) {
		this1 = new Uint8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8Array(buffer,byteoffset);
		} else {
			this1 = new Uint8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint8ClampedArray(elements);
	} else if(array != null) {
		this1 = new Uint8ClampedArray(array);
	} else if(view != null) {
		this1 = new Uint8ClampedArray(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint8ClampedArray(buffer,byteoffset);
		} else {
			this1 = new Uint8ClampedArray(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int8Array(elements);
	} else if(array != null) {
		this1 = new Int8Array(array);
	} else if(view != null) {
		this1 = new Int8Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int8Array(buffer,byteoffset);
		} else {
			this1 = new Int8Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,byteoffset);
		} else {
			this1 = new Uint16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int16Array(elements);
	} else if(array != null) {
		this1 = new Int16Array(array);
	} else if(view != null) {
		this1 = new Int16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int16Array(buffer,byteoffset);
		} else {
			this1 = new Int16Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Uint32Array(elements);
	} else if(array != null) {
		this1 = new Uint32Array(array);
	} else if(view != null) {
		this1 = new Uint32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint32Array(buffer,byteoffset);
		} else {
			this1 = new Uint32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Int32Array(elements);
	} else if(array != null) {
		this1 = new Int32Array(array);
	} else if(view != null) {
		this1 = new Int32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Int32Array(buffer,byteoffset);
		} else {
			this1 = new Int32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,byteoffset);
		} else {
			this1 = new Float32Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils_BytePointer.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var elements = null;
	var array = null;
	var view = null;
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 64 | 0;
	var len = null;
	if(byteoffset == null) {
		byteoffset = 0;
	}
	var this1;
	if(elements != null) {
		this1 = new Float64Array(elements);
	} else if(array != null) {
		this1 = new Float64Array(array);
	} else if(view != null) {
		this1 = new Float64Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float64Array(buffer,byteoffset);
		} else {
			this1 = new Float64Array(buffer,byteoffset,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = "lime.utils.BytePointerData";
lime_utils_BytePointerData.prototype = {
	__class__: lime_utils_BytePointerData
};
var lime_utils_Bytes = {};
lime_utils_Bytes._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
lime_utils_Bytes.compress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.compress(this1);
	case 1:
		return lime__$internal_format_GZip.compress(this1);
	case 2:
		return lime__$internal_format_LZMA.compress(this1);
	case 3:
		return lime__$internal_format_Zlib.compress(this1);
	}
};
lime_utils_Bytes.decompress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.decompress(this1);
	case 1:
		return lime__$internal_format_GZip.decompress(this1);
	case 2:
		return lime__$internal_format_LZMA.decompress(this1);
	case 3:
		return lime__$internal_format_Zlib.decompress(this1);
	}
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fromFile = function(path) {
	return null;
};
lime_utils_Bytes.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_Bytes.fromBytes(bytes));
};
lime_utils_Bytes.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_CompressionAlgorithm = $hxEnums["lime.utils.CompressionAlgorithm"] = { __ename__ : "lime.utils.CompressionAlgorithm", __constructs__ : ["DEFLATE","GZIP","LZMA","ZLIB"]
	,DEFLATE: {_hx_index:0,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,GZIP: {_hx_index:1,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,LZMA: {_hx_index:2,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,ZLIB: {_hx_index:3,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
};
var lime_utils_DataPointer = {};
lime_utils_DataPointer._new = function(data) {
	var this1 = data;
	return this1;
};
lime_utils_DataPointer.fromFloat = function(value) {
	return value;
};
lime_utils_DataPointer.fromBytesPointer = function(pointer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromArrayBuffer = function(buffer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromBytes = function(bytes) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromBytesData = function(bytesData) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromLimeBytes = function(bytes) {
	return lime_utils_DataPointer.fromBytes(bytes);
};
lime_utils_DataPointer.fromCFFIPointer = function(pointer) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.fromFile = function(path) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.__withOffset = function(data,offset) {
	return lime_utils_DataPointer.fromFloat(0);
};
lime_utils_DataPointer.equals = function(a,b) {
	return a == b;
};
lime_utils_DataPointer.equalsPointer = function(a,b) {
	return a == b;
};
lime_utils_DataPointer.greaterThan = function(a,b) {
	return a > b;
};
lime_utils_DataPointer.greaterThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) > lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
lime_utils_DataPointer.greaterThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) >= lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.lessThan = function(a,b) {
	return a < b;
};
lime_utils_DataPointer.lessThanPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) < lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.lessThanOrEqual = function(a,b) {
	return a <= b;
};
lime_utils_DataPointer.lessThanOrEqualPointer = function(a,b) {
	return lime_system_CFFIPointer.get(a) <= lime_system_CFFIPointer.get(b);
};
lime_utils_DataPointer.notEquals = function(a,b) {
	return a != b;
};
lime_utils_DataPointer.notEqualsPointer = function(a,b) {
	return a != b;
};
lime_utils_DataPointer.plus = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,b);
};
lime_utils_DataPointer.plusPointer = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,b | 0);
};
lime_utils_DataPointer.minus = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,-b);
};
lime_utils_DataPointer.minusPointer = function(a,b) {
	return lime_utils_DataPointer.__withOffset(a,-(b | 0));
};
var lime_utils_Float32Array = {};
lime_utils_Float32Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Float32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Float32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Float32Array.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Float64Array = {};
lime_utils_Float64Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Float64Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float64Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float64Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float64Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Float64Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Float64Array.toString = function(this1) {
	if(this1 != null) {
		return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int16Array = {};
lime_utils_Int16Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Int16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int16Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int16Array.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int32Array = {};
lime_utils_Int32Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Int32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int32Array.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Int8Array = {};
lime_utils_Int8Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_Int8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	return new Int8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_Int8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_Int8Array.toString = function(this1) {
	if(this1 != null) {
		return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = "lime.utils.Log";
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.debug("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw haxe_Exception.thrown(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		var message1 = "[" + info.className + "] " + Std.string(message);
		console.log(message1);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils_LogLevel = {};
lime_utils_LogLevel.gt = function(a,b) {
	return a > b;
};
lime_utils_LogLevel.gte = function(a,b) {
	return a >= b;
};
lime_utils_LogLevel.lt = function(a,b) {
	return a < b;
};
lime_utils_LogLevel.lte = function(a,b) {
	return a <= b;
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = "lime.utils.Preloader";
lime_utils_Preloader.prototype = {
	addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = [_g1[_g]];
			++_g;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "lime/utils/Preloader.hx", lineNumber : 132, className : "lime.utils.Preloader", methodName : "load"});
			library[0].load().onProgress((function(library) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library)).onComplete((function(library) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += library[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library[0].bytesTotal - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 168, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g = 0;
		var _g1 = this.libraryNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 195, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 199, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "lime/utils/Preloader.hx", lineNumber : 236, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name) {
					return function(loaded,total) {
						if(total > 0) {
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
								_gthis.bytesTotalCache.h[name[0]] = total;
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
								_gthis.bytesLoaded += loaded;
							} else {
								_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache2.h[name[0]];
							}
							_gthis.bytesLoadedCache2.h[name[0]] = loaded;
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name) {
					return function(library) {
						var total = 200;
						if(Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
							total = _gthis.bytesTotalCache.h[name[0]];
						}
						if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
							_gthis.bytesLoaded += total;
						} else {
							_gthis.bytesLoaded += total - _gthis.bytesLoadedCache2.h[name[0]];
						}
						_gthis.loadedAssetLibrary(name[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 290, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "lime/utils/Preloader.hx", lineNumber : 301, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var lime_utils_UInt16Array = {};
lime_utils_UInt16Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt16Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt16Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt16Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt32Array = {};
lime_utils_UInt32Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt32Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt32Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt32Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt8Array = {};
lime_utils_UInt8Array.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt8Array.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt8Array.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt8Array.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_UInt8ClampedArray = {};
lime_utils_UInt8ClampedArray.toArrayBufferView = function(this1) {
	return this1;
};
lime_utils_UInt8ClampedArray.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset,len);
};
lime_utils_UInt8ClampedArray.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils_UInt8ClampedArray.toString = function(this1) {
	if(this1 != null) {
		return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
lime_utils_UInt8ClampedArray._clamp = function(_in) {
	var _out = _in | 0;
	if(_out > 255) {
		_out = 255;
	}
	if(_out < 0) {
		return 0;
	} else {
		return _out;
	}
};
var org_poly2tri_AdvancingFront = function(head,tail) {
	this.search_node = this.head = head;
	this.tail = tail;
};
$hxClasses["org.poly2tri.AdvancingFront"] = org_poly2tri_AdvancingFront;
org_poly2tri_AdvancingFront.__name__ = "org.poly2tri.AdvancingFront";
org_poly2tri_AdvancingFront.prototype = {
	locateNode: function(x) {
		var node = this.search_node;
		if(x < node.value) {
			while(true) {
				node = node.prev;
				if(!(node != null)) {
					break;
				}
				if(x >= node.value) {
					this.search_node = node;
					return node;
				}
			}
		} else {
			while(true) {
				node = node.next;
				if(!(node != null)) {
					break;
				}
				if(x < node.value) {
					this.search_node = node.prev;
					return node.prev;
				}
			}
		}
		return null;
	}
	,locatePoint: function(point) {
		var px = point.x;
		var node = this.search_node;
		var nx = node.point.x;
		if(px == nx) {
			if(!point.equals(node.point)) {
				if(point.equals(node.prev.point)) {
					node = node.prev;
				} else if(point.equals(node.next.point)) {
					node = node.next;
				} else {
					throw haxe_Exception.thrown("Invalid AdvancingFront.locatePoint call!");
				}
			}
		} else if(px < nx) {
			while(true) {
				node = node.prev;
				if(!(node != null)) {
					break;
				}
				if(point.equals(node.point)) {
					break;
				}
			}
		} else {
			while(true) {
				node = node.next;
				if(!(node != null)) {
					break;
				}
				if(point.equals(node.point)) {
					break;
				}
			}
		}
		if(node != null) {
			this.search_node = node;
		}
		return node;
	}
	,__class__: org_poly2tri_AdvancingFront
};
var org_poly2tri_Basin = function() {
	this.width = 0;
};
$hxClasses["org.poly2tri.Basin"] = org_poly2tri_Basin;
org_poly2tri_Basin.__name__ = "org.poly2tri.Basin";
org_poly2tri_Basin.prototype = {
	clear: function() {
		this.left_node = null;
		this.bottom_node = null;
		this.right_node = null;
		this.width = 0.0;
		this.left_highest = false;
	}
	,__class__: org_poly2tri_Basin
};
var org_poly2tri_Constants = function() { };
$hxClasses["org.poly2tri.Constants"] = org_poly2tri_Constants;
org_poly2tri_Constants.__name__ = "org.poly2tri.Constants";
var org_poly2tri_Edge = function(p1,p2) {
	if(p1 == null || p2 == null) {
		throw haxe_Exception.thrown("Edge::new p1 or p2 is null");
	}
	var swap = false;
	if(p1.y > p2.y) {
		swap = true;
	} else if(p1.y == p2.y) {
		if(p1.x == p2.x) {
			throw haxe_Exception.thrown("Edge::repeat points " + Std.string(p1));
		}
		swap = p1.x > p2.x;
	}
	if(swap) {
		this.q = p1;
		this.p = p2;
	} else {
		this.p = p1;
		this.q = p2;
	}
	this.q.get_edge_list().push(this);
};
$hxClasses["org.poly2tri.Edge"] = org_poly2tri_Edge;
org_poly2tri_Edge.__name__ = "org.poly2tri.Edge";
org_poly2tri_Edge.prototype = {
	toString: function() {
		return "Edge(" + Std.string(this.p) + ", " + Std.string(this.q) + ")";
	}
	,__class__: org_poly2tri_Edge
};
var org_poly2tri_EdgeEvent = function() {
};
$hxClasses["org.poly2tri.EdgeEvent"] = org_poly2tri_EdgeEvent;
org_poly2tri_EdgeEvent.__name__ = "org.poly2tri.EdgeEvent";
org_poly2tri_EdgeEvent.prototype = {
	__class__: org_poly2tri_EdgeEvent
};
var org_poly2tri_Node = function(point,triangle) {
	this.point = point;
	this.triangle = triangle;
	this.value = this.point.x;
};
$hxClasses["org.poly2tri.Node"] = org_poly2tri_Node;
org_poly2tri_Node.__name__ = "org.poly2tri.Node";
org_poly2tri_Node.prototype = {
	getHoleAngle: function() {
		var ax = this.next.point.x - this.point.x;
		var ay = this.next.point.y - this.point.y;
		var bx = this.prev.point.x - this.point.x;
		var by = this.prev.point.y - this.point.y;
		return Math.atan2(ax * by - ay * bx,ax * bx + ay * by);
	}
	,getBasinAngle: function() {
		return Math.atan2(this.point.y - this.next.next.point.y,this.point.x - this.next.next.point.x);
	}
	,__class__: org_poly2tri_Node
};
var org_poly2tri_Orientation = function() { };
$hxClasses["org.poly2tri.Orientation"] = org_poly2tri_Orientation;
org_poly2tri_Orientation.__name__ = "org.poly2tri.Orientation";
org_poly2tri_Orientation.orient2d = function(pa,pb,pc) {
	var detleft = (pa.x - pc.x) * (pb.y - pc.y);
	var detright = (pa.y - pc.y) * (pb.x - pc.x);
	var val = detleft - detright;
	if(val > -org_poly2tri_Constants.EPSILON && val < org_poly2tri_Constants.EPSILON) {
		return 0;
	}
	if(val > 0) {
		return -1;
	}
	return 1;
};
var org_poly2tri_Point = function(x,y) {
	this.x = x;
	this.y = y;
	this.id = org_poly2tri_Point.C_ID;
	org_poly2tri_Point.C_ID++;
};
$hxClasses["org.poly2tri.Point"] = org_poly2tri_Point;
org_poly2tri_Point.__name__ = "org.poly2tri.Point";
org_poly2tri_Point.sortPoints = function(points) {
	points.sort(org_poly2tri_Point.cmpPoints);
};
org_poly2tri_Point.cmpPoints = function(l,r) {
	var ret = l.y - r.y;
	if(ret == 0) {
		ret = l.x - r.x;
	}
	if(ret < 0) {
		return -1;
	}
	if(ret > 0) {
		return 1;
	}
	return 0;
};
org_poly2tri_Point.prototype = {
	get_edge_list: function() {
		if(this.edge_list == null) {
			this.edge_list = [];
		}
		return this.edge_list;
	}
	,equals: function(that) {
		if(this.x == that.x) {
			return this.y == that.y;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Point(" + this.x + ", " + this.y + ")";
	}
	,__class__: org_poly2tri_Point
};
var org_poly2tri_Sweep = function(context) {
	this.context = context;
};
$hxClasses["org.poly2tri.Sweep"] = org_poly2tri_Sweep;
org_poly2tri_Sweep.__name__ = "org.poly2tri.Sweep";
org_poly2tri_Sweep.nextFlipPoint = function(ep,eq,ot,op) {
	var o2d = org_poly2tri_Orientation.orient2d(eq,op,ep);
	if(o2d == 1) {
		return ot.pointCCW(op);
	} else if(o2d == -1) {
		return ot.pointCW(op);
	} else {
		throw haxe_Exception.thrown("Sweep:: [Unsupported] Sweep.NextFlipPoint: opposing point on constrained edge!");
	}
};
org_poly2tri_Sweep.prototype = {
	triangulate: function() {
		this.context.initTriangulation();
		this.context.createAdvancingFront();
		this.sweepPoints();
		this.finalizationPolygon();
	}
	,sweepPoints: function() {
		var _g = 1;
		var _g1 = this.context.points.length;
		while(_g < _g1) {
			var i = _g++;
			var point = this.context.points[i];
			var node = this.pointEvent(point);
			var _g2 = 0;
			var _g3 = point.get_edge_list().length;
			while(_g2 < _g3) {
				var j = _g2++;
				this.edgeEventByEdge(point.get_edge_list()[j],node);
			}
		}
	}
	,finalizationPolygon: function() {
		var t = this.context.front.head.next.triangle;
		var p = this.context.front.head.next.point;
		while(!t.getConstrainedEdgeCW(p)) t = t.neighborCCW(p);
		this.context.meshClean(t);
	}
	,pointEvent: function(point) {
		var node = this.context.locateNode(point);
		var new_node = this.newFrontTriangle(point,node);
		if(point.x <= node.point.x + org_poly2tri_Constants.EPSILON) {
			this.fill(node);
		}
		this.fillAdvancingFront(new_node);
		return new_node;
	}
	,edgeEventByEdge: function(edge,node) {
		this.context.edge_event.constrained_edge = edge;
		this.context.edge_event.right = edge.p.x > edge.q.x;
		if(node.triangle.isEdgeSide(edge.p,edge.q)) {
			return;
		}
		this.fillEdgeEvent(edge,node);
		this.edgeEventByPoints(edge.p,edge.q,node.triangle,edge.q);
	}
	,edgeEventByPoints: function(ep,eq,triangle,point) {
		if(triangle.isEdgeSide(ep,eq)) {
			return;
		}
		var p1 = triangle.pointCCW(point);
		var o1 = org_poly2tri_Orientation.orient2d(eq,p1,ep);
		if(o1 == 0) {
			throw haxe_Exception.thrown("Sweep.edgeEvent: Collinear not supported!");
		}
		var p2 = triangle.pointCW(point);
		var o2 = org_poly2tri_Orientation.orient2d(eq,p2,ep);
		if(o2 == 0) {
			throw haxe_Exception.thrown("Sweep.edgeEvent: Collinear not supported!");
		}
		if(o1 == o2) {
			triangle = o1 == 1 ? triangle.neighborCCW(point) : triangle.neighborCW(point);
			this.edgeEventByPoints(ep,eq,triangle,point);
		} else {
			this.flipEdgeEvent(ep,eq,triangle,point);
		}
	}
	,newFrontTriangle: function(point,node) {
		var triangle = new org_poly2tri_Triangle(point,node.point,node.next.point);
		triangle.markNeighborTriangle(node.triangle);
		this.context.addToMap(triangle);
		var new_node = new org_poly2tri_Node(point);
		new_node.next = node.next;
		new_node.prev = node;
		node.next.prev = new_node;
		node.next = new_node;
		if(!this.legalize(triangle)) {
			this.context.mapTriangleToNodes(triangle);
		}
		return new_node;
	}
	,fill: function(node) {
		var triangle = new org_poly2tri_Triangle(node.prev.point,node.point,node.next.point);
		triangle.markNeighborTriangle(node.prev.triangle);
		triangle.markNeighborTriangle(node.triangle);
		this.context.addToMap(triangle);
		node.prev.next = node.next;
		node.next.prev = node.prev;
		if(!this.legalize(triangle)) {
			this.context.mapTriangleToNodes(triangle);
		}
		this.context.removeNode(node);
	}
	,fillAdvancingFront: function(n) {
		var angle;
		var node = n.next;
		while(node.next != null) {
			angle = node.getHoleAngle();
			if(angle > org_poly2tri_Constants.PI_2 || angle < -org_poly2tri_Constants.PI_2) {
				break;
			}
			this.fill(node);
			node = node.next;
		}
		node = n.prev;
		while(node.prev != null) {
			angle = node.getHoleAngle();
			if(angle > org_poly2tri_Constants.PI_2 || angle < -org_poly2tri_Constants.PI_2) {
				break;
			}
			this.fill(node);
			node = node.prev;
		}
		if(n.next != null && n.next.next != null) {
			angle = n.getBasinAngle();
			if(angle < org_poly2tri_Constants.PI_3div4) {
				this.fillBasin(n);
			}
		}
	}
	,legalize: function(t) {
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			if(t.delaunay_edge[i]) {
				continue;
			}
			var ot = t.neighbors[i];
			if(ot != null) {
				var p = t.points[i];
				var op = ot.oppositePoint(t,p);
				var oi = ot.index(op);
				if(ot.constrained_edge[oi] || ot.delaunay_edge[oi]) {
					t.constrained_edge[i] = ot.constrained_edge[oi];
					continue;
				}
				if(org_poly2tri_Utils.insideIncircle(p,t.pointCCW(p),t.pointCW(p),op)) {
					t.delaunay_edge[i] = true;
					ot.delaunay_edge[oi] = true;
					org_poly2tri_Triangle.rotateTrianglePair(t,p,ot,op);
					var not_legalized = !this.legalize(t);
					if(not_legalized) {
						this.context.mapTriangleToNodes(t);
					}
					not_legalized = !this.legalize(ot);
					if(not_legalized) {
						this.context.mapTriangleToNodes(ot);
					}
					t.delaunay_edge[i] = false;
					ot.delaunay_edge[oi] = false;
					return true;
				}
			}
		}
		return false;
	}
	,fillBasin: function(node) {
		var tmp = org_poly2tri_Orientation.orient2d(node.point,node.next.point,node.next.next.point) == -1 ? node.next.next : node.next;
		this.context.basin.left_node = tmp;
		this.context.basin.bottom_node = this.context.basin.left_node;
		while(this.context.basin.bottom_node.next != null && this.context.basin.bottom_node.point.y >= this.context.basin.bottom_node.next.point.y) this.context.basin.bottom_node = this.context.basin.bottom_node.next;
		if(this.context.basin.bottom_node == this.context.basin.left_node) {
			return;
		}
		this.context.basin.right_node = this.context.basin.bottom_node;
		while(this.context.basin.right_node.next != null && this.context.basin.right_node.point.y < this.context.basin.right_node.next.point.y) this.context.basin.right_node = this.context.basin.right_node.next;
		if(this.context.basin.right_node == this.context.basin.bottom_node) {
			return;
		}
		this.context.basin.width = this.context.basin.right_node.point.x - this.context.basin.left_node.point.x;
		this.context.basin.left_highest = this.context.basin.left_node.point.y > this.context.basin.right_node.point.y;
		this.fillBasinReq(this.context.basin.bottom_node);
	}
	,fillBasinReq: function(node) {
		if(this.isShallow(node)) {
			return;
		}
		this.fill(node);
		if(node.prev == this.context.basin.left_node && node.next == this.context.basin.right_node) {
			return;
		} else if(node.prev == this.context.basin.left_node) {
			if(org_poly2tri_Orientation.orient2d(node.point,node.next.point,node.next.next.point) == 1) {
				return;
			}
			node = node.next;
		} else if(node.next == this.context.basin.right_node) {
			if(org_poly2tri_Orientation.orient2d(node.point,node.prev.point,node.prev.prev.point) == -1) {
				return;
			}
			node = node.prev;
		} else {
			node = node.prev.point.y < node.next.point.y ? node.prev : node.next;
		}
		this.fillBasinReq(node);
	}
	,isShallow: function(node) {
		var height = this.context.basin.left_highest ? this.context.basin.left_node.point.y - node.point.y : this.context.basin.right_node.point.y - node.point.y;
		return this.context.basin.width > height;
	}
	,fillEdgeEvent: function(edge,node) {
		if(this.context.edge_event.right) {
			this.fillRightAboveEdgeEvent(edge,node);
		} else {
			this.fillLeftAboveEdgeEvent(edge,node);
		}
	}
	,fillRightAboveEdgeEvent: function(edge,node) {
		while(node.next.point.x < edge.p.x) if(org_poly2tri_Orientation.orient2d(edge.q,node.next.point,edge.p) == -1) {
			this.fillRightBelowEdgeEvent(edge,node);
		} else {
			node = node.next;
		}
	}
	,fillRightBelowEdgeEvent: function(edge,node) {
		if(node.point.x >= edge.p.x) {
			return;
		}
		if(org_poly2tri_Orientation.orient2d(node.point,node.next.point,node.next.next.point) == -1) {
			this.fillRightConcaveEdgeEvent(edge,node);
		} else {
			this.fillRightConvexEdgeEvent(edge,node);
			this.fillRightBelowEdgeEvent(edge,node);
		}
	}
	,fillRightConcaveEdgeEvent: function(edge,node) {
		this.fill(node.next);
		if(node.next.point != edge.p) {
			if(org_poly2tri_Orientation.orient2d(edge.q,node.next.point,edge.p) == -1) {
				if(org_poly2tri_Orientation.orient2d(node.point,node.next.point,node.next.next.point) == -1) {
					this.fillRightConcaveEdgeEvent(edge,node);
				}
			}
		}
	}
	,fillRightConvexEdgeEvent: function(edge,node) {
		if(org_poly2tri_Orientation.orient2d(node.next.point,node.next.next.point,node.next.next.next.point) == -1) {
			this.fillRightConcaveEdgeEvent(edge,node.next);
		} else if(org_poly2tri_Orientation.orient2d(edge.q,node.next.next.point,edge.p) == -1) {
			this.fillRightConvexEdgeEvent(edge,node.next);
		}
	}
	,fillLeftAboveEdgeEvent: function(edge,node) {
		while(node.prev.point.x > edge.p.x) if(org_poly2tri_Orientation.orient2d(edge.q,node.prev.point,edge.p) == 1) {
			this.fillLeftBelowEdgeEvent(edge,node);
		} else {
			node = node.prev;
		}
	}
	,fillLeftBelowEdgeEvent: function(edge,node) {
		if(node.point.x > edge.p.x) {
			if(org_poly2tri_Orientation.orient2d(node.point,node.prev.point,node.prev.prev.point) == 1) {
				this.fillLeftConcaveEdgeEvent(edge,node);
			} else {
				this.fillLeftConvexEdgeEvent(edge,node);
				this.fillLeftBelowEdgeEvent(edge,node);
			}
		}
	}
	,fillLeftConvexEdgeEvent: function(edge,node) {
		if(org_poly2tri_Orientation.orient2d(node.prev.point,node.prev.prev.point,node.prev.prev.prev.point) == 1) {
			this.fillLeftConcaveEdgeEvent(edge,node.prev);
		} else if(org_poly2tri_Orientation.orient2d(edge.q,node.prev.prev.point,edge.p) == 1) {
			this.fillLeftConvexEdgeEvent(edge,node.prev);
		}
	}
	,fillLeftConcaveEdgeEvent: function(edge,node) {
		this.fill(node.prev);
		if(node.prev.point != edge.p) {
			if(org_poly2tri_Orientation.orient2d(edge.q,node.prev.point,edge.p) == 1) {
				if(org_poly2tri_Orientation.orient2d(node.point,node.prev.point,node.prev.prev.point) == 1) {
					this.fillLeftConcaveEdgeEvent(edge,node);
				}
			}
		}
	}
	,flipEdgeEvent: function(ep,eq,t,p) {
		var ot = t.neighborAcross(p);
		if(ot == null) {
			throw haxe_Exception.thrown("Sweep::[BUG:FIXME] FLIP failed due to missing triangle!");
		}
		var op = ot.oppositePoint(t,p);
		if(org_poly2tri_Utils.inScanArea(p,t.pointCCW(p),t.pointCW(p),op)) {
			org_poly2tri_Triangle.rotateTrianglePair(t,p,ot,op);
			this.context.mapTriangleToNodes(t);
			this.context.mapTriangleToNodes(ot);
			if(p == eq && op == ep) {
				if(eq == this.context.edge_event.constrained_edge.q && ep == this.context.edge_event.constrained_edge.p) {
					t.markConstrainedEdgeByPoints(ep,eq);
					ot.markConstrainedEdgeByPoints(ep,eq);
					this.legalize(t);
					this.legalize(ot);
				}
			} else {
				var o = org_poly2tri_Orientation.orient2d(eq,op,ep);
				t = this.nextFlipTriangle(o,t,ot,p,op);
				this.flipEdgeEvent(ep,eq,t,p);
			}
		} else {
			var newP = org_poly2tri_Sweep.nextFlipPoint(ep,eq,ot,op);
			this.flipScanEdgeEvent(ep,eq,t,ot,newP);
			this.edgeEventByPoints(ep,eq,t,p);
		}
	}
	,nextFlipTriangle: function(o,t,ot,p,op) {
		var edge_index;
		if(o == -1) {
			edge_index = ot.edgeIndex(p,op);
			ot.delaunay_edge[edge_index] = true;
			this.legalize(ot);
			ot.clearDelunayEdges();
			return t;
		}
		edge_index = t.edgeIndex(p,op);
		t.delaunay_edge[edge_index] = true;
		this.legalize(t);
		t.clearDelunayEdges();
		return ot;
	}
	,flipScanEdgeEvent: function(ep,eq,flip_triangle,t,p) {
		var ot = t.neighborAcross(p);
		if(ot == null) {
			throw haxe_Exception.thrown("Sweep::[BUG:FIXME] FLIP failed due to missing triangle");
		}
		var op = ot.oppositePoint(t,p);
		if(org_poly2tri_Utils.inScanArea(eq,flip_triangle.pointCCW(eq),flip_triangle.pointCW(eq),op)) {
			this.flipEdgeEvent(eq,op,ot,op);
		} else {
			var newP = org_poly2tri_Sweep.nextFlipPoint(ep,eq,ot,op);
			this.flipScanEdgeEvent(ep,eq,flip_triangle,ot,newP);
		}
	}
	,__class__: org_poly2tri_Sweep
};
var org_poly2tri_SweepContext = function() {
	this.triangles = [];
	this.points = [];
	this.edge_list = [];
	this.map = new haxe_ds_StringMap();
	this.basin = new org_poly2tri_Basin();
	this.edge_event = new org_poly2tri_EdgeEvent();
};
$hxClasses["org.poly2tri.SweepContext"] = org_poly2tri_SweepContext;
org_poly2tri_SweepContext.__name__ = "org.poly2tri.SweepContext";
org_poly2tri_SweepContext.prototype = {
	addPoints: function(points) {
		var _g = 0;
		while(_g < points.length) {
			var point = points[_g];
			++_g;
			this.points.push(point);
		}
	}
	,addPolyline: function(polyline) {
		this.initEdges(polyline);
		this.addPoints(polyline);
	}
	,initEdges: function(polyline) {
		var _g = 0;
		var _g1 = polyline.length;
		while(_g < _g1) {
			var n = _g++;
			var nx = polyline[(n + 1) % polyline.length];
			this.edge_list.push(new org_poly2tri_Edge(polyline[n],nx));
		}
	}
	,addToMap: function(triangle) {
		var this1 = this.map;
		var key = triangle.toString();
		this1.h[key] = triangle;
	}
	,initTriangulation: function() {
		var xmin = this.points[0].x;
		var xmax = this.points[0].x;
		var ymin = this.points[0].y;
		var ymax = this.points[0].y;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.x > xmax) {
				xmax = p.x;
			}
			if(p.x < xmin) {
				xmin = p.x;
			}
			if(p.y > ymax) {
				ymax = p.y;
			}
			if(p.y < ymin) {
				ymin = p.y;
			}
		}
		var dx = org_poly2tri_Constants.kAlpha * (xmax - xmin);
		var dy = org_poly2tri_Constants.kAlpha * (ymax - ymin);
		this.head = new org_poly2tri_Point(xmax + dx,ymin - dy);
		this.tail = new org_poly2tri_Point(xmin - dy,ymin - dy);
		org_poly2tri_Point.sortPoints(this.points);
	}
	,locateNode: function(point) {
		return this.front.locateNode(point.x);
	}
	,createAdvancingFront: function() {
		var triangle = new org_poly2tri_Triangle(this.points[0],this.tail,this.head);
		this.addToMap(triangle);
		var head = new org_poly2tri_Node(triangle.points[1],triangle);
		var middle = new org_poly2tri_Node(triangle.points[0],triangle);
		var tail = new org_poly2tri_Node(triangle.points[2]);
		this.front = new org_poly2tri_AdvancingFront(head,tail);
		head.next = middle;
		middle.next = tail;
		middle.prev = head;
		tail.prev = middle;
	}
	,removeNode: function(node) {
	}
	,mapTriangleToNodes: function(triangle) {
		if(triangle.neighbors[0] == null) {
			var neighbor = this.front.locatePoint(triangle.pointCW(triangle.points[0]));
			if(neighbor != null) {
				neighbor.triangle = triangle;
			}
		}
		if(triangle.neighbors[1] == null) {
			var neighbor = this.front.locatePoint(triangle.pointCW(triangle.points[1]));
			if(neighbor != null) {
				neighbor.triangle = triangle;
			}
		}
		if(triangle.neighbors[2] == null) {
			var neighbor = this.front.locatePoint(triangle.pointCW(triangle.points[2]));
			if(neighbor != null) {
				neighbor.triangle = triangle;
			}
		}
	}
	,meshClean: function(t) {
		var tmp = [t];
		while(true) {
			var t = tmp.pop();
			if(t == null) {
				break;
			}
			if(t.interior) {
				continue;
			}
			t.interior = true;
			this.triangles.push(t);
			if(!t.constrained_edge[0]) {
				tmp.push(t.neighbors[0]);
			}
			if(!t.constrained_edge[1]) {
				tmp.push(t.neighbors[1]);
			}
			if(!t.constrained_edge[2]) {
				tmp.push(t.neighbors[2]);
			}
		}
	}
	,__class__: org_poly2tri_SweepContext
};
var org_poly2tri_Triangle = function(p1,p2,p3,fixOrientation,checkOrientation) {
	if(checkOrientation == null) {
		checkOrientation = true;
	}
	if(fixOrientation == null) {
		fixOrientation = false;
	}
	if(fixOrientation) {
		if(org_poly2tri_Orientation.orient2d(p1,p2,p3) == 1) {
			var pt = p3;
			p3 = p2;
			p2 = pt;
		}
	}
	if(checkOrientation && org_poly2tri_Orientation.orient2d(p3,p2,p1) != 1) {
		throw haxe_Exception.thrown("Triangle::Triangle must defined with Orientation.CW");
	}
	this.points = [p1,p2,p3];
	this.neighbors = [null,null,null];
	this.constrained_edge = [false,false,false];
	this.delaunay_edge = [false,false,false];
};
$hxClasses["org.poly2tri.Triangle"] = org_poly2tri_Triangle;
org_poly2tri_Triangle.__name__ = "org.poly2tri.Triangle";
org_poly2tri_Triangle.rotateTrianglePair = function(t,p,ot,op) {
	var n1 = t.neighborCCW(p);
	var n2 = t.neighborCW(p);
	var n3 = ot.neighborCCW(op);
	var n4 = ot.neighborCW(op);
	var ce1 = t.getConstrainedEdgeCCW(p);
	var ce2 = t.getConstrainedEdgeCW(p);
	var ce3 = ot.getConstrainedEdgeCCW(op);
	var ce4 = ot.getConstrainedEdgeCW(op);
	var de1 = t.getDelaunayEdgeCCW(p);
	var de2 = t.getDelaunayEdgeCW(p);
	var de3 = ot.getDelaunayEdgeCCW(op);
	var de4 = ot.getDelaunayEdgeCW(op);
	t.legalize(p,op);
	ot.legalize(op,p);
	ot.setDelaunayEdgeCCW(p,de1);
	t.setDelaunayEdgeCW(p,de2);
	t.setDelaunayEdgeCCW(op,de3);
	ot.setDelaunayEdgeCW(op,de4);
	ot.setConstrainedEdgeCCW(p,ce1);
	t.setConstrainedEdgeCW(p,ce2);
	t.setConstrainedEdgeCCW(op,ce3);
	ot.setConstrainedEdgeCW(op,ce4);
	t.clearNeigbors();
	ot.clearNeigbors();
	if(n1 != null) {
		ot.markNeighborTriangle(n1);
	}
	if(n2 != null) {
		t.markNeighborTriangle(n2);
	}
	if(n3 != null) {
		t.markNeighborTriangle(n3);
	}
	if(n4 != null) {
		ot.markNeighborTriangle(n4);
	}
	t.markNeighborTriangle(ot);
};
org_poly2tri_Triangle.prototype = {
	containsPoint: function(point) {
		if(!(point.equals(this.points[0]) || point.equals(this.points[1]))) {
			return point.equals(this.points[2]);
		} else {
			return true;
		}
	}
	,containsEdgePoints: function(p1,p2) {
		if(this.containsPoint(p1)) {
			return this.containsPoint(p2);
		} else {
			return false;
		}
	}
	,markNeighbor: function(t,p1,p2) {
		if(p1.equals(this.points[2]) && p2.equals(this.points[1]) || p1.equals(this.points[1]) && p2.equals(this.points[2])) {
			this.neighbors[0] = t;
			return;
		}
		if(p1.equals(this.points[0]) && p2.equals(this.points[2]) || p1.equals(this.points[2]) && p2.equals(this.points[0])) {
			this.neighbors[1] = t;
			return;
		}
		if(p1.equals(this.points[0]) && p2.equals(this.points[1]) || p1.equals(this.points[1]) && p2.equals(this.points[0])) {
			this.neighbors[2] = t;
			return;
		}
		throw haxe_Exception.thrown("Invalid markNeighbor call (1)!");
	}
	,markNeighborTriangle: function(that) {
		if(that.containsEdgePoints(this.points[1],this.points[2])) {
			this.neighbors[0] = that;
			that.markNeighbor(this,this.points[1],this.points[2]);
			return;
		}
		if(that.containsEdgePoints(this.points[0],this.points[2])) {
			this.neighbors[1] = that;
			that.markNeighbor(this,this.points[0],this.points[2]);
			return;
		}
		if(that.containsEdgePoints(this.points[0],this.points[1])) {
			this.neighbors[2] = that;
			that.markNeighbor(this,this.points[0],this.points[1]);
			return;
		}
	}
	,getPointIndexOffset: function(p,offset) {
		if(offset == null) {
			offset = 0;
		}
		var no = offset;
		while(no < 0) no += 3;
		while(no > 2) no -= 3;
		if(p.equals(this.points[0])) {
			return no;
		}
		++no;
		while(no < 0) no += 3;
		while(no > 2) no -= 3;
		if(p.equals(this.points[1])) {
			return no;
		}
		++no;
		while(no < 0) no += 3;
		while(no > 2) no -= 3;
		if(p.equals(this.points[2])) {
			return no;
		}
		++no;
		throw haxe_Exception.thrown("Triangle::Point not in triangle");
	}
	,pointCW: function(p) {
		return this.points[this.getPointIndexOffset(p,-1)];
	}
	,pointCCW: function(p) {
		return this.points[this.getPointIndexOffset(p,1)];
	}
	,neighborCW: function(p) {
		return this.neighbors[this.getPointIndexOffset(p,1)];
	}
	,neighborCCW: function(p) {
		return this.neighbors[this.getPointIndexOffset(p,-1)];
	}
	,getConstrainedEdgeCW: function(p) {
		return this.constrained_edge[this.getPointIndexOffset(p,1)];
	}
	,setConstrainedEdgeCW: function(p,ce) {
		return this.constrained_edge[this.getPointIndexOffset(p,1)] = ce;
	}
	,getConstrainedEdgeCCW: function(p) {
		return this.constrained_edge[this.getPointIndexOffset(p,-1)];
	}
	,setConstrainedEdgeCCW: function(p,ce) {
		return this.constrained_edge[this.getPointIndexOffset(p,-1)] = ce;
	}
	,getDelaunayEdgeCW: function(p) {
		return this.delaunay_edge[this.getPointIndexOffset(p,1)];
	}
	,setDelaunayEdgeCW: function(p,e) {
		return this.delaunay_edge[this.getPointIndexOffset(p,1)] = e;
	}
	,getDelaunayEdgeCCW: function(p) {
		return this.delaunay_edge[this.getPointIndexOffset(p,-1)];
	}
	,setDelaunayEdgeCCW: function(p,e) {
		return this.delaunay_edge[this.getPointIndexOffset(p,-1)] = e;
	}
	,neighborAcross: function(p) {
		return this.neighbors[this.getPointIndexOffset(p,0)];
	}
	,oppositePoint: function(t,p) {
		return this.pointCW(t.pointCW(p));
	}
	,legalize: function(opoint,npoint) {
		if(npoint == null) {
			this.legalize(this.points[0],opoint);
			return;
		}
		if(opoint.equals(this.points[0])) {
			this.points[1] = this.points[0];
			this.points[0] = this.points[2];
			this.points[2] = npoint;
		} else if(opoint.equals(this.points[1])) {
			this.points[2] = this.points[1];
			this.points[1] = this.points[0];
			this.points[0] = npoint;
		} else if(opoint.equals(this.points[2])) {
			this.points[0] = this.points[2];
			this.points[2] = this.points[1];
			this.points[1] = npoint;
		} else {
			throw haxe_Exception.thrown("Invalid js.poly2tri.Triangle.Legalize call!");
		}
	}
	,index: function(p) {
		try {
			return this.getPointIndexOffset(p,0);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				var msg = _g1;
				haxe_Log.trace(msg,{ fileName : "org/poly2tri/Triangle.hx", lineNumber : 235, className : "org.poly2tri.Triangle", methodName : "index"});
			} else {
				throw _g;
			}
		}
		return -1;
	}
	,edgeIndex: function(p1,p2) {
		if(p1.equals(this.points[0])) {
			if(p2.equals(this.points[1])) {
				return 2;
			}
			if(p2.equals(this.points[2])) {
				return 1;
			}
		} else if(p1.equals(this.points[1])) {
			if(p2.equals(this.points[2])) {
				return 0;
			}
			if(p2.equals(this.points[0])) {
				return 2;
			}
		} else if(p1.equals(this.points[2])) {
			if(p2.equals(this.points[0])) {
				return 1;
			}
			if(p2.equals(this.points[1])) {
				return 0;
			}
		}
		return -1;
	}
	,markConstrainedEdgeByIndex: function(index) {
		this.constrained_edge[index] = true;
	}
	,markConstrainedEdgeByEdge: function(edge) {
		this.markConstrainedEdgeByPoints(edge.p,edge.q);
	}
	,markConstrainedEdgeByPoints: function(p,q) {
		if(q.equals(this.points[0]) && p.equals(this.points[1]) || q.equals(this.points[1]) && p.equals(this.points[0])) {
			this.constrained_edge[2] = true;
			return;
		}
		if(q.equals(this.points[0]) && p.equals(this.points[2]) || q.equals(this.points[2]) && p.equals(this.points[0])) {
			this.constrained_edge[1] = true;
			return;
		}
		if(q.equals(this.points[1]) && p.equals(this.points[2]) || q.equals(this.points[2]) && p.equals(this.points[1])) {
			this.constrained_edge[0] = true;
			return;
		}
	}
	,isEdgeSide: function(ep,eq) {
		var index = this.edgeIndex(ep,eq);
		if(index == -1) {
			return false;
		}
		this.markConstrainedEdgeByIndex(index);
		var that = this.neighbors[index];
		if(that != null) {
			that.markConstrainedEdgeByPoints(ep,eq);
		}
		return true;
	}
	,clearNeigbors: function() {
		this.neighbors[0] = null;
		this.neighbors[1] = null;
		this.neighbors[2] = null;
	}
	,clearDelunayEdges: function() {
		this.delaunay_edge[0] = false;
		this.delaunay_edge[1] = false;
		this.delaunay_edge[2] = false;
	}
	,toString: function() {
		return "Triangle(" + Std.string(this.points[0]) + ", " + Std.string(this.points[1]) + ", " + Std.string(this.points[2]) + ")";
	}
	,__class__: org_poly2tri_Triangle
};
var org_poly2tri_Utils = function() { };
$hxClasses["org.poly2tri.Utils"] = org_poly2tri_Utils;
org_poly2tri_Utils.__name__ = "org.poly2tri.Utils";
org_poly2tri_Utils.insideIncircle = function(pa,pb,pc,pd) {
	var adx = pa.x - pd.x;
	var ady = pa.y - pd.y;
	var bdx = pb.x - pd.x;
	var bdy = pb.y - pd.y;
	var adxbdy = adx * bdy;
	var bdxady = bdx * ady;
	var oabd = adxbdy - bdxady;
	if(oabd <= 0) {
		return false;
	}
	var cdx = pc.x - pd.x;
	var cdy = pc.y - pd.y;
	var cdxady = cdx * ady;
	var adxcdy = adx * cdy;
	var ocad = cdxady - adxcdy;
	if(ocad <= 0) {
		return false;
	}
	var bdxcdy = bdx * cdy;
	var cdxbdy = cdx * bdy;
	var alift = adx * adx + ady * ady;
	var blift = bdx * bdx + bdy * bdy;
	var clift = cdx * cdx + cdy * cdy;
	var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;
	return det > 0;
};
org_poly2tri_Utils.inScanArea = function(pa,pb,pc,pd) {
	var pdx = pd.x;
	var pdy = pd.y;
	var adx = pa.x - pdx;
	var ady = pa.y - pdy;
	var bdx = pb.x - pdx;
	var bdy = pb.y - pdy;
	var adxbdy = adx * bdy;
	var bdxady = bdx * ady;
	var oabd = adxbdy - bdxady;
	if(oabd <= org_poly2tri_Constants.EPSILON) {
		return false;
	}
	var cdx = pc.x - pdx;
	var cdy = pc.y - pdy;
	var cdxady = cdx * ady;
	var adxcdy = adx * cdy;
	var ocad = cdxady - adxcdy;
	if(ocad <= org_poly2tri_Constants.EPSILON) {
		return false;
	}
	return true;
};
var org_poly2tri_VisiblePolygon = function() {
	this.reset();
};
$hxClasses["org.poly2tri.VisiblePolygon"] = org_poly2tri_VisiblePolygon;
org_poly2tri_VisiblePolygon.__name__ = "org.poly2tri.VisiblePolygon";
org_poly2tri_VisiblePolygon.prototype = {
	addPolyline: function(polyline) {
		this.sweepContext.addPolyline(polyline);
	}
	,addPolylineFromFloats: function(pos) {
		var a = [];
		var _g = 0;
		var _g1 = pos.length;
		while(_g < _g1) {
			var i = _g++;
			if(i % 2 == 1) {
				continue;
			}
			a.push(new org_poly2tri_Point(pos[i],pos[i + 1]));
		}
		this.addPolyline(a);
	}
	,reset: function() {
		this.sweepContext = new org_poly2tri_SweepContext();
		this.sweep = new org_poly2tri_Sweep(this.sweepContext);
		this.triangulated = false;
	}
	,performTriangulationOnce: function() {
		if(this.triangulated) {
			return;
		}
		this.triangulated = true;
		this.sweep.triangulate();
	}
	,getVerticesAndTriangles: function() {
		if(!this.triangulated) {
			return null;
		}
		var vertices = [];
		var ids = [];
		var _g = 0;
		var _g1 = this.sweepContext.points.length;
		while(_g < _g1) {
			var i = _g++;
			var p = this.sweepContext.points[i];
			vertices.push(p.x);
			vertices.push(p.y);
			vertices.push(0);
			ids[p.id] = i;
		}
		var tris = [];
		var _g = 0;
		var _g1 = this.sweepContext.triangles;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			tris.push(ids[t.points[0].id]);
			tris.push(ids[t.points[1].id]);
			tris.push(ids[t.points[2].id]);
		}
		return { vertices : vertices, triangles : tris};
	}
	,getNumTriangles: function() {
		return this.sweepContext.triangles.length;
	}
	,__class__: org_poly2tri_VisiblePolygon
};
var pallette_ColorWheel24 = function() { };
$hxClasses["pallette.ColorWheel24"] = pallette_ColorWheel24;
pallette_ColorWheel24.__name__ = "pallette.ColorWheel24";
pallette_ColorWheel24.getWheel = function() {
	return [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
};
pallette_ColorWheel24.random = function() {
	var wheel = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var rnd = Math.round(Math.random() * 23);
	return wheel[rnd];
};
pallette_ColorWheel24.getName = function(w) {
	switch(w) {
	case -13354819:
		return "earlySpringNight";
	case -12953665:
		return "freeSpeechBlue";
	case -12617788:
		return "celestialPlum";
	case -12217654:
		return "blueTourmaline";
	case -11851843:
		return "blueDepression";
	case -11686193:
		return "maximumBlue";
	case -11352449:
		return "parisGreen";
	case -11288539:
		return "fieldGreen";
	case -9230154:
		return "nebulaFuschsia";
	case -8796379:
		return "appleGreen";
	case -5778134:
		return "peraRocha";
	case -4904763:
		return "fushsiaFlair";
	case -3986796:
		return "royalFuchsia";
	case -2280591:
		return "fuchsiaPurple";
	case -2100183:
		return "spoiledEgg";
	case -1098686:
		return "redRadish";
	case -893376:
		return "orangeSoda";
	case -884166:
		return "gokuOrange";
	case -742865:
		return "carona";
	case -617161:
		return "highlighterOrange";
	case -605897:
		return "solarPower";
	case -338891:
		return "flirtaious";
	case -134353:
		return "yellowBellied";
	case -211:
		return "daffodil";
	}
};
pallette_ColorWheel24.next = function(w) {
	var wheel = [-1098686,-893376,-884166,-617161,-742865,-605897,-338891,-134353,-211,-2100183,-5778134,-8796379,-11288539,-11352449,-11686193,-12217654,-12617788,-12953665,-13354819,-11851843,-9230154,-4904763,-3986796,-2280591];
	var i = wheel.indexOf(w);
	var v = i < 24 ? i + 1 : 0;
	return wheel[v];
};
var pallette_Gold = function() { };
$hxClasses["pallette.Gold"] = pallette_Gold;
pallette_Gold.__name__ = "pallette.Gold";
pallette_Gold.gradient0 = function() {
	return [-5339611,-528502,-2970553,-1193625];
};
pallette_Gold.gradient1 = function() {
	return [-2114199,-7180492];
};
pallette_Gold.gradient2 = function() {
	return [-396651,-2053570,-2053570,-4683196];
};
var trilateral2_Algebra = function() { };
$hxClasses["trilateral2.Algebra"] = trilateral2_Algebra;
trilateral2_Algebra.__name__ = "trilateral2.Algebra";
trilateral2_Algebra.adjustWinding = function(A_,B_,C_) {
	var this1 = new geom_structure_Mat1x2(B_.x - A_.x,B_.y - A_.y);
	var ba = this1;
	var this1 = new geom_structure_Mat1x2(C_.x - A_.x,C_.y - A_.y);
	var ca = this1;
	var val = !(ba.x * ca.y - ba.y * ca.x < 0);
	return val;
};
trilateral2_Algebra.sign = function(n) {
	return Math.abs(n) / n | 0;
};
trilateral2_Algebra.quadCurve = function(p,ax,ay,bx,by,cx,cy) {
	var x = ax - bx;
	var y = ay - by;
	var x1 = bx - cx;
	var y1 = by - cy;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1);
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.quadStep);
	var l = p.length;
	p[l++] = ax;
	p[l++] = ay;
	var t = step;
	while(t < 1.) {
		var u = 1 - t;
		p[l++] = Math.pow(u,2) * ax + 2 * u * t * bx + Math.pow(t,2) * cx;
		var u1 = 1 - t;
		p[l++] = Math.pow(u1,2) * ay + 2 * u1 * t * by + Math.pow(t,2) * cy;
		t += step;
	}
	p[l++] = cx;
	p[l++] = cy;
	return p;
};
trilateral2_Algebra.cubicCurve = function(p,ax,ay,bx,by,cx,cy,dx,dy) {
	var x = ax - bx;
	var y = ay - by;
	var x1 = bx - cx;
	var y1 = by - cy;
	var x2 = cx - dx;
	var y2 = cy - dy;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2);
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.cubicStep);
	var l = p.length;
	p[l++] = ax;
	p[l++] = ay;
	var t = step;
	while(t < 1.) {
		var u = 1 - t;
		p[l++] = Math.pow(u,3) * ax + 3 * Math.pow(u,2) * t * bx + 3 * u * Math.pow(t,2) * cx + Math.pow(t,3) * dx;
		var u1 = 1 - t;
		p[l++] = Math.pow(u1,3) * ay + 3 * Math.pow(u1,2) * t * by + 3 * u1 * Math.pow(t,2) * cy + Math.pow(t,3) * dy;
		t += step;
	}
	p[l++] = dx;
	p[l++] = dy;
	return p;
};
trilateral2_Algebra.calculateQuadStep = function(ax,ay,bx,by,cx,cy) {
	var x = ax - bx;
	var y = ay - by;
	var x1 = bx - cx;
	var y1 = by - cy;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1);
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	return Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.quadStep);
};
trilateral2_Algebra.calculateCubicStep = function(ax,ay,bx,by,cx,cy,dx,dy) {
	var x = ax - bx;
	var y = ay - by;
	var x1 = bx - cx;
	var y1 = by - cy;
	var x2 = cx - dx;
	var y2 = cy - dy;
	var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1) + Math.sqrt(x2 * x2 + y2 * y2);
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	return Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.cubicStep);
};
trilateral2_Algebra.lineAB = function(A,B,width) {
	var dx = A.x - B.x;
	var dy = A.y - B.y;
	var P = new geom_structure_Mat1x2(A.x - width / 2,A.y);
	var omega = Math.atan2(dy,dx);
	var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
	var pivotX = A.x + width / 2;
	var pivotY = A.y;
	var px = P.x;
	var py = P.y;
	var dx = dim.x;
	var dy = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx,py);
	var C_ = new geom_structure_Mat1x2(px + dx,py + dy);
	var D_ = new geom_structure_Mat1x2(px,py + dy);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px = A_.x - pivotX;
		var py = A_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
		var px = B_.x - pivotX;
		var py = B_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		B_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
		var px = C_.x - pivotX;
		var py = C_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		C_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
		var px = D_.x - pivotX;
		var py = D_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		D_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
	}
	return new geom_obj_Quad2D(A_,B_,C_,D_);
};
trilateral2_Algebra.lineABCoord = function(ax,ay,bx,by,width) {
	var dx = ax - bx;
	var dy = ay - by;
	var P = new geom_structure_Mat1x2(ax - width / 2,ay);
	var omega = Math.atan2(dy,dx);
	var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
	var pivotX = ax + width / 2;
	var px = P.x;
	var py = P.y;
	var dx = dim.x;
	var dy = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx,py);
	var C_ = new geom_structure_Mat1x2(px + dx,py + dy);
	var D_ = new geom_structure_Mat1x2(px,py + dy);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px = A_.x - pivotX;
		var py = A_.y - ay;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py + ay);
		var px = B_.x - pivotX;
		var py = B_.y - ay;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		B_ = new geom_structure_Mat1x2(px2 + pivotX,py + ay);
		var px = C_.x - pivotX;
		var py = C_.y - ay;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		C_ = new geom_structure_Mat1x2(px2 + pivotX,py + ay);
		var px = D_.x - pivotX;
		var py = D_.y - ay;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		D_ = new geom_structure_Mat1x2(px2 + pivotX,py + ay);
	}
	return new geom_obj_Quad2D(A_,B_,C_,D_);
};
trilateral2_Algebra.rotateVectorLine = function(pos,dim,omega,pivotX,pivotY) {
	var px = pos.x;
	var py = pos.y;
	var dx = dim.x;
	var dy = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx,py);
	var C_ = new geom_structure_Mat1x2(px + dx,py + dy);
	var D_ = new geom_structure_Mat1x2(px,py + dy);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px = A_.x - pivotX;
		var py = A_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
		var px = B_.x - pivotX;
		var py = B_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		B_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
		var px = C_.x - pivotX;
		var py = C_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		C_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
		var px = D_.x - pivotX;
		var py = D_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		D_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
	}
	return new geom_obj_Quad2D(A_,B_,C_,D_);
};
trilateral2_Algebra.pivotCheap = function(p,sin,cos,pivotX,pivotY) {
	var px = p.x - pivotX;
	var py = p.y - pivotY;
	var px2 = px * cos - py * sin;
	py = py * cos + px * sin;
	return new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
};
trilateral2_Algebra.pivot = function(p,omega,pivotX,pivotY) {
	var px = p.x - pivotX;
	var py = p.y - pivotY;
	var px2 = px * Math.cos(omega) - py * Math.sin(omega);
	py = py * Math.cos(omega) + px * Math.sin(omega);
	return new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
};
trilateral2_Algebra.thetaCheap = function(dx,dy) {
	return Math.atan2(dy,dx);
};
trilateral2_Algebra.distCheap = function(dx,dy) {
	return dx * dx + dy * dy;
};
trilateral2_Algebra.distance = function(px,py,qx,qy) {
	var x = px - qx;
	var y = py - qy;
	return Math.sqrt(x * x + y * y);
};
var trilateral2_ArrayTriple = {};
trilateral2_ArrayTriple._new = function(arr) {
	var this1 = arr;
	return this1;
};
trilateral2_ArrayTriple.get_length = function(this1) {
	return this1.length / 3 | 0;
};
trilateral2_ArrayTriple.access = function(this1,key) {
	var i = key * 3 | 0;
	return { a : this1[i], b : this1[i + 1], c : this1[i + 2]};
};
trilateral2_ArrayTriple.reverse = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = trilateral2_ArrayTriple._new(this1);
	while(_g < (_g1.length / 3 | 0)) {
		var i = _g * 3 | 0;
		var i_a = _g1[i];
		var i_b = _g1[i + 1];
		var i_c = _g1[i + 2];
		++_g;
		arr.unshift(i_c);
		arr.unshift(i_b);
		arr.unshift(i_a);
	}
	this1 = arr;
	return arr;
};
var trilateral2_ColorAbstract = {};
trilateral2_ColorAbstract._new = function(colorType) {
	var this1 = colorType;
	return this1;
};
trilateral2_ColorAbstract.get_pos = function(this1) {
	return this1.get_pos();
};
trilateral2_ColorAbstract.set_pos = function(this1,v) {
	this1.set_pos(v);
	return v;
};
trilateral2_ColorAbstract.set_size = function(this1,v) {
	this1.set_size(v);
	return v;
};
trilateral2_ColorAbstract.get_size = function(this1) {
	return this1.get_size();
};
var trilateral2_Contour = function(pen_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.counter = 0;
	this.count = 0;
	this.pointsAnti = [];
	this.pointsClock = [];
	this.debugCol12 = -893376;
	this.debugCol11 = -3986796;
	this.debugCol10 = -9230154;
	this.debugCol9 = -13354819;
	this.debugCol8 = -12617788;
	this.debugCol7 = -11686193;
	this.debugCol6 = -11288539;
	this.debugCol5 = -5778134;
	this.debugCol4 = -211;
	this.debugCol3 = -338891;
	this.debugCol2 = -742865;
	this.debugCol1 = -884166;
	this.debugCol0 = -1098686;
	this.pen = pen_;
	this.endLine = endLine_;
};
$hxClasses["trilateral2.Contour"] = trilateral2_Contour;
trilateral2_Contour.__name__ = "trilateral2.Contour";
trilateral2_Contour.thetaCompute = function(px,py,qx,qy) {
	return Math.atan2(py - qy,px - qx);
};
trilateral2_Contour.dist = function(px,py,qx,qy) {
	var x = px - qx;
	var y = py - qy;
	return x * x + y * y;
};
trilateral2_Contour.prototype = {
	reset: function() {
		this.angleA = 0;
		this.count = 0;
		this.kax = 0;
		this.kay = 0;
		this.kbx = 0;
		this.kby = 0;
		this.kcx = 0;
		this.kcy = 0;
		this.ncx = 0;
		this.ncy = 0;
		this.ax = 0;
		this.ay = 0;
		this.bx = 0;
		this.by = 0;
		this.cx = 0;
		this.cy = 0;
		this.dx = null;
		this.dy = null;
		this.ex = null;
		this.ey = null;
		this.pointsClock.length = 0;
		this.pointsAnti.length = 0;
	}
	,computeDE: function() {
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
	}
	,anglesCompute: function() {
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
	}
	,thetaComputeAdj: function(qx,qy) {
		return -Math.atan2(this.ay - qy,this.ax - qx) - Math.PI / 2;
	}
	,triangleJoin: function(ax_,ay_,bx_,by_,width_,curveEnds,overlap) {
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = this.dx != null ? this.angle1 : null;
		this.halfA = Math.PI / 2;
		this.ax = bx_;
		this.ay = by_;
		this.bx = ax_;
		this.by = ay_;
		this.beta = Math.PI / 2 - this.halfA;
		this.r = width_ / 2 * Math.cos(this.beta);
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
		this.ax = ax_;
		this.ay = ay_;
		this.bx = bx_;
		this.by = by_;
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
		var x = this.dxOld - bx_;
		var y = this.dyOld - by_;
		var x1 = this.exOld - bx_;
		var y1 = this.eyOld - by_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(this.ay - this.dyOld,this.ax - this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(this.ay - this.eyPrev,this.ax - this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(this.ay - this.eyOld,this.ax - this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(this.ay - this.dyPrev,this.ax - this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		if(!overlap && this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f = theta0;
			} else {
				var a = (theta0 + Math.PI) % (2 * Math.PI);
				f = a >= 0 ? a - Math.PI : a + Math.PI;
			}
			var this1 = f;
			var start = this1;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			this.jx = this.ax + h * Math.sin(delta);
			this.jy = this.ay + h * Math.cos(delta);
		}
		if(this.count == 0 && (this.endLine == 1 || this.endLine == 3)) {
			var ax = this.ax;
			var ay = this.ay;
			var radius = width_ / 2;
			var beta = -this.angle1 - Math.PI / 2;
			var gamma = -this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif1;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 > 0 ? dif2 : 2 * Math.PI + dif2;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = smallest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = largest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif1 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif1) / step);
			var step = dif1 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this = this.pen;
			var color = -1;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.colorType.colorTriangles(color,len);
			var pA = this.pointsAnti.length;
			var len = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				this.pointsAnti[pA++] = temp[len - 2 * i + 1];
				this.pointsAnti[pA++] = temp[len - 2 * i];
			}
			var pC = this.pointsClock.length;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				this.pointsClock[pC++] = temp[i * 2 + len + 1];
				this.pointsClock[pC++] = temp[i * 2 + len];
			}
		}
		if(overlap) {
			var _this = this.pen;
			var color = -1;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
			var _this = this.pen;
			var color = -1;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		} else {
			if(this.count != 0) {
				this.addQuads(clockWise,width_);
			}
			this.quadIndex = this.pen.drawType.get_pos();
			if(this.count == 0) {
				this.penultimateAX = this.dxPrev;
				this.penultimateAY = this.dyPrev;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				this.penultimateCX = this.dx;
				this.penultimateCY = this.dy;
				this.lastClockX = this.exPrev;
				this.lastClockY = this.eyPrev;
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			} else {
				if(clockWise && !this.lastClock) {
					this.penultimateAX = this.jx;
					this.penultimateAY = this.jy;
					this.lastAntiX = this.ex;
					this.lastAntiY = this.ey;
					this.penultimateCX = this.dx;
					this.penultimateCY = this.dy;
					this.lastClockX = this.exPrev;
					this.lastClockY = this.eyPrev;
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
				}
				if(clockWise && this.lastClock) {
					this.penultimateAX = this.jx;
					this.penultimateAY = this.jy;
					this.lastAntiX = this.ex;
					this.lastAntiY = this.ey;
					this.penultimateCX = this.dx;
					this.penultimateCY = this.dy;
					this.lastClockX = this.exPrev;
					this.lastClockY = this.eyPrev;
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
				}
				if(!clockWise && !this.lastClock) {
					this.penultimateCX = this.dx;
					this.penultimateCY = this.dy;
					this.lastClockX = this.jx;
					this.lastClockY = this.jy;
					this.penultimateAX = this.dxPrev;
					this.penultimateAY = this.dyPrev;
					this.lastAntiX = this.ex;
					this.lastAntiY = this.ey;
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.jx,this.jy,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
				}
				if(!clockWise && this.lastClock) {
					this.penultimateAX = this.dxPrev;
					this.penultimateAY = this.dyPrev;
					this.lastAntiX = this.ex;
					this.lastAntiY = this.ey;
					this.penultimateCX = this.jx;
					this.penultimateCY = this.jy;
					this.lastClockX = this.dx;
					this.lastClockY = this.dy;
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.jx,this.jy,0,this.ex,this.ey,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType = this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = this.pointsClock;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this = this.pen;
				var color = -1;
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.colorType.colorTriangles(color,len);
			} else {
				var drawType = this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = this.pointsAnti;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this = this.pen;
				var color = -1;
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.colorType.colorTriangles(color,len);
			}
		} else if(this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.dxOld,this.dyOld,0,this.exPrev,this.eyPrev,0,this.ax,this.ay,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
				} else {
					var _this = this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this.currentColor;
					}
					_this.drawType.triangle(this.exOld,this.eyOld,0,this.dxPrev,this.dyPrev,0,this.ax,this.ay,0);
					if(_this.transformMatrix != null) {
						_this.drawType.transform(_this.transformMatrix);
					}
					_this.drawType.next();
					_this.colorType.cornerColors(color,color,color);
				}
			} else if(clockWise) {
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.dxOld,this.dyOld,0,this.exPrev,this.eyPrev,0,this.jx,this.jy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			} else {
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.exOld,this.eyOld,0,this.dxPrev,this.dyPrev,0,this.jx,this.jy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
		}
		this.kax = this.dxPrev;
		this.kay = this.dyPrev;
		this.kbx = this.dx;
		this.kby = this.dy;
		this.ncx = this.exPrev;
		this.ncy = this.eyPrev;
		this.kcx = this.ex;
		this.kcy = this.ey;
		if(curveEnds && !overlap && this.count != 0) {
			if(clockWise) {
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.ax,this.ay,0,this.dxOld,this.dyOld,0,this.jx,this.jy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.ax,this.ay,0,this.exPrev,this.eyPrev,0,this.jx,this.jy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			} else {
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.ax,this.ay,0,this.exOld,this.eyOld,0,this.jx,this.jy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.ax,this.ay,0,this.dxPrev,this.dyPrev,0,this.jx,this.jy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
		}
		this.jxOld = this.jx;
		this.jyOld = this.jy;
		this.lastClock = clockWise;
		this.count++;
	}
	,overlapQuad: function() {
		var _this = this.pen;
		var color = -1;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
		if(_this.transformMatrix != null) {
			_this.drawType.transform(_this.transformMatrix);
		}
		_this.drawType.next();
		_this.colorType.cornerColors(color,color,color);
		var _this = this.pen;
		var color = -1;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
		if(_this.transformMatrix != null) {
			_this.drawType.transform(_this.transformMatrix);
		}
		_this.drawType.next();
		_this.colorType.cornerColors(color,color,color);
	}
	,end: function(width_) {
		this.endEdges();
		if(this.count != 0) {
			var ax = this.bx;
			var ay = this.by;
			var radius = width_ / 2;
			var beta = -this.angle1 - Math.PI / 2;
			var gamma = -this.angle1 - Math.PI / 2 - Math.PI;
			var temp = [];
			var drawType = this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this = this.pen;
			var color = 0;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.colorType.colorTriangles(color,len);
			var pA = this.pointsAnti.length;
			var len = temp.length / 2 | 0;
			var _g = 0;
			var _g1 = len + 2;
			while(_g < _g1) {
				var i = _g++;
				this.pointsAnti[pA++] = temp[i];
			}
			var pC = this.pointsClock.length;
			var _g = 1;
			var _g1 = len / 2 + 1 | 0;
			while(_g < _g1) {
				var i = _g++;
				this.pointsClock[pC++] = temp[temp.length - 2 * i];
				this.pointsClock[pC++] = temp[temp.length - 2 * i - 1];
			}
		}
	}
	,triangle2DFill: function(ax_,ay_,bx_,by_,cx_,cy_,color_) {
		if(color_ == null) {
			color_ = -1;
		}
		var _this = this.pen;
		var color = color_;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.drawType.triangle(ax_,ay_,0,bx_,by_,0,cx_,cy_,0);
		if(_this.transformMatrix != null) {
			_this.drawType.transform(_this.transformMatrix);
		}
		_this.drawType.next();
		_this.colorType.cornerColors(color,color,color);
	}
	,addPieXstart: function(ax,ay,radius,beta,gamma,prefer,mark,sides) {
		if(sides == null) {
			sides = 36;
		}
		if(mark == null) {
			mark = -1;
		}
		var temp = [];
		var drawType = this.pen.drawType;
		var sides1 = sides;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var step = pi * 2 / sides1;
		var dif;
		switch(prefer._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = beta;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var p2 = temp.length;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx = ax + radius * Math.sin(angle);
			cy = ay + radius * Math.cos(angle);
			temp[p2++] = cx;
			temp[p2++] = cy;
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step;
			bx = cx;
			by = cy;
		}
		var len = totalSteps;
		var _this = this.pen;
		var color = mark;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var pA = this.pointsAnti.length;
		var len = temp.length / 2 | 0;
		var p4 = temp.length / 4 | 0;
		var _g = 0;
		var _g1 = p4;
		while(_g < _g1) {
			var i = _g++;
			this.pointsAnti[pA++] = temp[len - 2 * i + 1];
			this.pointsAnti[pA++] = temp[len - 2 * i];
		}
		var pC = this.pointsClock.length;
		var _g = 0;
		var _g1 = p4;
		while(_g < _g1) {
			var i = _g++;
			this.pointsClock[pC++] = temp[i * 2 + len + 1];
			this.pointsClock[pC++] = temp[i * 2 + len];
		}
	}
	,addPieX: function(ax,ay,radius,beta,gamma,prefer,mark,sides) {
		if(sides == null) {
			sides = 36;
		}
		if(mark == null) {
			mark = 0;
		}
		var temp = [];
		var drawType = this.pen.drawType;
		var sides1 = sides;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var step = pi * 2 / sides1;
		var dif;
		switch(prefer._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = beta;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var p2 = temp.length;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx = ax + radius * Math.sin(angle);
			cy = ay + radius * Math.cos(angle);
			temp[p2++] = cx;
			temp[p2++] = cy;
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step;
			bx = cx;
			by = cy;
		}
		var len = totalSteps;
		var _this = this.pen;
		var color = mark;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var pA = this.pointsAnti.length;
		var len = temp.length / 2 | 0;
		var _g = 0;
		var _g1 = len + 2;
		while(_g < _g1) {
			var i = _g++;
			this.pointsAnti[pA++] = temp[i];
		}
		var pC = this.pointsClock.length;
		var _g = 1;
		var _g1 = len / 2 + 1 | 0;
		while(_g < _g1) {
			var i = _g++;
			this.pointsClock[pC++] = temp[temp.length - 2 * i];
			this.pointsClock[pC++] = temp[temp.length - 2 * i - 1];
		}
	}
	,addPie: function(ax,ay,radius,beta,gamma,prefer,mark,sides) {
		if(sides == null) {
			sides = 36;
		}
		if(mark == null) {
			mark = 0;
		}
		var drawType = this.pen.drawType;
		var sides1 = sides;
		if(sides1 == null) {
			sides1 = 36;
		}
		var pi = Math.PI;
		var step = pi * 2 / sides1;
		var dif;
		switch(prefer._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = beta;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx = ax + radius * Math.sin(angle);
			cy = ay + radius * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step;
			bx = cx;
			by = cy;
		}
		var len = totalSteps;
		var _this = this.pen;
		var color = mark;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,computeJ: function(width_,theta0,dif) {
		var gamma = Math.abs(dif) / 2;
		var h = width_ / 2 / Math.cos(gamma);
		var f;
		if(theta0 <= Math.PI && theta0 > -Math.PI) {
			f = theta0;
		} else {
			var a = (theta0 + Math.PI) % (2 * Math.PI);
			f = a >= 0 ? a - Math.PI : a + Math.PI;
		}
		var this1 = f;
		var start = this1;
		var start2 = start;
		var delta = start2 + dif / 2 + Math.PI;
		this.jx = this.ax + h * Math.sin(delta);
		this.jy = this.ay + h * Math.cos(delta);
	}
	,addDot: function(x,y,color,width_) {
		var w = width_ * 0.07;
		var drawType = this.pen.drawType;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = x + w * Math.sin(theta);
			by = y + w * Math.cos(theta);
			theta += step;
			cx = x + w * Math.sin(theta);
			cy = y + w * Math.cos(theta);
			drawType.triangle(x,y,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		var len = 36;
		var _this = this.pen;
		var color1 = color;
		if(color1 == -1) {
			color1 = _this.currentColor;
		}
		_this.colorType.colorTriangles(color1,len);
	}
	,addSmallTriangles: function(clockWise,width_) {
		if(clockWise) {
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.ax,this.ay,0,this.dxOld,this.dyOld,0,this.jx,this.jy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.ax,this.ay,0,this.exPrev,this.eyPrev,0,this.jx,this.jy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		} else {
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.ax,this.ay,0,this.exOld,this.eyOld,0,this.jx,this.jy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.ax,this.ay,0,this.dxPrev,this.dyPrev,0,this.jx,this.jy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		}
	}
	,triangle2DFillangleCorners: function(oldx_,oldy_,prevx_,prevy_,width_) {
		var w = width_ * 0.07;
		var drawType = this.pen.drawType;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = oldx_ + w * Math.sin(theta);
			by = oldy_ + w * Math.cos(theta);
			theta += step;
			cx = oldx_ + w * Math.sin(theta);
			cy = oldy_ + w * Math.cos(theta);
			drawType.triangle(oldx_,oldy_,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		var len = 36;
		var _this = this.pen;
		var color = this.debugCol4;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var drawType = this.pen.drawType;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = prevx_ + w * Math.sin(theta);
			by = prevy_ + w * Math.cos(theta);
			theta += step;
			cx = prevx_ + w * Math.sin(theta);
			cy = prevy_ + w * Math.cos(theta);
			drawType.triangle(prevx_,prevy_,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = 36;
		var _this = this.pen;
		var color = this.debugCol3;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var drawType = this.pen.drawType;
		var ax = this.ax;
		var ay = this.ay;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = ax + w * Math.sin(theta);
			by = ay + w * Math.cos(theta);
			theta += step;
			cx = ax + w * Math.sin(theta);
			cy = ay + w * Math.cos(theta);
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = 36;
		var _this = this.pen;
		var color = this.debugCol10;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var drawType = this.pen.drawType;
		var ax = this.jx;
		var ay = this.jy;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = ax + w * Math.sin(theta);
			by = ay + w * Math.cos(theta);
			theta += step;
			cx = ax + w * Math.sin(theta);
			cy = ay + w * Math.cos(theta);
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = 36;
		var _this = this.pen;
		var color = this.debugCol5;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,triangle2DFillangleCornersLess: function(oldx_,oldy_,prevx_,prevy_,width_) {
		var w = width_ * 0.07;
		var drawType = this.pen.drawType;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = oldx_ + w * Math.sin(theta);
			by = oldy_ + w * Math.cos(theta);
			theta += step;
			cx = oldx_ + w * Math.sin(theta);
			cy = oldy_ + w * Math.cos(theta);
			drawType.triangle(oldx_,oldy_,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		var len = 36;
		var _this = this.pen;
		var color = this.debugCol4;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var drawType = this.pen.drawType;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = prevx_ + w * Math.sin(theta);
			by = prevy_ + w * Math.cos(theta);
			theta += step;
			cx = prevx_ + w * Math.sin(theta);
			cy = prevy_ + w * Math.cos(theta);
			drawType.triangle(prevx_,prevy_,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = 36;
		var _this = this.pen;
		var color = this.debugCol3;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
		var drawType = this.pen.drawType;
		var ax = this.jx;
		var ay = this.jy;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = ax + w * Math.sin(theta);
			by = ay + w * Math.cos(theta);
			theta += step;
			cx = ax + w * Math.sin(theta);
			cy = ay + w * Math.cos(theta);
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		len = 36;
		var _this = this.pen;
		var color = this.debugCol5;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,connectQuadsWhenQuadsOverlay: function(clockWise,width_) {
		if(clockWise) {
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.dxOld,this.dyOld,0,this.exPrev,this.eyPrev,0,this.ax,this.ay,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		} else {
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.exOld,this.eyOld,0,this.dxPrev,this.dyPrev,0,this.ax,this.ay,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		}
	}
	,connectQuads: function(clockWise,width_) {
		if(clockWise) {
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.dxOld,this.dyOld,0,this.exPrev,this.eyPrev,0,this.jx,this.jy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		} else {
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.exOld,this.eyOld,0,this.dxPrev,this.dyPrev,0,this.jx,this.jy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		}
	}
	,addInitialQuads: function(clockWise,width_) {
		this.quadIndex = this.pen.drawType.get_pos();
		if(this.count == 0) {
			this.penultimateAX = this.dxPrev;
			this.penultimateAY = this.dyPrev;
			this.lastAntiX = this.ex;
			this.lastAntiY = this.ey;
			this.penultimateCX = this.dx;
			this.penultimateCY = this.dy;
			this.lastClockX = this.exPrev;
			this.lastClockY = this.eyPrev;
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		} else {
			if(clockWise && !this.lastClock) {
				this.penultimateAX = this.jx;
				this.penultimateAY = this.jy;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				this.penultimateCX = this.dx;
				this.penultimateCY = this.dy;
				this.lastClockX = this.exPrev;
				this.lastClockY = this.eyPrev;
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
			if(clockWise && this.lastClock) {
				this.penultimateAX = this.jx;
				this.penultimateAY = this.jy;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				this.penultimateCX = this.dx;
				this.penultimateCY = this.dy;
				this.lastClockX = this.exPrev;
				this.lastClockY = this.eyPrev;
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.exPrev,this.eyPrev,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
			if(!clockWise && !this.lastClock) {
				this.penultimateCX = this.dx;
				this.penultimateCY = this.dy;
				this.lastClockX = this.jx;
				this.lastClockY = this.jy;
				this.penultimateAX = this.dxPrev;
				this.penultimateAY = this.dyPrev;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.jx,this.jy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
			if(!clockWise && this.lastClock) {
				this.penultimateAX = this.dxPrev;
				this.penultimateAY = this.dyPrev;
				this.lastAntiX = this.ex;
				this.lastAntiY = this.ey;
				this.penultimateCX = this.jx;
				this.penultimateCY = this.jy;
				this.lastClockX = this.dx;
				this.lastClockY = this.dy;
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.jx,this.jy,0,this.dx,this.dy,0,this.ex,this.ey,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.dxPrev,this.dyPrev,0,this.jx,this.jy,0,this.ex,this.ey,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
		}
	}
	,endEdges: function() {
		var pC = this.pointsClock.length;
		var pA = this.pointsAnti.length;
		this.pointsClock[pC++] = this.penultimateCX;
		this.pointsClock[pC++] = this.penultimateCY;
		this.pointsClock[pC++] = this.lastClockX;
		this.pointsClock[pC++] = this.lastClockY;
		this.pointsAnti[pA++] = this.penultimateAX;
		this.pointsAnti[pA++] = this.penultimateAY;
		this.pointsAnti[pA++] = this.lastAntiX;
		this.pointsAnti[pA++] = this.lastAntiY;
	}
	,addQuads: function(clockWise,width_) {
		var currQuadIndex = this.pen.drawType.get_pos();
		var pC = 0;
		var pA = 0;
		if(clockWise && !this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jxOld;
				this.pointsClock[pC++] = this.jyOld;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jxOld,this.jyOld,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
			var _this = this.pen;
			var v = this.quadIndex;
			_this.drawType.set_pos(v);
			_this.colorType.set_pos(v);
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jx,this.jy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
		}
		if(clockWise && this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				this.pointsAnti[pA++] = this.kbx;
				this.pointsAnti[pA++] = this.kby;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.kax;
				this.pointsClock[pC++] = this.kay;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this = this.pen;
				var v = this.quadIndex;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.jx,this.jy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.kax,this.kay,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jxOld;
				this.pointsAnti[pA++] = this.jyOld;
				this.pointsAnti[pA++] = this.jx;
				this.pointsAnti[pA++] = this.jy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				this.pointsClock[pC++] = this.kbx;
				this.pointsClock[pC++] = this.kby;
				var _this = this.pen;
				var v = this.quadIndex;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.jxOld,this.jyOld,0,this.kbx,this.kby,0,this.jx,this.jy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.jxOld,this.jyOld,0,this.kbx,this.kby,0,this.ncx,this.ncy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
		}
		if(!clockWise && !this.lastClock) {
			var _this = this.pen;
			var v = this.quadIndex;
			_this.drawType.set_pos(v);
			_this.colorType.set_pos(v);
			var _this = this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
			if(_this.transformMatrix != null) {
				_this.drawType.transform(_this.transformMatrix);
			}
			_this.drawType.next();
			_this.colorType.cornerColors(color,color,color);
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jxOld;
				this.pointsClock[pC++] = this.jyOld;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.jxOld,this.jyOld,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
		}
		if(!clockWise && this.lastClock) {
			if(this.count == 1) {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.kay;
				this.pointsAnti[pA++] = this.kax;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this = this.pen;
				var v = this.quadIndex;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.kax,this.kay,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			} else {
				pA = this.pointsAnti.length;
				this.pointsAnti[pA++] = this.jxOld;
				this.pointsAnti[pA++] = this.jyOld;
				this.pointsAnti[pA++] = this.kcx;
				this.pointsAnti[pA++] = this.kcy;
				pC = this.pointsClock.length;
				this.pointsClock[pC++] = this.jx;
				this.pointsClock[pC++] = this.jy;
				this.pointsClock[pC++] = this.ncx;
				this.pointsClock[pC++] = this.ncy;
				var _this = this.pen;
				var v = this.quadIndex;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.jxOld,this.jyOld,0,this.jx,this.jy,0,this.kcx,this.kcy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
				var _this = this.pen;
				var v = this.quadIndex + 1;
				_this.drawType.set_pos(v);
				_this.colorType.set_pos(v);
				var _this = this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this.currentColor;
				}
				_this.drawType.triangle(this.jxOld,this.jyOld,0,this.jx,this.jy,0,this.ncx,this.ncy,0);
				if(_this.transformMatrix != null) {
					_this.drawType.transform(_this.transformMatrix);
				}
				_this.drawType.next();
				_this.colorType.cornerColors(color,color,color);
			}
		}
		var _this = this.pen;
		_this.drawType.set_pos(currQuadIndex);
		_this.colorType.set_pos(currQuadIndex);
	}
	,storeLastQuads: function() {
		this.kax = this.dxPrev;
		this.kay = this.dyPrev;
		this.kbx = this.dx;
		this.kby = this.dy;
		this.ncx = this.exPrev;
		this.ncy = this.eyPrev;
		this.kcx = this.ex;
		this.kcy = this.ey;
	}
	,isClockwise: function(x,y) {
		var x1 = this.dxOld - x;
		var y1 = this.dyOld - y;
		var x2 = this.exOld - x;
		var y2 = this.eyOld - y;
		return x1 * x1 + y1 * y1 > x2 * x2 + y2 * y2;
	}
	,line: function(ax_,ay_,bx_,by_,width_,endLineCurve) {
		if(endLineCurve == null) {
			endLineCurve = 0;
		}
		this.ax = bx_;
		this.ay = by_;
		this.bx = ax_;
		this.by = ay_;
		this.halfA = Math.PI / 2;
		this.beta = Math.PI / 2 - this.halfA;
		this.r = width_ / 2 * Math.cos(this.beta);
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
		var dxPrev_ = this.dx;
		var dyPrev_ = this.dy;
		var exPrev_ = this.ex;
		var eyPrev_ = this.ey;
		this.ax = ax_;
		this.ay = ay_;
		this.bx = bx_;
		this.by = by_;
		this.theta = Math.atan2(this.ay - this.by,this.ax - this.bx);
		if(this.theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this.theta + this.halfA + Math.PI / 2;
				this.angle1 = this.theta - this.halfA;
			} else {
				this.angle1 = this.theta + this.halfA - Math.PI;
				this.angle2 = this.theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this.theta + this.halfA - Math.PI;
			this.angle2 = this.theta + this.halfA;
		} else {
			this.angle2 = this.theta + this.halfA + Math.PI / 2;
			this.angle1 = this.theta - this.halfA;
		}
		if(this.dxPrev != null) {
			this.dxOld = this.dxPrev;
		}
		if(this.dyPrev != null) {
			this.dyOld = this.dyPrev;
		}
		if(this.exPrev != null) {
			this.exOld = this.exPrev;
		}
		if(this.eyPrev != null) {
			this.eyOld = this.eyPrev;
		}
		if(this.dx != null) {
			this.dxPrev = this.dx;
		}
		if(this.dy != null) {
			this.dyPrev = this.dy;
		}
		if(this.ex != null) {
			this.exPrev = this.ex;
		}
		if(this.ey != null) {
			this.eyPrev = this.ey;
		}
		this.dx = this.bx + this.r * Math.cos(this.angle1);
		this.dy = this.by + this.r * Math.sin(this.angle1);
		this.ex = this.bx + this.r * Math.cos(this.angle2);
		this.ey = this.by + this.r * Math.sin(this.angle2);
		switch(endLineCurve) {
		case 0:
			break;
		case 1:
			var radius = width_ / 2;
			var beta = -this.angle1 - Math.PI / 2;
			var gamma = -this.angle1 - Math.PI / 2 + Math.PI;
			var drawType = this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax_ + radius * Math.sin(angle);
				cy = ay_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this = this.pen;
			var color = 0;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.colorType.colorTriangles(color,len);
			break;
		case 2:
			var radius = width_ / 2;
			var beta = -this.angle1 - Math.PI / 2;
			var gamma = -this.angle1 - Math.PI / 2 - Math.PI;
			var drawType = this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = bx_ + radius * Math.sin(angle);
				cy = by_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(bx_,by_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this = this.pen;
			var color = 0;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.colorType.colorTriangles(color,len);
			break;
		case 3:
			var radius = width_ / 2;
			var beta = -this.angle1 - Math.PI / 2;
			var gamma = -this.angle1 - Math.PI / 2 + Math.PI;
			var drawType = this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax_ + radius * Math.sin(angle);
				cy = ay_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this = this.pen;
			var color = 0;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.colorType.colorTriangles(color,len);
			var radius = width_ / 2;
			var beta = -this.angle1 - Math.PI / 2;
			var gamma = -this.angle1 - Math.PI / 2 - Math.PI;
			var drawType = this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = bx_ + radius * Math.sin(angle);
				cy = by_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(bx_,by_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this = this.pen;
			var color = 0;
			if(color == -1) {
				color = _this.currentColor;
			}
			_this.colorType.colorTriangles(color,len);
			break;
		}
		var _this = this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.drawType.triangle(dxPrev_,dyPrev_,0,this.dx,this.dy,0,exPrev_,eyPrev_,0);
		if(_this.transformMatrix != null) {
			_this.drawType.transform(_this.transformMatrix);
		}
		_this.drawType.next();
		_this.colorType.cornerColors(color,color,color);
		var _this = this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.drawType.triangle(dxPrev_,dyPrev_,0,this.dx,this.dy,0,this.ex,this.ey,0);
		if(_this.transformMatrix != null) {
			_this.drawType.transform(_this.transformMatrix);
		}
		_this.drawType.next();
		_this.colorType.cornerColors(color,color,color);
	}
	,__class__: trilateral2_Contour
};
var trilateral2_DrawAbstract = {};
trilateral2_DrawAbstract._new = function(drawType) {
	var this1 = drawType;
	return this1;
};
trilateral2_DrawAbstract.get_pos = function(this1) {
	return this1.get_pos();
};
trilateral2_DrawAbstract.set_pos = function(this1,v) {
	this1.set_pos(v);
	return v;
};
trilateral2_DrawAbstract.set_size = function(this1,v) {
	this1.set_size(v);
	return v;
};
trilateral2_DrawAbstract.get_size = function(this1) {
	return this1.get_size();
};
var trilateral2_Fill = function() { };
$hxClasses["trilateral2.Fill"] = trilateral2_Fill;
trilateral2_Fill.__name__ = "trilateral2.Fill";
trilateral2_Fill.triangulate = function(pen,sketch,fillForm) {
	var vert;
	var tri;
	var p;
	switch(fillForm._hx_index) {
	case 0:
		sketch.pointsRewound();
		p = sketch.points;
		var res = hxGeomAlgo_Tess2.tesselate(p,null,hxGeomAlgo_ResultType.POLYGONS,3);
		vert = res.vertices;
		tri = res.elements;
		var triples = hxPolyK_ArrayTriple._new(tri);
		var _g = 0;
		while(_g < (triples.length / 3 | 0)) {
			var i = _g * 3 | 0;
			var tri__a = triples[i];
			var tri__b = triples[i + 1];
			var tri__c = triples[i + 2];
			++_g;
			var a = tri__a * 2 | 0;
			var b = tri__b * 2 | 0;
			var c = tri__c * 2 | 0;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = pen.currentColor;
			}
			pen.drawType.triangle(vert[a],vert[a + 1],0,vert[b],vert[b + 1],0,vert[c],vert[c + 1],0);
			if(pen.transformMatrix != null) {
				pen.drawType.transform(pen.transformMatrix);
			}
			pen.drawType.next();
			pen.colorType.cornerColors(color,color,color);
		}
		break;
	case 1:
		p = sketch.points;
		var l = p.length;
		var count = 0;
		vert = [];
		tri = [];
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			if(p[i].length != 0) {
				var poly = p[i];
				var n = poly.length >> 1;
				var tgs;
				if(n < 3) {
					tgs = [];
				} else {
					var tgs1 = [];
					var avl = [];
					var _g2 = 0;
					var _g3 = n;
					while(_g2 < _g3) {
						var i1 = _g2++;
						avl.push(i1);
					}
					var i2 = 0;
					var al = n;
					var i0;
					var i11;
					var i21;
					var ax;
					var ay;
					var bx;
					var by;
					var cx;
					var cy;
					var earFound;
					while(al > 3) {
						i0 = avl[i2 % al];
						i11 = avl[(i2 + 1) % al];
						i21 = avl[(i2 + 2) % al];
						ax = poly[2 * i0];
						ay = poly[2 * i0 + 1];
						bx = poly[2 * i11];
						by = poly[2 * i11 + 1];
						cx = poly[2 * i21];
						cy = poly[2 * i21 + 1];
						earFound = false;
						if((ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0) {
							earFound = true;
							var _g4 = 0;
							var _g5 = al;
							while(_g4 < _g5) {
								var j = _g4++;
								var vi = avl[j];
								if(vi == i0 || vi == i11 || vi == i21) {
									continue;
								}
								var v0x = cx - ax;
								var v0y = cy - ay;
								var v1x = bx - ax;
								var v1y = by - ay;
								var v2x = poly[2 * vi] - ax;
								var v2y = poly[2 * vi + 1] - ay;
								var dot00 = v0x * v0x + v0y * v0y;
								var dot01 = v0x * v1x + v0y * v1y;
								var dot02 = v0x * v2x + v0y * v2y;
								var dot11 = v1x * v1x + v1y * v1y;
								var dot12 = v1x * v2x + v1y * v2y;
								var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
								var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
								var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
								if(u >= 0 && v >= 0 && u + v < 1) {
									earFound = false;
									break;
								}
							}
						}
						if(earFound) {
							tgs1.push(i0);
							tgs1.push(i11);
							tgs1.push(i21);
							avl.splice((i2 + 1) % al,1);
							--al;
							i2 = 0;
						} else if(i2++ > 3 * al) {
							break;
						}
					}
					tgs1.push(avl[0]);
					tgs1.push(avl[1]);
					tgs1.push(avl[2]);
					tgs = tgs1;
				}
				var triples = hxPolyK_ArrayTriple._new(tgs);
				var _g6 = 0;
				while(_g6 < (triples.length / 3 | 0)) {
					var i3 = _g6 * 3 | 0;
					var tri__a = triples[i3];
					var tri__b = triples[i3 + 1];
					var tri__c = triples[i3 + 2];
					++_g6;
					var a = tri__a * 2 | 0;
					var b = tri__b * 2 | 0;
					var c = tri__c * 2 | 0;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = pen.currentColor;
					}
					pen.drawType.triangle(poly[a],poly[a + 1],0,poly[b],poly[b + 1],0,poly[c],poly[c + 1],0);
					if(pen.transformMatrix != null) {
						pen.drawType.transform(pen.transformMatrix);
					}
					pen.drawType.next();
					pen.colorType.cornerColors(color,color,color);
				}
			}
		}
		break;
	case 2:
		sketch.pointsNoEndOverlap();
		p = sketch.points;
		var vp = new org_poly2tri_VisiblePolygon();
		var l = p.length;
		var p_;
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			p_ = p[i];
			if(p_.length != 0) {
				var p2t = [];
				var pairs = hxPolyK_ArrayPairs._new(p_);
				var i1 = 0;
				var inlobj_x = pairs[i1];
				var inlobj_y = pairs[i1 + 1];
				var p0 = inlobj_x;
				var i2 = 0;
				var inlobj_x1 = pairs[i2];
				var inlobj_y1 = pairs[i2 + 1];
				var p1 = inlobj_y1;
				var _g2 = 0;
				while(_g2 < (pairs.length / 2 | 0)) {
					var i3 = _g2 * 2 | 0;
					var pair_x = pairs[i3];
					var pair_y = pairs[i3 + 1];
					++_g2;
					p2t.push(new org_poly2tri_Point(pair_x,pair_y));
				}
				var l2 = p2t.length;
				if(p0 == p2t[l2 - 1].x && p1 == p2t[l2 - 1].y) {
					p2t.pop();
				}
				vp.addPolyline(p2t);
			}
		}
		vp.performTriangulationOnce();
		var pt = vp.getVerticesAndTriangles();
		tri = pt.triangles;
		vert = pt.vertices;
		var triples = hxPolyK_ArrayTriple._new(tri);
		var _g = 0;
		while(_g < (triples.length / 3 | 0)) {
			var i = _g * 3 | 0;
			var tri__a = triples[i];
			var tri__b = triples[i + 1];
			var tri__c = triples[i + 2];
			++_g;
			var a = tri__a * 3 | 0;
			var b = tri__b * 3 | 0;
			var c = tri__c * 3 | 0;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = pen.currentColor;
			}
			pen.drawType.triangle(vert[a],vert[a + 1],0,vert[b],vert[b + 1],0,vert[c],vert[c + 1],0);
			if(pen.transformMatrix != null) {
				pen.drawType.transform(pen.transformMatrix);
			}
			pen.drawType.next();
			pen.colorType.cornerColors(color,color,color);
		}
		break;
	}
};
var trilateral2_FillForm = $hxEnums["trilateral2.FillForm"] = { __ename__ : "trilateral2.FillForm", __constructs__ : ["tess2","polyK","poly2tri"]
	,tess2: {_hx_index:0,__enum__:"trilateral2.FillForm",toString:$estr}
	,polyK: {_hx_index:1,__enum__:"trilateral2.FillForm",toString:$estr}
	,poly2tri: {_hx_index:2,__enum__:"trilateral2.FillForm",toString:$estr}
};
var trilateral2_IndexRange = function(start,end) {
	this.start = start;
	this.end = end;
};
$hxClasses["trilateral2.IndexRange"] = trilateral2_IndexRange;
trilateral2_IndexRange.__name__ = "trilateral2.IndexRange";
trilateral2_IndexRange.merge = function(ir0,ir1) {
	return new trilateral2_IndexRange(ir0.start,ir1.end);
};
trilateral2_IndexRange.prototype = {
	__class__: trilateral2_IndexRange
};
var trilateral2_Pen = function(drawType_,colorType_) {
	this.indices = [];
	this.currentColor = 16435934;
	this.dz = 0.01;
	this.rounded = 30;
	this.drawType = drawType_;
	this.colorType = colorType_;
};
$hxClasses["trilateral2.Pen"] = trilateral2_Pen;
trilateral2_Pen.__name__ = "trilateral2.Pen";
trilateral2_Pen.create = function(verts,cols) {
	var _e = verts;
	var _e1 = verts;
	var _e2 = verts;
	var _e3 = verts;
	var _e4 = verts;
	var _e5 = verts;
	var _e6 = verts;
	var _e7 = verts;
	var _e8 = verts;
	var _e9 = verts;
	var _e10 = cols;
	var tmp = function(colorA,colorB,colorC) {
		geom_flat_f32_Float32FlatRGBA.set_red(_e10,(colorA >> 16 & 255) / 255);
		var v = (colorA & 255) / 255;
		_e10[(_e10[0] | 0) * 4 + 2 + 2] = v;
		var v = (colorA >> 8 & 255) / 255;
		_e10[(_e10[0] | 0) * 4 + 1 + 2] = v;
		var v = (colorA >> 24 & 255) / 255;
		_e10[(_e10[0] | 0) * 4 + 3 + 2] = v;
		var pos_ = _e10[0] + 1.;
		_e10[0] = pos_;
		if(_e10[0] > _e10[1] - 1) {
			_e10[1] = _e10[0];
		}
		geom_flat_f32_Float32FlatRGBA.set_red(_e10,(colorB >> 16 & 255) / 255);
		var v = (colorB & 255) / 255;
		_e10[(_e10[0] | 0) * 4 + 2 + 2] = v;
		var v = (colorB >> 8 & 255) / 255;
		_e10[(_e10[0] | 0) * 4 + 1 + 2] = v;
		var v = (colorB >> 24 & 255) / 255;
		_e10[(_e10[0] | 0) * 4 + 3 + 2] = v;
		var pos_ = _e10[0] + 1.;
		_e10[0] = pos_;
		if(_e10[0] > _e10[1] - 1) {
			_e10[1] = _e10[0];
		}
		geom_flat_f32_Float32FlatRGBA.set_red(_e10,(colorC >> 16 & 255) / 255);
		var v = (colorC & 255) / 255;
		_e10[(_e10[0] | 0) * 4 + 2 + 2] = v;
		var v = (colorC >> 8 & 255) / 255;
		_e10[(_e10[0] | 0) * 4 + 1 + 2] = v;
		var v = (colorC >> 24 & 255) / 255;
		_e10[(_e10[0] | 0) * 4 + 3 + 2] = v;
		var pos_ = _e10[0] + 1.;
		_e10[0] = pos_;
		if(_e10[0] > _e10[1] - 1) {
			_e10[1] = _e10[0];
		}
	};
	var _e11 = cols;
	var tmp1 = function(color,times) {
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			geom_flat_f32_Float32FlatRGBA.set_red(_e11,(color >> 16 & 255) / 255);
			var v = (color & 255) / 255;
			_e11[(_e11[0] | 0) * 4 + 2 + 2] = v;
			var v1 = (color >> 8 & 255) / 255;
			_e11[(_e11[0] | 0) * 4 + 1 + 2] = v1;
			var v2 = (color >> 24 & 255) / 255;
			_e11[(_e11[0] | 0) * 4 + 3 + 2] = v2;
			var pos_ = _e11[0] + 1.;
			_e11[0] = pos_;
			if(_e11[0] > _e11[1] - 1) {
				_e11[1] = _e11[0];
			}
			geom_flat_f32_Float32FlatRGBA.set_red(_e11,(color >> 16 & 255) / 255);
			var v3 = (color & 255) / 255;
			_e11[(_e11[0] | 0) * 4 + 2 + 2] = v3;
			var v4 = (color >> 8 & 255) / 255;
			_e11[(_e11[0] | 0) * 4 + 1 + 2] = v4;
			var v5 = (color >> 24 & 255) / 255;
			_e11[(_e11[0] | 0) * 4 + 3 + 2] = v5;
			var pos_1 = _e11[0] + 1.;
			_e11[0] = pos_1;
			if(_e11[0] > _e11[1] - 1) {
				_e11[1] = _e11[0];
			}
			geom_flat_f32_Float32FlatRGBA.set_red(_e11,(color >> 16 & 255) / 255);
			var v6 = (color & 255) / 255;
			_e11[(_e11[0] | 0) * 4 + 2 + 2] = v6;
			var v7 = (color >> 8 & 255) / 255;
			_e11[(_e11[0] | 0) * 4 + 1 + 2] = v7;
			var v8 = (color >> 24 & 255) / 255;
			_e11[(_e11[0] | 0) * 4 + 3 + 2] = v8;
			var pos_2 = _e11[0] + 1.;
			_e11[0] = pos_2;
			if(_e11[0] > _e11[1] - 1) {
				_e11[1] = _e11[0];
			}
		}
	};
	var _e12 = cols;
	var tmp2 = function() {
		var a = Math.round(_e12[(_e12[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(_e12) * 255) << 16 | Math.round(_e12[(_e12[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(_e12[(_e12[0] | 0) * 4 + 2 + 2] * 255);
		var pos_ = _e12[0] + 1.;
		_e12[0] = pos_;
		if(_e12[0] > _e12[1] - 1) {
			_e12[1] = _e12[0];
		}
		var b = Math.round(_e12[(_e12[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(_e12) * 255) << 16 | Math.round(_e12[(_e12[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(_e12[(_e12[0] | 0) * 4 + 2 + 2] * 255);
		var pos_ = _e12[0] + 1.;
		_e12[0] = pos_;
		if(_e12[0] > _e12[1] - 1) {
			_e12[1] = _e12[0];
		}
		var c = Math.round(_e12[(_e12[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(_e12) * 255) << 16 | Math.round(_e12[(_e12[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(_e12[(_e12[0] | 0) * 4 + 2 + 2] * 255);
		var pos_ = _e12[0] + 1.;
		_e12[0] = pos_;
		if(_e12[0] > _e12[1] - 1) {
			_e12[1] = _e12[0];
		}
		return geom_obj_TriColors._new(new geom_structure_TriInt(a,b,c));
	};
	var _e13 = verts;
	var _e14 = verts;
	var tmp3 = function(pos_) {
		_e14[0] = pos_;
		if(_e14[0] > _e14[1] - 1) {
			_e14[1] = _e14[0];
		}
		return pos_;
	};
	var _e15 = verts;
	var tmp4 = function() {
		return geom_flat_f32_Float32Flat.get_size(_e15);
	};
	var _e16 = verts;
	var tmp5 = function(id) {
		return geom_flat_f32_Float32Flat.set_size(_e16,id);
	};
	return new trilateral2_Pen({ triangle : function(ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
		return geom_flat_f32_Float32FlatTriangle.triangle(_e,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
	}, transform : function(m) {
		geom_flat_f32_Float32FlatTriangle.transform(_e1,m);
	}, transformRange : function(m,start,end) {
		geom_flat_f32_Float32FlatTriangle.transformRange(_e2,m,start,end);
	}, getTri3D : function() {
		var this1 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_ax(_e3),geom_flat_f32_Float32FlatTriangle.get_ay(_e3),geom_flat_f32_Float32FlatTriangle.get_az(_e3),1.);
		var pa = this1;
		var this1 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_bx(_e3),geom_flat_f32_Float32FlatTriangle.get_by(_e3),geom_flat_f32_Float32FlatTriangle.get_bz(_e3),1.);
		var pb = this1;
		var this1 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_cx(_e3),geom_flat_f32_Float32FlatTriangle.get_cy(_e3),geom_flat_f32_Float32FlatTriangle.get_cz(_e3),1.);
		var pc = this1;
		return new geom_structure_TriVec(pa,pb,pc);
	}, next : function() {
		var pos_ = _e4[0] + 1.;
		_e4[0] = pos_;
		if(_e4[0] > _e4[1] - 1) {
			_e4[1] = _e4[0];
		}
		return _e4[0];
	}, hasNext : function() {
		return _e5[0] < geom_flat_f32_Float32Flat.get_size(_e5);
	}, get_pos : function() {
		return _e6[0];
	}, set_pos : function(pos_) {
		_e7[0] = pos_;
		if(_e7[0] > _e7[1] - 1) {
			_e7[1] = _e7[0];
		}
		return pos_;
	}, get_size : function() {
		return geom_flat_f32_Float32Flat.get_size(_e8);
	}, set_size : function(id) {
		return geom_flat_f32_Float32Flat.set_size(_e9,id);
	}},{ cornerColors : tmp, colorTriangles : tmp1, getTriColors : tmp2, get_pos : function() {
		return _e13[0];
	}, set_pos : tmp3, get_size : tmp4, set_size : tmp5});
};
trilateral2_Pen.prototype = {
	cornerColor: function(color) {
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = this.currentColor;
		}
		this.colorType.cornerColors(color,color,color);
	}
	,cornerColors: function(colorA,colorB,colorC) {
		this.colorType.cornerColors(colorA,colorB,colorC);
	}
	,middleColor: function(color,colorCentre) {
		this.colorType.cornerColors(colorCentre,color,color);
	}
	,middleColors: function(color,colorCentre,times) {
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			this.colorType.cornerColors(colorCentre,color,color);
		}
	}
	,colorTriangles: function(color,times) {
		if(color == -1) {
			color = this.currentColor;
		}
		this.colorType.colorTriangles(color,times);
	}
	,copyRange: function(otherPen,startEnd,vec) {
		var start = this.drawType.get_pos();
		var v = startEnd.start;
		otherPen.drawType.set_pos(v);
		otherPen.colorType.set_pos(v);
		var colors;
		var _g = startEnd.start;
		var _g1 = startEnd.end + 1;
		while(_g < _g1) {
			var i = _g++;
			var tri = otherPen.drawType.getTri3D();
			this.drawType.triangle(tri.a.x + vec.x,tri.a.y + vec.y,tri.a.z + vec.z,tri.b.x + vec.x,tri.b.y + vec.y,tri.b.z + vec.z,tri.c.x + vec.x,tri.c.y + vec.y,tri.c.z + vec.z);
			this.drawType.next();
		}
		var end = this.drawType.get_pos() - 1 | 0;
		var s0 = new trilateral2_IndexRange(start | 0,end);
		return s0;
	}
	,copyRange2: function(otherPen,startEnd,vec) {
		var start = this.drawType.get_pos();
		var v = startEnd.start;
		otherPen.drawType.set_pos(v);
		otherPen.colorType.set_pos(v);
		var colors;
		var _g = startEnd.start;
		var _g1 = startEnd.end + 1;
		while(_g < _g1) {
			var i = _g++;
			var tri = otherPen.drawType.getTri3D();
			this.drawType.triangle(tri.a.x + vec.x,tri.a.y + vec.y,tri.a.z + vec.z,tri.b.x + vec.x,tri.b.y + vec.y,tri.b.z + vec.z,tri.c.x + vec.x,tri.c.y + vec.y,tri.c.z + vec.z);
			if(this.transformMatrix != null) {
				this.drawType.transform(this.transformMatrix);
			}
			this.drawType.next();
		}
		var end = this.drawType.get_pos() - 1 | 0;
		var s0 = new trilateral2_IndexRange(start | 0,end);
		return s0;
	}
	,addTriangle: function(ax,ay,az,bx,by,bz,cx,cy,cz) {
		this.drawType.triangle(ax,ay,az,bx,by,bz,cx,cy,cz);
		if(this.transformMatrix != null) {
			this.drawType.transform(this.transformMatrix);
		}
		this.drawType.next();
	}
	,triangle2DFill: function(ax,ay,bx,by,cx,cy,color) {
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = this.currentColor;
		}
		this.drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		if(this.transformMatrix != null) {
			this.drawType.transform(this.transformMatrix);
		}
		this.drawType.next();
		this.colorType.cornerColors(color,color,color);
		return 1;
	}
	,get_pos: function() {
		return this.drawType.get_pos();
	}
	,set_pos: function(v) {
		this.drawType.set_pos(v);
		this.colorType.set_pos(v);
		return v;
	}
	,__class__: trilateral2_Pen
};
var trilateral2_Shaper = function() { };
$hxClasses["trilateral2.Shaper"] = trilateral2_Shaper;
trilateral2_Shaper.__name__ = "trilateral2.Shaper";
trilateral2_Shaper.add2DTriangle = function(drawType,ax,ay,bx,by,cx,cy) {
	drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 1;
};
trilateral2_Shaper.add2DQuad = function(drawType,ax,ay,bx,by,cx,cy,dx,dy) {
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.quad = function(drawType,q) {
	var bx = q.B.x;
	var by = q.B.y;
	var cx = q.C.x;
	var cy = q.C.y;
	var dx = q.D.x;
	var dy = q.D.y;
	drawType.triangle(q.A.x,q.A.y,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.lineAB = function(drawType,A,B,width) {
	var dx = A.x - B.x;
	var dy = A.y - B.y;
	var P = new geom_structure_Mat1x2(A.x - width / 2,A.y);
	var omega = Math.atan2(dy,dx);
	var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
	var pivotX = A.x + width / 2;
	var pivotY = A.y;
	var px = P.x;
	var py = P.y;
	var dx = dim.x;
	var dy = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx,py);
	var C_ = new geom_structure_Mat1x2(px + dx,py + dy);
	var D_ = new geom_structure_Mat1x2(px,py + dy);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px = A_.x - pivotX;
		var py = A_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
		var px = B_.x - pivotX;
		var py = B_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		B_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
		var px = C_.x - pivotX;
		var py = C_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		C_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
		var px = D_.x - pivotX;
		var py = D_.y - pivotY;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		D_ = new geom_structure_Mat1x2(px2 + pivotX,py + pivotY);
	}
	var q = new geom_obj_Quad2D(A_,B_,C_,D_);
	var bx = q.B.x;
	var by = q.B.y;
	var cx = q.C.x;
	var cy = q.C.y;
	var dx = q.D.x;
	var dy = q.D.y;
	drawType.triangle(q.A.x,q.A.y,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.lineXY = function(drawType,ax,ay,bx,by,width) {
	var dx = ax - bx;
	var dy = ay - by;
	var P = new geom_structure_Mat1x2(ax - width / 2,ay);
	var omega = Math.atan2(dy,dx);
	var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
	var pivotX = ax + width / 2;
	var px = P.x;
	var py = P.y;
	var dx = dim.x;
	var dy = dim.y;
	var A_ = new geom_structure_Mat1x2(px,py);
	var B_ = new geom_structure_Mat1x2(px + dx,py);
	var C_ = new geom_structure_Mat1x2(px + dx,py + dy);
	var D_ = new geom_structure_Mat1x2(px,py + dy);
	if(omega != 0.) {
		var sin = Math.sin(omega);
		var cos = Math.cos(omega);
		var px = A_.x - pivotX;
		var py = A_.y - ay;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		A_ = new geom_structure_Mat1x2(px2 + pivotX,py + ay);
		var px = B_.x - pivotX;
		var py = B_.y - ay;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		B_ = new geom_structure_Mat1x2(px2 + pivotX,py + ay);
		var px = C_.x - pivotX;
		var py = C_.y - ay;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		C_ = new geom_structure_Mat1x2(px2 + pivotX,py + ay);
		var px = D_.x - pivotX;
		var py = D_.y - ay;
		var px2 = px * cos - py * sin;
		py = py * cos + px * sin;
		D_ = new geom_structure_Mat1x2(px2 + pivotX,py + ay);
	}
	var q = new geom_obj_Quad2D(A_,B_,C_,D_);
	var bx = q.B.x;
	var by = q.B.y;
	var cx = q.C.x;
	var cy = q.C.y;
	var dx = q.D.x;
	var dy = q.D.y;
	drawType.triangle(q.A.x,q.A.y,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.rectangle = function(drawType,x,y,w,h) {
	var ax = x;
	var ay = y;
	var bx = x + w;
	var by = ay;
	var cx = bx;
	var cy = ay + h;
	var dx = x;
	var dy = cy;
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.squareOutline = function(drawType,px,py,radius,thick,theta) {
	if(theta == null) {
		theta = 0;
	}
	var ax = 0.;
	var ay = 0.;
	var bx = 0.;
	var by = 0.;
	var cx = 0.;
	var cy = 0.;
	var dx = 0.;
	var dy = 0.;
	var a0x = 0.;
	var a0y = 0.;
	var b0x = 0.;
	var b0y = 0.;
	var c0x = 0.;
	var c0y = 0.;
	var d0x = 0.;
	var d0y = 0.;
	if(theta != 0) {
		var pi = Math.PI;
		var pi4 = pi / 4;
		var pi2 = pi / 2;
		var sqrt2 = Math.sqrt(2);
		var r = radius * sqrt2;
		var aTheta = -pi + theta - pi4;
		var dTheta = -pi + theta + pi / 2 - pi / 4;
		var cTheta = theta - pi4;
		var bTheta = -pi + theta - pi2 - pi4;
		var as = Math.sin(aTheta);
		var ac = Math.cos(aTheta);
		var bs = Math.sin(bTheta);
		var bc = Math.cos(bTheta);
		var cs = Math.sin(cTheta);
		var cc = Math.cos(cTheta);
		var ds = Math.sin(dTheta);
		var dc = Math.cos(dTheta);
		var r0 = r - thick;
		ax = px + r * as;
		ay = py + r * ac;
		bx = px + r * bs;
		by = py + r * bc;
		cx = px + r * cs;
		cy = py + r * cc;
		dx = px + r * ds;
		dy = py + r * dc;
		a0x = px + r0 * as;
		a0y = py + r0 * ac;
		b0x = px + r0 * bs;
		b0y = py + r0 * bc;
		c0x = px + r0 * cs;
		c0y = py + r0 * cc;
		d0x = px + r0 * ds;
		d0y = py + r0 * dc;
	} else {
		ax = px - radius;
		ay = py - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
		var radius0 = radius - thick;
		a0x = px - radius0;
		a0y = py - radius0;
		var l0x = radius0 * 2;
		var l0y = l0x;
		b0x = a0x + l0x;
		b0y = a0y;
		c0x = b0x;
		c0y = a0y + l0y;
		d0x = a0x;
		d0y = c0y;
	}
	drawType.triangle(ax,ay,0,bx,by,0,a0x,a0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,b0x,b0y,0,a0x,a0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(d0x,d0y,0,c0x,c0y,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(c0x,c0y,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(ax,ay,0,a0x,a0y,0,d0x,d0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(ax,ay,0,d0x,d0y,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(b0x,b0y,0,bx,by,0,c0x,c0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,c0x,c0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 8;
};
trilateral2_Shaper.square = function(drawType,px,py,radius,theta) {
	if(theta == null) {
		theta = 0;
	}
	var ax = 0.;
	var ay = 0.;
	var bx = 0.;
	var by = 0.;
	var cx = 0.;
	var cy = 0.;
	var dx = 0.;
	var dy = 0.;
	if(theta != 0) {
		var pi = Math.PI;
		var pi4 = pi / 4;
		var pi2 = pi / 2;
		var sqrt2 = Math.sqrt(2);
		var r = radius * sqrt2;
		var aTheta = -pi + theta - pi4;
		var dTheta = -pi + theta + pi / 2 - pi / 4;
		var cTheta = theta - pi4;
		var bTheta = -pi + theta - pi2 - pi4;
		ax = px + r * Math.sin(aTheta);
		ay = py + r * Math.cos(aTheta);
		bx = px + r * Math.sin(bTheta);
		by = py + r * Math.cos(bTheta);
		cx = px + r * Math.sin(cTheta);
		cy = py + r * Math.cos(cTheta);
		dx = px + r * Math.sin(dTheta);
		dy = py + r * Math.cos(dTheta);
	} else {
		ax = px - radius;
		ay = py - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
	}
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.diamond = function(drawType,x,y,radius,theta) {
	if(theta == null) {
		theta = 0.;
	}
	var theta1 = Math.PI / 4 + theta;
	if(theta1 == null) {
		theta1 = 0;
	}
	var ax = 0.;
	var ay = 0.;
	var bx = 0.;
	var by = 0.;
	var cx = 0.;
	var cy = 0.;
	var dx = 0.;
	var dy = 0.;
	if(theta1 != 0) {
		var pi = Math.PI;
		var pi4 = pi / 4;
		var pi2 = pi / 2;
		var sqrt2 = Math.sqrt(2);
		var r = radius * sqrt2;
		var aTheta = -pi + theta1 - pi4;
		var dTheta = -pi + theta1 + pi / 2 - pi / 4;
		var cTheta = theta1 - pi4;
		var bTheta = -pi + theta1 - pi2 - pi4;
		ax = x + r * Math.sin(aTheta);
		ay = y + r * Math.cos(aTheta);
		bx = x + r * Math.sin(bTheta);
		by = y + r * Math.cos(bTheta);
		cx = x + r * Math.sin(cTheta);
		cy = y + r * Math.cos(cTheta);
		dx = x + r * Math.sin(dTheta);
		dy = y + r * Math.cos(dTheta);
	} else {
		ax = x - radius;
		ay = y - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
	}
	drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.diamondOutline = function(drawType,x,y,thick,radius,theta) {
	if(theta == null) {
		theta = 0.;
	}
	var theta1 = Math.PI / 4 + theta;
	if(theta1 == null) {
		theta1 = 0;
	}
	var ax = 0.;
	var ay = 0.;
	var bx = 0.;
	var by = 0.;
	var cx = 0.;
	var cy = 0.;
	var dx = 0.;
	var dy = 0.;
	var a0x = 0.;
	var a0y = 0.;
	var b0x = 0.;
	var b0y = 0.;
	var c0x = 0.;
	var c0y = 0.;
	var d0x = 0.;
	var d0y = 0.;
	if(theta1 != 0) {
		var pi = Math.PI;
		var pi4 = pi / 4;
		var pi2 = pi / 2;
		var sqrt2 = Math.sqrt(2);
		var r = radius * sqrt2;
		var aTheta = -pi + theta1 - pi4;
		var dTheta = -pi + theta1 + pi / 2 - pi / 4;
		var cTheta = theta1 - pi4;
		var bTheta = -pi + theta1 - pi2 - pi4;
		var as = Math.sin(aTheta);
		var ac = Math.cos(aTheta);
		var bs = Math.sin(bTheta);
		var bc = Math.cos(bTheta);
		var cs = Math.sin(cTheta);
		var cc = Math.cos(cTheta);
		var ds = Math.sin(dTheta);
		var dc = Math.cos(dTheta);
		var r0 = r - thick;
		ax = x + r * as;
		ay = y + r * ac;
		bx = x + r * bs;
		by = y + r * bc;
		cx = x + r * cs;
		cy = y + r * cc;
		dx = x + r * ds;
		dy = y + r * dc;
		a0x = x + r0 * as;
		a0y = y + r0 * ac;
		b0x = x + r0 * bs;
		b0y = y + r0 * bc;
		c0x = x + r0 * cs;
		c0y = y + r0 * cc;
		d0x = x + r0 * ds;
		d0y = y + r0 * dc;
	} else {
		ax = x - radius;
		ay = y - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
		var radius0 = radius - thick;
		a0x = x - radius0;
		a0y = y - radius0;
		var l0x = radius0 * 2;
		var l0y = l0x;
		b0x = a0x + l0x;
		b0y = a0y;
		c0x = b0x;
		c0y = a0y + l0y;
		d0x = a0x;
		d0y = c0y;
	}
	drawType.triangle(ax,ay,0,bx,by,0,a0x,a0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,b0x,b0y,0,a0x,a0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(d0x,d0y,0,c0x,c0y,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(c0x,c0y,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(ax,ay,0,a0x,a0y,0,d0x,d0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(ax,ay,0,d0x,d0y,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(b0x,b0y,0,bx,by,0,c0x,c0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx,by,0,cx,cy,0,c0x,c0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 8;
};
trilateral2_Shaper.overlapStar = function(drawType,px,py,radius,theta) {
	if(theta == null) {
		theta = 0;
	}
	var pi = Math.PI;
	var omega = -pi + theta;
	var a0x = px + radius * Math.sin(omega);
	var a0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var a1x = px + radius * Math.sin(omega);
	var a1y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var b0x = px + radius * Math.sin(omega);
	var b0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var b1x = px + radius * Math.sin(omega);
	var b1y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var c0x = px + radius * Math.sin(omega);
	var c0y = py + radius * Math.cos(omega);
	omega += pi / 3;
	var c1x = px + radius * Math.sin(omega);
	var c1y = py + radius * Math.cos(omega);
	drawType.triangle(a0x,a0y,0,b0x,b0y,0,c0x,c0y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(a1x,a1y,0,b1x,b1y,0,c1x,c1y,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return 2;
};
trilateral2_Shaper.circle = function(drawType,ax,ay,radius,sides,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2 + omega;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.circleRadial = function(drawType,ax,ay,rx,ry,radius,sides,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2 + omega;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	if(rx > 1.) {
		rx = 1;
	}
	if(rx < -1.) {
		rx = -1;
	}
	if(ry > 1.) {
		ry = 1;
	}
	if(ry < -1.) {
		ry = -1;
	}
	var mx = ax + rx * radius;
	var my = ay - ry * radius;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.circleRadialOnSide = function(drawType,ax,ay,rx,ry,radius,sides,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	theta -= step / 2 + omega;
	var bx = 0;
	var by = 0;
	var cx = 0;
	var cy = 0;
	if(rx > 1.) {
		rx = 1;
	}
	if(rx < -1.) {
		rx = -1;
	}
	if(ry > 1.) {
		ry = 1;
	}
	if(ry < -1.) {
		ry = -1;
	}
	var mx = ax + rx * radius;
	var my = ay - ry * radius;
	var dx = ax + radius * Math.sin(theta);
	var dy = ay + radius * Math.cos(theta);
	var _g = 0;
	var _g1 = sides - 1;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	drawType.triangle(mx,my,0,cx,cy,0,dx,dy,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	return sides;
};
trilateral2_Shaper.ellipse = function(drawType,ax,ay,rx,ry,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + rx * Math.sin(theta);
		by = ay + ry * Math.cos(theta);
		theta += step;
		cx = ax + rx * Math.sin(theta);
		cy = ay + ry * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.pie = function(drawType,ax,ay,radius,beta,gamma,prefer,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var dif;
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.pieX = function(drawType,ax,ay,radius,beta,gamma,prefer,edgePoly,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var dif;
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var p2 = edgePoly.length;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		edgePoly[p2++] = cx;
		edgePoly[p2++] = cy;
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.pieDifX = function(drawType,ax,ay,radius,beta,dif,edgePoly,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var p2 = edgePoly.length;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		edgePoly[p2++] = cx;
		edgePoly[p2++] = cy;
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.ellpisePie = function(drawType,ax,ay,rx,ry,beta,gamma,prefer,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var dif;
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + rx * Math.sin(angle);
		cy = ay + ry * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.pieDif = function(drawType,ax,ay,radius,beta,dif,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step;
		bx = cx;
		by = cy;
	}
	return totalSteps;
};
trilateral2_Shaper.arc = function(drawType,ax,ay,radius,width,beta,gamma,prefer,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var step = pi * 2 / sides;
	var dif;
	switch(prefer._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = beta;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var dx = 0;
	var dy = 0;
	var ex = 0;
	var ey = 0;
	var r2 = radius - width;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = ax + radius * Math.sin(angle);
		cy = ay + radius * Math.cos(angle);
		ex = ax + r2 * Math.sin(angle);
		ey = ay + r2 * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(dx,dy,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
			drawType.triangle(dx,dy,0,cx,cy,0,ex,ey,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		angle += step;
		bx = cx;
		by = cy;
		dx = ex;
		dy = ey;
	}
	return totalSteps * 2;
};
trilateral2_Shaper.circleOnSide = function(drawType,ax,ay,radius,sides,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	theta -= step / 2 + omega;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + radius * Math.sin(theta);
		by = ay + radius * Math.cos(theta);
		theta += step;
		cx = ax + radius * Math.sin(theta);
		cy = ay + radius * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.ellipseOnSide = function(drawType,ax,ay,rx,ry,sides) {
	if(sides == null) {
		sides = 36;
	}
	var pi = Math.PI;
	var theta = pi / 2;
	var step = pi * 2 / sides;
	theta -= step / 2;
	var bx;
	var by;
	var cx;
	var cy;
	var _g = 0;
	var _g1 = sides;
	while(_g < _g1) {
		var i = _g++;
		bx = ax + rx * Math.sin(theta);
		by = ay + rx * Math.cos(theta);
		theta += step;
		cx = ax + rx * Math.sin(theta);
		cy = ay + ry * Math.cos(theta);
		drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
	}
	return sides;
};
trilateral2_Shaper.shape = function(drawType,x,y,radius,p,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if((p & 1) == 0) {
		var sides = p;
		var omega1 = omega;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides == null) {
			sides = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / sides;
		theta -= step / 2 + omega1;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = sides;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(x,y,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		return sides;
	} else {
		var sides = p;
		var omega1 = omega;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides == null) {
			sides = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2 + omega1;
		var step = pi * 2 / sides;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = sides;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(x,y,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		return sides;
	}
};
trilateral2_Shaper.shapeRadial = function(drawType,x,y,rx,ry,radius,p,omega) {
	if(omega == null) {
		omega = 0.;
	}
	if((p & 1) == 0) {
		var rx1 = rx;
		var ry1 = ry;
		var sides = p;
		var omega1 = omega;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides == null) {
			sides = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2 + omega1;
		var step = pi * 2 / sides;
		var bx;
		var by;
		var cx;
		var cy;
		if(rx1 > 1.) {
			rx1 = 1;
		}
		if(rx1 < -1.) {
			rx1 = -1;
		}
		if(ry1 > 1.) {
			ry1 = 1;
		}
		if(ry1 < -1.) {
			ry1 = -1;
		}
		var mx = x + rx1 * radius;
		var my = y - ry1 * radius;
		var _g = 0;
		var _g1 = sides;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		return sides;
	} else {
		var rx1 = rx;
		var ry1 = ry;
		var sides = p;
		var omega1 = omega;
		if(omega1 == null) {
			omega1 = 0.;
		}
		if(sides == null) {
			sides = 36;
		}
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / sides;
		theta -= step / 2 + omega1;
		var bx = 0;
		var by = 0;
		var cx = 0;
		var cy = 0;
		if(rx1 > 1.) {
			rx1 = 1;
		}
		if(rx1 < -1.) {
			rx1 = -1;
		}
		if(ry1 > 1.) {
			ry1 = 1;
		}
		if(ry1 < -1.) {
			ry1 = -1;
		}
		var mx = x + rx1 * radius;
		var my = y - ry1 * radius;
		var dx = x + radius * Math.sin(theta);
		var dy = y + radius * Math.cos(theta);
		var _g = 0;
		var _g1 = sides - 1;
		while(_g < _g1) {
			var i = _g++;
			bx = x + radius * Math.sin(theta);
			by = y + radius * Math.cos(theta);
			theta += step;
			cx = x + radius * Math.sin(theta);
			cy = y + radius * Math.cos(theta);
			drawType.triangle(mx,my,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		drawType.triangle(mx,my,0,cx,cy,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		return sides;
	}
};
trilateral2_Shaper.roundedRectangle = function(drawType,x,y,width,height,radius) {
	var pi = Math.PI;
	var pi_2 = Math.PI / 2;
	var ax = x + radius;
	var ay = y + radius;
	var bx = x + width - radius;
	var by = y + radius;
	var cx = bx;
	var cy = y + height - radius;
	var dx = ax;
	var dy = cy;
	var count = 0;
	var ax1 = ax;
	var ay1 = y;
	var bx1 = ax + (width - radius * 2);
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + height;
	var dx1 = ax;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	count += 2;
	var dimY = height - 2 * radius;
	var ax1 = x;
	var ay1 = ay;
	var bx1 = x + radius;
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + dimY;
	var dx1 = x;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	count += 2;
	var ax1 = bx;
	var ay1 = by;
	var bx1 = bx + radius;
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + dimY;
	var dx1 = bx;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	count += 2;
	var beta = -pi;
	var gamma = -pi_2;
	var pi1 = Math.PI;
	var step = pi1 * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = beta;
	var cx1;
	var cy1;
	var bx1 = 0;
	var by1 = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx1 = ax + radius * Math.sin(angle);
		cy1 = ay + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(ax,ay,0,bx1,by1,0,cx1,cy1,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step;
		bx1 = cx1;
		by1 = cy1;
	}
	count += totalSteps;
	var pi1 = Math.PI;
	var step = pi1 * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(pi >= 0 && pi > Math.PI) {
			f = pi;
		} else {
			var a = pi % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(pi >= 0 && pi > Math.PI) {
			f = pi;
		} else {
			var a = pi % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(pi >= 0 && pi > Math.PI) {
			f = pi;
		} else {
			var a = pi % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(pi >= 0 && pi > Math.PI) {
			f = pi;
		} else {
			var a = pi % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = pi_2;
	var cx1;
	var cy1;
	var bx1 = 0;
	var by1 = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx1 = bx + radius * Math.sin(angle);
		cy1 = by + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(bx,by,0,bx1,by1,0,cx1,cy1,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step;
		bx1 = cx1;
		by1 = cy1;
	}
	count += totalSteps;
	var pi = Math.PI;
	var step = pi * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = pi_2;
	var cx1;
	var cy1;
	var bx = 0;
	var by = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx1 = cx + radius * Math.sin(angle);
		cy1 = cy + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(cx,cy,0,bx,by,0,cx1,cy1,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step;
		bx = cx1;
		by = cy1;
	}
	count += totalSteps;
	var gamma = -pi_2;
	var pi = Math.PI;
	var step = pi * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = 0;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = dx + radius * Math.sin(angle);
		cy = dy + radius * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(dx,dy,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		angle += step;
		bx = cx;
		by = cy;
	}
	count += totalSteps;
	return count;
};
trilateral2_Shaper.roundedRectangleOutline = function(drawType,x,y,width,height,thick,radius) {
	var pi = Math.PI;
	var pi_2 = Math.PI / 2;
	var ax = x + radius;
	var ay = y + radius;
	var bx = x + width - radius;
	var by = y + radius;
	var cx = bx;
	var cy = y + height - radius;
	var dx = ax;
	var dy = cy;
	var count = 0;
	var ax1 = ax;
	var ay1 = y;
	var bx1 = ax + (width - radius * 2);
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + thick;
	var dx1 = ax;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	count += 2;
	var ax1 = ax;
	var ay1 = y + height - thick;
	var bx1 = ax + (width - radius * 2);
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + thick;
	var dx1 = ax;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	count += 2;
	var dimY = height - 2 * radius;
	var ax1 = x;
	var ay1 = ay;
	var bx1 = x + thick;
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + dimY;
	var dx1 = x;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	count += 2;
	var x1 = x + width - thick;
	var ax1 = x1;
	var ay1 = by;
	var bx1 = x1 + thick;
	var by1 = ay1;
	var cx1 = bx1;
	var cy1 = ay1 + dimY;
	var dx1 = x1;
	var dy1 = cy1;
	drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
	var m = trilateral2_Shaper.transformMatrix;
	if(m != null) {
		drawType.transform(m);
	}
	drawType.next();
	count += 2;
	var beta = -pi;
	var gamma = -pi_2;
	var pi1 = Math.PI;
	var step = pi1 * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(beta >= 0 && beta > Math.PI) {
			f = beta;
		} else {
			var a = beta % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = beta;
	var cx1;
	var cy1;
	var bx1 = 0;
	var by1 = 0;
	var dx1 = 0;
	var dy1 = 0;
	var ex = 0;
	var ey = 0;
	var r2 = radius - thick;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx1 = ax + radius * Math.sin(angle);
		cy1 = ay + radius * Math.cos(angle);
		ex = ax + r2 * Math.sin(angle);
		ey = ay + r2 * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(dx1,dy1,0,bx1,by1,0,cx1,cy1,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
			drawType.triangle(dx1,dy1,0,cx1,cy1,0,ex,ey,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		angle += step;
		bx1 = cx1;
		by1 = cy1;
		dx1 = ex;
		dy1 = ey;
	}
	count += totalSteps * 2;
	var pi1 = Math.PI;
	var step = pi1 * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
	case 0:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(pi >= 0 && pi > Math.PI) {
			f = pi;
		} else {
			var a = pi % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(pi >= 0 && pi > Math.PI) {
			f = pi;
		} else {
			var a = pi % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(pi >= 0 && pi > Math.PI) {
			f = pi;
		} else {
			var a = pi % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(pi >= 0 && pi > Math.PI) {
			f = pi;
		} else {
			var a = pi % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = pi_2;
	var cx1;
	var cy1;
	var bx1 = 0;
	var by1 = 0;
	var dx1 = 0;
	var dy1 = 0;
	var ex = 0;
	var ey = 0;
	var r2 = radius - thick;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx1 = bx + radius * Math.sin(angle);
		cy1 = by + radius * Math.cos(angle);
		ex = bx + r2 * Math.sin(angle);
		ey = by + r2 * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(dx1,dy1,0,bx1,by1,0,cx1,cy1,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
			drawType.triangle(dx1,dy1,0,cx1,cy1,0,ex,ey,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		angle += step;
		bx1 = cx1;
		by1 = cy1;
		dx1 = ex;
		dy1 = ey;
	}
	count += totalSteps * 2;
	var pi = Math.PI;
	var step = pi * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(pi_2 >= 0 && pi_2 > Math.PI) {
			f = pi_2;
		} else {
			var a = pi_2 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = pi_2;
	var cx1;
	var cy1;
	var bx = 0;
	var by = 0;
	var dx1 = 0;
	var dy1 = 0;
	var ex = 0;
	var ey = 0;
	var r2 = radius - thick;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx1 = cx + radius * Math.sin(angle);
		cy1 = cy + radius * Math.cos(angle);
		ex = cx + r2 * Math.sin(angle);
		ey = cy + r2 * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(dx1,dy1,0,bx,by,0,cx1,cy1,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
			drawType.triangle(dx1,dy1,0,cx1,cy1,0,ex,ey,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		angle += step;
		bx = cx1;
		by = cy1;
		dx1 = ex;
		dy1 = ey;
	}
	count += totalSteps * 2;
	var gamma = -pi_2;
	var pi = Math.PI;
	var step = pi * 2 / 36;
	var dif;
	switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
	case 0:
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
		break;
	case 1:
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
		break;
	case 2:
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var smallest = theta <= Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	case 3:
		var f;
		if(0 > Math.PI) {
			f = 0;
		} else {
			var a = 0 % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var za = this1;
		var f;
		if(gamma >= 0 && gamma > Math.PI) {
			f = gamma;
		} else {
			var a = gamma % (2 * Math.PI);
			f = a >= 0 ? a : a + 2 * Math.PI;
		}
		var this1 = f;
		var zb = this1;
		var fa = za;
		var fb = zb;
		var theta = Math.abs(fa - fb);
		var largest = theta > Math.PI;
		var clockwise = fa < fb;
		var dif1 = clockwise ? theta : -theta;
		dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
		break;
	}
	var positive = dif >= 0;
	var totalSteps = Math.ceil(Math.abs(dif) / step);
	var step = dif / totalSteps;
	var angle = 0;
	var cx;
	var cy;
	var bx = 0;
	var by = 0;
	var dx1 = 0;
	var dy1 = 0;
	var ex = 0;
	var ey = 0;
	var r2 = radius - thick;
	var _g = 0;
	var _g1 = totalSteps + 1;
	while(_g < _g1) {
		var i = _g++;
		cx = dx + radius * Math.sin(angle);
		cy = dy + radius * Math.cos(angle);
		ex = dx + r2 * Math.sin(angle);
		ey = dy + r2 * Math.cos(angle);
		if(i != 0) {
			drawType.triangle(dx1,dy1,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
			drawType.triangle(dx1,dy1,0,cx,cy,0,ex,ey,0);
			var m1 = trilateral2_Shaper.transformMatrix;
			if(m1 != null) {
				drawType.transform(m1);
			}
			drawType.next();
		}
		angle += step;
		bx = cx;
		by = cy;
		dx1 = ex;
		dy1 = ey;
	}
	count += totalSteps * 2;
	return count;
};
trilateral2_Shaper.spiralLines = function(drawType,x,y,radius,nolines,startWid,stepWid) {
	var theta = 0.;
	var wid = startWid;
	var _g = 0;
	var _g1 = nolines;
	while(_g < _g1) {
		var i = _g++;
		var width = wid += stepWid;
		var dx = x - (x + radius * Math.sin(theta));
		var dy = y - (y + radius * Math.cos(theta));
		var P = new geom_structure_Mat1x2(x - width / 2,y);
		var omega = Math.atan2(dy,dx);
		var dim = new geom_structure_Mat1x2(width,dx * dx + dy * dy);
		var pivotX = x + width / 2;
		var px = P.x;
		var py = P.y;
		var dx1 = dim.x;
		var dy1 = dim.y;
		var A_ = new geom_structure_Mat1x2(px,py);
		var B_ = new geom_structure_Mat1x2(px + dx1,py);
		var C_ = new geom_structure_Mat1x2(px + dx1,py + dy1);
		var D_ = new geom_structure_Mat1x2(px,py + dy1);
		if(omega != 0.) {
			var sin = Math.sin(omega);
			var cos = Math.cos(omega);
			var px1 = A_.x - pivotX;
			var py1 = A_.y - y;
			var px2 = px1 * cos - py1 * sin;
			py1 = py1 * cos + px1 * sin;
			A_ = new geom_structure_Mat1x2(px2 + pivotX,py1 + y);
			var px3 = B_.x - pivotX;
			var py2 = B_.y - y;
			var px21 = px3 * cos - py2 * sin;
			py2 = py2 * cos + px3 * sin;
			B_ = new geom_structure_Mat1x2(px21 + pivotX,py2 + y);
			var px4 = C_.x - pivotX;
			var py3 = C_.y - y;
			var px22 = px4 * cos - py3 * sin;
			py3 = py3 * cos + px4 * sin;
			C_ = new geom_structure_Mat1x2(px22 + pivotX,py3 + y);
			var px5 = D_.x - pivotX;
			var py4 = D_.y - y;
			var px23 = px5 * cos - py4 * sin;
			py4 = py4 * cos + px5 * sin;
			D_ = new geom_structure_Mat1x2(px23 + pivotX,py4 + y);
		}
		var q = new geom_obj_Quad2D(A_,B_,C_,D_);
		var bx = q.B.x;
		var by = q.B.y;
		var cx = q.C.x;
		var cy = q.C.y;
		var dx2 = q.D.x;
		var dy2 = q.D.y;
		drawType.triangle(q.A.x,q.A.y,0,bx,by,0,dx2,dy2,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx,by,0,cx,cy,0,dx2,dy2,0);
		var m1 = trilateral2_Shaper.transformMatrix;
		if(m1 != null) {
			drawType.transform(m1);
		}
		drawType.next();
		theta += Math.PI * 2 / nolines;
	}
	return nolines;
};
var trilateral2_Sketch = function(pen_,sketchForm_,endLine_) {
	if(endLine_ == null) {
		endLine_ = 0;
	}
	this.width = 0.01;
	this.y = 0.;
	this.x = 0.;
	this.contour = new trilateral2_Contour(pen_,endLine_);
	this.pen = pen_;
	this.endLine = endLine_;
	this.sketchForm = sketchForm_;
	switch(sketchForm_._hx_index) {
	case 0:
		this.line = $bind(this,this.tracerLine);
		break;
	case 1:
		this.line = $bind(this,this.baseLine);
		break;
	case 2:
		this.line = $bind(this,this.crudeLine);
		break;
	case 3:
		this.line = $bind(this,this.fillOnlyLine);
		break;
	case 4:
		this.line = $bind(this,this.fineLine);
		break;
	case 5:
		this.line = $bind(this,this.fineOverlapLine);
		break;
	case 6:
		this.line = $bind(this,this.mediumLine);
		break;
	case 7:
		this.line = $bind(this,this.mediumOverlapLine);
		break;
	case 8:
		this.line = $bind(this,this.roundEndLine);
		break;
	}
	this.points = [];
	this.pointsClock = [];
	this.pointsAnti = [];
	this.points[0] = [];
	this.dim = [];
};
$hxClasses["trilateral2.Sketch"] = trilateral2_Sketch;
trilateral2_Sketch.__name__ = "trilateral2.Sketch";
trilateral2_Sketch.__interfaces__ = [justPath_IPathContext];
trilateral2_Sketch.prototype = {
	tracerLine: function(x_,y_) {
		haxe_Log.trace("lineTo( " + this.x + ", " + this.y + ", " + x_ + ", " + y_ + ", width )",{ fileName : "trilateral2/Sketch.hx", lineNumber : 27, className : "trilateral2.Sketch", methodName : "tracerLine"});
	}
	,fillOnlyLine: function(x_,y_) {
	}
	,baseLine: function(x_,y_) {
		haxe_Log.trace("lineTo( " + this.x + ", " + this.y + ", " + x_ + ", " + y_ + ", width )",{ fileName : "trilateral2/Sketch.hx", lineNumber : 27, className : "trilateral2.Sketch", methodName : "tracerLine"});
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
	}
	,crudeLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
	}
	,roundEndLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var endLineCurve = 3;
		if(endLineCurve == null) {
			endLineCurve = 0;
		}
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.halfA = Math.PI / 2;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var dxPrev_ = _this.dx;
		var dyPrev_ = _this.dy;
		var exPrev_ = _this.ex;
		var eyPrev_ = _this.ey;
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		switch(endLineCurve) {
		case 0:
			break;
		case 1:
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax_ + radius * Math.sin(angle);
				cy = ay_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = 0;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			break;
		case 2:
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 - Math.PI;
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = x_ + radius * Math.sin(angle);
				cy = y_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(x_,y_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = 0;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			break;
		case 3:
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax_ + radius * Math.sin(angle);
				cy = ay_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = 0;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 - Math.PI;
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif1 = clockwise ? theta : -theta;
				dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif >= 0;
			var totalSteps = Math.ceil(Math.abs(dif) / step);
			var step = dif / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = x_ + radius * Math.sin(angle);
				cy = y_ + radius * Math.cos(angle);
				if(i != 0) {
					drawType.triangle(x_,y_,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = 0;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			break;
		}
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,exPrev_,eyPrev_,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
		var _this1 = _this.pen;
		var color = -1;
		if(color == null) {
			color = -1;
		}
		if(color == -1) {
			color = _this1.currentColor;
		}
		_this1.drawType.triangle(dxPrev_,dyPrev_,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
		if(_this1.transformMatrix != null) {
			_this1.drawType.transform(_this1.transformMatrix);
		}
		_this1.drawType.next();
		_this1.colorType.cornerColors(color,color,color);
	}
	,mediumLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = false;
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		if(_this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f = theta0;
			} else {
				var a = (theta0 + Math.PI) % (2 * Math.PI);
				f = a >= 0 ? a - Math.PI : a + Math.PI;
			}
			var this1 = f;
			var start = this1;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif1;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 > 0 ? dif2 : 2 * Math.PI + dif2;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = smallest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = largest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif1 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif1) / step);
			var step = dif1 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				_this.pointsAnti[pA++] = temp[len - 2 * i + 1];
				_this.pointsAnti[pA++] = temp[len - 2 * i];
			}
			var pC = _this.pointsClock.length;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				_this.pointsClock[pC++] = temp[i * 2 + len + 1];
				_this.pointsClock[pC++] = temp[i * 2 + len];
			}
		}
		if(_this.count != 0) {
			_this.addQuads(clockWise,width_);
		}
		_this.quadIndex = _this.pen.drawType.get_pos();
		if(_this.count == 0) {
			_this.penultimateAX = _this.dxPrev;
			_this.penultimateAY = _this.dyPrev;
			_this.lastAntiX = _this.ex;
			_this.lastAntiY = _this.ey;
			_this.penultimateCX = _this.dx;
			_this.penultimateCY = _this.dy;
			_this.lastClockX = _this.exPrev;
			_this.lastClockY = _this.eyPrev;
			var _this1 = _this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color,color,color);
			var _this1 = _this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color,color,color);
		} else {
			if(clockWise && !_this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
			if(clockWise && _this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
			if(!clockWise && !_this.lastClock) {
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.jx;
				_this.lastClockY = _this.jy;
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
			if(!clockWise && _this.lastClock) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.jx;
				_this.penultimateCY = _this.jy;
				_this.lastClockX = _this.dx;
				_this.lastClockY = _this.dy;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType = _this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = -1;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
			} else {
				var drawType = _this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = _this.pointsAnti;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = -1;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
			}
		} else if(_this.count != 0) {
			if(clockWise) {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && _this.count != 0) {
			if(clockWise) {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,mediumOverlapLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = false;
		var overlap = true;
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		if(!overlap && _this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f = theta0;
			} else {
				var a = (theta0 + Math.PI) % (2 * Math.PI);
				f = a >= 0 ? a - Math.PI : a + Math.PI;
			}
			var this1 = f;
			var start = this1;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif1;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 > 0 ? dif2 : 2 * Math.PI + dif2;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = smallest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = largest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif1 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif1) / step);
			var step = dif1 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				_this.pointsAnti[pA++] = temp[len - 2 * i + 1];
				_this.pointsAnti[pA++] = temp[len - 2 * i];
			}
			var pC = _this.pointsClock.length;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				_this.pointsClock[pC++] = temp[i * 2 + len + 1];
				_this.pointsClock[pC++] = temp[i * 2 + len];
			}
		}
		if(overlap) {
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color,color,color);
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color,color,color);
		} else {
			if(_this.count != 0) {
				_this.addQuads(clockWise,width_);
			}
			_this.quadIndex = _this.pen.drawType.get_pos();
			if(_this.count == 0) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				if(clockWise && !_this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
				if(clockWise && _this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
				if(!clockWise && !_this.lastClock) {
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.jx;
					_this.lastClockY = _this.jy;
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
				if(!clockWise && _this.lastClock) {
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.jx;
					_this.penultimateCY = _this.jy;
					_this.lastClockX = _this.dx;
					_this.lastClockY = _this.dy;
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType = _this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = -1;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
			} else {
				var drawType = _this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = _this.pointsAnti;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = -1;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
			}
		} else if(_this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.ax,_this.ay,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				} else {
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.ax,_this.ay,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
			} else if(clockWise) {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && !overlap && _this.count != 0) {
			if(clockWise) {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,fineLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = true;
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		if(_this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f = theta0;
			} else {
				var a = (theta0 + Math.PI) % (2 * Math.PI);
				f = a >= 0 ? a - Math.PI : a + Math.PI;
			}
			var this1 = f;
			var start = this1;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif1;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 > 0 ? dif2 : 2 * Math.PI + dif2;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = smallest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = largest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif1 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif1) / step);
			var step = dif1 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				_this.pointsAnti[pA++] = temp[len - 2 * i + 1];
				_this.pointsAnti[pA++] = temp[len - 2 * i];
			}
			var pC = _this.pointsClock.length;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				_this.pointsClock[pC++] = temp[i * 2 + len + 1];
				_this.pointsClock[pC++] = temp[i * 2 + len];
			}
		}
		if(_this.count != 0) {
			_this.addQuads(clockWise,width_);
		}
		_this.quadIndex = _this.pen.drawType.get_pos();
		if(_this.count == 0) {
			_this.penultimateAX = _this.dxPrev;
			_this.penultimateAY = _this.dyPrev;
			_this.lastAntiX = _this.ex;
			_this.lastAntiY = _this.ey;
			_this.penultimateCX = _this.dx;
			_this.penultimateCY = _this.dy;
			_this.lastClockX = _this.exPrev;
			_this.lastClockY = _this.eyPrev;
			var _this1 = _this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color,color,color);
			var _this1 = _this.pen;
			var color = -1;
			if(color == null) {
				color = -1;
			}
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color,color,color);
		} else {
			if(clockWise && !_this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
			if(clockWise && _this.lastClock) {
				_this.penultimateAX = _this.jx;
				_this.penultimateAY = _this.jy;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
			if(!clockWise && !_this.lastClock) {
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.jx;
				_this.lastClockY = _this.jy;
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
			if(!clockWise && _this.lastClock) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.jx;
				_this.penultimateCY = _this.jy;
				_this.lastClockX = _this.dx;
				_this.lastClockY = _this.dy;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType = _this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = -1;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
			} else {
				var drawType = _this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = _this.pointsAnti;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = -1;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
			}
		} else if(_this.count != 0) {
			if(clockWise) {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && _this.count != 0) {
			if(clockWise) {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,fineOverlapLine: function(x_,y_) {
		var _this = this.contour;
		var ax_ = this.x;
		var ay_ = this.y;
		var width_ = this.width;
		var curveEnds = true;
		var overlap = true;
		if(overlap == null) {
			overlap = false;
		}
		if(curveEnds == null) {
			curveEnds = false;
		}
		var oldAngle = _this.dx != null ? _this.angle1 : null;
		_this.halfA = Math.PI / 2;
		_this.ax = x_;
		_this.ay = y_;
		_this.bx = ax_;
		_this.by = ay_;
		_this.beta = Math.PI / 2 - _this.halfA;
		_this.r = width_ / 2 * Math.cos(_this.beta);
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		_this.ax = ax_;
		_this.ay = ay_;
		_this.bx = x_;
		_this.by = y_;
		_this.theta = Math.atan2(_this.ay - _this.by,_this.ax - _this.bx);
		if(_this.theta > 0) {
			if(_this.halfA < 0) {
				_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
				_this.angle1 = _this.theta - _this.halfA;
			} else {
				_this.angle1 = _this.theta + _this.halfA - Math.PI;
				_this.angle2 = _this.theta + _this.halfA;
			}
		} else if(_this.halfA > 0) {
			_this.angle1 = _this.theta + _this.halfA - Math.PI;
			_this.angle2 = _this.theta + _this.halfA;
		} else {
			_this.angle2 = _this.theta + _this.halfA + Math.PI / 2;
			_this.angle1 = _this.theta - _this.halfA;
		}
		if(_this.dxPrev != null) {
			_this.dxOld = _this.dxPrev;
		}
		if(_this.dyPrev != null) {
			_this.dyOld = _this.dyPrev;
		}
		if(_this.exPrev != null) {
			_this.exOld = _this.exPrev;
		}
		if(_this.eyPrev != null) {
			_this.eyOld = _this.eyPrev;
		}
		if(_this.dx != null) {
			_this.dxPrev = _this.dx;
		}
		if(_this.dy != null) {
			_this.dyPrev = _this.dy;
		}
		if(_this.ex != null) {
			_this.exPrev = _this.ex;
		}
		if(_this.ey != null) {
			_this.eyPrev = _this.ey;
		}
		_this.dx = _this.bx + _this.r * Math.cos(_this.angle1);
		_this.dy = _this.by + _this.r * Math.sin(_this.angle1);
		_this.ex = _this.bx + _this.r * Math.cos(_this.angle2);
		_this.ey = _this.by + _this.r * Math.sin(_this.angle2);
		var x = _this.dxOld - x_;
		var y = _this.dyOld - y_;
		var x1 = _this.exOld - x_;
		var y1 = _this.eyOld - y_;
		var clockWise = x * x + y * y > x1 * x1 + y1 * y1;
		var theta0;
		var theta1;
		if(clockWise) {
			theta0 = -Math.atan2(_this.ay - _this.dyOld,_this.ax - _this.dxOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.eyPrev,_this.ax - _this.exPrev) - Math.PI / 2;
		} else {
			theta0 = -Math.atan2(_this.ay - _this.eyOld,_this.ax - _this.exOld) - Math.PI / 2;
			theta1 = -Math.atan2(_this.ay - _this.dyPrev,_this.ax - _this.dxPrev) - Math.PI / 2;
		}
		var dif;
		switch(fracs_DifferencePreference.SMALL._hx_index) {
		case 0:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(theta0 >= 0 && theta0 > Math.PI) {
				f = theta0;
			} else {
				var a = theta0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(theta1 >= 0 && theta1 > Math.PI) {
				f = theta1;
			} else {
				var a = theta1 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		if(!overlap && _this.count != 0) {
			var gamma = Math.abs(dif) / 2;
			var h = width_ / 2 / Math.cos(gamma);
			var f;
			if(theta0 <= Math.PI && theta0 > -Math.PI) {
				f = theta0;
			} else {
				var a = (theta0 + Math.PI) % (2 * Math.PI);
				f = a >= 0 ? a - Math.PI : a + Math.PI;
			}
			var this1 = f;
			var start = this1;
			var start2 = start;
			var delta = start2 + dif / 2 + Math.PI;
			_this.jx = _this.ax + h * Math.sin(delta);
			_this.jy = _this.ay + h * Math.cos(delta);
		}
		if(_this.count == 0 && (_this.endLine == 1 || _this.endLine == 3)) {
			var ax = _this.ax;
			var ay = _this.ay;
			var radius = width_ / 2;
			var beta = -_this.angle1 - Math.PI / 2;
			var gamma = -_this.angle1 - Math.PI / 2 + Math.PI;
			var temp = [];
			var drawType = _this.pen.drawType;
			var sides = 36;
			if(sides == null) {
				sides = 36;
			}
			var pi = Math.PI;
			var step = pi * 2 / sides;
			var dif1;
			switch(fracs_DifferencePreference.SMALL._hx_index) {
			case 0:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 > 0 ? dif2 : 2 * Math.PI + dif2;
				break;
			case 1:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = dif2 < 0 ? dif2 : -2 * Math.PI + dif2;
				break;
			case 2:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var smallest = theta <= Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = smallest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			case 3:
				var f;
				if(beta >= 0 && beta > Math.PI) {
					f = beta;
				} else {
					var a = beta % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var za = this1;
				var f;
				if(gamma >= 0 && gamma > Math.PI) {
					f = gamma;
				} else {
					var a = gamma % (2 * Math.PI);
					f = a >= 0 ? a : a + 2 * Math.PI;
				}
				var this1 = f;
				var zb = this1;
				var fa = za;
				var fb = zb;
				var theta = Math.abs(fa - fb);
				var largest = theta > Math.PI;
				var clockwise = fa < fb;
				var dif2 = clockwise ? theta : -theta;
				dif1 = largest ? dif2 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
				break;
			}
			var positive = dif1 >= 0;
			var totalSteps = Math.ceil(Math.abs(dif1) / step);
			var step = dif1 / totalSteps;
			var angle = beta;
			var cx;
			var cy;
			var bx = 0;
			var by = 0;
			var p2 = temp.length;
			var _g = 0;
			var _g1 = totalSteps + 1;
			while(_g < _g1) {
				var i = _g++;
				cx = ax + radius * Math.sin(angle);
				cy = ay + radius * Math.cos(angle);
				temp[p2++] = cx;
				temp[p2++] = cy;
				if(i != 0) {
					drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
					var m = trilateral2_Shaper.transformMatrix;
					if(m != null) {
						drawType.transform(m);
					}
					drawType.next();
				}
				angle += step;
				bx = cx;
				by = cy;
			}
			var len = totalSteps;
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.colorType.colorTriangles(color,len);
			var pA = _this.pointsAnti.length;
			var len = temp.length / 2 | 0;
			var p4 = temp.length / 4 | 0;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				_this.pointsAnti[pA++] = temp[len - 2 * i + 1];
				_this.pointsAnti[pA++] = temp[len - 2 * i];
			}
			var pC = _this.pointsClock.length;
			var _g = 0;
			var _g1 = p4;
			while(_g < _g1) {
				var i = _g++;
				_this.pointsClock[pC++] = temp[i * 2 + len + 1];
				_this.pointsClock[pC++] = temp[i * 2 + len];
			}
		}
		if(overlap) {
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color,color,color);
			var _this1 = _this.pen;
			var color = -1;
			if(color == -1) {
				color = _this1.currentColor;
			}
			_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
			if(_this1.transformMatrix != null) {
				_this1.drawType.transform(_this1.transformMatrix);
			}
			_this1.drawType.next();
			_this1.colorType.cornerColors(color,color,color);
		} else {
			if(_this.count != 0) {
				_this.addQuads(clockWise,width_);
			}
			_this.quadIndex = _this.pen.drawType.get_pos();
			if(_this.count == 0) {
				_this.penultimateAX = _this.dxPrev;
				_this.penultimateAY = _this.dyPrev;
				_this.lastAntiX = _this.ex;
				_this.lastAntiY = _this.ey;
				_this.penultimateCX = _this.dx;
				_this.penultimateCY = _this.dy;
				_this.lastClockX = _this.exPrev;
				_this.lastClockY = _this.eyPrev;
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				if(clockWise && !_this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
				if(clockWise && _this.lastClock) {
					_this.penultimateAX = _this.jx;
					_this.penultimateAY = _this.jy;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.exPrev;
					_this.lastClockY = _this.eyPrev;
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.exPrev,_this.eyPrev,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
				if(!clockWise && !_this.lastClock) {
					_this.penultimateCX = _this.dx;
					_this.penultimateCY = _this.dy;
					_this.lastClockX = _this.jx;
					_this.lastClockY = _this.jy;
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.jx,_this.jy,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
				if(!clockWise && _this.lastClock) {
					_this.penultimateAX = _this.dxPrev;
					_this.penultimateAY = _this.dyPrev;
					_this.lastAntiX = _this.ex;
					_this.lastAntiY = _this.ey;
					_this.penultimateCX = _this.jx;
					_this.penultimateCY = _this.jy;
					_this.lastClockX = _this.dx;
					_this.lastClockY = _this.dy;
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.jx,_this.jy,0,_this.dx,_this.dy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0,_this.ex,_this.ey,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
			}
		}
		if(curveEnds) {
			if(clockWise) {
				var drawType = _this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = _this.pointsClock;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = -1;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
			} else {
				var drawType = _this.pen.drawType;
				var radius = width_ / 2;
				var edgePoly = _this.pointsAnti;
				var pi = Math.PI;
				var step = pi * 2 / 36;
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = theta0;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = edgePoly.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax_ + radius * Math.sin(angle);
					cy = ay_ + radius * Math.cos(angle);
					edgePoly[p2++] = cx;
					edgePoly[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax_,ay_,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = -1;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
			}
		} else if(_this.count != 0) {
			if(overlap) {
				if(clockWise) {
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.ax,_this.ay,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				} else {
					var _this1 = _this.pen;
					var color = -1;
					if(color == null) {
						color = -1;
					}
					if(color == -1) {
						color = _this1.currentColor;
					}
					_this1.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.ax,_this.ay,0);
					if(_this1.transformMatrix != null) {
						_this1.drawType.transform(_this1.transformMatrix);
					}
					_this1.drawType.next();
					_this1.colorType.cornerColors(color,color,color);
				}
			} else if(clockWise) {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.dxOld,_this.dyOld,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.exOld,_this.eyOld,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		_this.kax = _this.dxPrev;
		_this.kay = _this.dyPrev;
		_this.kbx = _this.dx;
		_this.kby = _this.dy;
		_this.ncx = _this.exPrev;
		_this.ncy = _this.eyPrev;
		_this.kcx = _this.ex;
		_this.kcy = _this.ey;
		if(curveEnds && !overlap && _this.count != 0) {
			if(clockWise) {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.dxOld,_this.dyOld,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.exPrev,_this.eyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			} else {
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.exOld,_this.eyOld,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
				var _this1 = _this.pen;
				var color = -1;
				if(color == null) {
					color = -1;
				}
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.drawType.triangle(_this.ax,_this.ay,0,_this.dxPrev,_this.dyPrev,0,_this.jx,_this.jy,0);
				if(_this1.transformMatrix != null) {
					_this1.drawType.transform(_this1.transformMatrix);
				}
				_this1.drawType.next();
				_this1.colorType.cornerColors(color,color,color);
			}
		}
		_this.jxOld = _this.jx;
		_this.jyOld = _this.jy;
		_this.lastClock = clockWise;
		_this.count++;
	}
	,reset: function() {
		this.contour = new trilateral2_Contour(this.pen,this.endLine);
		this.points = [];
		this.pointsClock = [];
		this.pointsAnti = [];
		this.points[0] = [];
		this.dim = [];
	}
	,pointsNoEndOverlap: function() {
		var p;
		var l;
		var j = 0;
		var pointsClean = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			p = this.points[i];
			if(p.length > 2) {
				pointsClean[j++] = p;
			}
		}
		this.points = pointsClean;
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			p = this.points[i];
			l = p.length;
			var repeat = p[0] == p[l - 2] && p[1] == p[l - 1];
			if(repeat) {
				this.points[i].pop();
				this.points[i].pop();
				l -= 2;
			}
		}
		return this.points;
	}
	,pointsRewound: function() {
		var p;
		var l;
		var j = 0;
		var pointsClean = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			p = this.points[i];
			if(p.length > 2) {
				pointsClean[j++] = p;
			}
		}
		this.points = pointsClean;
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			p = this.points[i];
			l = p.length;
			var repeat = p[0] == p[l - 2] && p[1] == p[l - 1];
			if(repeat) {
				this.points[i].pop();
				this.points[i].pop();
				l -= 2;
			}
			var cc = 0.;
			var k = 0;
			var x1;
			var y1;
			var x2;
			var y2;
			var last = l - 2;
			while(k < l) {
				x1 = p[k];
				y1 = p[k + 1];
				if(k == last) {
					x2 = p[0];
					y2 = p[1];
				} else {
					x2 = p[k + 2];
					y2 = p[k + 3];
				}
				cc += (x2 - x1) * (y2 + y1);
				k += 2;
			}
			this.points[i] = p;
		}
		return this.points;
	}
	,initDim: function() {
		return { minX : Infinity, maxX : -Infinity, minY : Infinity, maxY : -Infinity};
	}
	,updateDim: function(x,y) {
		var d = this.dim[this.dim.length - 1];
		if(x < d.minX) {
			d.minX = x;
		}
		if(x > d.maxX) {
			d.maxX = x;
		}
		if(y < d.minY) {
			d.minY = y;
		}
		if(y > d.maxY) {
			d.maxY = y;
		}
	}
	,moveTo: function(x_,y_) {
		if(this.endLine == 2 || this.endLine == 3) {
			var _this = this.contour;
			var width_ = this.width;
			_this.endEdges();
			if(_this.count != 0) {
				var ax = _this.bx;
				var ay = _this.by;
				var radius = width_ / 2;
				var beta = -_this.angle1 - Math.PI / 2;
				var gamma = -_this.angle1 - Math.PI / 2 - Math.PI;
				var temp = [];
				var drawType = _this.pen.drawType;
				var sides = 36;
				if(sides == null) {
					sides = 36;
				}
				var pi = Math.PI;
				var step = pi * 2 / sides;
				var dif;
				switch(fracs_DifferencePreference.SMALL._hx_index) {
				case 0:
					var f;
					if(beta >= 0 && beta > Math.PI) {
						f = beta;
					} else {
						var a = beta % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var za = this1;
					var f;
					if(gamma >= 0 && gamma > Math.PI) {
						f = gamma;
					} else {
						var a = gamma % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var zb = this1;
					var fa = za;
					var fb = zb;
					var theta = Math.abs(fa - fb);
					var clockwise = fa < fb;
					var dif1 = clockwise ? theta : -theta;
					dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
					break;
				case 1:
					var f;
					if(beta >= 0 && beta > Math.PI) {
						f = beta;
					} else {
						var a = beta % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var za = this1;
					var f;
					if(gamma >= 0 && gamma > Math.PI) {
						f = gamma;
					} else {
						var a = gamma % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var zb = this1;
					var fa = za;
					var fb = zb;
					var theta = Math.abs(fa - fb);
					var clockwise = fa < fb;
					var dif1 = clockwise ? theta : -theta;
					dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
					break;
				case 2:
					var f;
					if(beta >= 0 && beta > Math.PI) {
						f = beta;
					} else {
						var a = beta % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var za = this1;
					var f;
					if(gamma >= 0 && gamma > Math.PI) {
						f = gamma;
					} else {
						var a = gamma % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var zb = this1;
					var fa = za;
					var fb = zb;
					var theta = Math.abs(fa - fb);
					var smallest = theta <= Math.PI;
					var clockwise = fa < fb;
					var dif1 = clockwise ? theta : -theta;
					dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
					break;
				case 3:
					var f;
					if(beta >= 0 && beta > Math.PI) {
						f = beta;
					} else {
						var a = beta % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var za = this1;
					var f;
					if(gamma >= 0 && gamma > Math.PI) {
						f = gamma;
					} else {
						var a = gamma % (2 * Math.PI);
						f = a >= 0 ? a : a + 2 * Math.PI;
					}
					var this1 = f;
					var zb = this1;
					var fa = za;
					var fb = zb;
					var theta = Math.abs(fa - fb);
					var largest = theta > Math.PI;
					var clockwise = fa < fb;
					var dif1 = clockwise ? theta : -theta;
					dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
					break;
				}
				var positive = dif >= 0;
				var totalSteps = Math.ceil(Math.abs(dif) / step);
				var step = dif / totalSteps;
				var angle = beta;
				var cx;
				var cy;
				var bx = 0;
				var by = 0;
				var p2 = temp.length;
				var _g = 0;
				var _g1 = totalSteps + 1;
				while(_g < _g1) {
					var i = _g++;
					cx = ax + radius * Math.sin(angle);
					cy = ay + radius * Math.cos(angle);
					temp[p2++] = cx;
					temp[p2++] = cy;
					if(i != 0) {
						drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
						var m = trilateral2_Shaper.transformMatrix;
						if(m != null) {
							drawType.transform(m);
						}
						drawType.next();
					}
					angle += step;
					bx = cx;
					by = cy;
				}
				var len = totalSteps;
				var _this1 = _this.pen;
				var color = 0;
				if(color == -1) {
					color = _this1.currentColor;
				}
				_this1.colorType.colorTriangles(color,len);
				var pA = _this.pointsAnti.length;
				var len = temp.length / 2 | 0;
				var _g = 0;
				var _g1 = len + 2;
				while(_g < _g1) {
					var i = _g++;
					_this.pointsAnti[pA++] = temp[i];
				}
				var pC = _this.pointsClock.length;
				var _g = 1;
				var _g1 = len / 2 + 1 | 0;
				while(_g < _g1) {
					var i = _g++;
					_this.pointsClock[pC++] = temp[temp.length - 2 * i];
					_this.pointsClock[pC++] = temp[temp.length - 2 * i - 1];
				}
			}
		}
		this.x = x_;
		this.y = y_;
		var l = this.points.length;
		this.points[l] = [];
		this.points[l][0] = x_;
		this.points[l][1] = y_;
		this.pointsClock[this.pointsClock.length] = this.contour.pointsClock.slice();
		this.pointsAnti[this.pointsAnti.length] = this.contour.pointsAnti.slice();
		this.dim[this.dim.length] = { minX : Infinity, maxX : -Infinity, minY : Infinity, maxY : -Infinity};
		var d = this.dim[this.dim.length - 1];
		if(x_ < d.minX) {
			d.minX = x_;
		}
		if(x_ > d.maxX) {
			d.maxX = x_;
		}
		if(y_ < d.minY) {
			d.minY = y_;
		}
		if(y_ > d.maxY) {
			d.maxY = y_;
		}
		this.contour.reset();
	}
	,lastClock: function() {
		if(this.contour.pointsClock.length != 0) {
			this.pointsClock[this.pointsClock.length] = this.contour.pointsClock.slice();
			this.pointsAnti[this.pointsAnti.length] = this.contour.pointsAnti.slice();
		}
	}
	,getEdges: function() {
		var edges = [];
		var no = this.pointsClock.length;
		if(no > this.pointsAnti.length) {
			no = this.pointsAnti.length;
		}
		var pClock;
		var pAnti;
		var shape;
		var _g = 0;
		var _g1 = no;
		while(_g < _g1) {
			var s = _g++;
			pClock = this.pointsClock[s];
			pAnti = this.pointsAnti[s];
			var lc = pClock.length;
			var la = pAnti.length;
			edges[s] = [];
			shape = edges[s];
			var _g2 = 0;
			var _g3 = lc;
			while(_g2 < _g3) {
				var i = _g2++;
				shape[i] = pClock[i];
			}
			var j = shape.length;
			var l5 = la / 2 | 0;
			var _g4 = 0;
			var _g5 = l5;
			while(_g4 < _g5) {
				var i1 = _g4++;
				shape[j + i1 * 2] = pAnti[la - i1 * 2 - 1];
				shape[j + i1 * 2 + 1] = pAnti[la - i1 * 2];
			}
			j = shape.length;
			shape[j++] = pClock[0];
			shape[j] = pClock[1];
		}
		return edges;
	}
	,lineTo: function(x_,y_) {
		var repeat = this.x == x_ && this.y == y_;
		if(!repeat) {
			if(this.widthFunction != null) {
				this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
			}
			if(this.colourFunction != null) {
				this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
			}
			this.line(x_,y_);
			var l = this.points.length;
			var p = this.points[l - 1];
			var l2 = p.length;
			p[l2] = x_;
			p[l2 + 1] = y_;
			var d = this.dim[this.dim.length - 1];
			if(x_ < d.minX) {
				d.minX = x_;
			}
			if(x_ > d.maxX) {
				d.maxX = x_;
			}
			if(y_ < d.minY) {
				d.minY = y_;
			}
			if(y_ > d.maxY) {
				d.maxY = y_;
			}
			this.x = x_;
			this.y = y_;
		}
	}
	,quadTo: function(x1,y1,x2,y2) {
		this.tempArr = [];
		var p = this.tempArr;
		var ax = this.x;
		var ay = this.y;
		var x = ax - x1;
		var y = ay - y1;
		var x3 = x1 - x2;
		var y3 = y1 - y2;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x3 * x3 + y3 * y3);
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.quadStep);
		var l = p.length;
		p[l++] = ax;
		p[l++] = ay;
		var t = step;
		while(t < 1.) {
			var u = 1 - t;
			p[l++] = Math.pow(u,2) * ax + 2 * u * t * x1 + Math.pow(t,2) * x2;
			var u1 = 1 - t;
			p[l++] = Math.pow(u1,2) * ay + 2 * u1 * t * y1 + Math.pow(t,2) * y2;
			t += step;
		}
		p[l++] = x2;
		p[l++] = y2;
		var arr = this.tempArr;
		var withMove = false;
		if(withMove == null) {
			withMove = true;
		}
		var l = arr.length;
		var i = 2;
		if(withMove) {
			this.moveTo(arr[0],arr[1]);
		} else {
			var x_ = arr[0];
			var y_ = arr[1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l1 = this.points.length;
				var p = this.points[l1 - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
		}
		while(i < l) {
			var x_ = arr[i];
			var y_ = arr[i + 1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l1 = this.points.length;
				var p = this.points[l1 - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
			i += 2;
		}
		this.x = x2;
		this.y = y2;
	}
	,quadThru: function(x1,y1,x2,y2) {
		var newx = 2 * x1 - 0.5 * (this.x + x2);
		var newy = 2 * y1 - 0.5 * (this.y + y2);
		this.tempArr = [];
		var p = this.tempArr;
		var ax = this.x;
		var ay = this.y;
		var x = ax - newx;
		var y = ay - newy;
		var x1 = newx - x2;
		var y1 = newy - y2;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1);
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.quadStep);
		var l = p.length;
		p[l++] = ax;
		p[l++] = ay;
		var t = step;
		while(t < 1.) {
			var u = 1 - t;
			p[l++] = Math.pow(u,2) * ax + 2 * u * t * newx + Math.pow(t,2) * x2;
			var u1 = 1 - t;
			p[l++] = Math.pow(u1,2) * ay + 2 * u1 * t * newy + Math.pow(t,2) * y2;
			t += step;
		}
		p[l++] = x2;
		p[l++] = y2;
		var arr = this.tempArr;
		var withMove = false;
		if(withMove == null) {
			withMove = true;
		}
		var l = arr.length;
		var i = 2;
		if(withMove) {
			this.moveTo(arr[0],arr[1]);
		} else {
			var x_ = arr[0];
			var y_ = arr[1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l1 = this.points.length;
				var p = this.points[l1 - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
		}
		while(i < l) {
			var x_ = arr[i];
			var y_ = arr[i + 1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l1 = this.points.length;
				var p = this.points[l1 - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
			i += 2;
		}
		this.x = x2;
		this.y = y2;
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		this.tempArr = [];
		var p = this.tempArr;
		var ax = this.x;
		var ay = this.y;
		var x = ax - x1;
		var y = ay - y1;
		var x4 = x1 - x2;
		var y4 = y1 - y2;
		var x5 = x2 - x3;
		var y5 = y2 - y3;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x4 * x4 + y4 * y4) + Math.sqrt(x5 * x5 + y5 * y5);
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),trilateral2_Algebra.cubicStep);
		var l = p.length;
		p[l++] = ax;
		p[l++] = ay;
		var t = step;
		while(t < 1.) {
			var u = 1 - t;
			p[l++] = Math.pow(u,3) * ax + 3 * Math.pow(u,2) * t * x1 + 3 * u * Math.pow(t,2) * x2 + Math.pow(t,3) * x3;
			var u1 = 1 - t;
			p[l++] = Math.pow(u1,3) * ay + 3 * Math.pow(u1,2) * t * y1 + 3 * u1 * Math.pow(t,2) * y2 + Math.pow(t,3) * y3;
			t += step;
		}
		p[l++] = x3;
		p[l++] = y3;
		var arr = this.tempArr;
		var withMove = false;
		if(withMove == null) {
			withMove = true;
		}
		var l = arr.length;
		var i = 2;
		if(withMove) {
			this.moveTo(arr[0],arr[1]);
		} else {
			var x_ = arr[0];
			var y_ = arr[1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l1 = this.points.length;
				var p = this.points[l1 - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
		}
		while(i < l) {
			var x_ = arr[i];
			var y_ = arr[i + 1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l1 = this.points.length;
				var p = this.points[l1 - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
			i += 2;
		}
		this.x = x3;
		this.y = y3;
	}
	,plotCoord: function(arr,withMove) {
		if(withMove == null) {
			withMove = true;
		}
		var l = arr.length;
		var i = 2;
		if(withMove) {
			this.moveTo(arr[0],arr[1]);
		} else {
			var x_ = arr[0];
			var y_ = arr[1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l1 = this.points.length;
				var p = this.points[l1 - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
		}
		while(i < l) {
			var x_ = arr[i];
			var y_ = arr[i + 1];
			var repeat = this.x == x_ && this.y == y_;
			if(!repeat) {
				if(this.widthFunction != null) {
					this.width = this.widthFunction(this.width,this.x,this.y,x_,y_);
				}
				if(this.colourFunction != null) {
					this.pen.currentColor = this.colourFunction(this.pen.currentColor,this.x,this.y,x_,y_);
				}
				this.line(x_,y_);
				var l1 = this.points.length;
				var p = this.points[l1 - 1];
				var l2 = p.length;
				p[l2] = x_;
				p[l2 + 1] = y_;
				var d = this.dim[this.dim.length - 1];
				if(x_ < d.minX) {
					d.minX = x_;
				}
				if(x_ > d.maxX) {
					d.maxX = x_;
				}
				if(y_ < d.minY) {
					d.minY = y_;
				}
				if(y_ > d.maxY) {
					d.maxY = y_;
				}
				this.x = x_;
				this.y = y_;
			}
			i += 2;
		}
	}
	,__class__: trilateral2_Sketch
};
var trilateral2_SketchForm = $hxEnums["trilateral2.SketchForm"] = { __ename__ : "trilateral2.SketchForm", __constructs__ : ["Tracer","Base","Crude","FillOnly","Fine","FineOverlap","Medium","MediumOverlap","RoundEnd"]
	,Tracer: {_hx_index:0,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Base: {_hx_index:1,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Crude: {_hx_index:2,__enum__:"trilateral2.SketchForm",toString:$estr}
	,FillOnly: {_hx_index:3,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Fine: {_hx_index:4,__enum__:"trilateral2.SketchForm",toString:$estr}
	,FineOverlap: {_hx_index:5,__enum__:"trilateral2.SketchForm",toString:$estr}
	,Medium: {_hx_index:6,__enum__:"trilateral2.SketchForm",toString:$estr}
	,MediumOverlap: {_hx_index:7,__enum__:"trilateral2.SketchForm",toString:$estr}
	,RoundEnd: {_hx_index:8,__enum__:"trilateral2.SketchForm",toString:$estr}
};
var trilateral2Lime_app_AppGL = function(width_,height_) {
	var this1 = new Float32Array(trilateral2Lime_app_AppGL.largeEnough + 2);
	this1[0] = 0.;
	this1[1] = 0.;
	this.cols = this1;
	var this1 = new Float32Array(trilateral2Lime_app_AppGL.largeEnough + 2);
	this1[0] = 0.;
	this1[1] = 0.;
	this.textPos = this1;
	var this1 = new Float32Array(trilateral2Lime_app_AppGL.largeEnough + 2);
	this1[0] = 0.;
	this1[1] = 0.;
	this.verts = this1;
	this.first = true;
	this.noVertices = 3;
	this.shaderTest = 4;
	this.width = width_;
	this.height = height_;
};
$hxClasses["trilateral2Lime.app.AppGL"] = trilateral2Lime_app_AppGL;
trilateral2Lime_app_AppGL.__name__ = "trilateral2Lime.app.AppGL";
trilateral2Lime_app_AppGL.passIndicesToShader = function(gl,indices) {
	var indexBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,indices,gl.STATIC_DRAW);
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);
};
trilateral2Lime_app_AppGL.prototype = {
	update: function() {
	}
	,setup: function(gl) {
		switch(this.shaderTest) {
		case 0:
			var program = gl.createProgram();
			var shader = gl.createShader(gl.VERTEX_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec3 vertexPosition;" + "attribute vec4 vertexColor;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(vertexPosition, 1.);" + " vcol = vertexColor;" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			var shader = gl.createShader(gl.FRAGMENT_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec4 vcol;" + "void main(void) {" + "gl_FragColor = vcol;" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			gl.linkProgram(program);
			var tmp;
			if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
				throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
			} else {
				gl.validateProgram(program);
				if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
					throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
				} else {
					gl.useProgram(program);
					tmp = program;
				}
			}
			this.program = tmp;
			var program = this.program;
			var elements = null;
			var array = [0.0,0.5,0.5,-0.25,-0.5,0.5,0.25,-0.5,0.5,0.0,0.5,0.0,-0.25,-0.5,0.0,0.25,-0.5,0.0,0.0,0.5,-0.5,-0.25,-0.5,-0.5,0.25,-0.5,-0.5];
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var pos = this1;
			var elements = null;
			var array = [1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0];
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var col = this1;
			var posLoc = gl.getAttribLocation(program,"vertexPosition");
			var colorLoc = gl.getAttribLocation(program,"vertexColor");
			var p = 0;
			var c = 0;
			p = 0;
			gl.vertexAttrib3f(posLoc,pos[p],pos[p + 1],pos[p + 2]);
			c = 0;
			gl.vertexAttrib4f(posLoc,col[c],col[c + 1],col[c + 2],col[c + 3]);
			p = 3;
			gl.vertexAttrib3f(posLoc,pos[p],pos[p + 1],pos[p + 2]);
			c = 4;
			gl.vertexAttrib4f(posLoc,col[c],col[c + 1],col[c + 2],col[c + 3]);
			p = 6;
			gl.vertexAttrib3f(posLoc,pos[p],pos[p + 1],pos[p + 2]);
			c = 8;
			gl.vertexAttrib4f(posLoc,col[c],col[c + 1],col[c + 2],col[c + 3]);
			gl.enableVertexAttribArray(posLoc);
			gl.enableVertexAttribArray(colorLoc);
			break;
		case 1:
			var program = gl.createProgram();
			var shader = gl.createShader(gl.VERTEX_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec2 vertexPosition;" + "attribute vec3 vertexColor;" + "varying vec3 vColor;" + "void main() {" + "gl_Position = vec4(vertexPosition, 0.0, 1.0);" + "vColor = vertexColor;" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			var shader = gl.createShader(gl.FRAGMENT_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec3 vColor;" + "void main() {" + "gl_FragColor = vec4( vColor, 1.0 );" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			gl.linkProgram(program);
			var tmp;
			if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
				throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
			} else {
				gl.validateProgram(program);
				if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
					throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
				} else {
					gl.useProgram(program);
					tmp = program;
				}
			}
			this.program = tmp;
			var program = this.program;
			var elements = null;
			var array = [0.0,0.5,1.0,1.0,0.4,-0.5,-0.5,0.3,0.1,0.8,0.5,-0.5,1.0,0.0,0.5];
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			var buf = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,buf);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);
			var vbo = buf;
			var posLoc = gl.getAttribLocation(program,"vertexPosition");
			var colorLoc = gl.getAttribLocation(program,"vertexColor");
			gl.vertexAttribPointer(posLoc,2,gl.FLOAT,false,20,0);
			gl.vertexAttribPointer(colorLoc,3,gl.FLOAT,false,20,8);
			gl.enableVertexAttribArray(posLoc);
			gl.enableVertexAttribArray(colorLoc);
			break;
		case 2:
			var program = gl.createProgram();
			var shader = gl.createShader(gl.VERTEX_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec3 vertexPosition;" + "attribute vec4 vertexColor;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(vertexPosition, 1.);" + " vcol = vertexColor;" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			var shader = gl.createShader(gl.FRAGMENT_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec4 vcol;" + "void main(void) {" + "gl_FragColor = vcol;" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			gl.linkProgram(program);
			var tmp;
			if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
				throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
			} else {
				gl.validateProgram(program);
				if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
					throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
				} else {
					gl.useProgram(program);
					tmp = program;
				}
			}
			this.program = tmp;
			var indices = this.createIndices();
			var indexBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,indices,gl.STATIC_DRAW);
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);
			this.createMatrix(gl,this.program,"modelViewProjection");
			var program = this.program;
			var elements = null;
			var array = [150.,225.,0.0,450.,225.,0.0,300.,467.7050982,0.0];
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var p = this1;
			var l = p.length;
			var _g = 0;
			var _g1 = l;
			while(_g < _g1) {
				var i = _g++;
				haxe_Log.trace(p[i],{ fileName : "Source/trilateral2Lime/app/AppGL.hx", lineNumber : 169, className : "trilateral2Lime.app.AppGL", methodName : "createColor1"});
			}
			var elements = null;
			var array = [150.,225.,0.0,450.,225.,0.0,300.,467.7050982,0.0];
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var elements = null;
			var array = [1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0];
			var view = null;
			var buffer = null;
			var len = null;
			var this2;
			if(elements != null) {
				this2 = new Float32Array(elements);
			} else if(array != null) {
				this2 = new Float32Array(array);
			} else if(view != null) {
				this2 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this2 = new Float32Array(buffer,0);
				} else {
					this2 = new Float32Array(buffer,0,len);
				}
			} else {
				this2 = null;
			}
			var noPos = 3;
			var noCols = 4;
			if(noCols == null) {
				noCols = 4;
			}
			if(noPos == null) {
				noPos = 3;
			}
			var buf = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,buf);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
			var bufferPos = buf;
			var buf = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,buf);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this2,gl.STATIC_DRAW);
			var bufferCol = buf;
			var posLoc = gl.getAttribLocation(program,"vertexPosition");
			var colorLoc = gl.getAttribLocation(program,"vertexColor");
			gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
			gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
			gl.enableVertexAttribArray(posLoc);
			gl.enableVertexAttribArray(colorLoc);
			break;
		case 3:
			var program = gl.createProgram();
			var shader = gl.createShader(gl.VERTEX_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec3 vertexPosition;" + "attribute vec4 vertexColor;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(vertexPosition, 1.);" + " vcol = vertexColor;" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			var shader = gl.createShader(gl.FRAGMENT_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec4 vcol;" + "void main(void) {" + "gl_FragColor = vcol;" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			gl.linkProgram(program);
			var tmp;
			if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
				throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
			} else {
				gl.validateProgram(program);
				if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
					throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
				} else {
					gl.useProgram(program);
					tmp = program;
				}
			}
			this.program = tmp;
			var program = this.program;
			this.noVertices = 9;
			var elements = null;
			var array = [0.0,0.5,0.5,-0.25,-0.5,0.5,0.25,-0.5,0.5,0.0,0.5,0.0,-0.25,-0.5,0.0,0.25,-0.5,0.0,0.0,0.5,-0.5,-0.25,-0.5,-0.5,0.25,-0.5,-0.5];
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Float32Array(elements);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			var elements = null;
			var array = [1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0];
			var view = null;
			var buffer = null;
			var len = null;
			var this2;
			if(elements != null) {
				this2 = new Float32Array(elements);
			} else if(array != null) {
				this2 = new Float32Array(array);
			} else if(view != null) {
				this2 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this2 = new Float32Array(buffer,0);
				} else {
					this2 = new Float32Array(buffer,0,len);
				}
			} else {
				this2 = null;
			}
			var noPos = 3;
			var noCols = 4;
			if(noCols == null) {
				noCols = 4;
			}
			if(noPos == null) {
				noPos = 3;
			}
			var buf = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,buf);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
			var bufferPos = buf;
			var buf = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,buf);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this2,gl.STATIC_DRAW);
			var bufferCol = buf;
			var posLoc = gl.getAttribLocation(program,"vertexPosition");
			var colorLoc = gl.getAttribLocation(program,"vertexColor");
			gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
			gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
			gl.enableVertexAttribArray(posLoc);
			gl.enableVertexAttribArray(colorLoc);
			break;
		case 4:
			var program = gl.createProgram();
			var shader = gl.createShader(gl.VERTEX_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec2 vertexPosition;" + "attribute vec3 vertexColor;" + "varying vec3 vColor;" + "void main() {" + "gl_Position = vec4(vertexPosition, 0.0, 1.0);" + "vColor = vertexColor;" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			var shader = gl.createShader(gl.FRAGMENT_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec3 vColor;" + "void main() {" + "gl_FragColor = vec4( vColor, 1.0 );" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			gl.linkProgram(program);
			var tmp;
			if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
				throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
			} else {
				gl.validateProgram(program);
				if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
					throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
				} else {
					gl.useProgram(program);
					tmp = program;
				}
			}
			this.program = tmp;
			var program = this.program;
			this.layoutPos = new trilateral2Lime_drawings_LayoutPos(600);
			this.createPen();
			this.pen.currentColor = -10079488;
			new trilateral2Lime_drawings_GreenSquare(this.pen,this.layoutPos);
			new trilateral2Lime_drawings_OrangeDavidStar(this.pen,this.layoutPos);
			new trilateral2Lime_drawings_IndigoCircle(this.pen,this.layoutPos);
			new trilateral2Lime_drawings_VioletRoundedRectangle(this.pen,this.layoutPos);
			new trilateral2Lime_drawings_YellowDiamond(this.pen,this.layoutPos);
			new trilateral2Lime_drawings_MidGreySquareOutline(this.pen,this.layoutPos);
			new trilateral2Lime_drawings_BlueRectangle(this.pen,this.layoutPos);
			new trilateral2Lime_drawings_RedRoundedRectangleOutline(this.pen,this.layoutPos);
			new trilateral2Lime_drawings_QuadCurveTest(this.pen,this.layoutPos);
			new trilateral2Lime_drawings_CubicCurveTest(this.pen,this.layoutPos);
			this.scaleToGL();
			var len = this.verts.length;
			this.noVertices = len;
			var tots = 2 * len + 3 * len;
			var array = null;
			var view = null;
			var buffer = null;
			var len1 = null;
			var this1;
			if(tots != null) {
				this1 = new Float32Array(tots);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len1 == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len1);
				}
			} else {
				this1 = null;
			}
			var data = this1;
			var count = 0;
			var colCounter = 0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var this1 = this.verts;
				this1[0] = i;
				if(this1[0] > this1[1] - 1) {
					this1[1] = this1[0];
				}
				data[count++] = geom_flat_f32_Float32FlatTriangle.get_ax(this.verts);
				data[count++] = geom_flat_f32_Float32FlatTriangle.get_ay(this.verts);
				var this2 = this.cols;
				this2[0] = colCounter;
				if(this2[0] > this2[1] - 1) {
					this2[1] = this2[0];
				}
				data[count++] = geom_flat_f32_Float32FlatRGBA.get_red(this.cols);
				var this3 = this.cols;
				data[count++] = this3[(this3[0] | 0) * 4 + 1 + 2];
				var this4 = this.cols;
				data[count++] = this4[(this4[0] | 0) * 4 + 2 + 2];
				++colCounter;
				data[count++] = geom_flat_f32_Float32FlatTriangle.get_bx(this.verts);
				data[count++] = geom_flat_f32_Float32FlatTriangle.get_by(this.verts);
				var this5 = this.cols;
				this5[0] = colCounter;
				if(this5[0] > this5[1] - 1) {
					this5[1] = this5[0];
				}
				data[count++] = geom_flat_f32_Float32FlatRGBA.get_red(this.cols);
				var this6 = this.cols;
				data[count++] = this6[(this6[0] | 0) * 4 + 1 + 2];
				var this7 = this.cols;
				data[count++] = this7[(this7[0] | 0) * 4 + 2 + 2];
				++colCounter;
				data[count++] = geom_flat_f32_Float32FlatTriangle.get_cx(this.verts);
				data[count++] = geom_flat_f32_Float32FlatTriangle.get_cy(this.verts);
				var this8 = this.cols;
				this8[0] = colCounter;
				if(this8[0] > this8[1] - 1) {
					this8[1] = this8[0];
				}
				data[count++] = geom_flat_f32_Float32FlatRGBA.get_red(this.cols);
				var this9 = this.cols;
				data[count++] = this9[(this9[0] | 0) * 4 + 1 + 2];
				var this10 = this.cols;
				data[count++] = this10[(this10[0] | 0) * 4 + 2 + 2];
				++colCounter;
			}
			var buf = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,buf);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);
			var vbo = buf;
			var posLoc = gl.getAttribLocation(program,"vertexPosition");
			var colorLoc = gl.getAttribLocation(program,"vertexColor");
			gl.vertexAttribPointer(posLoc,2,gl.FLOAT,false,20,0);
			gl.vertexAttribPointer(colorLoc,3,gl.FLOAT,false,20,8);
			gl.enableVertexAttribArray(posLoc);
			gl.enableVertexAttribArray(colorLoc);
			break;
		case 5:
			var program = gl.createProgram();
			var shader = gl.createShader(gl.VERTEX_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec2 aVertexPosition;" + "attribute vec2 aTexCoord;" + "uniform mat4 uMatrix;" + "varying vec2 vTexCoord;" + "void main (void) {" + "vTexCoord = aTexCoord;" + "gl_Position = uMatrix * vec4 (aVertexPosition, 0.0, 1.0);" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			var shader = gl.createShader(gl.FRAGMENT_SHADER);
			gl.shaderSource(shader,"precision mediump float;" + "varying vec2 vTexCoord;" + "uniform sampler2D uImage0;" + "void main (void) {" + "gl_FragColor = texture2D( uImage0, vTexCoord );" + "}");
			gl.compileShader(shader);
			var tmp;
			if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
				throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
			} else {
				tmp = shader;
			}
			gl.attachShader(program,tmp);
			gl.linkProgram(program);
			var tmp;
			if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
				throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
			} else {
				gl.validateProgram(program);
				if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
					throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
				} else {
					gl.useProgram(program);
					tmp = program;
				}
			}
			this.program = tmp;
			var program = this.program;
			haxe_Log.trace("not implemented yet",{ fileName : "Source/trilateral2Lime/app/AppGL.hx", lineNumber : 281, className : "trilateral2Lime.app.AppGL", methodName : "createTexture"});
			break;
		}
	}
	,render: function(gl) {
		gl.viewport(0,0,this.width,this.height);
		gl.clearColor(0.0,0.0,0.0,1.0);
		gl.clear(gl.COLOR_BUFFER_BIT);
		if(this.first) {
			haxe_Log.trace("rendering triangles ( first time )",{ fileName : "Source/trilateral2Lime/app/AppGL.hx", lineNumber : 125, className : "trilateral2Lime.app.AppGL", methodName : "render"});
		}
		gl.useProgram(this.program);
		switch(this.shaderTest) {
		case 1:case 4:
			break;
		default:
			this.createMatrix(gl,this.program,"modelViewProjection");
		}
		gl.drawArrays(gl.TRIANGLES,0,this.noVertices);
		if(this.first) {
			this.first = false;
		}
	}
	,doProjection: function(gl) {
		switch(this.shaderTest) {
		case 1:case 4:
			break;
		default:
			this.createMatrix(gl,this.program,"modelViewProjection");
		}
	}
	,createIndices: function() {
		var array = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this1 = new Uint16Array(3);
		this.ind = this1;
		this.ind[0] = 0;
		this.ind[1] = 1;
		this.ind[2] = 2;
		return this.ind;
	}
	,createColor1: function(gl,program) {
		var elements = null;
		var array = [150.,225.,0.0,450.,225.,0.0,300.,467.7050982,0.0];
		var view = null;
		var buffer = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Float32Array(buffer,0);
			} else {
				this1 = new Float32Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		var p = this1;
		var l = p.length;
		var _g = 0;
		var _g1 = l;
		while(_g < _g1) {
			var i = _g++;
			haxe_Log.trace(p[i],{ fileName : "Source/trilateral2Lime/app/AppGL.hx", lineNumber : 169, className : "trilateral2Lime.app.AppGL", methodName : "createColor1"});
		}
		var elements = null;
		var array = [150.,225.,0.0,450.,225.,0.0,300.,467.7050982,0.0];
		var view = null;
		var buffer = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Float32Array(buffer,0);
			} else {
				this1 = new Float32Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		var elements = null;
		var array = [1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0];
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		var noPos = 3;
		var noCols = 4;
		if(noCols == null) {
			noCols = 4;
		}
		if(noPos == null) {
			noPos = 3;
		}
		var buf = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,buf);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
		var bufferPos = buf;
		var buf = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,buf);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this2,gl.STATIC_DRAW);
		var bufferCol = buf;
		var posLoc = gl.getAttribLocation(program,"vertexPosition");
		var colorLoc = gl.getAttribLocation(program,"vertexColor");
		gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
		gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
		gl.enableVertexAttribArray(posLoc);
		gl.enableVertexAttribArray(colorLoc);
	}
	,createTrilateral2: function(gl,program) {
		this.layoutPos = new trilateral2Lime_drawings_LayoutPos(600);
		this.createPen();
		this.pen.currentColor = -10079488;
		new trilateral2Lime_drawings_GreenSquare(this.pen,this.layoutPos);
		new trilateral2Lime_drawings_OrangeDavidStar(this.pen,this.layoutPos);
		new trilateral2Lime_drawings_IndigoCircle(this.pen,this.layoutPos);
		new trilateral2Lime_drawings_VioletRoundedRectangle(this.pen,this.layoutPos);
		new trilateral2Lime_drawings_YellowDiamond(this.pen,this.layoutPos);
		new trilateral2Lime_drawings_MidGreySquareOutline(this.pen,this.layoutPos);
		new trilateral2Lime_drawings_BlueRectangle(this.pen,this.layoutPos);
		new trilateral2Lime_drawings_RedRoundedRectangleOutline(this.pen,this.layoutPos);
		new trilateral2Lime_drawings_QuadCurveTest(this.pen,this.layoutPos);
		new trilateral2Lime_drawings_CubicCurveTest(this.pen,this.layoutPos);
		this.scaleToGL();
		var len = this.verts.length;
		this.noVertices = len;
		var tots = 2 * len + 3 * len;
		var array = null;
		var view = null;
		var buffer = null;
		var len1 = null;
		var this1;
		if(tots != null) {
			this1 = new Float32Array(tots);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(len1 == null) {
				this1 = new Float32Array(buffer,0);
			} else {
				this1 = new Float32Array(buffer,0,len1);
			}
		} else {
			this1 = null;
		}
		var data = this1;
		var count = 0;
		var colCounter = 0;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var this1 = this.verts;
			this1[0] = i;
			if(this1[0] > this1[1] - 1) {
				this1[1] = this1[0];
			}
			data[count++] = geom_flat_f32_Float32FlatTriangle.get_ax(this.verts);
			data[count++] = geom_flat_f32_Float32FlatTriangle.get_ay(this.verts);
			var this2 = this.cols;
			this2[0] = colCounter;
			if(this2[0] > this2[1] - 1) {
				this2[1] = this2[0];
			}
			data[count++] = geom_flat_f32_Float32FlatRGBA.get_red(this.cols);
			var this3 = this.cols;
			data[count++] = this3[(this3[0] | 0) * 4 + 1 + 2];
			var this4 = this.cols;
			data[count++] = this4[(this4[0] | 0) * 4 + 2 + 2];
			++colCounter;
			data[count++] = geom_flat_f32_Float32FlatTriangle.get_bx(this.verts);
			data[count++] = geom_flat_f32_Float32FlatTriangle.get_by(this.verts);
			var this5 = this.cols;
			this5[0] = colCounter;
			if(this5[0] > this5[1] - 1) {
				this5[1] = this5[0];
			}
			data[count++] = geom_flat_f32_Float32FlatRGBA.get_red(this.cols);
			var this6 = this.cols;
			data[count++] = this6[(this6[0] | 0) * 4 + 1 + 2];
			var this7 = this.cols;
			data[count++] = this7[(this7[0] | 0) * 4 + 2 + 2];
			++colCounter;
			data[count++] = geom_flat_f32_Float32FlatTriangle.get_cx(this.verts);
			data[count++] = geom_flat_f32_Float32FlatTriangle.get_cy(this.verts);
			var this8 = this.cols;
			this8[0] = colCounter;
			if(this8[0] > this8[1] - 1) {
				this8[1] = this8[0];
			}
			data[count++] = geom_flat_f32_Float32FlatRGBA.get_red(this.cols);
			var this9 = this.cols;
			data[count++] = this9[(this9[0] | 0) * 4 + 1 + 2];
			var this10 = this.cols;
			data[count++] = this10[(this10[0] | 0) * 4 + 2 + 2];
			++colCounter;
		}
		var buf = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,buf);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);
		var vbo = buf;
		var posLoc = gl.getAttribLocation(program,"vertexPosition");
		var colorLoc = gl.getAttribLocation(program,"vertexColor");
		gl.vertexAttribPointer(posLoc,2,gl.FLOAT,false,20,0);
		gl.vertexAttribPointer(colorLoc,3,gl.FLOAT,false,20,8);
		gl.enableVertexAttribArray(posLoc);
		gl.enableVertexAttribArray(colorLoc);
	}
	,createInterleave: function(gl,program) {
		var elements = null;
		var array = [0.0,0.5,1.0,1.0,0.4,-0.5,-0.5,0.3,0.1,0.8,0.5,-0.5,1.0,0.0,0.5];
		var view = null;
		var buffer = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Float32Array(buffer,0);
			} else {
				this1 = new Float32Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		var data = this1;
		var buf = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,buf);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);
		var vbo = buf;
		var posLoc = gl.getAttribLocation(program,"vertexPosition");
		var colorLoc = gl.getAttribLocation(program,"vertexColor");
		gl.vertexAttribPointer(posLoc,2,gl.FLOAT,false,20,0);
		gl.vertexAttribPointer(colorLoc,3,gl.FLOAT,false,20,8);
		gl.enableVertexAttribArray(posLoc);
		gl.enableVertexAttribArray(colorLoc);
	}
	,createMatrix: function(gl,program,matrixNom) {
		var matrixUniform = gl.getUniformLocation(program,matrixNom);
		var matrix = lime_math_Matrix4._new();
		lime_math_Matrix4.createOrtho(matrix,0,this.width,this.height,0,-1000,1000);
		lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,matrixUniform,false,matrix);
	}
	,createColorDirect: function(gl,program) {
		var elements = null;
		var array = [0.0,0.5,0.5,-0.25,-0.5,0.5,0.25,-0.5,0.5,0.0,0.5,0.0,-0.25,-0.5,0.0,0.25,-0.5,0.0,0.0,0.5,-0.5,-0.25,-0.5,-0.5,0.25,-0.5,-0.5];
		var view = null;
		var buffer = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Float32Array(buffer,0);
			} else {
				this1 = new Float32Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		var pos = this1;
		var elements = null;
		var array = [1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0];
		var view = null;
		var buffer = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Float32Array(buffer,0);
			} else {
				this1 = new Float32Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		var col = this1;
		var posLoc = gl.getAttribLocation(program,"vertexPosition");
		var colorLoc = gl.getAttribLocation(program,"vertexColor");
		var p = 0;
		var c = 0;
		p = 0;
		gl.vertexAttrib3f(posLoc,pos[p],pos[p + 1],pos[p + 2]);
		c = 0;
		gl.vertexAttrib4f(posLoc,col[c],col[c + 1],col[c + 2],col[c + 3]);
		p = 3;
		gl.vertexAttrib3f(posLoc,pos[p],pos[p + 1],pos[p + 2]);
		c = 4;
		gl.vertexAttrib4f(posLoc,col[c],col[c + 1],col[c + 2],col[c + 3]);
		p = 6;
		gl.vertexAttrib3f(posLoc,pos[p],pos[p + 1],pos[p + 2]);
		c = 8;
		gl.vertexAttrib4f(posLoc,col[c],col[c + 1],col[c + 2],col[c + 3]);
		gl.enableVertexAttribArray(posLoc);
		gl.enableVertexAttribArray(colorLoc);
	}
	,createColor3: function(gl,program) {
		this.noVertices = 9;
		var elements = null;
		var array = [0.0,0.5,0.5,-0.25,-0.5,0.5,0.25,-0.5,0.5,0.0,0.5,0.0,-0.25,-0.5,0.0,0.25,-0.5,0.0,0.0,0.5,-0.5,-0.25,-0.5,-0.5,0.25,-0.5,-0.5];
		var view = null;
		var buffer = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Float32Array(buffer,0);
			} else {
				this1 = new Float32Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		var elements = null;
		var array = [1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0];
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		var noPos = 3;
		var noCols = 4;
		if(noCols == null) {
			noCols = 4;
		}
		if(noPos == null) {
			noPos = 3;
		}
		var buf = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,buf);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
		var bufferPos = buf;
		var buf = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,buf);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this2,gl.STATIC_DRAW);
		var bufferCol = buf;
		var posLoc = gl.getAttribLocation(program,"vertexPosition");
		var colorLoc = gl.getAttribLocation(program,"vertexColor");
		gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
		gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
		gl.enableVertexAttribArray(posLoc);
		gl.enableVertexAttribArray(colorLoc);
	}
	,createTexture: function(gl,program) {
		haxe_Log.trace("not implemented yet",{ fileName : "Source/trilateral2Lime/app/AppGL.hx", lineNumber : 281, className : "trilateral2Lime.app.AppGL", methodName : "createTexture"});
	}
	,createPen: function() {
		var verts = this.verts;
		var cols = this.cols;
		var _e = verts;
		var _e1 = verts;
		var _e2 = verts;
		var _e3 = verts;
		var _e4 = verts;
		var _e5 = verts;
		var _e6 = verts;
		var _e7 = verts;
		var _e8 = verts;
		var _e9 = verts;
		var _e10 = cols;
		var tmp = function(colorA,colorB,colorC) {
			geom_flat_f32_Float32FlatRGBA.set_red(_e10,(colorA >> 16 & 255) / 255);
			var v = (colorA & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 2 + 2] = v;
			var v = (colorA >> 8 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 1 + 2] = v;
			var v = (colorA >> 24 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 3 + 2] = v;
			var pos_ = _e10[0] + 1.;
			_e10[0] = pos_;
			if(_e10[0] > _e10[1] - 1) {
				_e10[1] = _e10[0];
			}
			geom_flat_f32_Float32FlatRGBA.set_red(_e10,(colorB >> 16 & 255) / 255);
			var v = (colorB & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 2 + 2] = v;
			var v = (colorB >> 8 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 1 + 2] = v;
			var v = (colorB >> 24 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 3 + 2] = v;
			var pos_ = _e10[0] + 1.;
			_e10[0] = pos_;
			if(_e10[0] > _e10[1] - 1) {
				_e10[1] = _e10[0];
			}
			geom_flat_f32_Float32FlatRGBA.set_red(_e10,(colorC >> 16 & 255) / 255);
			var v = (colorC & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 2 + 2] = v;
			var v = (colorC >> 8 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 1 + 2] = v;
			var v = (colorC >> 24 & 255) / 255;
			_e10[(_e10[0] | 0) * 4 + 3 + 2] = v;
			var pos_ = _e10[0] + 1.;
			_e10[0] = pos_;
			if(_e10[0] > _e10[1] - 1) {
				_e10[1] = _e10[0];
			}
		};
		var _e11 = cols;
		var tmp1 = function(color,times) {
			var _g = 0;
			var _g1 = times;
			while(_g < _g1) {
				var i = _g++;
				geom_flat_f32_Float32FlatRGBA.set_red(_e11,(color >> 16 & 255) / 255);
				var v = (color & 255) / 255;
				_e11[(_e11[0] | 0) * 4 + 2 + 2] = v;
				var v1 = (color >> 8 & 255) / 255;
				_e11[(_e11[0] | 0) * 4 + 1 + 2] = v1;
				var v2 = (color >> 24 & 255) / 255;
				_e11[(_e11[0] | 0) * 4 + 3 + 2] = v2;
				var pos_ = _e11[0] + 1.;
				_e11[0] = pos_;
				if(_e11[0] > _e11[1] - 1) {
					_e11[1] = _e11[0];
				}
				geom_flat_f32_Float32FlatRGBA.set_red(_e11,(color >> 16 & 255) / 255);
				var v3 = (color & 255) / 255;
				_e11[(_e11[0] | 0) * 4 + 2 + 2] = v3;
				var v4 = (color >> 8 & 255) / 255;
				_e11[(_e11[0] | 0) * 4 + 1 + 2] = v4;
				var v5 = (color >> 24 & 255) / 255;
				_e11[(_e11[0] | 0) * 4 + 3 + 2] = v5;
				var pos_1 = _e11[0] + 1.;
				_e11[0] = pos_1;
				if(_e11[0] > _e11[1] - 1) {
					_e11[1] = _e11[0];
				}
				geom_flat_f32_Float32FlatRGBA.set_red(_e11,(color >> 16 & 255) / 255);
				var v6 = (color & 255) / 255;
				_e11[(_e11[0] | 0) * 4 + 2 + 2] = v6;
				var v7 = (color >> 8 & 255) / 255;
				_e11[(_e11[0] | 0) * 4 + 1 + 2] = v7;
				var v8 = (color >> 24 & 255) / 255;
				_e11[(_e11[0] | 0) * 4 + 3 + 2] = v8;
				var pos_2 = _e11[0] + 1.;
				_e11[0] = pos_2;
				if(_e11[0] > _e11[1] - 1) {
					_e11[1] = _e11[0];
				}
			}
		};
		var _e12 = cols;
		var tmp2 = function() {
			var a = Math.round(_e12[(_e12[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(_e12) * 255) << 16 | Math.round(_e12[(_e12[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(_e12[(_e12[0] | 0) * 4 + 2 + 2] * 255);
			var pos_ = _e12[0] + 1.;
			_e12[0] = pos_;
			if(_e12[0] > _e12[1] - 1) {
				_e12[1] = _e12[0];
			}
			var b = Math.round(_e12[(_e12[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(_e12) * 255) << 16 | Math.round(_e12[(_e12[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(_e12[(_e12[0] | 0) * 4 + 2 + 2] * 255);
			var pos_ = _e12[0] + 1.;
			_e12[0] = pos_;
			if(_e12[0] > _e12[1] - 1) {
				_e12[1] = _e12[0];
			}
			var c = Math.round(_e12[(_e12[0] | 0) * 4 + 3 + 2] * 255) << 24 | Math.round(geom_flat_f32_Float32FlatRGBA.get_red(_e12) * 255) << 16 | Math.round(_e12[(_e12[0] | 0) * 4 + 1 + 2] * 255) << 8 | Math.round(_e12[(_e12[0] | 0) * 4 + 2 + 2] * 255);
			var pos_ = _e12[0] + 1.;
			_e12[0] = pos_;
			if(_e12[0] > _e12[1] - 1) {
				_e12[1] = _e12[0];
			}
			return geom_obj_TriColors._new(new geom_structure_TriInt(a,b,c));
		};
		var _e13 = verts;
		var _e14 = verts;
		var tmp3 = function(pos_) {
			_e14[0] = pos_;
			if(_e14[0] > _e14[1] - 1) {
				_e14[1] = _e14[0];
			}
			return pos_;
		};
		var _e15 = verts;
		var tmp4 = function() {
			return geom_flat_f32_Float32Flat.get_size(_e15);
		};
		var _e16 = verts;
		var tmp5 = function(id) {
			return geom_flat_f32_Float32Flat.set_size(_e16,id);
		};
		this.pen = new trilateral2_Pen({ triangle : function(ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_) {
			return geom_flat_f32_Float32FlatTriangle.triangle(_e,ax_,ay_,az_,bx_,by_,bz_,cx_,cy_,cz_);
		}, transform : function(m) {
			geom_flat_f32_Float32FlatTriangle.transform(_e1,m);
		}, transformRange : function(m,start,end) {
			geom_flat_f32_Float32FlatTriangle.transformRange(_e2,m,start,end);
		}, getTri3D : function() {
			var this1 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_ax(_e3),geom_flat_f32_Float32FlatTriangle.get_ay(_e3),geom_flat_f32_Float32FlatTriangle.get_az(_e3),1.);
			var pa = this1;
			var this1 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_bx(_e3),geom_flat_f32_Float32FlatTriangle.get_by(_e3),geom_flat_f32_Float32FlatTriangle.get_bz(_e3),1.);
			var pb = this1;
			var this1 = new geom_structure_Mat1x4(geom_flat_f32_Float32FlatTriangle.get_cx(_e3),geom_flat_f32_Float32FlatTriangle.get_cy(_e3),geom_flat_f32_Float32FlatTriangle.get_cz(_e3),1.);
			var pc = this1;
			return new geom_structure_TriVec(pa,pb,pc);
		}, next : function() {
			var pos_ = _e4[0] + 1.;
			_e4[0] = pos_;
			if(_e4[0] > _e4[1] - 1) {
				_e4[1] = _e4[0];
			}
			return _e4[0];
		}, hasNext : function() {
			return _e5[0] < geom_flat_f32_Float32Flat.get_size(_e5);
		}, get_pos : function() {
			return _e6[0];
		}, set_pos : function(pos_) {
			_e7[0] = pos_;
			if(_e7[0] > _e7[1] - 1) {
				_e7[1] = _e7[0];
			}
			return pos_;
		}, get_size : function() {
			return geom_flat_f32_Float32Flat.get_size(_e8);
		}, set_size : function(id) {
			return geom_flat_f32_Float32Flat.set_size(_e9,id);
		}},{ cornerColors : tmp, colorTriangles : tmp1, getTriColors : tmp2, get_pos : function() {
			return _e13[0];
		}, set_pos : tmp3, get_size : tmp4, set_size : tmp5});
		this.pen.transformMatrix = this.scaleToGL();
		trilateral2_Shaper.transformMatrix = this.scaleToGL();
	}
	,scaleToGL: function() {
		this.scale = 0.00166666666666666677;
		var this1 = new geom_structure_Mat1x4(this.scale,-this.scale,this.scale,1.);
		var v = this1;
		var this1 = new geom_structure_Mat4x3(1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.);
		var this2 = this1;
		var this1 = new geom_structure_Mat4x3(1.,0.,0.,-1.,0.,1.,0.,1.,0.,0.,1.,0.);
		var s = this1;
		var this1 = new geom_structure_Mat4x3(this2.a * s.a + this2.b * s.e + this2.c * s.i,this2.a * s.b + this2.b * s.f + this2.c * s.j,this2.a * s.c + this2.b * s.g + this2.c * s.k,this2.a * s.d + this2.b * s.h + this2.c * s.l + this2.d,this2.e * s.a + this2.f * s.e + this2.g * s.i,this2.e * s.b + this2.f * s.f + this2.g * s.j,this2.e * s.c + this2.f * s.g + this2.g * s.k,this2.e * s.d + this2.f * s.h + this2.g * s.l + this2.h,this2.i * s.a + this2.j * s.e + this2.k * s.i,this2.i * s.b + this2.j * s.f + this2.k * s.j,this2.i * s.c + this2.j * s.g + this2.k * s.k,this2.i * s.d + this2.j * s.h + this2.k * s.l + this2.l);
		var this2 = this1;
		var this1 = new geom_structure_Mat4x3(this2.a * v.x,this2.b,this2.c,this2.d,this2.e,this2.f * v.y,this2.g,this2.h,this2.i,this2.j,this2.k * v.z,this2.l);
		return this1;
	}
	,__class__: trilateral2Lime_app_AppGL
};
var trilateral2Lime_app_Main = function() {
	this.runSeconds = 0;
	this.ready = false;
	lime_app_Application.call(this);
};
$hxClasses["trilateral2Lime.app.Main"] = trilateral2Lime_app_Main;
trilateral2Lime_app_Main.__name__ = "trilateral2Lime.app.Main";
trilateral2Lime_app_Main.__super__ = lime_app_Application;
trilateral2Lime_app_Main.prototype = $extend(lime_app_Application.prototype,{
	onWindowCreate: function() {
		var context = this.__window.context;
		this.other = new trilateral2Lime_app_NonGL(this.__window.__width,this.__window.__height);
		this.appGL = new trilateral2Lime_app_AppGL(this.__window.__width,this.__window.__height);
		switch(context.type) {
		case "opengl":case "opengles":case "webgl":
			var _this = this.appGL;
			var gl = context.webgl;
			switch(_this.shaderTest) {
			case 0:
				var program = gl.createProgram();
				var shader = gl.createShader(gl.VERTEX_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec3 vertexPosition;" + "attribute vec4 vertexColor;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(vertexPosition, 1.);" + " vcol = vertexColor;" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				var shader = gl.createShader(gl.FRAGMENT_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec4 vcol;" + "void main(void) {" + "gl_FragColor = vcol;" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				gl.linkProgram(program);
				var tmp;
				if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
					throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
				} else {
					gl.validateProgram(program);
					if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
						throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
					} else {
						gl.useProgram(program);
						tmp = program;
					}
				}
				_this.program = tmp;
				var program = _this.program;
				var elements = null;
				var array = [0.0,0.5,0.5,-0.25,-0.5,0.5,0.25,-0.5,0.5,0.0,0.5,0.0,-0.25,-0.5,0.0,0.25,-0.5,0.0,0.0,0.5,-0.5,-0.25,-0.5,-0.5,0.25,-0.5,-0.5];
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				var pos = this1;
				var elements = null;
				var array = [1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0];
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				var col = this1;
				var posLoc = gl.getAttribLocation(program,"vertexPosition");
				var colorLoc = gl.getAttribLocation(program,"vertexColor");
				var p = 0;
				var c = 0;
				p = 0;
				gl.vertexAttrib3f(posLoc,pos[p],pos[p + 1],pos[p + 2]);
				c = 0;
				gl.vertexAttrib4f(posLoc,col[c],col[c + 1],col[c + 2],col[c + 3]);
				p = 3;
				gl.vertexAttrib3f(posLoc,pos[p],pos[p + 1],pos[p + 2]);
				c = 4;
				gl.vertexAttrib4f(posLoc,col[c],col[c + 1],col[c + 2],col[c + 3]);
				p = 6;
				gl.vertexAttrib3f(posLoc,pos[p],pos[p + 1],pos[p + 2]);
				c = 8;
				gl.vertexAttrib4f(posLoc,col[c],col[c + 1],col[c + 2],col[c + 3]);
				gl.enableVertexAttribArray(posLoc);
				gl.enableVertexAttribArray(colorLoc);
				break;
			case 1:
				var program = gl.createProgram();
				var shader = gl.createShader(gl.VERTEX_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec2 vertexPosition;" + "attribute vec3 vertexColor;" + "varying vec3 vColor;" + "void main() {" + "gl_Position = vec4(vertexPosition, 0.0, 1.0);" + "vColor = vertexColor;" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				var shader = gl.createShader(gl.FRAGMENT_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec3 vColor;" + "void main() {" + "gl_FragColor = vec4( vColor, 1.0 );" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				gl.linkProgram(program);
				var tmp;
				if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
					throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
				} else {
					gl.validateProgram(program);
					if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
						throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
					} else {
						gl.useProgram(program);
						tmp = program;
					}
				}
				_this.program = tmp;
				var program = _this.program;
				var elements = null;
				var array = [0.0,0.5,1.0,1.0,0.4,-0.5,-0.5,0.3,0.1,0.8,0.5,-0.5,1.0,0.0,0.5];
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				var data = this1;
				var buf = gl.createBuffer();
				gl.bindBuffer(gl.ARRAY_BUFFER,buf);
				lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);
				var vbo = buf;
				var posLoc = gl.getAttribLocation(program,"vertexPosition");
				var colorLoc = gl.getAttribLocation(program,"vertexColor");
				gl.vertexAttribPointer(posLoc,2,gl.FLOAT,false,20,0);
				gl.vertexAttribPointer(colorLoc,3,gl.FLOAT,false,20,8);
				gl.enableVertexAttribArray(posLoc);
				gl.enableVertexAttribArray(colorLoc);
				break;
			case 2:
				var program = gl.createProgram();
				var shader = gl.createShader(gl.VERTEX_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec3 vertexPosition;" + "attribute vec4 vertexColor;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(vertexPosition, 1.);" + " vcol = vertexColor;" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				var shader = gl.createShader(gl.FRAGMENT_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec4 vcol;" + "void main(void) {" + "gl_FragColor = vcol;" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				gl.linkProgram(program);
				var tmp;
				if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
					throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
				} else {
					gl.validateProgram(program);
					if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
						throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
					} else {
						gl.useProgram(program);
						tmp = program;
					}
				}
				_this.program = tmp;
				var indices = _this.createIndices();
				var indexBuffer = gl.createBuffer();
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,indexBuffer);
				lime_graphics_WebGLRenderContext.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,indices,gl.STATIC_DRAW);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,null);
				_this.createMatrix(gl,_this.program,"modelViewProjection");
				var program = _this.program;
				var elements = null;
				var array = [150.,225.,0.0,450.,225.,0.0,300.,467.7050982,0.0];
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				var p = this1;
				var l = p.length;
				var _g = 0;
				var _g1 = l;
				while(_g < _g1) {
					var i = _g++;
					haxe_Log.trace(p[i],{ fileName : "Source/trilateral2Lime/app/AppGL.hx", lineNumber : 169, className : "trilateral2Lime.app.AppGL", methodName : "createColor1"});
				}
				var elements = null;
				var array = [150.,225.,0.0,450.,225.,0.0,300.,467.7050982,0.0];
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				var elements = null;
				var array = [1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0];
				var view = null;
				var buffer = null;
				var len = null;
				var this2;
				if(elements != null) {
					this2 = new Float32Array(elements);
				} else if(array != null) {
					this2 = new Float32Array(array);
				} else if(view != null) {
					this2 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this2 = new Float32Array(buffer,0);
					} else {
						this2 = new Float32Array(buffer,0,len);
					}
				} else {
					this2 = null;
				}
				var noPos = 3;
				var noCols = 4;
				if(noCols == null) {
					noCols = 4;
				}
				if(noPos == null) {
					noPos = 3;
				}
				var buf = gl.createBuffer();
				gl.bindBuffer(gl.ARRAY_BUFFER,buf);
				lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
				var bufferPos = buf;
				var buf = gl.createBuffer();
				gl.bindBuffer(gl.ARRAY_BUFFER,buf);
				lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this2,gl.STATIC_DRAW);
				var bufferCol = buf;
				var posLoc = gl.getAttribLocation(program,"vertexPosition");
				var colorLoc = gl.getAttribLocation(program,"vertexColor");
				gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
				gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
				gl.enableVertexAttribArray(posLoc);
				gl.enableVertexAttribArray(colorLoc);
				break;
			case 3:
				var program = gl.createProgram();
				var shader = gl.createShader(gl.VERTEX_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec3 vertexPosition;" + "attribute vec4 vertexColor;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(vertexPosition, 1.);" + " vcol = vertexColor;" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				var shader = gl.createShader(gl.FRAGMENT_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec4 vcol;" + "void main(void) {" + "gl_FragColor = vcol;" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				gl.linkProgram(program);
				var tmp;
				if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
					throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
				} else {
					gl.validateProgram(program);
					if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
						throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
					} else {
						gl.useProgram(program);
						tmp = program;
					}
				}
				_this.program = tmp;
				var program = _this.program;
				_this.noVertices = 9;
				var elements = null;
				var array = [0.0,0.5,0.5,-0.25,-0.5,0.5,0.25,-0.5,0.5,0.0,0.5,0.0,-0.25,-0.5,0.0,0.25,-0.5,0.0,0.0,0.5,-0.5,-0.25,-0.5,-0.5,0.25,-0.5,-0.5];
				var view = null;
				var buffer = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len);
					}
				} else {
					this1 = null;
				}
				var elements = null;
				var array = [1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0];
				var view = null;
				var buffer = null;
				var len = null;
				var this2;
				if(elements != null) {
					this2 = new Float32Array(elements);
				} else if(array != null) {
					this2 = new Float32Array(array);
				} else if(view != null) {
					this2 = new Float32Array(view);
				} else if(buffer != null) {
					if(len == null) {
						this2 = new Float32Array(buffer,0);
					} else {
						this2 = new Float32Array(buffer,0,len);
					}
				} else {
					this2 = null;
				}
				var noPos = 3;
				var noCols = 4;
				if(noCols == null) {
					noCols = 4;
				}
				if(noPos == null) {
					noPos = 3;
				}
				var buf = gl.createBuffer();
				gl.bindBuffer(gl.ARRAY_BUFFER,buf);
				lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this1,gl.STATIC_DRAW);
				var bufferPos = buf;
				var buf = gl.createBuffer();
				gl.bindBuffer(gl.ARRAY_BUFFER,buf);
				lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,this2,gl.STATIC_DRAW);
				var bufferCol = buf;
				var posLoc = gl.getAttribLocation(program,"vertexPosition");
				var colorLoc = gl.getAttribLocation(program,"vertexColor");
				gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
				gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
				gl.enableVertexAttribArray(posLoc);
				gl.enableVertexAttribArray(colorLoc);
				break;
			case 4:
				var program = gl.createProgram();
				var shader = gl.createShader(gl.VERTEX_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec2 vertexPosition;" + "attribute vec3 vertexColor;" + "varying vec3 vColor;" + "void main() {" + "gl_Position = vec4(vertexPosition, 0.0, 1.0);" + "vColor = vertexColor;" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				var shader = gl.createShader(gl.FRAGMENT_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "varying vec3 vColor;" + "void main() {" + "gl_FragColor = vec4( vColor, 1.0 );" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				gl.linkProgram(program);
				var tmp;
				if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
					throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
				} else {
					gl.validateProgram(program);
					if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
						throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
					} else {
						gl.useProgram(program);
						tmp = program;
					}
				}
				_this.program = tmp;
				var program = _this.program;
				_this.layoutPos = new trilateral2Lime_drawings_LayoutPos(600);
				_this.createPen();
				_this.pen.currentColor = -10079488;
				new trilateral2Lime_drawings_GreenSquare(_this.pen,_this.layoutPos);
				new trilateral2Lime_drawings_OrangeDavidStar(_this.pen,_this.layoutPos);
				new trilateral2Lime_drawings_IndigoCircle(_this.pen,_this.layoutPos);
				new trilateral2Lime_drawings_VioletRoundedRectangle(_this.pen,_this.layoutPos);
				new trilateral2Lime_drawings_YellowDiamond(_this.pen,_this.layoutPos);
				new trilateral2Lime_drawings_MidGreySquareOutline(_this.pen,_this.layoutPos);
				new trilateral2Lime_drawings_BlueRectangle(_this.pen,_this.layoutPos);
				new trilateral2Lime_drawings_RedRoundedRectangleOutline(_this.pen,_this.layoutPos);
				new trilateral2Lime_drawings_QuadCurveTest(_this.pen,_this.layoutPos);
				new trilateral2Lime_drawings_CubicCurveTest(_this.pen,_this.layoutPos);
				_this.scaleToGL();
				var len = _this.verts.length;
				_this.noVertices = len;
				var tots = 2 * len + 3 * len;
				var array = null;
				var view = null;
				var buffer = null;
				var len1 = null;
				var this1;
				if(tots != null) {
					this1 = new Float32Array(tots);
				} else if(array != null) {
					this1 = new Float32Array(array);
				} else if(view != null) {
					this1 = new Float32Array(view);
				} else if(buffer != null) {
					if(len1 == null) {
						this1 = new Float32Array(buffer,0);
					} else {
						this1 = new Float32Array(buffer,0,len1);
					}
				} else {
					this1 = null;
				}
				var data = this1;
				var count = 0;
				var colCounter = 0;
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					var this1 = _this.verts;
					this1[0] = i;
					if(this1[0] > this1[1] - 1) {
						this1[1] = this1[0];
					}
					data[count++] = geom_flat_f32_Float32FlatTriangle.get_ax(_this.verts);
					data[count++] = geom_flat_f32_Float32FlatTriangle.get_ay(_this.verts);
					var this2 = _this.cols;
					this2[0] = colCounter;
					if(this2[0] > this2[1] - 1) {
						this2[1] = this2[0];
					}
					data[count++] = geom_flat_f32_Float32FlatRGBA.get_red(_this.cols);
					var this3 = _this.cols;
					data[count++] = this3[(this3[0] | 0) * 4 + 1 + 2];
					var this4 = _this.cols;
					data[count++] = this4[(this4[0] | 0) * 4 + 2 + 2];
					++colCounter;
					data[count++] = geom_flat_f32_Float32FlatTriangle.get_bx(_this.verts);
					data[count++] = geom_flat_f32_Float32FlatTriangle.get_by(_this.verts);
					var this5 = _this.cols;
					this5[0] = colCounter;
					if(this5[0] > this5[1] - 1) {
						this5[1] = this5[0];
					}
					data[count++] = geom_flat_f32_Float32FlatRGBA.get_red(_this.cols);
					var this6 = _this.cols;
					data[count++] = this6[(this6[0] | 0) * 4 + 1 + 2];
					var this7 = _this.cols;
					data[count++] = this7[(this7[0] | 0) * 4 + 2 + 2];
					++colCounter;
					data[count++] = geom_flat_f32_Float32FlatTriangle.get_cx(_this.verts);
					data[count++] = geom_flat_f32_Float32FlatTriangle.get_cy(_this.verts);
					var this8 = _this.cols;
					this8[0] = colCounter;
					if(this8[0] > this8[1] - 1) {
						this8[1] = this8[0];
					}
					data[count++] = geom_flat_f32_Float32FlatRGBA.get_red(_this.cols);
					var this9 = _this.cols;
					data[count++] = this9[(this9[0] | 0) * 4 + 1 + 2];
					var this10 = _this.cols;
					data[count++] = this10[(this10[0] | 0) * 4 + 2 + 2];
					++colCounter;
				}
				var buf = gl.createBuffer();
				gl.bindBuffer(gl.ARRAY_BUFFER,buf);
				lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);
				var vbo = buf;
				var posLoc = gl.getAttribLocation(program,"vertexPosition");
				var colorLoc = gl.getAttribLocation(program,"vertexColor");
				gl.vertexAttribPointer(posLoc,2,gl.FLOAT,false,20,0);
				gl.vertexAttribPointer(colorLoc,3,gl.FLOAT,false,20,8);
				gl.enableVertexAttribArray(posLoc);
				gl.enableVertexAttribArray(colorLoc);
				break;
			case 5:
				var program = gl.createProgram();
				var shader = gl.createShader(gl.VERTEX_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "precision mediump int;" + "attribute vec2 aVertexPosition;" + "attribute vec2 aTexCoord;" + "uniform mat4 uMatrix;" + "varying vec2 vTexCoord;" + "void main (void) {" + "vTexCoord = aTexCoord;" + "gl_Position = uMatrix * vec4 (aVertexPosition, 0.0, 1.0);" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				var shader = gl.createShader(gl.FRAGMENT_SHADER);
				gl.shaderSource(shader,"precision mediump float;" + "varying vec2 vTexCoord;" + "uniform sampler2D uImage0;" + "void main (void) {" + "gl_FragColor = texture2D( uImage0, vTexCoord );" + "}");
				gl.compileShader(shader);
				var tmp;
				if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
					throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
				} else {
					tmp = shader;
				}
				gl.attachShader(program,tmp);
				gl.linkProgram(program);
				var tmp;
				if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
					throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
				} else {
					gl.validateProgram(program);
					if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
						throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
					} else {
						gl.useProgram(program);
						tmp = program;
					}
				}
				_this.program = tmp;
				var program = _this.program;
				haxe_Log.trace("not implemented yet",{ fileName : "Source/trilateral2Lime/app/AppGL.hx", lineNumber : 281, className : "trilateral2Lime.app.AppGL", methodName : "createTexture"});
				break;
			}
			break;
		default:
			switch(context.type) {
			case "cairo":case "canvas":case "dom":case "flash":
				break;
			default:
			}
		}
		this.ready = true;
	}
	,update: function(deltaTime) {
		this.runSeconds = deltaTime / 1000;
		if(!this.ready) {
			return;
		}
	}
	,render: function(context) {
		if(!this.ready) {
			return;
		}
		switch(context.type) {
		case "opengl":case "opengles":case "webgl":
			var _this = this.appGL;
			var gl = context.webgl;
			gl.viewport(0,0,_this.width,_this.height);
			gl.clearColor(0.0,0.0,0.0,1.0);
			gl.clear(gl.COLOR_BUFFER_BIT);
			if(_this.first) {
				haxe_Log.trace("rendering triangles ( first time )",{ fileName : "Source/trilateral2Lime/app/AppGL.hx", lineNumber : 125, className : "trilateral2Lime.app.AppGL", methodName : "render"});
			}
			gl.useProgram(_this.program);
			switch(_this.shaderTest) {
			case 1:case 4:
				break;
			default:
				_this.createMatrix(gl,_this.program,"modelViewProjection");
			}
			gl.drawArrays(gl.TRIANGLES,0,_this.noVertices);
			if(_this.first) {
				_this.first = false;
			}
			break;
		default:
			switch(context.type) {
			case "cairo":case "canvas":case "dom":case "flash":
				break;
			default:
			}
		}
	}
	,__class__: trilateral2Lime_app_Main
});
var trilateral2Lime_app_NonGL = function(width_,height_) {
	this.width = width_;
	this.height = height_;
};
$hxClasses["trilateral2Lime.app.NonGL"] = trilateral2Lime_app_NonGL;
trilateral2Lime_app_NonGL.__name__ = "trilateral2Lime.app.NonGL";
trilateral2Lime_app_NonGL.prototype = {
	update: function() {
	}
	,setup: function(context) {
		switch(context.type) {
		case "cairo":case "canvas":case "dom":case "flash":
			break;
		default:
		}
	}
	,render: function(context) {
		switch(context.type) {
		case "cairo":case "canvas":case "dom":case "flash":
			break;
		default:
		}
	}
	,__class__: trilateral2Lime_app_NonGL
};
var trilateral2Lime_data_ColourPosition = function() { };
$hxClasses["trilateral2Lime.data.ColourPosition"] = trilateral2Lime_data_ColourPosition;
trilateral2Lime_data_ColourPosition.__name__ = "trilateral2Lime.data.ColourPosition";
trilateral2Lime_data_ColourPosition.tri2D = function() {
	var elements = null;
	var array = [0.0,0.5,1.0,1.0,0.4,-0.5,-0.5,0.3,0.1,0.8,0.5,-0.5,1.0,0.0,0.5];
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
trilateral2Lime_data_ColourPosition.positions = function() {
	var elements = null;
	var array = [-0.5,-0.25,0.0,0.5,-0.25,0.0,0.0,0.559016994,0.0];
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
trilateral2Lime_data_ColourPosition.othogPositions = function() {
	var elements = null;
	var array = [150.,225.,0.0,450.,225.,0.0,300.,467.7050982,0.0];
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
trilateral2Lime_data_ColourPosition.colors = function() {
	var elements = null;
	var array = [1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0];
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
trilateral2Lime_data_ColourPosition.positions3 = function() {
	var elements = null;
	var array = [0.0,0.5,0.5,-0.25,-0.5,0.5,0.25,-0.5,0.5,0.0,0.5,0.0,-0.25,-0.5,0.0,0.25,-0.5,0.0,0.0,0.5,-0.5,-0.25,-0.5,-0.5,0.25,-0.5,-0.5];
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
trilateral2Lime_data_ColourPosition.colors3 = function() {
	var elements = null;
	var array = [1.0,0.0,0.0,1.0,1.0,0.0,1.0,0.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,1.0,1.0];
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	return this1;
};
var trilateral2Lime_drawings_DrawingLayout = function(pen,layoutPos) {
	this.len = 0;
	this.size = 80;
	this.pen = pen;
	this.centre = layoutPos.centre;
	this.quarter = layoutPos.quarter;
	this.bottomLeft = layoutPos.bottomLeft;
	this.bottomRight = layoutPos.bottomRight;
	this.topLeft = layoutPos.topLeft;
	this.topRight = layoutPos.topRight;
	this.draw();
};
$hxClasses["trilateral2Lime.drawings.DrawingLayout"] = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_DrawingLayout.__name__ = "trilateral2Lime.drawings.DrawingLayout";
trilateral2Lime_drawings_DrawingLayout.prototype = {
	draw: function() {
	}
	,__class__: trilateral2Lime_drawings_DrawingLayout
};
var trilateral2Lime_drawings_BlueRectangle = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.BlueRectangle"] = trilateral2Lime_drawings_BlueRectangle;
trilateral2Lime_drawings_BlueRectangle.__name__ = "trilateral2Lime.drawings.BlueRectangle";
trilateral2Lime_drawings_BlueRectangle.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_BlueRectangle.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		var drawType = this.pen.drawType;
		var x = this.centre.x - 100;
		var ax = x;
		var ay = this.centre.y - 50;
		var bx = x + this.size * 2;
		var by = ay;
		var cx = bx;
		var cy = ay + this.size;
		var dx = x;
		var dy = cy;
		drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		var len = 2;
		var _this = this.pen;
		var color = -16776961;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,__class__: trilateral2Lime_drawings_BlueRectangle
});
var trilateral2Lime_drawings_CubicCurveTest = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.CubicCurveTest"] = trilateral2Lime_drawings_CubicCurveTest;
trilateral2Lime_drawings_CubicCurveTest.__name__ = "trilateral2Lime.drawings.CubicCurveTest";
trilateral2Lime_drawings_CubicCurveTest.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_CubicCurveTest.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		this.pen.currentColor = -16776961;
		var sketch = new trilateral2_Sketch(this.pen,trilateral2_SketchForm.Fine,3);
		sketch.width = 20;
		sketch.colourFunction = function(colour,x,y,x_,y_) {
			return Math.round(colour - x * y);
		};
		var translateContext = new justPath_transform_TranslationContext(sketch,50,200);
		var p = new justPath_SvgPath(translateContext);
		p.parse("M100,200 C100,100 250,100 250,200S400,300 400,200");
	}
	,__class__: trilateral2Lime_drawings_CubicCurveTest
});
var trilateral2Lime_drawings_GreenSquare = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.GreenSquare"] = trilateral2Lime_drawings_GreenSquare;
trilateral2Lime_drawings_GreenSquare.__name__ = "trilateral2Lime.drawings.GreenSquare";
trilateral2Lime_drawings_GreenSquare.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_GreenSquare.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		var drawType = this.pen.drawType;
		var px = (this.bottomRight.x + this.centre.x) / 2;
		var py = (this.bottomRight.y + this.centre.y) / 2;
		var radius = 0.7 * this.size;
		var ax = 0.;
		var ay = 0.;
		var bx = 0.;
		var by = 0.;
		var cx = 0.;
		var cy = 0.;
		var dx = 0.;
		var dy = 0.;
		ax = px - radius;
		ay = py - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
		drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		var len = 2;
		var _this = this.pen;
		var color = -16711936;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,__class__: trilateral2Lime_drawings_GreenSquare
});
var trilateral2Lime_drawings_IndigoCircle = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.IndigoCircle"] = trilateral2Lime_drawings_IndigoCircle;
trilateral2Lime_drawings_IndigoCircle.__name__ = "trilateral2Lime.drawings.IndigoCircle";
trilateral2Lime_drawings_IndigoCircle.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_IndigoCircle.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		var drawType = this.pen.drawType;
		var ax = (this.topRight.x + this.centre.x) / 2;
		var ay = (this.topRight.y + this.centre.y) / 2;
		var radius = this.size;
		var pi = Math.PI;
		var theta = pi / 2;
		var step = pi * 2 / 36;
		var bx;
		var by;
		var cx;
		var cy;
		var _g = 0;
		var _g1 = 36;
		while(_g < _g1) {
			var i = _g++;
			bx = ax + radius * Math.sin(theta);
			by = ay + radius * Math.cos(theta);
			theta += step;
			cx = ax + radius * Math.sin(theta);
			cy = ay + radius * Math.cos(theta);
			drawType.triangle(ax,ay,0,bx,by,0,cx,cy,0);
			var m = trilateral2_Shaper.transformMatrix;
			if(m != null) {
				drawType.transform(m);
			}
			drawType.next();
		}
		var len = 36;
		var _this = this.pen;
		var color = -11861886;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,__class__: trilateral2Lime_drawings_IndigoCircle
});
var trilateral2Lime_drawings_LayoutPos = function(stageRadius_) {
	this.stageRadius = stageRadius_;
	this.centre = new geom_structure_Mat1x2(this.stageRadius,this.stageRadius);
	this.quarter = this.stageRadius / 2;
	this.bottomLeft = new geom_structure_Mat1x2(this.stageRadius - this.quarter,this.stageRadius + this.quarter);
	this.bottomRight = new geom_structure_Mat1x2(this.stageRadius + this.quarter,this.stageRadius + this.quarter);
	this.topLeft = new geom_structure_Mat1x2(this.stageRadius - this.quarter,this.stageRadius - this.quarter);
	this.topRight = new geom_structure_Mat1x2(this.stageRadius + this.quarter,this.stageRadius - this.quarter);
};
$hxClasses["trilateral2Lime.drawings.LayoutPos"] = trilateral2Lime_drawings_LayoutPos;
trilateral2Lime_drawings_LayoutPos.__name__ = "trilateral2Lime.drawings.LayoutPos";
trilateral2Lime_drawings_LayoutPos.prototype = {
	layoutParameters: function() {
		this.centre = new geom_structure_Mat1x2(this.stageRadius,this.stageRadius);
		this.quarter = this.stageRadius / 2;
		this.bottomLeft = new geom_structure_Mat1x2(this.stageRadius - this.quarter,this.stageRadius + this.quarter);
		this.bottomRight = new geom_structure_Mat1x2(this.stageRadius + this.quarter,this.stageRadius + this.quarter);
		this.topLeft = new geom_structure_Mat1x2(this.stageRadius - this.quarter,this.stageRadius - this.quarter);
		this.topRight = new geom_structure_Mat1x2(this.stageRadius + this.quarter,this.stageRadius - this.quarter);
	}
	,__class__: trilateral2Lime_drawings_LayoutPos
};
var trilateral2Lime_drawings_MidGreySquareOutline = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.MidGreySquareOutline"] = trilateral2Lime_drawings_MidGreySquareOutline;
trilateral2Lime_drawings_MidGreySquareOutline.__name__ = "trilateral2Lime.drawings.MidGreySquareOutline";
trilateral2Lime_drawings_MidGreySquareOutline.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_MidGreySquareOutline.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		var drawType = this.pen.drawType;
		var px = (this.bottomRight.x + this.centre.x) / 2;
		var py = (this.bottomRight.y + this.centre.y) / 2;
		var radius = 0.7 * this.size;
		var ax = 0.;
		var ay = 0.;
		var bx = 0.;
		var by = 0.;
		var cx = 0.;
		var cy = 0.;
		var dx = 0.;
		var dy = 0.;
		var a0x = 0.;
		var a0y = 0.;
		var b0x = 0.;
		var b0y = 0.;
		var c0x = 0.;
		var c0y = 0.;
		var d0x = 0.;
		var d0y = 0.;
		ax = px - radius;
		ay = py - radius;
		var lx = radius * 2;
		var ly = lx;
		bx = ax + lx;
		by = ay;
		cx = bx;
		cy = ay + ly;
		dx = ax;
		dy = cy;
		var radius0 = radius - 6;
		a0x = px - radius0;
		a0y = py - radius0;
		var l0x = radius0 * 2;
		var l0y = l0x;
		b0x = a0x + l0x;
		b0y = a0y;
		c0x = b0x;
		c0y = a0y + l0y;
		d0x = a0x;
		d0y = c0y;
		drawType.triangle(ax,ay,0,bx,by,0,a0x,a0y,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx,by,0,b0x,b0y,0,a0x,a0y,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(d0x,d0y,0,c0x,c0y,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(c0x,c0y,0,cx,cy,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(ax,ay,0,a0x,a0y,0,d0x,d0y,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(ax,ay,0,d0x,d0y,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(b0x,b0y,0,bx,by,0,c0x,c0y,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx,by,0,cx,cy,0,c0x,c0y,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		var len = 8;
		var _this = this.pen;
		var color = -65536;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,__class__: trilateral2Lime_drawings_MidGreySquareOutline
});
var trilateral2Lime_drawings_OrangeDavidStar = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.OrangeDavidStar"] = trilateral2Lime_drawings_OrangeDavidStar;
trilateral2Lime_drawings_OrangeDavidStar.__name__ = "trilateral2Lime.drawings.OrangeDavidStar";
trilateral2Lime_drawings_OrangeDavidStar.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_OrangeDavidStar.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		var drawType = this.pen.drawType;
		var px = (this.bottomLeft.x + this.centre.x) / 2;
		var py = (this.bottomLeft.y + this.centre.y) / 2;
		var radius = this.size;
		var pi = Math.PI;
		var omega = -pi;
		var a0x = px + radius * Math.sin(omega);
		var a0y = py + radius * Math.cos(omega);
		omega += pi / 3;
		var a1x = px + radius * Math.sin(omega);
		var a1y = py + radius * Math.cos(omega);
		omega += pi / 3;
		var b0x = px + radius * Math.sin(omega);
		var b0y = py + radius * Math.cos(omega);
		omega += pi / 3;
		var b1x = px + radius * Math.sin(omega);
		var b1y = py + radius * Math.cos(omega);
		omega += pi / 3;
		var c0x = px + radius * Math.sin(omega);
		var c0y = py + radius * Math.cos(omega);
		omega += pi / 3;
		var c1x = px + radius * Math.sin(omega);
		var c1y = py + radius * Math.cos(omega);
		drawType.triangle(a0x,a0y,0,b0x,b0y,0,c0x,c0y,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(a1x,a1y,0,b1x,b1y,0,c1x,c1y,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		var len = 2;
		var _this = this.pen;
		var color = -33024;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,__class__: trilateral2Lime_drawings_OrangeDavidStar
});
var trilateral2Lime_drawings_QuadCurveTest = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.QuadCurveTest"] = trilateral2Lime_drawings_QuadCurveTest;
trilateral2Lime_drawings_QuadCurveTest.__name__ = "trilateral2Lime.drawings.QuadCurveTest";
trilateral2Lime_drawings_QuadCurveTest.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_QuadCurveTest.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		this.pen.currentColor = -16776961;
		var sketch = new trilateral2_Sketch(this.pen,trilateral2_SketchForm.Fine,3);
		sketch.width = 2;
		sketch.widthFunction = function(width,x,y,x_,y_) {
			return width + 0.016;
		};
		var translateContext = new justPath_transform_TranslationContext(sketch,-100,300);
		var p = new justPath_SvgPath(translateContext);
		p.parse("M200,300 Q400,50 600,300 T1000,300");
	}
	,__class__: trilateral2Lime_drawings_QuadCurveTest
});
var trilateral2Lime_drawings_RedRoundedRectangleOutline = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.RedRoundedRectangleOutline"] = trilateral2Lime_drawings_RedRoundedRectangleOutline;
trilateral2Lime_drawings_RedRoundedRectangleOutline.__name__ = "trilateral2Lime.drawings.RedRoundedRectangleOutline";
trilateral2Lime_drawings_RedRoundedRectangleOutline.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_RedRoundedRectangleOutline.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		var drawType = this.pen.drawType;
		var x = this.topLeft.x - this.size;
		var y = (this.topLeft.y + this.bottomLeft.y) / 2 - this.size / 2;
		var width = this.size * 2;
		var height = this.size;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x + 30;
		var ay = y + 30;
		var bx = x + width - 30;
		var by = y + 30;
		var cx = bx;
		var cy = y + height - 30;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y;
		var bx1 = ax + (width - 60);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + 6;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		count += 2;
		var ax1 = ax;
		var ay1 = y + height - 6;
		var bx1 = ax + (width - 60);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + 6;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		count += 2;
		var dimY = height - 60;
		var ax1 = x;
		var ay1 = ay;
		var bx1 = x + 6;
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + dimY;
		var dx1 = x;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		count += 2;
		var x1 = x + width - 6;
		var ax1 = x1;
		var ay1 = by;
		var bx1 = x1 + 6;
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + dimY;
		var dx1 = x1;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = beta;
		var cx1;
		var cy1;
		var bx1 = 0;
		var by1 = 0;
		var dx1 = 0;
		var dy1 = 0;
		var ex = 0;
		var ey = 0;
		var r2 = 24;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx1 = ax + 30 * Math.sin(angle);
			cy1 = ay + 30 * Math.cos(angle);
			ex = ax + r2 * Math.sin(angle);
			ey = ay + r2 * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(dx1,dy1,0,bx1,by1,0,cx1,cy1,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
				drawType.triangle(dx1,dy1,0,cx1,cy1,0,ex,ey,0);
				var m1 = trilateral2_Shaper.transformMatrix;
				if(m1 != null) {
					drawType.transform(m1);
				}
				drawType.next();
			}
			angle += step;
			bx1 = cx1;
			by1 = cy1;
			dx1 = ex;
			dy1 = ey;
		}
		count += totalSteps * 2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(pi >= 0 && pi > Math.PI) {
				f = pi;
			} else {
				var a = pi % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(pi >= 0 && pi > Math.PI) {
				f = pi;
			} else {
				var a = pi % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(pi >= 0 && pi > Math.PI) {
				f = pi;
			} else {
				var a = pi % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(pi >= 0 && pi > Math.PI) {
				f = pi;
			} else {
				var a = pi % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = pi_2;
		var cx1;
		var cy1;
		var bx1 = 0;
		var by1 = 0;
		var dx1 = 0;
		var dy1 = 0;
		var ex = 0;
		var ey = 0;
		var r2 = 24;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx1 = bx + 30 * Math.sin(angle);
			cy1 = by + 30 * Math.cos(angle);
			ex = bx + r2 * Math.sin(angle);
			ey = by + r2 * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(dx1,dy1,0,bx1,by1,0,cx1,cy1,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
				drawType.triangle(dx1,dy1,0,cx1,cy1,0,ex,ey,0);
				var m1 = trilateral2_Shaper.transformMatrix;
				if(m1 != null) {
					drawType.transform(m1);
				}
				drawType.next();
			}
			angle += step;
			bx1 = cx1;
			by1 = cy1;
			dx1 = ex;
			dy1 = ey;
		}
		count += totalSteps * 2;
		var pi = Math.PI;
		var step = pi * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = pi_2;
		var cx1;
		var cy1;
		var bx = 0;
		var by = 0;
		var dx1 = 0;
		var dy1 = 0;
		var ex = 0;
		var ey = 0;
		var r2 = 24;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx1 = cx + 30 * Math.sin(angle);
			cy1 = cy + 30 * Math.cos(angle);
			ex = cx + r2 * Math.sin(angle);
			ey = cy + r2 * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(dx1,dy1,0,bx,by,0,cx1,cy1,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
				drawType.triangle(dx1,dy1,0,cx1,cy1,0,ex,ey,0);
				var m1 = trilateral2_Shaper.transformMatrix;
				if(m1 != null) {
					drawType.transform(m1);
				}
				drawType.next();
			}
			angle += step;
			bx = cx1;
			by = cy1;
			dx1 = ex;
			dy1 = ey;
		}
		count += totalSteps * 2;
		var gamma = -pi_2;
		var pi = Math.PI;
		var step = pi * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = 0;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var dx1 = 0;
		var dy1 = 0;
		var ex = 0;
		var ey = 0;
		var r2 = 24;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx = dx + 30 * Math.sin(angle);
			cy = dy + 30 * Math.cos(angle);
			ex = dx + r2 * Math.sin(angle);
			ey = dy + r2 * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(dx1,dy1,0,bx,by,0,cx,cy,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
				drawType.triangle(dx1,dy1,0,cx,cy,0,ex,ey,0);
				var m1 = trilateral2_Shaper.transformMatrix;
				if(m1 != null) {
					drawType.transform(m1);
				}
				drawType.next();
			}
			angle += step;
			bx = cx;
			by = cy;
			dx1 = ex;
			dy1 = ey;
		}
		var len = count += totalSteps * 2;
		var _this = this.pen;
		var color = -65536;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,__class__: trilateral2Lime_drawings_RedRoundedRectangleOutline
});
var trilateral2Lime_drawings_VioletRoundedRectangle = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.VioletRoundedRectangle"] = trilateral2Lime_drawings_VioletRoundedRectangle;
trilateral2Lime_drawings_VioletRoundedRectangle.__name__ = "trilateral2Lime.drawings.VioletRoundedRectangle";
trilateral2Lime_drawings_VioletRoundedRectangle.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_VioletRoundedRectangle.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		var drawType = this.pen.drawType;
		var x = this.topLeft.x - this.size;
		var y = (this.topLeft.y + this.bottomLeft.y) / 2 - this.size / 2;
		var width = this.size * 2;
		var height = this.size;
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var ax = x + 30;
		var ay = y + 30;
		var bx = x + width - 30;
		var by = y + 30;
		var cx = bx;
		var cy = y + height - 30;
		var dx = ax;
		var dy = cy;
		var count = 0;
		var ax1 = ax;
		var ay1 = y;
		var bx1 = ax + (width - 60);
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + height;
		var dx1 = ax;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		count += 2;
		var dimY = height - 60;
		var ax1 = x;
		var ay1 = ay;
		var bx1 = x + 30;
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + dimY;
		var dx1 = x;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		count += 2;
		var ax1 = bx;
		var ay1 = by;
		var bx1 = bx + 30;
		var by1 = ay1;
		var cx1 = bx1;
		var cy1 = ay1 + dimY;
		var dx1 = bx;
		var dy1 = cy1;
		drawType.triangle(ax1,ay1,0,bx1,by1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx1,by1,0,cx1,cy1,0,dx1,dy1,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		count += 2;
		var beta = -pi;
		var gamma = -pi_2;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(beta >= 0 && beta > Math.PI) {
				f = beta;
			} else {
				var a = beta % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = beta;
		var cx1;
		var cy1;
		var bx1 = 0;
		var by1 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx1 = ax + 30 * Math.sin(angle);
			cy1 = ay + 30 * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(ax,ay,0,bx1,by1,0,cx1,cy1,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step;
			bx1 = cx1;
			by1 = cy1;
		}
		count += totalSteps;
		var pi1 = Math.PI;
		var step = pi1 * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.CLOCKWISE._hx_index) {
		case 0:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(pi >= 0 && pi > Math.PI) {
				f = pi;
			} else {
				var a = pi % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(pi >= 0 && pi > Math.PI) {
				f = pi;
			} else {
				var a = pi % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(pi >= 0 && pi > Math.PI) {
				f = pi;
			} else {
				var a = pi % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(pi >= 0 && pi > Math.PI) {
				f = pi;
			} else {
				var a = pi % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = pi_2;
		var cx1;
		var cy1;
		var bx1 = 0;
		var by1 = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx1 = bx + 30 * Math.sin(angle);
			cy1 = by + 30 * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(bx,by,0,bx1,by1,0,cx1,cy1,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step;
			bx1 = cx1;
			by1 = cy1;
		}
		count += totalSteps;
		var pi = Math.PI;
		var step = pi * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(pi_2 >= 0 && pi_2 > Math.PI) {
				f = pi_2;
			} else {
				var a = pi_2 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = pi_2;
		var cx1;
		var cy1;
		var bx = 0;
		var by = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx1 = cx + 30 * Math.sin(angle);
			cy1 = cy + 30 * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(cx,cy,0,bx,by,0,cx1,cy1,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step;
			bx = cx1;
			by = cy1;
		}
		count += totalSteps;
		var gamma = -pi_2;
		var pi = Math.PI;
		var step = pi * 2 / 36;
		var dif;
		switch(fracs_DifferencePreference.ANTICLOCKWISE._hx_index) {
		case 0:
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 > 0 ? dif1 : 2 * Math.PI + dif1;
			break;
		case 1:
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = dif1 < 0 ? dif1 : -2 * Math.PI + dif1;
			break;
		case 2:
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var smallest = theta <= Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = smallest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		case 3:
			var f;
			if(0 > Math.PI) {
				f = 0;
			} else {
				var a = 0 % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var za = this1;
			var f;
			if(gamma >= 0 && gamma > Math.PI) {
				f = gamma;
			} else {
				var a = gamma % (2 * Math.PI);
				f = a >= 0 ? a : a + 2 * Math.PI;
			}
			var this1 = f;
			var zb = this1;
			var fa = za;
			var fb = zb;
			var theta = Math.abs(fa - fb);
			var largest = theta > Math.PI;
			var clockwise = fa < fb;
			var dif1 = clockwise ? theta : -theta;
			dif = largest ? dif1 : clockwise ? -(2 * Math.PI - theta) : 2 * Math.PI - theta;
			break;
		}
		var positive = dif >= 0;
		var totalSteps = Math.ceil(Math.abs(dif) / step);
		var step = dif / totalSteps;
		var angle = 0;
		var cx;
		var cy;
		var bx = 0;
		var by = 0;
		var _g = 0;
		var _g1 = totalSteps + 1;
		while(_g < _g1) {
			var i = _g++;
			cx = dx + 30 * Math.sin(angle);
			cy = dy + 30 * Math.cos(angle);
			if(i != 0) {
				drawType.triangle(dx,dy,0,bx,by,0,cx,cy,0);
				var m = trilateral2_Shaper.transformMatrix;
				if(m != null) {
					drawType.transform(m);
				}
				drawType.next();
			}
			angle += step;
			bx = cx;
			by = cy;
		}
		var len = count += totalSteps;
		var _this = this.pen;
		var color = -7077677;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,__class__: trilateral2Lime_drawings_VioletRoundedRectangle
});
var trilateral2Lime_drawings_YellowDiamond = function(pen,layoutPos) {
	trilateral2Lime_drawings_DrawingLayout.call(this,pen,layoutPos);
};
$hxClasses["trilateral2Lime.drawings.YellowDiamond"] = trilateral2Lime_drawings_YellowDiamond;
trilateral2Lime_drawings_YellowDiamond.__name__ = "trilateral2Lime.drawings.YellowDiamond";
trilateral2Lime_drawings_YellowDiamond.__super__ = trilateral2Lime_drawings_DrawingLayout;
trilateral2Lime_drawings_YellowDiamond.prototype = $extend(trilateral2Lime_drawings_DrawingLayout.prototype,{
	draw: function() {
		var drawType = this.pen.drawType;
		var x = (this.topLeft.x + this.centre.x) / 2;
		var y = (this.topLeft.y + this.centre.y) / 2;
		var radius = 0.7 * this.size;
		var theta = Math.PI / 4;
		if(theta == null) {
			theta = 0;
		}
		var ax = 0.;
		var ay = 0.;
		var bx = 0.;
		var by = 0.;
		var cx = 0.;
		var cy = 0.;
		var dx = 0.;
		var dy = 0.;
		if(theta != 0) {
			var pi = Math.PI;
			var pi4 = pi / 4;
			var pi2 = pi / 2;
			var sqrt2 = Math.sqrt(2);
			var r = radius * sqrt2;
			var aTheta = -pi + theta - pi4;
			var dTheta = -pi + theta + pi / 2 - pi / 4;
			var cTheta = theta - pi4;
			var bTheta = -pi + theta - pi2 - pi4;
			ax = x + r * Math.sin(aTheta);
			ay = y + r * Math.cos(aTheta);
			bx = x + r * Math.sin(bTheta);
			by = y + r * Math.cos(bTheta);
			cx = x + r * Math.sin(cTheta);
			cy = y + r * Math.cos(cTheta);
			dx = x + r * Math.sin(dTheta);
			dy = y + r * Math.cos(dTheta);
		} else {
			ax = x - radius;
			ay = y - radius;
			var lx = radius * 2;
			var ly = lx;
			bx = ax + lx;
			by = ay;
			cx = bx;
			cy = ay + ly;
			dx = ax;
			dy = cy;
		}
		drawType.triangle(ax,ay,0,bx,by,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		drawType.triangle(bx,by,0,cx,cy,0,dx,dy,0);
		var m = trilateral2_Shaper.transformMatrix;
		if(m != null) {
			drawType.transform(m);
		}
		drawType.next();
		var len = 2;
		var _this = this.pen;
		var color = -256;
		if(color == -1) {
			color = _this.currentColor;
		}
		_this.colorType.colorTriangles(color,len);
	}
	,__class__: trilateral2Lime_drawings_YellowDiamond
});
var trilateral2Lime_shader_BufferHelpGL = function() { };
$hxClasses["trilateral2Lime.shader.BufferHelpGL"] = trilateral2Lime_shader_BufferHelpGL;
trilateral2Lime_shader_BufferHelpGL.__name__ = "trilateral2Lime.shader.BufferHelpGL";
trilateral2Lime_shader_BufferHelpGL.bufferSetup = function(gl,program,data) {
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);
	return buf;
};
trilateral2Lime_shader_BufferHelpGL.interleaveXY_RGB = function(gl,program,data,inPosName,inColName) {
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,gl.STATIC_DRAW);
	var vbo = buf;
	var posLoc = gl.getAttribLocation(program,inPosName);
	var colorLoc = gl.getAttribLocation(program,inColName);
	gl.vertexAttribPointer(posLoc,2,gl.FLOAT,false,20,0);
	gl.vertexAttribPointer(colorLoc,3,gl.FLOAT,false,20,8);
	gl.enableVertexAttribArray(posLoc);
	gl.enableVertexAttribArray(colorLoc);
};
trilateral2Lime_shader_BufferHelpGL.colorsXYZ_RGBA = function(gl,program,positions,colors,inPosName,inColName) {
	var noPos = 3;
	var noCols = 4;
	if(noCols == null) {
		noCols = 4;
	}
	if(noPos == null) {
		noPos = 3;
	}
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,positions,gl.STATIC_DRAW);
	var bufferPos = buf;
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,colors,gl.STATIC_DRAW);
	var bufferCol = buf;
	var posLoc = gl.getAttribLocation(program,inPosName);
	var colorLoc = gl.getAttribLocation(program,inColName);
	gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
	gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
	gl.enableVertexAttribArray(posLoc);
	gl.enableVertexAttribArray(colorLoc);
};
trilateral2Lime_shader_BufferHelpGL.colorsXY_RGBA = function(gl,program,positions,colors,inPosName,inColName) {
	var noPos = 2;
	var noCols = 4;
	if(noCols == null) {
		noCols = 4;
	}
	if(noPos == null) {
		noPos = 3;
	}
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,positions,gl.STATIC_DRAW);
	var bufferPos = buf;
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,colors,gl.STATIC_DRAW);
	var bufferCol = buf;
	var posLoc = gl.getAttribLocation(program,inPosName);
	var colorLoc = gl.getAttribLocation(program,inColName);
	gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
	gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
	gl.enableVertexAttribArray(posLoc);
	gl.enableVertexAttribArray(colorLoc);
};
trilateral2Lime_shader_BufferHelpGL.colorsXYZ_RGB = function(gl,program,positions,colors,inPosName,inColName) {
	var noPos = 3;
	var noCols = 3;
	if(noCols == null) {
		noCols = 4;
	}
	if(noPos == null) {
		noPos = 3;
	}
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,positions,gl.STATIC_DRAW);
	var bufferPos = buf;
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,colors,gl.STATIC_DRAW);
	var bufferCol = buf;
	var posLoc = gl.getAttribLocation(program,inPosName);
	var colorLoc = gl.getAttribLocation(program,inColName);
	gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
	gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
	gl.enableVertexAttribArray(posLoc);
	gl.enableVertexAttribArray(colorLoc);
};
trilateral2Lime_shader_BufferHelpGL.colorsXY_RGB = function(gl,program,positions,colors,inPosName,inColName) {
	var noPos = 2;
	var noCols = 3;
	if(noCols == null) {
		noCols = 4;
	}
	if(noPos == null) {
		noPos = 3;
	}
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,positions,gl.STATIC_DRAW);
	var bufferPos = buf;
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,colors,gl.STATIC_DRAW);
	var bufferCol = buf;
	var posLoc = gl.getAttribLocation(program,inPosName);
	var colorLoc = gl.getAttribLocation(program,inColName);
	gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
	gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
	gl.enableVertexAttribArray(posLoc);
	gl.enableVertexAttribArray(colorLoc);
};
trilateral2Lime_shader_BufferHelpGL.posColors = function(gl,program,positions,colors,inPosName,inColName,noPos,noCols) {
	if(noCols == null) {
		noCols = 4;
	}
	if(noPos == null) {
		noPos = 3;
	}
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,positions,gl.STATIC_DRAW);
	var bufferPos = buf;
	var buf = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER,buf);
	lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,colors,gl.STATIC_DRAW);
	var bufferCol = buf;
	var posLoc = gl.getAttribLocation(program,inPosName);
	var colorLoc = gl.getAttribLocation(program,inColName);
	gl.vertexAttribPointer(posLoc,noPos,gl.FLOAT,false,noPos * 4,0);
	gl.vertexAttribPointer(colorLoc,noCols,gl.FLOAT,false,noCols * 4,0);
	gl.enableVertexAttribArray(posLoc);
	gl.enableVertexAttribArray(colorLoc);
};
var trilateral2Lime_shader_HelpGL = function() { };
$hxClasses["trilateral2Lime.shader.HelpGL"] = trilateral2Lime_shader_HelpGL;
trilateral2Lime_shader_HelpGL.__name__ = "trilateral2Lime.shader.HelpGL";
trilateral2Lime_shader_HelpGL.clearAll = function(gl,width,height) {
	gl.viewport(0,0,width,height);
	gl.clearColor(0.0,0.0,0.0,1.0);
	gl.clear(gl.COLOR_BUFFER_BIT);
};
trilateral2Lime_shader_HelpGL.programSetup = function(gl,strVertex,strFragment) {
	var program = gl.createProgram();
	var shader = gl.createShader(gl.VERTEX_SHADER);
	gl.shaderSource(shader,strVertex);
	gl.compileShader(shader);
	var tmp;
	if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
		throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
	} else {
		tmp = shader;
	}
	gl.attachShader(program,tmp);
	var shader = gl.createShader(gl.FRAGMENT_SHADER);
	gl.shaderSource(shader,strFragment);
	gl.compileShader(shader);
	var tmp;
	if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
		throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
	} else {
		tmp = shader;
	}
	gl.attachShader(program,tmp);
	gl.linkProgram(program);
	if(!gl.getProgramParameter(program,gl.LINK_STATUS)) {
		throw haxe_Exception.thrown("Error linking program. " + gl.getProgramInfoLog(program));
	}
	gl.validateProgram(program);
	if(!gl.getProgramParameter(program,gl.VALIDATE_STATUS)) {
		throw haxe_Exception.thrown("Error validating program. " + gl.getProgramInfoLog(program));
	}
	gl.useProgram(program);
	return program;
};
trilateral2Lime_shader_HelpGL.shaderSetup = function(gl,shaderType,str) {
	var shader = gl.createShader(shaderType);
	gl.shaderSource(shader,str);
	gl.compileShader(shader);
	if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)) {
		throw haxe_Exception.thrown("Error compiling shader. " + gl.getShaderInfoLog(shader));
	}
	return shader;
};
var trilateral2Lime_shader_ShaderStrings = function() { };
$hxClasses["trilateral2Lime.shader.ShaderStrings"] = trilateral2Lime_shader_ShaderStrings;
trilateral2Lime_shader_ShaderStrings.__name__ = "trilateral2Lime.shader.ShaderStrings";
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
hxGeomAlgo_PolyTools.exposeEnum(hxGeomAlgo_WindingRule);
hxGeomAlgo_PolyTools.exposeEnum(hxGeomAlgo_ResultType);
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
var array = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint32Array(256);
lime_math_RGBA.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_RGBA.__alpha16[i] = Math.ceil(i * 257.003921568627447);
}
var array = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint8Array(511);
lime_math_RGBA.__clamp = this1;
var _g = 0;
while(_g < 255) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = i;
}
var _g = 255;
var _g1 = 511;
while(_g < _g1) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
geom_matrix_Matrix1x2.rows = 1;
geom_matrix_Matrix1x2.columns = 2;
geom_matrix_Matrix1x3.rows = 1;
geom_matrix_Matrix1x3.columns = 3;
geom_matrix_Matrix1x4.rows = 1;
geom_matrix_Matrix1x4.columns = 4;
geom_matrix_Matrix2x2.row = 2;
geom_matrix_Matrix2x2.col = 2;
geom_matrix_Matrix3x3.rows = 3;
geom_matrix_Matrix3x3.columns = 3;
geom_matrix_Matrix4x3.rows = 4;
geom_matrix_Matrix4x3.columns = 3;
geom_matrix_Matrix4x4.rows = 4;
geom_matrix_Matrix4x4.columns = 4;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxGeomAlgo_HomogCoord.INFINITY = new hxGeomAlgo_HomogCoord();
hxGeomAlgo_HxPoint.EMPTY = hxGeomAlgo_HxPoint._new(NaN,NaN);
hxGeomAlgo_PolyTools.point = hxGeomAlgo_HxPoint._new();
hxGeomAlgo_PolyTools.zero = hxGeomAlgo_HxPoint._new(0,0);
hxGeomAlgo_PolyTools.EPSILON = .00000001;
hxPolyK_PolyK.small = 0.0000000001;
lime__$internal_backend_html5_HTML5HTTPRequest.OPTION_REVOKE_URL = 1;
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 17;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new haxe_ds_List();
lime__$internal_backend_html5_HTML5Window.dummyCharacter = "";
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime__$internal_format_Base64.DICTIONARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
lime__$internal_format_Base64.EXTENDED_DICTIONARY = (function($this) {
	var $r;
	var result = [];
	{
		var _g = 0;
		var _g1 = lime__$internal_format_Base64.DICTIONARY;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = lime__$internal_format_Base64.DICTIONARY;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				result.push(a + b);
			}
		}
	}
	$r = result;
	return $r;
}(this));
lime__$internal_graphics_StackBlur.MUL_TABLE = [1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1];
lime__$internal_graphics_StackBlur.SHG_TABLE = [0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9];
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.EXTENSIONS = 7939;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_graphics_opengl_GL.READ_BUFFER = 3074;
lime_graphics_opengl_GL.UNPACK_ROW_LENGTH = 3314;
lime_graphics_opengl_GL.UNPACK_SKIP_ROWS = 3315;
lime_graphics_opengl_GL.UNPACK_SKIP_PIXELS = 3316;
lime_graphics_opengl_GL.PACK_ROW_LENGTH = 3330;
lime_graphics_opengl_GL.PACK_SKIP_ROWS = 3331;
lime_graphics_opengl_GL.PACK_SKIP_PIXELS = 3332;
lime_graphics_opengl_GL.TEXTURE_BINDING_3D = 32874;
lime_graphics_opengl_GL.UNPACK_SKIP_IMAGES = 32877;
lime_graphics_opengl_GL.UNPACK_IMAGE_HEIGHT = 32878;
lime_graphics_opengl_GL.MAX_3D_TEXTURE_SIZE = 32883;
lime_graphics_opengl_GL.MAX_ELEMENTS_VERTICES = 33000;
lime_graphics_opengl_GL.MAX_ELEMENTS_INDICES = 33001;
lime_graphics_opengl_GL.MAX_TEXTURE_LOD_BIAS = 34045;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
lime_graphics_opengl_GL.MAX_ARRAY_TEXTURE_LAYERS = 35071;
lime_graphics_opengl_GL.MIN_PROGRAM_TEXEL_OFFSET = 35076;
lime_graphics_opengl_GL.MAX_PROGRAM_TEXEL_OFFSET = 35077;
lime_graphics_opengl_GL.MAX_VARYING_COMPONENTS = 35659;
lime_graphics_opengl_GL.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
lime_graphics_opengl_GL.RASTERIZER_DISCARD = 35977;
lime_graphics_opengl_GL.VERTEX_ARRAY_BINDING = 34229;
lime_graphics_opengl_GL.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
lime_graphics_opengl_GL.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
lime_graphics_opengl_GL.MAX_SERVER_WAIT_TIMEOUT = 37137;
lime_graphics_opengl_GL.MAX_ELEMENT_INDEX = 36203;
lime_graphics_opengl_GL.RED = 6403;
lime_graphics_opengl_GL.RGB8 = 32849;
lime_graphics_opengl_GL.RGBA8 = 32856;
lime_graphics_opengl_GL.RGB10_A2 = 32857;
lime_graphics_opengl_GL.TEXTURE_3D = 32879;
lime_graphics_opengl_GL.TEXTURE_WRAP_R = 32882;
lime_graphics_opengl_GL.TEXTURE_MIN_LOD = 33082;
lime_graphics_opengl_GL.TEXTURE_MAX_LOD = 33083;
lime_graphics_opengl_GL.TEXTURE_BASE_LEVEL = 33084;
lime_graphics_opengl_GL.TEXTURE_MAX_LEVEL = 33085;
lime_graphics_opengl_GL.TEXTURE_COMPARE_MODE = 34892;
lime_graphics_opengl_GL.TEXTURE_COMPARE_FUNC = 34893;
lime_graphics_opengl_GL.SRGB = 35904;
lime_graphics_opengl_GL.SRGB8 = 35905;
lime_graphics_opengl_GL.SRGB8_ALPHA8 = 35907;
lime_graphics_opengl_GL.COMPARE_REF_TO_TEXTURE = 34894;
lime_graphics_opengl_GL.RGBA32F = 34836;
lime_graphics_opengl_GL.RGB32F = 34837;
lime_graphics_opengl_GL.RGBA16F = 34842;
lime_graphics_opengl_GL.RGB16F = 34843;
lime_graphics_opengl_GL.TEXTURE_2D_ARRAY = 35866;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D_ARRAY = 35869;
lime_graphics_opengl_GL.R11F_G11F_B10F = 35898;
lime_graphics_opengl_GL.RGB9_E5 = 35901;
lime_graphics_opengl_GL.RGBA32UI = 36208;
lime_graphics_opengl_GL.RGB32UI = 36209;
lime_graphics_opengl_GL.RGBA16UI = 36214;
lime_graphics_opengl_GL.RGB16UI = 36215;
lime_graphics_opengl_GL.RGBA8UI = 36220;
lime_graphics_opengl_GL.RGB8UI = 36221;
lime_graphics_opengl_GL.RGBA32I = 36226;
lime_graphics_opengl_GL.RGB32I = 36227;
lime_graphics_opengl_GL.RGBA16I = 36232;
lime_graphics_opengl_GL.RGB16I = 36233;
lime_graphics_opengl_GL.RGBA8I = 36238;
lime_graphics_opengl_GL.RGB8I = 36239;
lime_graphics_opengl_GL.RED_INTEGER = 36244;
lime_graphics_opengl_GL.RGB_INTEGER = 36248;
lime_graphics_opengl_GL.RGBA_INTEGER = 36249;
lime_graphics_opengl_GL.R8 = 33321;
lime_graphics_opengl_GL.RG8 = 33323;
lime_graphics_opengl_GL.R16F = 33325;
lime_graphics_opengl_GL.R32F = 33326;
lime_graphics_opengl_GL.RG16F = 33327;
lime_graphics_opengl_GL.RG32F = 33328;
lime_graphics_opengl_GL.R8I = 33329;
lime_graphics_opengl_GL.R8UI = 33330;
lime_graphics_opengl_GL.R16I = 33331;
lime_graphics_opengl_GL.R16UI = 33332;
lime_graphics_opengl_GL.R32I = 33333;
lime_graphics_opengl_GL.R32UI = 33334;
lime_graphics_opengl_GL.RG8I = 33335;
lime_graphics_opengl_GL.RG8UI = 33336;
lime_graphics_opengl_GL.RG16I = 33337;
lime_graphics_opengl_GL.RG16UI = 33338;
lime_graphics_opengl_GL.RG32I = 33339;
lime_graphics_opengl_GL.RG32UI = 33340;
lime_graphics_opengl_GL.R8_SNORM = 36756;
lime_graphics_opengl_GL.RG8_SNORM = 36757;
lime_graphics_opengl_GL.RGB8_SNORM = 36758;
lime_graphics_opengl_GL.RGBA8_SNORM = 36759;
lime_graphics_opengl_GL.RGB10_A2UI = 36975;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_FORMAT = 37167;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_LEVELS = 33503;
lime_graphics_opengl_GL.UNSIGNED_INT_2_10_10_10_REV = 33640;
lime_graphics_opengl_GL.UNSIGNED_INT_10F_11F_11F_REV = 35899;
lime_graphics_opengl_GL.UNSIGNED_INT_5_9_9_9_REV = 35902;
lime_graphics_opengl_GL.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
lime_graphics_opengl_GL.UNSIGNED_INT_24_8 = 34042;
lime_graphics_opengl_GL.HALF_FLOAT = 5131;
lime_graphics_opengl_GL.RG = 33319;
lime_graphics_opengl_GL.RG_INTEGER = 33320;
lime_graphics_opengl_GL.INT_2_10_10_10_REV = 36255;
lime_graphics_opengl_GL.CURRENT_QUERY = 34917;
lime_graphics_opengl_GL.QUERY_RESULT = 34918;
lime_graphics_opengl_GL.QUERY_RESULT_AVAILABLE = 34919;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED = 35887;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
lime_graphics_opengl_GL.MAX_DRAW_BUFFERS = 34852;
lime_graphics_opengl_GL.DRAW_BUFFER0 = 34853;
lime_graphics_opengl_GL.DRAW_BUFFER1 = 34854;
lime_graphics_opengl_GL.DRAW_BUFFER2 = 34855;
lime_graphics_opengl_GL.DRAW_BUFFER3 = 34856;
lime_graphics_opengl_GL.DRAW_BUFFER4 = 34857;
lime_graphics_opengl_GL.DRAW_BUFFER5 = 34858;
lime_graphics_opengl_GL.DRAW_BUFFER6 = 34859;
lime_graphics_opengl_GL.DRAW_BUFFER7 = 34860;
lime_graphics_opengl_GL.DRAW_BUFFER8 = 34861;
lime_graphics_opengl_GL.DRAW_BUFFER9 = 34862;
lime_graphics_opengl_GL.DRAW_BUFFER10 = 34863;
lime_graphics_opengl_GL.DRAW_BUFFER11 = 34864;
lime_graphics_opengl_GL.DRAW_BUFFER12 = 34865;
lime_graphics_opengl_GL.DRAW_BUFFER13 = 34866;
lime_graphics_opengl_GL.DRAW_BUFFER14 = 34867;
lime_graphics_opengl_GL.DRAW_BUFFER15 = 34868;
lime_graphics_opengl_GL.MAX_COLOR_ATTACHMENTS = 36063;
lime_graphics_opengl_GL.COLOR_ATTACHMENT1 = 36065;
lime_graphics_opengl_GL.COLOR_ATTACHMENT2 = 36066;
lime_graphics_opengl_GL.COLOR_ATTACHMENT3 = 36067;
lime_graphics_opengl_GL.COLOR_ATTACHMENT4 = 36068;
lime_graphics_opengl_GL.COLOR_ATTACHMENT5 = 36069;
lime_graphics_opengl_GL.COLOR_ATTACHMENT6 = 36070;
lime_graphics_opengl_GL.COLOR_ATTACHMENT7 = 36071;
lime_graphics_opengl_GL.COLOR_ATTACHMENT8 = 36072;
lime_graphics_opengl_GL.COLOR_ATTACHMENT9 = 36073;
lime_graphics_opengl_GL.COLOR_ATTACHMENT10 = 36074;
lime_graphics_opengl_GL.COLOR_ATTACHMENT11 = 36075;
lime_graphics_opengl_GL.COLOR_ATTACHMENT12 = 36076;
lime_graphics_opengl_GL.COLOR_ATTACHMENT13 = 36077;
lime_graphics_opengl_GL.COLOR_ATTACHMENT14 = 36078;
lime_graphics_opengl_GL.COLOR_ATTACHMENT15 = 36079;
lime_graphics_opengl_GL.SAMPLER_3D = 35679;
lime_graphics_opengl_GL.SAMPLER_2D_SHADOW = 35682;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY = 36289;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY_SHADOW = 36292;
lime_graphics_opengl_GL.SAMPLER_CUBE_SHADOW = 36293;
lime_graphics_opengl_GL.INT_SAMPLER_2D = 36298;
lime_graphics_opengl_GL.INT_SAMPLER_3D = 36299;
lime_graphics_opengl_GL.INT_SAMPLER_CUBE = 36300;
lime_graphics_opengl_GL.INT_SAMPLER_2D_ARRAY = 36303;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D = 36306;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_3D = 36307;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_CUBE = 36308;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
lime_graphics_opengl_GL.MAX_SAMPLES = 36183;
lime_graphics_opengl_GL.SAMPLER_BINDING = 35097;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER = 35051;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER = 35052;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER_BINDING = 35053;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER_BINDING = 35055;
lime_graphics_opengl_GL.COPY_READ_BUFFER = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER = 36663;
lime_graphics_opengl_GL.COPY_READ_BUFFER_BINDING = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER_BINDING = 36663;
lime_graphics_opengl_GL.FLOAT_MAT2x3 = 35685;
lime_graphics_opengl_GL.FLOAT_MAT2x4 = 35686;
lime_graphics_opengl_GL.FLOAT_MAT3x2 = 35687;
lime_graphics_opengl_GL.FLOAT_MAT3x4 = 35688;
lime_graphics_opengl_GL.FLOAT_MAT4x2 = 35689;
lime_graphics_opengl_GL.FLOAT_MAT4x3 = 35690;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC2 = 36294;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC3 = 36295;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC4 = 36296;
lime_graphics_opengl_GL.UNSIGNED_NORMALIZED = 35863;
lime_graphics_opengl_GL.SIGNED_NORMALIZED = 36764;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_VARYINGS = 35971;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
lime_graphics_opengl_GL.INTERLEAVED_ATTRIBS = 35980;
lime_graphics_opengl_GL.SEPARATE_ATTRIBS = 35981;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER = 35982;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK = 36386;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PAUSED = 36387;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_ACTIVE = 36388;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BINDING = 36389;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
lime_graphics_opengl_GL.FRAMEBUFFER_DEFAULT = 33304;
lime_graphics_opengl_GL.DEPTH24_STENCIL8 = 35056;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.READ_FRAMEBUFFER = 36008;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER = 36009;
lime_graphics_opengl_GL.READ_FRAMEBUFFER_BINDING = 36010;
lime_graphics_opengl_GL.RENDERBUFFER_SAMPLES = 36011;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
lime_graphics_opengl_GL.UNIFORM_BUFFER = 35345;
lime_graphics_opengl_GL.UNIFORM_BUFFER_BINDING = 35368;
lime_graphics_opengl_GL.UNIFORM_BUFFER_START = 35369;
lime_graphics_opengl_GL.UNIFORM_BUFFER_SIZE = 35370;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
lime_graphics_opengl_GL.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
lime_graphics_opengl_GL.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
lime_graphics_opengl_GL.MAX_UNIFORM_BLOCK_SIZE = 35376;
lime_graphics_opengl_GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
lime_graphics_opengl_GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
lime_graphics_opengl_GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
lime_graphics_opengl_GL.ACTIVE_UNIFORM_BLOCKS = 35382;
lime_graphics_opengl_GL.UNIFORM_TYPE = 35383;
lime_graphics_opengl_GL.UNIFORM_SIZE = 35384;
lime_graphics_opengl_GL.UNIFORM_BLOCK_INDEX = 35386;
lime_graphics_opengl_GL.UNIFORM_OFFSET = 35387;
lime_graphics_opengl_GL.UNIFORM_ARRAY_STRIDE = 35388;
lime_graphics_opengl_GL.UNIFORM_MATRIX_STRIDE = 35389;
lime_graphics_opengl_GL.UNIFORM_IS_ROW_MAJOR = 35390;
lime_graphics_opengl_GL.UNIFORM_BLOCK_BINDING = 35391;
lime_graphics_opengl_GL.UNIFORM_BLOCK_DATA_SIZE = 35392;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
lime_graphics_opengl_GL.OBJECT_TYPE = 37138;
lime_graphics_opengl_GL.SYNC_CONDITION = 37139;
lime_graphics_opengl_GL.SYNC_STATUS = 37140;
lime_graphics_opengl_GL.SYNC_FLAGS = 37141;
lime_graphics_opengl_GL.SYNC_FENCE = 37142;
lime_graphics_opengl_GL.SYNC_GPU_COMMANDS_COMPLETE = 37143;
lime_graphics_opengl_GL.UNSIGNALED = 37144;
lime_graphics_opengl_GL.SIGNALED = 37145;
lime_graphics_opengl_GL.ALREADY_SIGNALED = 37146;
lime_graphics_opengl_GL.TIMEOUT_EXPIRED = 37147;
lime_graphics_opengl_GL.CONDITION_SATISFIED = 37148;
lime_graphics_opengl_GL.WAIT_FAILED = 37149;
lime_graphics_opengl_GL.SYNC_FLUSH_COMMANDS_BIT = 1;
lime_graphics_opengl_GL.COLOR = 6144;
lime_graphics_opengl_GL.DEPTH = 6145;
lime_graphics_opengl_GL.STENCIL = 6146;
lime_graphics_opengl_GL.MIN = 32775;
lime_graphics_opengl_GL.MAX = 32776;
lime_graphics_opengl_GL.DEPTH_COMPONENT24 = 33190;
lime_graphics_opengl_GL.STREAM_READ = 35041;
lime_graphics_opengl_GL.STREAM_COPY = 35042;
lime_graphics_opengl_GL.STATIC_READ = 35045;
lime_graphics_opengl_GL.STATIC_COPY = 35046;
lime_graphics_opengl_GL.DYNAMIC_READ = 35049;
lime_graphics_opengl_GL.DYNAMIC_COPY = 35050;
lime_graphics_opengl_GL.DEPTH_COMPONENT32F = 36012;
lime_graphics_opengl_GL.DEPTH32F_STENCIL8 = 36013;
lime_graphics_opengl_GL.INVALID_INDEX = -1;
lime_graphics_opengl_GL.TIMEOUT_IGNORED = -1;
lime_graphics_opengl_GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
lime_math_ColorMatrix.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math_Matrix4.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_media_openal_AL.NONE = 0;
lime_media_openal_AL.FALSE = 0;
lime_media_openal_AL.TRUE = 1;
lime_media_openal_AL.SOURCE_RELATIVE = 514;
lime_media_openal_AL.CONE_INNER_ANGLE = 4097;
lime_media_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_media_openal_AL.PITCH = 4099;
lime_media_openal_AL.POSITION = 4100;
lime_media_openal_AL.DIRECTION = 4101;
lime_media_openal_AL.VELOCITY = 4102;
lime_media_openal_AL.LOOPING = 4103;
lime_media_openal_AL.BUFFER = 4105;
lime_media_openal_AL.GAIN = 4106;
lime_media_openal_AL.MIN_GAIN = 4109;
lime_media_openal_AL.MAX_GAIN = 4110;
lime_media_openal_AL.ORIENTATION = 4111;
lime_media_openal_AL.SOURCE_STATE = 4112;
lime_media_openal_AL.INITIAL = 4113;
lime_media_openal_AL.PLAYING = 4114;
lime_media_openal_AL.PAUSED = 4115;
lime_media_openal_AL.STOPPED = 4116;
lime_media_openal_AL.BUFFERS_QUEUED = 4117;
lime_media_openal_AL.BUFFERS_PROCESSED = 4118;
lime_media_openal_AL.REFERENCE_DISTANCE = 4128;
lime_media_openal_AL.ROLLOFF_FACTOR = 4129;
lime_media_openal_AL.CONE_OUTER_GAIN = 4130;
lime_media_openal_AL.MAX_DISTANCE = 4131;
lime_media_openal_AL.SEC_OFFSET = 4132;
lime_media_openal_AL.SAMPLE_OFFSET = 4133;
lime_media_openal_AL.BYTE_OFFSET = 4134;
lime_media_openal_AL.SOURCE_TYPE = 4135;
lime_media_openal_AL.STATIC = 4136;
lime_media_openal_AL.STREAMING = 4137;
lime_media_openal_AL.UNDETERMINED = 4144;
lime_media_openal_AL.FORMAT_MONO8 = 4352;
lime_media_openal_AL.FORMAT_MONO16 = 4353;
lime_media_openal_AL.FORMAT_STEREO8 = 4354;
lime_media_openal_AL.FORMAT_STEREO16 = 4355;
lime_media_openal_AL.FREQUENCY = 8193;
lime_media_openal_AL.BITS = 8194;
lime_media_openal_AL.CHANNELS = 8195;
lime_media_openal_AL.SIZE = 8196;
lime_media_openal_AL.NO_ERROR = 0;
lime_media_openal_AL.INVALID_NAME = 40961;
lime_media_openal_AL.INVALID_ENUM = 40962;
lime_media_openal_AL.INVALID_VALUE = 40963;
lime_media_openal_AL.INVALID_OPERATION = 40964;
lime_media_openal_AL.OUT_OF_MEMORY = 40965;
lime_media_openal_AL.VENDOR = 45057;
lime_media_openal_AL.VERSION = 45058;
lime_media_openal_AL.RENDERER = 45059;
lime_media_openal_AL.EXTENSIONS = 45060;
lime_media_openal_AL.DOPPLER_FACTOR = 49152;
lime_media_openal_AL.SPEED_OF_SOUND = 49155;
lime_media_openal_AL.DOPPLER_VELOCITY = 49153;
lime_media_openal_AL.DISTANCE_MODEL = 53248;
lime_media_openal_AL.INVERSE_DISTANCE = 53249;
lime_media_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_media_openal_AL.LINEAR_DISTANCE = 53251;
lime_media_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_media_openal_AL.EXPONENT_DISTANCE = 53253;
lime_media_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_media_openal_AL.METERS_PER_UNIT = 131076;
lime_media_openal_AL.DIRECT_FILTER = 131077;
lime_media_openal_AL.AUXILIARY_SEND_FILTER = 131078;
lime_media_openal_AL.AIR_ABSORPTION_FACTOR = 131079;
lime_media_openal_AL.ROOM_ROLLOFF_FACTOR = 131080;
lime_media_openal_AL.CONE_OUTER_GAINHF = 131081;
lime_media_openal_AL.DIRECT_FILTER_GAINHF_AUTO = 131082;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAIN_AUTO = 131083;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAINHF_AUTO = 131084;
lime_media_openal_AL.REVERB_DENSITY = 1;
lime_media_openal_AL.REVERB_DIFFUSION = 2;
lime_media_openal_AL.REVERB_GAIN = 3;
lime_media_openal_AL.REVERB_GAINHF = 4;
lime_media_openal_AL.REVERB_DECAY_TIME = 5;
lime_media_openal_AL.REVERB_DECAY_HFRATIO = 6;
lime_media_openal_AL.REVERB_REFLECTIONS_GAIN = 7;
lime_media_openal_AL.REVERB_REFLECTIONS_DELAY = 8;
lime_media_openal_AL.REVERB_LATE_REVERB_GAIN = 9;
lime_media_openal_AL.REVERB_LATE_REVERB_DELAY = 10;
lime_media_openal_AL.REVERB_AIR_ABSORPTION_GAINHF = 11;
lime_media_openal_AL.REVERB_ROOM_ROLLOFF_FACTOR = 12;
lime_media_openal_AL.REVERB_DECAY_HFLIMIT = 13;
lime_media_openal_AL.EAXREVERB_DENSITY = 1;
lime_media_openal_AL.EAXREVERB_DIFFUSION = 2;
lime_media_openal_AL.EAXREVERB_GAIN = 3;
lime_media_openal_AL.EAXREVERB_GAINHF = 4;
lime_media_openal_AL.EAXREVERB_GAINLF = 5;
lime_media_openal_AL.EAXREVERB_DECAY_TIME = 6;
lime_media_openal_AL.EAXREVERB_DECAY_HFRATIO = 7;
lime_media_openal_AL.EAXREVERB_DECAY_LFRATIO = 8;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_GAIN = 9;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_DELAY = 10;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_PAN = 11;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_GAIN = 12;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_DELAY = 13;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_PAN = 14;
lime_media_openal_AL.EAXREVERB_ECHO_TIME = 15;
lime_media_openal_AL.EAXREVERB_ECHO_DEPTH = 16;
lime_media_openal_AL.EAXREVERB_MODULATION_TIME = 17;
lime_media_openal_AL.EAXREVERB_MODULATION_DEPTH = 18;
lime_media_openal_AL.EAXREVERB_AIR_ABSORPTION_GAINHF = 19;
lime_media_openal_AL.EAXREVERB_HFREFERENCE = 20;
lime_media_openal_AL.EAXREVERB_LFREFERENCE = 21;
lime_media_openal_AL.EAXREVERB_ROOM_ROLLOFF_FACTOR = 22;
lime_media_openal_AL.EAXREVERB_DECAY_HFLIMIT = 23;
lime_media_openal_AL.CHORUS_WAVEFORM = 1;
lime_media_openal_AL.CHORUS_PHASE = 2;
lime_media_openal_AL.CHORUS_RATE = 3;
lime_media_openal_AL.CHORUS_DEPTH = 4;
lime_media_openal_AL.CHORUS_FEEDBACK = 5;
lime_media_openal_AL.CHORUS_DELAY = 6;
lime_media_openal_AL.DISTORTION_EDGE = 1;
lime_media_openal_AL.DISTORTION_GAIN = 2;
lime_media_openal_AL.DISTORTION_LOWPASS_CUTOFF = 3;
lime_media_openal_AL.DISTORTION_EQCENTER = 4;
lime_media_openal_AL.DISTORTION_EQBANDWIDTH = 5;
lime_media_openal_AL.ECHO_DELAY = 1;
lime_media_openal_AL.ECHO_LRDELAY = 2;
lime_media_openal_AL.ECHO_DAMPING = 3;
lime_media_openal_AL.ECHO_FEEDBACK = 4;
lime_media_openal_AL.ECHO_SPREAD = 5;
lime_media_openal_AL.FLANGER_WAVEFORM = 1;
lime_media_openal_AL.FLANGER_PHASE = 2;
lime_media_openal_AL.FLANGER_RATE = 3;
lime_media_openal_AL.FLANGER_DEPTH = 4;
lime_media_openal_AL.FLANGER_FEEDBACK = 5;
lime_media_openal_AL.FLANGER_DELAY = 6;
lime_media_openal_AL.FREQUENCY_SHIFTER_FREQUENCY = 1;
lime_media_openal_AL.FREQUENCY_SHIFTER_LEFT_DIRECTION = 2;
lime_media_openal_AL.FREQUENCY_SHIFTER_RIGHT_DIRECTION = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA = 1;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA_COARSE_TUNING = 2;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB_COARSE_TUNING = 4;
lime_media_openal_AL.VOCAL_MORPHER_WAVEFORM = 5;
lime_media_openal_AL.VOCAL_MORPHER_RATE = 6;
lime_media_openal_AL.PITCH_SHIFTER_COARSE_TUNE = 1;
lime_media_openal_AL.PITCH_SHIFTER_FINE_TUNE = 2;
lime_media_openal_AL.RING_MODULATOR_FREQUENCY = 1;
lime_media_openal_AL.RING_MODULATOR_HIGHPASS_CUTOFF = 2;
lime_media_openal_AL.RING_MODULATOR_WAVEFORM = 3;
lime_media_openal_AL.AUTOWAH_ATTACK_TIME = 1;
lime_media_openal_AL.AUTOWAH_RELEASE_TIME = 2;
lime_media_openal_AL.AUTOWAH_RESONANCE = 3;
lime_media_openal_AL.AUTOWAH_PEAK_GAIN = 4;
lime_media_openal_AL.COMPRESSOR_ONOFF = 1;
lime_media_openal_AL.EQUALIZER_LOW_GAIN = 1;
lime_media_openal_AL.EQUALIZER_LOW_CUTOFF = 2;
lime_media_openal_AL.EQUALIZER_MID1_GAIN = 3;
lime_media_openal_AL.EQUALIZER_MID1_CENTER = 4;
lime_media_openal_AL.EQUALIZER_MID1_WIDTH = 5;
lime_media_openal_AL.EQUALIZER_MID2_GAIN = 6;
lime_media_openal_AL.EQUALIZER_MID2_CENTER = 7;
lime_media_openal_AL.EQUALIZER_MID2_WIDTH = 8;
lime_media_openal_AL.EQUALIZER_HIGH_GAIN = 9;
lime_media_openal_AL.EQUALIZER_HIGH_CUTOFF = 10;
lime_media_openal_AL.EFFECT_FIRST_PARAMETER = 0;
lime_media_openal_AL.EFFECT_LAST_PARAMETER = 32768;
lime_media_openal_AL.EFFECT_TYPE = 32769;
lime_media_openal_AL.EFFECT_NULL = 0;
lime_media_openal_AL.EFFECT_EAXREVERB = 32768;
lime_media_openal_AL.EFFECT_REVERB = 1;
lime_media_openal_AL.EFFECT_CHORUS = 2;
lime_media_openal_AL.EFFECT_DISTORTION = 3;
lime_media_openal_AL.EFFECT_ECHO = 4;
lime_media_openal_AL.EFFECT_FLANGER = 5;
lime_media_openal_AL.EFFECT_FREQUENCY_SHIFTER = 6;
lime_media_openal_AL.EFFECT_VOCAL_MORPHER = 7;
lime_media_openal_AL.EFFECT_PITCH_SHIFTER = 8;
lime_media_openal_AL.EFFECT_RING_MODULATOR = 9;
lime_media_openal_AL.FFECT_AUTOWAH = 10;
lime_media_openal_AL.EFFECT_COMPRESSOR = 11;
lime_media_openal_AL.EFFECT_EQUALIZER = 12;
lime_media_openal_AL.EFFECTSLOT_EFFECT = 1;
lime_media_openal_AL.EFFECTSLOT_GAIN = 2;
lime_media_openal_AL.EFFECTSLOT_AUXILIARY_SEND_AUTO = 3;
lime_media_openal_AL.LOWPASS_GAIN = 1;
lime_media_openal_AL.LOWPASS_GAINHF = 2;
lime_media_openal_AL.HIGHPASS_GAIN = 1;
lime_media_openal_AL.HIGHPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAIN = 1;
lime_media_openal_AL.BANDPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAINHF = 3;
lime_media_openal_AL.FILTER_FIRST_PARAMETER = 0;
lime_media_openal_AL.FILTER_LAST_PARAMETER = 32768;
lime_media_openal_AL.FILTER_TYPE = 32769;
lime_media_openal_AL.FILTER_NULL = 0;
lime_media_openal_AL.FILTER_LOWPASS = 1;
lime_media_openal_AL.FILTER_HIGHPASS = 2;
lime_media_openal_AL.FILTER_BANDPASS = 3;
lime_media_openal_ALC.FALSE = 0;
lime_media_openal_ALC.TRUE = 1;
lime_media_openal_ALC.FREQUENCY = 4103;
lime_media_openal_ALC.REFRESH = 4104;
lime_media_openal_ALC.SYNC = 4105;
lime_media_openal_ALC.MONO_SOURCES = 4112;
lime_media_openal_ALC.STEREO_SOURCES = 4113;
lime_media_openal_ALC.NO_ERROR = 0;
lime_media_openal_ALC.INVALID_DEVICE = 40961;
lime_media_openal_ALC.INVALID_CONTEXT = 40962;
lime_media_openal_ALC.INVALID_ENUM = 40963;
lime_media_openal_ALC.INVALID_VALUE = 40964;
lime_media_openal_ALC.OUT_OF_MEMORY = 40965;
lime_media_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_media_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_media_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_media_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_media_openal_ALC.EXTENSIONS = 4102;
lime_media_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_media_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_media_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_system_System.__directories = new haxe_ds_IntMap();
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_GamepadAxis.LEFT_X = 0;
lime_ui_GamepadAxis.LEFT_Y = 1;
lime_ui_GamepadAxis.RIGHT_X = 2;
lime_ui_GamepadAxis.RIGHT_Y = 3;
lime_ui_GamepadAxis.TRIGGER_LEFT = 4;
lime_ui_GamepadAxis.TRIGGER_RIGHT = 5;
lime_ui_GamepadButton.A = 0;
lime_ui_GamepadButton.B = 1;
lime_ui_GamepadButton.X = 2;
lime_ui_GamepadButton.Y = 3;
lime_ui_GamepadButton.BACK = 4;
lime_ui_GamepadButton.GUIDE = 5;
lime_ui_GamepadButton.START = 6;
lime_ui_GamepadButton.LEFT_STICK = 7;
lime_ui_GamepadButton.RIGHT_STICK = 8;
lime_ui_GamepadButton.LEFT_SHOULDER = 9;
lime_ui_GamepadButton.RIGHT_SHOULDER = 10;
lime_ui_GamepadButton.DPAD_UP = 11;
lime_ui_GamepadButton.DPAD_DOWN = 12;
lime_ui_GamepadButton.DPAD_LEFT = 13;
lime_ui_GamepadButton.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_JoystickHatPosition.CENTER = 0;
lime_ui_JoystickHatPosition.DOWN = 4;
lime_ui_JoystickHatPosition.LEFT = 8;
lime_ui_JoystickHatPosition.RIGHT = 2;
lime_ui_JoystickHatPosition.UP = 1;
lime_ui_JoystickHatPosition.DOWN_LEFT = 12;
lime_ui_JoystickHatPosition.DOWN_RIGHT = 6;
lime_ui_JoystickHatPosition.UP_LEFT = 9;
lime_ui_JoystickHatPosition.UP_RIGHT = 3;
lime_ui_KeyCode.UNKNOWN = 0;
lime_ui_KeyCode.BACKSPACE = 8;
lime_ui_KeyCode.TAB = 9;
lime_ui_KeyCode.RETURN = 13;
lime_ui_KeyCode.ESCAPE = 27;
lime_ui_KeyCode.SPACE = 32;
lime_ui_KeyCode.EXCLAMATION = 33;
lime_ui_KeyCode.QUOTE = 34;
lime_ui_KeyCode.HASH = 35;
lime_ui_KeyCode.DOLLAR = 36;
lime_ui_KeyCode.PERCENT = 37;
lime_ui_KeyCode.AMPERSAND = 38;
lime_ui_KeyCode.SINGLE_QUOTE = 39;
lime_ui_KeyCode.LEFT_PARENTHESIS = 40;
lime_ui_KeyCode.RIGHT_PARENTHESIS = 41;
lime_ui_KeyCode.ASTERISK = 42;
lime_ui_KeyCode.PLUS = 43;
lime_ui_KeyCode.COMMA = 44;
lime_ui_KeyCode.MINUS = 45;
lime_ui_KeyCode.PERIOD = 46;
lime_ui_KeyCode.SLASH = 47;
lime_ui_KeyCode.NUMBER_0 = 48;
lime_ui_KeyCode.NUMBER_1 = 49;
lime_ui_KeyCode.NUMBER_2 = 50;
lime_ui_KeyCode.NUMBER_3 = 51;
lime_ui_KeyCode.NUMBER_4 = 52;
lime_ui_KeyCode.NUMBER_5 = 53;
lime_ui_KeyCode.NUMBER_6 = 54;
lime_ui_KeyCode.NUMBER_7 = 55;
lime_ui_KeyCode.NUMBER_8 = 56;
lime_ui_KeyCode.NUMBER_9 = 57;
lime_ui_KeyCode.COLON = 58;
lime_ui_KeyCode.SEMICOLON = 59;
lime_ui_KeyCode.LESS_THAN = 60;
lime_ui_KeyCode.EQUALS = 61;
lime_ui_KeyCode.GREATER_THAN = 62;
lime_ui_KeyCode.QUESTION = 63;
lime_ui_KeyCode.AT = 64;
lime_ui_KeyCode.LEFT_BRACKET = 91;
lime_ui_KeyCode.BACKSLASH = 92;
lime_ui_KeyCode.RIGHT_BRACKET = 93;
lime_ui_KeyCode.CARET = 94;
lime_ui_KeyCode.UNDERSCORE = 95;
lime_ui_KeyCode.GRAVE = 96;
lime_ui_KeyCode.A = 97;
lime_ui_KeyCode.B = 98;
lime_ui_KeyCode.C = 99;
lime_ui_KeyCode.D = 100;
lime_ui_KeyCode.E = 101;
lime_ui_KeyCode.F = 102;
lime_ui_KeyCode.G = 103;
lime_ui_KeyCode.H = 104;
lime_ui_KeyCode.I = 105;
lime_ui_KeyCode.J = 106;
lime_ui_KeyCode.K = 107;
lime_ui_KeyCode.L = 108;
lime_ui_KeyCode.M = 109;
lime_ui_KeyCode.N = 110;
lime_ui_KeyCode.O = 111;
lime_ui_KeyCode.P = 112;
lime_ui_KeyCode.Q = 113;
lime_ui_KeyCode.R = 114;
lime_ui_KeyCode.S = 115;
lime_ui_KeyCode.T = 116;
lime_ui_KeyCode.U = 117;
lime_ui_KeyCode.V = 118;
lime_ui_KeyCode.W = 119;
lime_ui_KeyCode.X = 120;
lime_ui_KeyCode.Y = 121;
lime_ui_KeyCode.Z = 122;
lime_ui_KeyCode.DELETE = 127;
lime_ui_KeyCode.CAPS_LOCK = 1073741881;
lime_ui_KeyCode.F1 = 1073741882;
lime_ui_KeyCode.F2 = 1073741883;
lime_ui_KeyCode.F3 = 1073741884;
lime_ui_KeyCode.F4 = 1073741885;
lime_ui_KeyCode.F5 = 1073741886;
lime_ui_KeyCode.F6 = 1073741887;
lime_ui_KeyCode.F7 = 1073741888;
lime_ui_KeyCode.F8 = 1073741889;
lime_ui_KeyCode.F9 = 1073741890;
lime_ui_KeyCode.F10 = 1073741891;
lime_ui_KeyCode.F11 = 1073741892;
lime_ui_KeyCode.F12 = 1073741893;
lime_ui_KeyCode.PRINT_SCREEN = 1073741894;
lime_ui_KeyCode.SCROLL_LOCK = 1073741895;
lime_ui_KeyCode.PAUSE = 1073741896;
lime_ui_KeyCode.INSERT = 1073741897;
lime_ui_KeyCode.HOME = 1073741898;
lime_ui_KeyCode.PAGE_UP = 1073741899;
lime_ui_KeyCode.END = 1073741901;
lime_ui_KeyCode.PAGE_DOWN = 1073741902;
lime_ui_KeyCode.RIGHT = 1073741903;
lime_ui_KeyCode.LEFT = 1073741904;
lime_ui_KeyCode.DOWN = 1073741905;
lime_ui_KeyCode.UP = 1073741906;
lime_ui_KeyCode.NUM_LOCK = 1073741907;
lime_ui_KeyCode.NUMPAD_DIVIDE = 1073741908;
lime_ui_KeyCode.NUMPAD_MULTIPLY = 1073741909;
lime_ui_KeyCode.NUMPAD_MINUS = 1073741910;
lime_ui_KeyCode.NUMPAD_PLUS = 1073741911;
lime_ui_KeyCode.NUMPAD_ENTER = 1073741912;
lime_ui_KeyCode.NUMPAD_1 = 1073741913;
lime_ui_KeyCode.NUMPAD_2 = 1073741914;
lime_ui_KeyCode.NUMPAD_3 = 1073741915;
lime_ui_KeyCode.NUMPAD_4 = 1073741916;
lime_ui_KeyCode.NUMPAD_5 = 1073741917;
lime_ui_KeyCode.NUMPAD_6 = 1073741918;
lime_ui_KeyCode.NUMPAD_7 = 1073741919;
lime_ui_KeyCode.NUMPAD_8 = 1073741920;
lime_ui_KeyCode.NUMPAD_9 = 1073741921;
lime_ui_KeyCode.NUMPAD_0 = 1073741922;
lime_ui_KeyCode.NUMPAD_PERIOD = 1073741923;
lime_ui_KeyCode.APPLICATION = 1073741925;
lime_ui_KeyCode.POWER = 1073741926;
lime_ui_KeyCode.NUMPAD_EQUALS = 1073741927;
lime_ui_KeyCode.F13 = 1073741928;
lime_ui_KeyCode.F14 = 1073741929;
lime_ui_KeyCode.F15 = 1073741930;
lime_ui_KeyCode.F16 = 1073741931;
lime_ui_KeyCode.F17 = 1073741932;
lime_ui_KeyCode.F18 = 1073741933;
lime_ui_KeyCode.F19 = 1073741934;
lime_ui_KeyCode.F20 = 1073741935;
lime_ui_KeyCode.F21 = 1073741936;
lime_ui_KeyCode.F22 = 1073741937;
lime_ui_KeyCode.F23 = 1073741938;
lime_ui_KeyCode.F24 = 1073741939;
lime_ui_KeyCode.EXECUTE = 1073741940;
lime_ui_KeyCode.HELP = 1073741941;
lime_ui_KeyCode.MENU = 1073741942;
lime_ui_KeyCode.SELECT = 1073741943;
lime_ui_KeyCode.STOP = 1073741944;
lime_ui_KeyCode.AGAIN = 1073741945;
lime_ui_KeyCode.UNDO = 1073741946;
lime_ui_KeyCode.CUT = 1073741947;
lime_ui_KeyCode.COPY = 1073741948;
lime_ui_KeyCode.PASTE = 1073741949;
lime_ui_KeyCode.FIND = 1073741950;
lime_ui_KeyCode.MUTE = 1073741951;
lime_ui_KeyCode.VOLUME_UP = 1073741952;
lime_ui_KeyCode.VOLUME_DOWN = 1073741953;
lime_ui_KeyCode.NUMPAD_COMMA = 1073741957;
lime_ui_KeyCode.ALT_ERASE = 1073741977;
lime_ui_KeyCode.SYSTEM_REQUEST = 1073741978;
lime_ui_KeyCode.CANCEL = 1073741979;
lime_ui_KeyCode.CLEAR = 1073741980;
lime_ui_KeyCode.PRIOR = 1073741981;
lime_ui_KeyCode.RETURN2 = 1073741982;
lime_ui_KeyCode.SEPARATOR = 1073741983;
lime_ui_KeyCode.OUT = 1073741984;
lime_ui_KeyCode.OPER = 1073741985;
lime_ui_KeyCode.CLEAR_AGAIN = 1073741986;
lime_ui_KeyCode.CRSEL = 1073741987;
lime_ui_KeyCode.EXSEL = 1073741988;
lime_ui_KeyCode.NUMPAD_00 = 1073742000;
lime_ui_KeyCode.NUMPAD_000 = 1073742001;
lime_ui_KeyCode.THOUSAND_SEPARATOR = 1073742002;
lime_ui_KeyCode.DECIMAL_SEPARATOR = 1073742003;
lime_ui_KeyCode.CURRENCY_UNIT = 1073742004;
lime_ui_KeyCode.CURRENCY_SUBUNIT = 1073742005;
lime_ui_KeyCode.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui_KeyCode.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui_KeyCode.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui_KeyCode.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui_KeyCode.NUMPAD_TAB = 1073742010;
lime_ui_KeyCode.NUMPAD_BACKSPACE = 1073742011;
lime_ui_KeyCode.NUMPAD_A = 1073742012;
lime_ui_KeyCode.NUMPAD_B = 1073742013;
lime_ui_KeyCode.NUMPAD_C = 1073742014;
lime_ui_KeyCode.NUMPAD_D = 1073742015;
lime_ui_KeyCode.NUMPAD_E = 1073742016;
lime_ui_KeyCode.NUMPAD_F = 1073742017;
lime_ui_KeyCode.NUMPAD_XOR = 1073742018;
lime_ui_KeyCode.NUMPAD_POWER = 1073742019;
lime_ui_KeyCode.NUMPAD_PERCENT = 1073742020;
lime_ui_KeyCode.NUMPAD_LESS_THAN = 1073742021;
lime_ui_KeyCode.NUMPAD_GREATER_THAN = 1073742022;
lime_ui_KeyCode.NUMPAD_AMPERSAND = 1073742023;
lime_ui_KeyCode.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui_KeyCode.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui_KeyCode.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui_KeyCode.NUMPAD_COLON = 1073742027;
lime_ui_KeyCode.NUMPAD_HASH = 1073742028;
lime_ui_KeyCode.NUMPAD_SPACE = 1073742029;
lime_ui_KeyCode.NUMPAD_AT = 1073742030;
lime_ui_KeyCode.NUMPAD_EXCLAMATION = 1073742031;
lime_ui_KeyCode.NUMPAD_MEM_STORE = 1073742032;
lime_ui_KeyCode.NUMPAD_MEM_RECALL = 1073742033;
lime_ui_KeyCode.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui_KeyCode.NUMPAD_MEM_ADD = 1073742035;
lime_ui_KeyCode.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui_KeyCode.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui_KeyCode.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui_KeyCode.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui_KeyCode.NUMPAD_CLEAR = 1073742040;
lime_ui_KeyCode.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui_KeyCode.NUMPAD_BINARY = 1073742042;
lime_ui_KeyCode.NUMPAD_OCTAL = 1073742043;
lime_ui_KeyCode.NUMPAD_DECIMAL = 1073742044;
lime_ui_KeyCode.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui_KeyCode.LEFT_CTRL = 1073742048;
lime_ui_KeyCode.LEFT_SHIFT = 1073742049;
lime_ui_KeyCode.LEFT_ALT = 1073742050;
lime_ui_KeyCode.LEFT_META = 1073742051;
lime_ui_KeyCode.RIGHT_CTRL = 1073742052;
lime_ui_KeyCode.RIGHT_SHIFT = 1073742053;
lime_ui_KeyCode.RIGHT_ALT = 1073742054;
lime_ui_KeyCode.RIGHT_META = 1073742055;
lime_ui_KeyCode.MODE = 1073742081;
lime_ui_KeyCode.AUDIO_NEXT = 1073742082;
lime_ui_KeyCode.AUDIO_PREVIOUS = 1073742083;
lime_ui_KeyCode.AUDIO_STOP = 1073742084;
lime_ui_KeyCode.AUDIO_PLAY = 1073742085;
lime_ui_KeyCode.AUDIO_MUTE = 1073742086;
lime_ui_KeyCode.MEDIA_SELECT = 1073742087;
lime_ui_KeyCode.WWW = 1073742088;
lime_ui_KeyCode.MAIL = 1073742089;
lime_ui_KeyCode.CALCULATOR = 1073742090;
lime_ui_KeyCode.COMPUTER = 1073742091;
lime_ui_KeyCode.APP_CONTROL_SEARCH = 1073742092;
lime_ui_KeyCode.APP_CONTROL_HOME = 1073742093;
lime_ui_KeyCode.APP_CONTROL_BACK = 1073742094;
lime_ui_KeyCode.APP_CONTROL_FORWARD = 1073742095;
lime_ui_KeyCode.APP_CONTROL_STOP = 1073742096;
lime_ui_KeyCode.APP_CONTROL_REFRESH = 1073742097;
lime_ui_KeyCode.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui_KeyCode.BRIGHTNESS_DOWN = 1073742099;
lime_ui_KeyCode.BRIGHTNESS_UP = 1073742100;
lime_ui_KeyCode.DISPLAY_SWITCH = 1073742101;
lime_ui_KeyCode.BACKLIGHT_TOGGLE = 1073742102;
lime_ui_KeyCode.BACKLIGHT_DOWN = 1073742103;
lime_ui_KeyCode.BACKLIGHT_UP = 1073742104;
lime_ui_KeyCode.EJECT = 1073742105;
lime_ui_KeyCode.SLEEP = 1073742106;
lime_ui_KeyModifier.NONE = 0;
lime_ui_KeyModifier.LEFT_SHIFT = 1;
lime_ui_KeyModifier.RIGHT_SHIFT = 2;
lime_ui_KeyModifier.LEFT_CTRL = 64;
lime_ui_KeyModifier.RIGHT_CTRL = 128;
lime_ui_KeyModifier.LEFT_ALT = 256;
lime_ui_KeyModifier.RIGHT_ALT = 512;
lime_ui_KeyModifier.LEFT_META = 1024;
lime_ui_KeyModifier.RIGHT_META = 2048;
lime_ui_KeyModifier.NUM_LOCK = 4096;
lime_ui_KeyModifier.CAPS_LOCK = 8192;
lime_ui_KeyModifier.MODE = 16384;
lime_ui_KeyModifier.CTRL = 192;
lime_ui_KeyModifier.SHIFT = 3;
lime_ui_KeyModifier.ALT = 768;
lime_ui_KeyModifier.META = 3072;
lime_ui_ScanCode.UNKNOWN = 0;
lime_ui_ScanCode.BACKSPACE = 42;
lime_ui_ScanCode.TAB = 43;
lime_ui_ScanCode.RETURN = 40;
lime_ui_ScanCode.ESCAPE = 41;
lime_ui_ScanCode.SPACE = 44;
lime_ui_ScanCode.SINGLE_QUOTE = 52;
lime_ui_ScanCode.COMMA = 54;
lime_ui_ScanCode.MINUS = 45;
lime_ui_ScanCode.PERIOD = 55;
lime_ui_ScanCode.SLASH = 56;
lime_ui_ScanCode.NUMBER_0 = 39;
lime_ui_ScanCode.NUMBER_1 = 30;
lime_ui_ScanCode.NUMBER_2 = 31;
lime_ui_ScanCode.NUMBER_3 = 32;
lime_ui_ScanCode.NUMBER_4 = 33;
lime_ui_ScanCode.NUMBER_5 = 34;
lime_ui_ScanCode.NUMBER_6 = 35;
lime_ui_ScanCode.NUMBER_7 = 36;
lime_ui_ScanCode.NUMBER_8 = 37;
lime_ui_ScanCode.NUMBER_9 = 38;
lime_ui_ScanCode.SEMICOLON = 51;
lime_ui_ScanCode.EQUALS = 46;
lime_ui_ScanCode.LEFT_BRACKET = 47;
lime_ui_ScanCode.BACKSLASH = 49;
lime_ui_ScanCode.RIGHT_BRACKET = 48;
lime_ui_ScanCode.GRAVE = 53;
lime_ui_ScanCode.A = 4;
lime_ui_ScanCode.B = 5;
lime_ui_ScanCode.C = 6;
lime_ui_ScanCode.D = 7;
lime_ui_ScanCode.E = 8;
lime_ui_ScanCode.F = 9;
lime_ui_ScanCode.G = 10;
lime_ui_ScanCode.H = 11;
lime_ui_ScanCode.I = 12;
lime_ui_ScanCode.J = 13;
lime_ui_ScanCode.K = 14;
lime_ui_ScanCode.L = 15;
lime_ui_ScanCode.M = 16;
lime_ui_ScanCode.N = 17;
lime_ui_ScanCode.O = 18;
lime_ui_ScanCode.P = 19;
lime_ui_ScanCode.Q = 20;
lime_ui_ScanCode.R = 21;
lime_ui_ScanCode.S = 22;
lime_ui_ScanCode.T = 23;
lime_ui_ScanCode.U = 24;
lime_ui_ScanCode.V = 25;
lime_ui_ScanCode.W = 26;
lime_ui_ScanCode.X = 27;
lime_ui_ScanCode.Y = 28;
lime_ui_ScanCode.Z = 29;
lime_ui_ScanCode.DELETE = 76;
lime_ui_ScanCode.CAPS_LOCK = 57;
lime_ui_ScanCode.F1 = 58;
lime_ui_ScanCode.F2 = 59;
lime_ui_ScanCode.F3 = 60;
lime_ui_ScanCode.F4 = 61;
lime_ui_ScanCode.F5 = 62;
lime_ui_ScanCode.F6 = 63;
lime_ui_ScanCode.F7 = 64;
lime_ui_ScanCode.F8 = 65;
lime_ui_ScanCode.F9 = 66;
lime_ui_ScanCode.F10 = 67;
lime_ui_ScanCode.F11 = 68;
lime_ui_ScanCode.F12 = 69;
lime_ui_ScanCode.PRINT_SCREEN = 70;
lime_ui_ScanCode.SCROLL_LOCK = 71;
lime_ui_ScanCode.PAUSE = 72;
lime_ui_ScanCode.INSERT = 73;
lime_ui_ScanCode.HOME = 74;
lime_ui_ScanCode.PAGE_UP = 75;
lime_ui_ScanCode.END = 77;
lime_ui_ScanCode.PAGE_DOWN = 78;
lime_ui_ScanCode.RIGHT = 79;
lime_ui_ScanCode.LEFT = 80;
lime_ui_ScanCode.DOWN = 81;
lime_ui_ScanCode.UP = 82;
lime_ui_ScanCode.NUM_LOCK = 83;
lime_ui_ScanCode.NUMPAD_DIVIDE = 84;
lime_ui_ScanCode.NUMPAD_MULTIPLY = 85;
lime_ui_ScanCode.NUMPAD_MINUS = 86;
lime_ui_ScanCode.NUMPAD_PLUS = 87;
lime_ui_ScanCode.NUMPAD_ENTER = 88;
lime_ui_ScanCode.NUMPAD_1 = 89;
lime_ui_ScanCode.NUMPAD_2 = 90;
lime_ui_ScanCode.NUMPAD_3 = 91;
lime_ui_ScanCode.NUMPAD_4 = 92;
lime_ui_ScanCode.NUMPAD_5 = 93;
lime_ui_ScanCode.NUMPAD_6 = 94;
lime_ui_ScanCode.NUMPAD_7 = 95;
lime_ui_ScanCode.NUMPAD_8 = 96;
lime_ui_ScanCode.NUMPAD_9 = 97;
lime_ui_ScanCode.NUMPAD_0 = 98;
lime_ui_ScanCode.NUMPAD_PERIOD = 99;
lime_ui_ScanCode.APPLICATION = 101;
lime_ui_ScanCode.POWER = 102;
lime_ui_ScanCode.NUMPAD_EQUALS = 103;
lime_ui_ScanCode.F13 = 104;
lime_ui_ScanCode.F14 = 105;
lime_ui_ScanCode.F15 = 106;
lime_ui_ScanCode.F16 = 107;
lime_ui_ScanCode.F17 = 108;
lime_ui_ScanCode.F18 = 109;
lime_ui_ScanCode.F19 = 110;
lime_ui_ScanCode.F20 = 111;
lime_ui_ScanCode.F21 = 112;
lime_ui_ScanCode.F22 = 113;
lime_ui_ScanCode.F23 = 114;
lime_ui_ScanCode.F24 = 115;
lime_ui_ScanCode.EXECUTE = 116;
lime_ui_ScanCode.HELP = 117;
lime_ui_ScanCode.MENU = 118;
lime_ui_ScanCode.SELECT = 119;
lime_ui_ScanCode.STOP = 120;
lime_ui_ScanCode.AGAIN = 121;
lime_ui_ScanCode.UNDO = 122;
lime_ui_ScanCode.CUT = 123;
lime_ui_ScanCode.COPY = 124;
lime_ui_ScanCode.PASTE = 125;
lime_ui_ScanCode.FIND = 126;
lime_ui_ScanCode.MUTE = 127;
lime_ui_ScanCode.VOLUME_UP = 128;
lime_ui_ScanCode.VOLUME_DOWN = 129;
lime_ui_ScanCode.NUMPAD_COMMA = 133;
lime_ui_ScanCode.ALT_ERASE = 153;
lime_ui_ScanCode.SYSTEM_REQUEST = 154;
lime_ui_ScanCode.CANCEL = 155;
lime_ui_ScanCode.CLEAR = 156;
lime_ui_ScanCode.PRIOR = 157;
lime_ui_ScanCode.RETURN2 = 158;
lime_ui_ScanCode.SEPARATOR = 159;
lime_ui_ScanCode.OUT = 160;
lime_ui_ScanCode.OPER = 161;
lime_ui_ScanCode.CLEAR_AGAIN = 162;
lime_ui_ScanCode.CRSEL = 163;
lime_ui_ScanCode.EXSEL = 164;
lime_ui_ScanCode.NUMPAD_00 = 176;
lime_ui_ScanCode.NUMPAD_000 = 177;
lime_ui_ScanCode.THOUSAND_SEPARATOR = 178;
lime_ui_ScanCode.DECIMAL_SEPARATOR = 179;
lime_ui_ScanCode.CURRENCY_UNIT = 180;
lime_ui_ScanCode.CURRENCY_SUBUNIT = 181;
lime_ui_ScanCode.NUMPAD_LEFT_PARENTHESIS = 182;
lime_ui_ScanCode.NUMPAD_RIGHT_PARENTHESIS = 183;
lime_ui_ScanCode.NUMPAD_LEFT_BRACE = 184;
lime_ui_ScanCode.NUMPAD_RIGHT_BRACE = 185;
lime_ui_ScanCode.NUMPAD_TAB = 186;
lime_ui_ScanCode.NUMPAD_BACKSPACE = 187;
lime_ui_ScanCode.NUMPAD_A = 188;
lime_ui_ScanCode.NUMPAD_B = 189;
lime_ui_ScanCode.NUMPAD_C = 190;
lime_ui_ScanCode.NUMPAD_D = 191;
lime_ui_ScanCode.NUMPAD_E = 192;
lime_ui_ScanCode.NUMPAD_F = 193;
lime_ui_ScanCode.NUMPAD_XOR = 194;
lime_ui_ScanCode.NUMPAD_POWER = 195;
lime_ui_ScanCode.NUMPAD_PERCENT = 196;
lime_ui_ScanCode.NUMPAD_LESS_THAN = 197;
lime_ui_ScanCode.NUMPAD_GREATER_THAN = 198;
lime_ui_ScanCode.NUMPAD_AMPERSAND = 199;
lime_ui_ScanCode.NUMPAD_DOUBLE_AMPERSAND = 200;
lime_ui_ScanCode.NUMPAD_VERTICAL_BAR = 201;
lime_ui_ScanCode.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
lime_ui_ScanCode.NUMPAD_COLON = 203;
lime_ui_ScanCode.NUMPAD_HASH = 204;
lime_ui_ScanCode.NUMPAD_SPACE = 205;
lime_ui_ScanCode.NUMPAD_AT = 206;
lime_ui_ScanCode.NUMPAD_EXCLAMATION = 207;
lime_ui_ScanCode.NUMPAD_MEM_STORE = 208;
lime_ui_ScanCode.NUMPAD_MEM_RECALL = 209;
lime_ui_ScanCode.NUMPAD_MEM_CLEAR = 210;
lime_ui_ScanCode.NUMPAD_MEM_ADD = 211;
lime_ui_ScanCode.NUMPAD_MEM_SUBTRACT = 212;
lime_ui_ScanCode.NUMPAD_MEM_MULTIPLY = 213;
lime_ui_ScanCode.NUMPAD_MEM_DIVIDE = 214;
lime_ui_ScanCode.NUMPAD_PLUS_MINUS = 215;
lime_ui_ScanCode.NUMPAD_CLEAR = 216;
lime_ui_ScanCode.NUMPAD_CLEAR_ENTRY = 217;
lime_ui_ScanCode.NUMPAD_BINARY = 218;
lime_ui_ScanCode.NUMPAD_OCTAL = 219;
lime_ui_ScanCode.NUMPAD_DECIMAL = 220;
lime_ui_ScanCode.NUMPAD_HEXADECIMAL = 221;
lime_ui_ScanCode.LEFT_CTRL = 224;
lime_ui_ScanCode.LEFT_SHIFT = 225;
lime_ui_ScanCode.LEFT_ALT = 226;
lime_ui_ScanCode.LEFT_META = 227;
lime_ui_ScanCode.RIGHT_CTRL = 228;
lime_ui_ScanCode.RIGHT_SHIFT = 229;
lime_ui_ScanCode.RIGHT_ALT = 230;
lime_ui_ScanCode.RIGHT_META = 231;
lime_ui_ScanCode.MODE = 257;
lime_ui_ScanCode.AUDIO_NEXT = 258;
lime_ui_ScanCode.AUDIO_PREVIOUS = 259;
lime_ui_ScanCode.AUDIO_STOP = 260;
lime_ui_ScanCode.AUDIO_PLAY = 261;
lime_ui_ScanCode.AUDIO_MUTE = 262;
lime_ui_ScanCode.MEDIA_SELECT = 263;
lime_ui_ScanCode.WWW = 264;
lime_ui_ScanCode.MAIL = 265;
lime_ui_ScanCode.CALCULATOR = 266;
lime_ui_ScanCode.COMPUTER = 267;
lime_ui_ScanCode.APP_CONTROL_SEARCH = 268;
lime_ui_ScanCode.APP_CONTROL_HOME = 269;
lime_ui_ScanCode.APP_CONTROL_BACK = 270;
lime_ui_ScanCode.APP_CONTROL_FORWARD = 271;
lime_ui_ScanCode.APP_CONTROL_STOP = 272;
lime_ui_ScanCode.APP_CONTROL_REFRESH = 273;
lime_ui_ScanCode.APP_CONTROL_BOOKMARKS = 274;
lime_ui_ScanCode.BRIGHTNESS_DOWN = 275;
lime_ui_ScanCode.BRIGHTNESS_UP = 276;
lime_ui_ScanCode.DISPLAY_SWITCH = 277;
lime_ui_ScanCode.BACKLIGHT_TOGGLE = 278;
lime_ui_ScanCode.BACKLIGHT_DOWN = 279;
lime_ui_ScanCode.BACKLIGHT_UP = 280;
lime_ui_ScanCode.EJECT = 281;
lime_ui_ScanCode.SLEEP = 282;
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.bundlePaths = new haxe_ds_StringMap();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Float32Array.BYTES_PER_ELEMENT = 4;
lime_utils_Float64Array.BYTES_PER_ELEMENT = 8;
lime_utils_Int16Array.BYTES_PER_ELEMENT = 2;
lime_utils_Int32Array.BYTES_PER_ELEMENT = 4;
lime_utils_Int8Array.BYTES_PER_ELEMENT = 1;
lime_utils_Log.throwErrors = true;
lime_utils_LogLevel.NONE = 0;
lime_utils_LogLevel.ERROR = 1;
lime_utils_LogLevel.WARN = 2;
lime_utils_LogLevel.INFO = 3;
lime_utils_LogLevel.DEBUG = 4;
lime_utils_LogLevel.VERBOSE = 5;
lime_utils_UInt16Array.BYTES_PER_ELEMENT = 2;
lime_utils_UInt32Array.BYTES_PER_ELEMENT = 4;
lime_utils_UInt8Array.BYTES_PER_ELEMENT = 1;
lime_utils_UInt8ClampedArray.BYTES_PER_ELEMENT = 1;
org_poly2tri_Constants.kAlpha = 0.3;
org_poly2tri_Constants.EPSILON = 1e-12;
org_poly2tri_Constants.PI_2 = Math.PI / 2;
org_poly2tri_Constants.PI_3div4 = 3 * Math.PI / 4;
org_poly2tri_Orientation.CW = 1;
org_poly2tri_Orientation.CCW = -1;
org_poly2tri_Orientation.COLLINEAR = 0;
org_poly2tri_Point.C_ID = 0;
org_poly2tri_Triangle.CW_OFFSET = 1;
org_poly2tri_Triangle.CCW_OFFSET = -1;
trilateral2_Algebra.quadStep = 0.03;
trilateral2_Algebra.cubicStep = 0.03;
trilateral2_Contour.smallDotScale = 0.07;
trilateral2Lime_app_AppGL.largeEnough = 2000000;
trilateral2Lime_app_AppGL.stageRadius = 600;
trilateral2Lime_shader_ShaderStrings.vertexSimpleColor = "precision mediump float;" + "precision mediump int;" + "attribute vec2 vertexPosition;" + "attribute vec3 vertexColor;" + "varying vec3 vColor;" + "void main() {" + "gl_Position = vec4(vertexPosition, 0.0, 1.0);" + "vColor = vertexColor;" + "}";
trilateral2Lime_shader_ShaderStrings.fragmentSimpleColor = "precision mediump float;" + "precision mediump int;" + "varying vec3 vColor;" + "void main() {" + "gl_FragColor = vec4( vColor, 1.0 );" + "}";
trilateral2Lime_shader_ShaderStrings.vertexColor = "precision mediump float;" + "precision mediump int;" + "attribute vec3 vertexPosition;" + "attribute vec4 vertexColor;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(vertexPosition, 1.);" + " vcol = vertexColor;" + "}";
trilateral2Lime_shader_ShaderStrings.fragmentColor = "precision mediump float;" + "precision mediump int;" + "varying vec4 vcol;" + "void main(void) {" + "gl_FragColor = vcol;" + "}";
trilateral2Lime_shader_ShaderStrings.vertexTexture = "precision mediump float;" + "precision mediump int;" + "attribute vec2 aVertexPosition;" + "attribute vec2 aTexCoord;" + "uniform mat4 uMatrix;" + "varying vec2 vTexCoord;" + "void main (void) {" + "vTexCoord = aTexCoord;" + "gl_Position = uMatrix * vec4 (aVertexPosition, 0.0, 1.0);" + "}";
trilateral2Lime_shader_ShaderStrings.fragmentTexture = "precision mediump float;" + "varying vec2 vTexCoord;" + "uniform sampler2D uImage0;" + "void main (void) {" + "gl_FragColor = texture2D( uImage0, vTexCoord );" + "}";
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

});
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.lime.$scripts = $hx_exports.lime.$scripts || {};
$hx_exports.lime.$scripts["Trilateral2Lime"] = $hx_script;
$hx_exports.lime.embed = function(projectName) { var exports = {};
	var script = $hx_exports.lime.$scripts[projectName];
	if (!script) throw Error("Cannot find project name \"" + projectName + "\"");
	script(exports, $global);
	for (var key in exports) $hx_exports[key] = $hx_exports[key] || exports[key];
	var lime = exports.lime || window.lime;
	if (lime && lime.embed && this != lime.embed) lime.embed.apply(lime, arguments);
	return exports;
};
if(typeof define == "function" && define.amd) {
	define([], function() { return $hx_exports.lime; });
	define.__amd = define.amd;
	define.amd = null;
}
})(typeof exports != "undefined" ? exports : typeof define == "function" && define.amd ? {} : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

/*! howler.js v2.1.1 | (c) 2013-2018, James Simpson of GoldFire Studios | MIT License | howlerjs.com */
!function(){"use strict";var e=function(){this.init()};e.prototype={init:function(){var e=this||n;return e._counter=1e3,e._html5AudioPool=[],e.html5PoolSize=10,e._codecs={},e._howls=[],e._muted=!1,e._volume=1,e._canPlayEvent="canplaythrough",e._navigator="undefined"!=typeof window&&window.navigator?window.navigator:null,e.masterGain=null,e.noAudio=!1,e.usingWebAudio=!0,e.autoSuspend=!0,e.ctx=null,e.autoUnlock=!0,e._setup(),e},volume:function(e){var o=this||n;if(e=parseFloat(e),o.ctx||_(),void 0!==e&&e>=0&&e<=1){if(o._volume=e,o._muted)return o;o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.volume=u._volume*e)}return o}return o._volume},mute:function(e){var o=this||n;o.ctx||_(),o._muted=e,o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e?0:o._volume,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.muted=!!e||u._muted)}return o},unload:function(){for(var e=this||n,o=e._howls.length-1;o>=0;o--)e._howls[o].unload();return e.usingWebAudio&&e.ctx&&void 0!==e.ctx.close&&(e.ctx.close(),e.ctx=null,_()),e},codecs:function(e){return(this||n)._codecs[e.replace(/^x-/,"")]},_setup:function(){var e=this||n;if(e.state=e.ctx?e.ctx.state||"suspended":"suspended",e._autoSuspend(),!e.usingWebAudio)if("undefined"!=typeof Audio)try{var o=new Audio;void 0===o.oncanplaythrough&&(e._canPlayEvent="canplay")}catch(n){e.noAudio=!0}else e.noAudio=!0;try{var o=new Audio;o.muted&&(e.noAudio=!0)}catch(e){}return e.noAudio||e._setupCodecs(),e},_setupCodecs:function(){var e=this||n,o=null;try{o="undefined"!=typeof Audio?new Audio:null}catch(n){return e}if(!o||"function"!=typeof o.canPlayType)return e;var t=o.canPlayType("audio/mpeg;").replace(/^no$/,""),r=e._navigator&&e._navigator.userAgent.match(/OPR\/([0-6].)/g),a=r&&parseInt(r[0].split("/")[1],10)<33;return e._codecs={mp3:!(a||!t&&!o.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!t,opus:!!o.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!o.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!o.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!o.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(o.canPlayType("audio/x-m4a;")||o.canPlayType("audio/m4a;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(o.canPlayType("audio/x-mp4;")||o.canPlayType("audio/mp4;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),dolby:!!o.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(o.canPlayType("audio/x-flac;")||o.canPlayType("audio/flac;")).replace(/^no$/,"")},e},_unlockAudio:function(){var e=this||n,o=/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(e._navigator&&e._navigator.userAgent);if(!e._audioUnlocked&&e.ctx&&o){e._audioUnlocked=!1,e.autoUnlock=!1,e._mobileUnloaded||44100===e.ctx.sampleRate||(e._mobileUnloaded=!0,e.unload()),e._scratchBuffer=e.ctx.createBuffer(1,1,22050);var t=function(n){for(var o=0;o<e.html5PoolSize;o++){var r=new Audio;r._unlocked=!0,e._releaseHtml5Audio(r)}for(var o=0;o<e._howls.length;o++)if(!e._howls[o]._webAudio)for(var a=e._howls[o]._getSoundIds(),u=0;u<a.length;u++){var i=e._howls[o]._soundById(a[u]);i&&i._node&&!i._node._unlocked&&(i._node._unlocked=!0,i._node.load())}e._autoResume();var d=e.ctx.createBufferSource();d.buffer=e._scratchBuffer,d.connect(e.ctx.destination),void 0===d.start?d.noteOn(0):d.start(0),"function"==typeof e.ctx.resume&&e.ctx.resume(),d.onended=function(){d.disconnect(0),e._audioUnlocked=!0,document.removeEventListener("touchstart",t,!0),document.removeEventListener("touchend",t,!0),document.removeEventListener("click",t,!0);for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("unlock")}};return document.addEventListener("touchstart",t,!0),document.addEventListener("touchend",t,!0),document.addEventListener("click",t,!0),e}},_obtainHtml5Audio:function(){var e=this||n;if(e._html5AudioPool.length)return e._html5AudioPool.pop();var o=(new Audio).play();return o&&"undefined"!=typeof Promise&&(o instanceof Promise||"function"==typeof o.then)&&o.catch(function(){console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.")}),new Audio},_releaseHtml5Audio:function(e){var o=this||n;return e._unlocked&&o._html5AudioPool.push(e),o},_autoSuspend:function(){var e=this;if(e.autoSuspend&&e.ctx&&void 0!==e.ctx.suspend&&n.usingWebAudio){for(var o=0;o<e._howls.length;o++)if(e._howls[o]._webAudio)for(var t=0;t<e._howls[o]._sounds.length;t++)if(!e._howls[o]._sounds[t]._paused)return e;return e._suspendTimer&&clearTimeout(e._suspendTimer),e._suspendTimer=setTimeout(function(){e.autoSuspend&&(e._suspendTimer=null,e.state="suspending",e.ctx.suspend().then(function(){e.state="suspended",e._resumeAfterSuspend&&(delete e._resumeAfterSuspend,e._autoResume())}))},3e4),e}},_autoResume:function(){var e=this;if(e.ctx&&void 0!==e.ctx.resume&&n.usingWebAudio)return"running"===e.state&&e._suspendTimer?(clearTimeout(e._suspendTimer),e._suspendTimer=null):"suspended"===e.state?(e.ctx.resume().then(function(){e.state="running";for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("resume")}),e._suspendTimer&&(clearTimeout(e._suspendTimer),e._suspendTimer=null)):"suspending"===e.state&&(e._resumeAfterSuspend=!0),e}};var n=new e,o=function(e){var n=this;if(!e.src||0===e.src.length)return void console.error("An array of source files must be passed with any new Howl.");n.init(e)};o.prototype={init:function(e){var o=this;return n.ctx||_(),o._autoplay=e.autoplay||!1,o._format="string"!=typeof e.format?e.format:[e.format],o._html5=e.html5||!1,o._muted=e.mute||!1,o._loop=e.loop||!1,o._pool=e.pool||5,o._preload="boolean"!=typeof e.preload||e.preload,o._rate=e.rate||1,o._sprite=e.sprite||{},o._src="string"!=typeof e.src?e.src:[e.src],o._volume=void 0!==e.volume?e.volume:1,o._xhrWithCredentials=e.xhrWithCredentials||!1,o._duration=0,o._state="unloaded",o._sounds=[],o._endTimers={},o._queue=[],o._playLock=!1,o._onend=e.onend?[{fn:e.onend}]:[],o._onfade=e.onfade?[{fn:e.onfade}]:[],o._onload=e.onload?[{fn:e.onload}]:[],o._onloaderror=e.onloaderror?[{fn:e.onloaderror}]:[],o._onplayerror=e.onplayerror?[{fn:e.onplayerror}]:[],o._onpause=e.onpause?[{fn:e.onpause}]:[],o._onplay=e.onplay?[{fn:e.onplay}]:[],o._onstop=e.onstop?[{fn:e.onstop}]:[],o._onmute=e.onmute?[{fn:e.onmute}]:[],o._onvolume=e.onvolume?[{fn:e.onvolume}]:[],o._onrate=e.onrate?[{fn:e.onrate}]:[],o._onseek=e.onseek?[{fn:e.onseek}]:[],o._onunlock=e.onunlock?[{fn:e.onunlock}]:[],o._onresume=[],o._webAudio=n.usingWebAudio&&!o._html5,void 0!==n.ctx&&n.ctx&&n.autoUnlock&&n._unlockAudio(),n._howls.push(o),o._autoplay&&o._queue.push({event:"play",action:function(){o.play()}}),o._preload&&o.load(),o},load:function(){var e=this,o=null;if(n.noAudio)return void e._emit("loaderror",null,"No audio support.");"string"==typeof e._src&&(e._src=[e._src]);for(var r=0;r<e._src.length;r++){var u,i;if(e._format&&e._format[r])u=e._format[r];else{if("string"!=typeof(i=e._src[r])){e._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}u=/^data:audio\/([^;,]+);/i.exec(i),u||(u=/\.([^.]+)$/.exec(i.split("?",1)[0])),u&&(u=u[1].toLowerCase())}if(u||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),u&&n.codecs(u)){o=e._src[r];break}}return o?(e._src=o,e._state="loading","https:"===window.location.protocol&&"http:"===o.slice(0,5)&&(e._html5=!0,e._webAudio=!1),new t(e),e._webAudio&&a(e),e):void e._emit("loaderror",null,"No codec support for selected audio sources.")},play:function(e,o){var t=this,r=null;if("number"==typeof e)r=e,e=null;else{if("string"==typeof e&&"loaded"===t._state&&!t._sprite[e])return null;if(void 0===e&&(e="__default",!t._playLock)){for(var a=0,u=0;u<t._sounds.length;u++)t._sounds[u]._paused&&!t._sounds[u]._ended&&(a++,r=t._sounds[u]._id);1===a?e=null:r=null}}var i=r?t._soundById(r):t._inactiveSound();if(!i)return null;if(r&&!e&&(e=i._sprite||"__default"),"loaded"!==t._state){i._sprite=e,i._ended=!1;var d=i._id;return t._queue.push({event:"play",action:function(){t.play(d)}}),d}if(r&&!i._paused)return o||t._loadQueue("play"),i._id;t._webAudio&&n._autoResume();var _=Math.max(0,i._seek>0?i._seek:t._sprite[e][0]/1e3),s=Math.max(0,(t._sprite[e][0]+t._sprite[e][1])/1e3-_),l=1e3*s/Math.abs(i._rate),c=t._sprite[e][0]/1e3,f=(t._sprite[e][0]+t._sprite[e][1])/1e3,p=!(!i._loop&&!t._sprite[e][2]);i._sprite=e,i._ended=!1;var m=function(){i._paused=!1,i._seek=_,i._start=c,i._stop=f,i._loop=p};if(_>=f)return void t._ended(i);var v=i._node;if(t._webAudio){var h=function(){t._playLock=!1,m(),t._refreshBuffer(i);var e=i._muted||t._muted?0:i._volume;v.gain.setValueAtTime(e,n.ctx.currentTime),i._playStart=n.ctx.currentTime,void 0===v.bufferSource.start?i._loop?v.bufferSource.noteGrainOn(0,_,86400):v.bufferSource.noteGrainOn(0,_,s):i._loop?v.bufferSource.start(0,_,86400):v.bufferSource.start(0,_,s),l!==1/0&&(t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l)),o||setTimeout(function(){t._emit("play",i._id),t._loadQueue()},0)};"running"===n.state?h():(t._playLock=!0,t.once("resume",h),t._clearTimer(i._id))}else{var y=function(){v.currentTime=_,v.muted=i._muted||t._muted||n._muted||v.muted,v.volume=i._volume*n.volume(),v.playbackRate=i._rate;try{var r=v.play();if(r&&"undefined"!=typeof Promise&&(r instanceof Promise||"function"==typeof r.then)?(t._playLock=!0,m(),r.then(function(){t._playLock=!1,v._unlocked=!0,o||(t._emit("play",i._id),t._loadQueue())}).catch(function(){t._playLock=!1,t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."),i._ended=!0,i._paused=!0})):o||(t._playLock=!1,m(),t._emit("play",i._id),t._loadQueue()),v.playbackRate=i._rate,v.paused)return void t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");"__default"!==e||i._loop?t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l):(t._endTimers[i._id]=function(){t._ended(i),v.removeEventListener("ended",t._endTimers[i._id],!1)},v.addEventListener("ended",t._endTimers[i._id],!1))}catch(e){t._emit("playerror",i._id,e)}},g=window&&window.ejecta||!v.readyState&&n._navigator.isCocoonJS;if(v.readyState>=3||g)y();else{t._playLock=!0;var b=function(){y(),v.removeEventListener(n._canPlayEvent,b,!1)};v.addEventListener(n._canPlayEvent,b,!1),t._clearTimer(i._id)}}return i._id},pause:function(e){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"pause",action:function(){n.pause(e)}}),n;for(var o=n._getSoundIds(e),t=0;t<o.length;t++){n._clearTimer(o[t]);var r=n._soundById(o[t]);if(r&&!r._paused&&(r._seek=n.seek(o[t]),r._rateSeek=0,r._paused=!0,n._stopFade(o[t]),r._node))if(n._webAudio){if(!r._node.bufferSource)continue;void 0===r._node.bufferSource.stop?r._node.bufferSource.noteOff(0):r._node.bufferSource.stop(0),n._cleanBuffer(r._node)}else isNaN(r._node.duration)&&r._node.duration!==1/0||r._node.pause();arguments[1]||n._emit("pause",r?r._id:null)}return n},stop:function(e,n){var o=this;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"stop",action:function(){o.stop(e)}}),o;for(var t=o._getSoundIds(e),r=0;r<t.length;r++){o._clearTimer(t[r]);var a=o._soundById(t[r]);a&&(a._seek=a._start||0,a._rateSeek=0,a._paused=!0,a._ended=!0,o._stopFade(t[r]),a._node&&(o._webAudio?a._node.bufferSource&&(void 0===a._node.bufferSource.stop?a._node.bufferSource.noteOff(0):a._node.bufferSource.stop(0),o._cleanBuffer(a._node)):isNaN(a._node.duration)&&a._node.duration!==1/0||(a._node.currentTime=a._start||0,a._node.pause())),n||o._emit("stop",a._id))}return o},mute:function(e,o){var t=this;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"mute",action:function(){t.mute(e,o)}}),t;if(void 0===o){if("boolean"!=typeof e)return t._muted;t._muted=e}for(var r=t._getSoundIds(o),a=0;a<r.length;a++){var u=t._soundById(r[a]);u&&(u._muted=e,u._interval&&t._stopFade(u._id),t._webAudio&&u._node?u._node.gain.setValueAtTime(e?0:u._volume,n.ctx.currentTime):u._node&&(u._node.muted=!!n._muted||e),t._emit("mute",u._id))}return t},volume:function(){var e,o,t=this,r=arguments;if(0===r.length)return t._volume;if(1===r.length||2===r.length&&void 0===r[1]){t._getSoundIds().indexOf(r[0])>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else r.length>=2&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var a;if(!(void 0!==e&&e>=0&&e<=1))return a=o?t._soundById(o):t._sounds[0],a?a._volume:0;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"volume",action:function(){t.volume.apply(t,r)}}),t;void 0===o&&(t._volume=e),o=t._getSoundIds(o);for(var u=0;u<o.length;u++)(a=t._soundById(o[u]))&&(a._volume=e,r[2]||t._stopFade(o[u]),t._webAudio&&a._node&&!a._muted?a._node.gain.setValueAtTime(e,n.ctx.currentTime):a._node&&!a._muted&&(a._node.volume=e*n.volume()),t._emit("volume",a._id));return t},fade:function(e,o,t,r){var a=this;if("loaded"!==a._state||a._playLock)return a._queue.push({event:"fade",action:function(){a.fade(e,o,t,r)}}),a;e=parseFloat(e),o=parseFloat(o),t=parseFloat(t),a.volume(e,r);for(var u=a._getSoundIds(r),i=0;i<u.length;i++){var d=a._soundById(u[i]);if(d){if(r||a._stopFade(u[i]),a._webAudio&&!d._muted){var _=n.ctx.currentTime,s=_+t/1e3;d._volume=e,d._node.gain.setValueAtTime(e,_),d._node.gain.linearRampToValueAtTime(o,s)}a._startFadeInterval(d,e,o,t,u[i],void 0===r)}}return a},_startFadeInterval:function(e,n,o,t,r,a){var u=this,i=n,d=o-n,_=Math.abs(d/.01),s=Math.max(4,_>0?t/_:t),l=Date.now();e._fadeTo=o,e._interval=setInterval(function(){var r=(Date.now()-l)/t;l=Date.now(),i+=d*r,i=Math.max(0,i),i=Math.min(1,i),i=Math.round(100*i)/100,u._webAudio?e._volume=i:u.volume(i,e._id,!0),a&&(u._volume=i),(o<n&&i<=o||o>n&&i>=o)&&(clearInterval(e._interval),e._interval=null,e._fadeTo=null,u.volume(o,e._id),u._emit("fade",e._id))},s)},_stopFade:function(e){var o=this,t=o._soundById(e);return t&&t._interval&&(o._webAudio&&t._node.gain.cancelScheduledValues(n.ctx.currentTime),clearInterval(t._interval),t._interval=null,o.volume(t._fadeTo,e),t._fadeTo=null,o._emit("fade",e)),o},loop:function(){var e,n,o,t=this,r=arguments;if(0===r.length)return t._loop;if(1===r.length){if("boolean"!=typeof r[0])return!!(o=t._soundById(parseInt(r[0],10)))&&o._loop;e=r[0],t._loop=e}else 2===r.length&&(e=r[0],n=parseInt(r[1],10));for(var a=t._getSoundIds(n),u=0;u<a.length;u++)(o=t._soundById(a[u]))&&(o._loop=e,t._webAudio&&o._node&&o._node.bufferSource&&(o._node.bufferSource.loop=e,e&&(o._node.bufferSource.loopStart=o._start||0,o._node.bufferSource.loopEnd=o._stop)));return t},rate:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var i;if("number"!=typeof e)return i=t._soundById(o),i?i._rate:t._rate;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"rate",action:function(){t.rate.apply(t,r)}}),t;void 0===o&&(t._rate=e),o=t._getSoundIds(o);for(var d=0;d<o.length;d++)if(i=t._soundById(o[d])){t.playing(o[d])&&(i._rateSeek=t.seek(o[d]),i._playStart=t._webAudio?n.ctx.currentTime:i._playStart),i._rate=e,t._webAudio&&i._node&&i._node.bufferSource?i._node.bufferSource.playbackRate.setValueAtTime(e,n.ctx.currentTime):i._node&&(i._node.playbackRate=e);var _=t.seek(o[d]),s=(t._sprite[i._sprite][0]+t._sprite[i._sprite][1])/1e3-_,l=1e3*s/Math.abs(i._rate);!t._endTimers[o[d]]&&i._paused||(t._clearTimer(o[d]),t._endTimers[o[d]]=setTimeout(t._ended.bind(t,i),l)),t._emit("rate",i._id)}return t},seek:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):t._sounds.length&&(o=t._sounds[0]._id,e=parseFloat(r[0]))}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));if(void 0===o)return t;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"seek",action:function(){t.seek.apply(t,r)}}),t;var i=t._soundById(o);if(i){if(!("number"==typeof e&&e>=0)){if(t._webAudio){var d=t.playing(o)?n.ctx.currentTime-i._playStart:0,_=i._rateSeek?i._rateSeek-i._seek:0;return i._seek+(_+d*Math.abs(i._rate))}return i._node.currentTime}var s=t.playing(o);s&&t.pause(o,!0),i._seek=e,i._ended=!1,t._clearTimer(o),t._webAudio||!i._node||isNaN(i._node.duration)||(i._node.currentTime=e);var l=function(){t._emit("seek",o),s&&t.play(o,!0)};if(s&&!t._webAudio){var c=function(){t._playLock?setTimeout(c,0):l()};setTimeout(c,0)}else l()}return t},playing:function(e){var n=this;if("number"==typeof e){var o=n._soundById(e);return!!o&&!o._paused}for(var t=0;t<n._sounds.length;t++)if(!n._sounds[t]._paused)return!0;return!1},duration:function(e){var n=this,o=n._duration,t=n._soundById(e);return t&&(o=n._sprite[t._sprite][1]/1e3),o},state:function(){return this._state},unload:function(){for(var e=this,o=e._sounds,t=0;t<o.length;t++){if(o[t]._paused||e.stop(o[t]._id),!e._webAudio){/MSIE |Trident\//.test(n._navigator&&n._navigator.userAgent)||(o[t]._node.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"),o[t]._node.removeEventListener("error",o[t]._errorFn,!1),o[t]._node.removeEventListener(n._canPlayEvent,o[t]._loadFn,!1),n._releaseHtml5Audio(o[t]._node)}delete o[t]._node,e._clearTimer(o[t]._id)}var a=n._howls.indexOf(e);a>=0&&n._howls.splice(a,1);var u=!0;for(t=0;t<n._howls.length;t++)if(n._howls[t]._src===e._src||e._src.indexOf(n._howls[t]._src)>=0){u=!1;break}return r&&u&&delete r[e._src],n.noAudio=!1,e._state="unloaded",e._sounds=[],e=null,null},on:function(e,n,o,t){var r=this,a=r["_on"+e];return"function"==typeof n&&a.push(t?{id:o,fn:n,once:t}:{id:o,fn:n}),r},off:function(e,n,o){var t=this,r=t["_on"+e],a=0;if("number"==typeof n&&(o=n,n=null),n||o)for(a=0;a<r.length;a++){var u=o===r[a].id;if(n===r[a].fn&&u||!n&&u){r.splice(a,1);break}}else if(e)t["_on"+e]=[];else{var i=Object.keys(t);for(a=0;a<i.length;a++)0===i[a].indexOf("_on")&&Array.isArray(t[i[a]])&&(t[i[a]]=[])}return t},once:function(e,n,o){var t=this;return t.on(e,n,o,1),t},_emit:function(e,n,o){for(var t=this,r=t["_on"+e],a=r.length-1;a>=0;a--)r[a].id&&r[a].id!==n&&"load"!==e||(setTimeout(function(e){e.call(this,n,o)}.bind(t,r[a].fn),0),r[a].once&&t.off(e,r[a].fn,r[a].id));return t._loadQueue(e),t},_loadQueue:function(e){var n=this;if(n._queue.length>0){var o=n._queue[0];o.event===e&&(n._queue.shift(),n._loadQueue()),e||o.action()}return n},_ended:function(e){var o=this,t=e._sprite;if(!o._webAudio&&e._node&&!e._node.paused&&!e._node.ended&&e._node.currentTime<e._stop)return setTimeout(o._ended.bind(o,e),100),o;var r=!(!e._loop&&!o._sprite[t][2]);if(o._emit("end",e._id),!o._webAudio&&r&&o.stop(e._id,!0).play(e._id),o._webAudio&&r){o._emit("play",e._id),e._seek=e._start||0,e._rateSeek=0,e._playStart=n.ctx.currentTime;var a=1e3*(e._stop-e._start)/Math.abs(e._rate);o._endTimers[e._id]=setTimeout(o._ended.bind(o,e),a)}return o._webAudio&&!r&&(e._paused=!0,e._ended=!0,e._seek=e._start||0,e._rateSeek=0,o._clearTimer(e._id),o._cleanBuffer(e._node),n._autoSuspend()),o._webAudio||r||o.stop(e._id,!0),o},_clearTimer:function(e){var n=this;if(n._endTimers[e]){if("function"!=typeof n._endTimers[e])clearTimeout(n._endTimers[e]);else{var o=n._soundById(e);o&&o._node&&o._node.removeEventListener("ended",n._endTimers[e],!1)}delete n._endTimers[e]}return n},_soundById:function(e){for(var n=this,o=0;o<n._sounds.length;o++)if(e===n._sounds[o]._id)return n._sounds[o];return null},_inactiveSound:function(){var e=this;e._drain();for(var n=0;n<e._sounds.length;n++)if(e._sounds[n]._ended)return e._sounds[n].reset();return new t(e)},_drain:function(){var e=this,n=e._pool,o=0,t=0;if(!(e._sounds.length<n)){for(t=0;t<e._sounds.length;t++)e._sounds[t]._ended&&o++;for(t=e._sounds.length-1;t>=0;t--){if(o<=n)return;e._sounds[t]._ended&&(e._webAudio&&e._sounds[t]._node&&e._sounds[t]._node.disconnect(0),e._sounds.splice(t,1),o--)}}},_getSoundIds:function(e){var n=this;if(void 0===e){for(var o=[],t=0;t<n._sounds.length;t++)o.push(n._sounds[t]._id);return o}return[e]},_refreshBuffer:function(e){var o=this;return e._node.bufferSource=n.ctx.createBufferSource(),e._node.bufferSource.buffer=r[o._src],e._panner?e._node.bufferSource.connect(e._panner):e._node.bufferSource.connect(e._node),e._node.bufferSource.loop=e._loop,e._loop&&(e._node.bufferSource.loopStart=e._start||0,e._node.bufferSource.loopEnd=e._stop||0),e._node.bufferSource.playbackRate.setValueAtTime(e._rate,n.ctx.currentTime),o},_cleanBuffer:function(e){var o=this,t=n._navigator&&n._navigator.vendor.indexOf("Apple")>=0;if(n._scratchBuffer&&e.bufferSource&&(e.bufferSource.onended=null,e.bufferSource.disconnect(0),t))try{e.bufferSource.buffer=n._scratchBuffer}catch(e){}return e.bufferSource=null,o}};var t=function(e){this._parent=e,this.init()};t.prototype={init:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,o._sounds.push(e),e.create(),e},create:function(){var e=this,o=e._parent,t=n._muted||e._muted||e._parent._muted?0:e._volume;return o._webAudio?(e._node=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),e._node.gain.setValueAtTime(t,n.ctx.currentTime),e._node.paused=!0,e._node.connect(n.masterGain)):(e._node=n._obtainHtml5Audio(),e._errorFn=e._errorListener.bind(e),e._node.addEventListener("error",e._errorFn,!1),e._loadFn=e._loadListener.bind(e),e._node.addEventListener(n._canPlayEvent,e._loadFn,!1),e._node.src=o._src,e._node.preload="auto",e._node.volume=t*n.volume(),e._node.load()),e},reset:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._rateSeek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,e},_errorListener:function(){var e=this;e._parent._emit("loaderror",e._id,e._node.error?e._node.error.code:0),e._node.removeEventListener("error",e._errorFn,!1)},_loadListener:function(){var e=this,o=e._parent;o._duration=Math.ceil(10*e._node.duration)/10,0===Object.keys(o._sprite).length&&(o._sprite={__default:[0,1e3*o._duration]}),"loaded"!==o._state&&(o._state="loaded",o._emit("load"),o._loadQueue()),e._node.removeEventListener(n._canPlayEvent,e._loadFn,!1)}};var r={},a=function(e){var n=e._src;if(r[n])return e._duration=r[n].duration,void d(e);if(/^data:[^;]+;base64,/.test(n)){for(var o=atob(n.split(",")[1]),t=new Uint8Array(o.length),a=0;a<o.length;++a)t[a]=o.charCodeAt(a);i(t.buffer,e)}else{var _=new XMLHttpRequest;_.open("GET",n,!0),_.withCredentials=e._xhrWithCredentials,_.responseType="arraybuffer",_.onload=function(){var n=(_.status+"")[0];if("0"!==n&&"2"!==n&&"3"!==n)return void e._emit("loaderror",null,"Failed loading audio file with status: "+_.status+".");i(_.response,e)},_.onerror=function(){e._webAudio&&(e._html5=!0,e._webAudio=!1,e._sounds=[],delete r[n],e.load())},u(_)}},u=function(e){try{e.send()}catch(n){e.onerror()}},i=function(e,o){var t=function(){o._emit("loaderror",null,"Decoding audio data failed.")},a=function(e){e&&o._sounds.length>0?(r[o._src]=e,d(o,e)):t()};"undefined"!=typeof Promise&&1===n.ctx.decodeAudioData.length?n.ctx.decodeAudioData(e).then(a).catch(t):n.ctx.decodeAudioData(e,a,t)},d=function(e,n){n&&!e._duration&&(e._duration=n.duration),0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue())},_=function(){if(n.usingWebAudio){try{"undefined"!=typeof AudioContext?n.ctx=new AudioContext:"undefined"!=typeof webkitAudioContext?n.ctx=new webkitAudioContext:n.usingWebAudio=!1}catch(e){n.usingWebAudio=!1}n.ctx||(n.usingWebAudio=!1);var e=/iP(hone|od|ad)/.test(n._navigator&&n._navigator.platform),o=n._navigator&&n._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),t=o?parseInt(o[1],10):null;if(e&&t&&t<9){var r=/safari/.test(n._navigator&&n._navigator.userAgent.toLowerCase());(n._navigator&&n._navigator.standalone&&!r||n._navigator&&!n._navigator.standalone&&!r)&&(n.usingWebAudio=!1)}n.usingWebAudio&&(n.masterGain=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),n.masterGain.gain.setValueAtTime(n._muted?0:1,n.ctx.currentTime),n.masterGain.connect(n.ctx.destination)),n._setup()}};"function"==typeof define&&define.amd&&define([],function(){return{Howler:n,Howl:o}}),"undefined"!=typeof exports&&(exports.Howler=n,exports.Howl=o),"undefined"!=typeof window?(window.HowlerGlobal=e,window.Howler=n,window.Howl=o,window.Sound=t):"undefined"!=typeof global&&(global.HowlerGlobal=e,global.Howler=n,global.Howl=o,global.Sound=t)}();
/*! Spatial Plugin */
!function(){"use strict";HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(e){var n=this;if(!n.ctx||!n.ctx.listener)return n;for(var t=n._howls.length-1;t>=0;t--)n._howls[t].stereo(e);return n},HowlerGlobal.prototype.pos=function(e,n,t){var r=this;return r.ctx&&r.ctx.listener?(n="number"!=typeof n?r._pos[1]:n,t="number"!=typeof t?r._pos[2]:t,"number"!=typeof e?r._pos:(r._pos=[e,n,t],void 0!==r.ctx.listener.positionX?(r.ctx.listener.positionX.setTargetAtTime(r._pos[0],Howler.ctx.currentTime,.1),r.ctx.listener.positionY.setTargetAtTime(r._pos[1],Howler.ctx.currentTime,.1),r.ctx.listener.positionZ.setTargetAtTime(r._pos[2],Howler.ctx.currentTime,.1)):r.ctx.listener.setPosition(r._pos[0],r._pos[1],r._pos[2]),r)):r},HowlerGlobal.prototype.orientation=function(e,n,t,r,o,i){var a=this;if(!a.ctx||!a.ctx.listener)return a;var s=a._orientation;return n="number"!=typeof n?s[1]:n,t="number"!=typeof t?s[2]:t,r="number"!=typeof r?s[3]:r,o="number"!=typeof o?s[4]:o,i="number"!=typeof i?s[5]:i,"number"!=typeof e?s:(a._orientation=[e,n,t,r,o,i],void 0!==a.ctx.listener.forwardX?(a.ctx.listener.forwardX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.forwardY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.forwardZ.setTargetAtTime(t,Howler.ctx.currentTime,.1),a.ctx.listener.upX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.upY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.upZ.setTargetAtTime(t,Howler.ctx.currentTime,.1)):a.ctx.listener.setOrientation(e,n,t,r,o,i),a)},Howl.prototype.init=function(e){return function(n){var t=this;return t._orientation=n.orientation||[1,0,0],t._stereo=n.stereo||null,t._pos=n.pos||null,t._pannerAttr={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:360,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:360,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:0,distanceModel:void 0!==n.distanceModel?n.distanceModel:"inverse",maxDistance:void 0!==n.maxDistance?n.maxDistance:1e4,panningModel:void 0!==n.panningModel?n.panningModel:"HRTF",refDistance:void 0!==n.refDistance?n.refDistance:1,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:1},t._onstereo=n.onstereo?[{fn:n.onstereo}]:[],t._onpos=n.onpos?[{fn:n.onpos}]:[],t._onorientation=n.onorientation?[{fn:n.onorientation}]:[],e.call(this,n)}}(Howl.prototype.init),Howl.prototype.stereo=function(n,t){var r=this;if(!r._webAudio)return r;if("loaded"!==r._state)return r._queue.push({event:"stereo",action:function(){r.stereo(n,t)}}),r;var o=void 0===Howler.ctx.createStereoPanner?"spatial":"stereo";if(void 0===t){if("number"!=typeof n)return r._stereo;r._stereo=n,r._pos=[n,0,0]}for(var i=r._getSoundIds(t),a=0;a<i.length;a++){var s=r._soundById(i[a]);if(s){if("number"!=typeof n)return s._stereo;s._stereo=n,s._pos=[n,0,0],s._node&&(s._pannerAttr.panningModel="equalpower",s._panner&&s._panner.pan||e(s,o),"spatial"===o?void 0!==s._panner.positionX?(s._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),s._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),s._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):s._panner.setPosition(n,0,0):s._panner.pan.setValueAtTime(n,Howler.ctx.currentTime)),r._emit("stereo",s._id)}}return r},Howl.prototype.pos=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"pos",action:function(){i.pos(n,t,r,o)}}),i;if(t="number"!=typeof t?0:t,r="number"!=typeof r?-.5:r,void 0===o){if("number"!=typeof n)return i._pos;i._pos=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._pos;p._pos=[n,t,r],p._node&&(p._panner&&!p._panner.pan||e(p,"spatial"),void 0!==p._panner.positionX?(p._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.positionY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.positionZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setPosition(n,t,r)),i._emit("pos",p._id)}}return i},Howl.prototype.orientation=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"orientation",action:function(){i.orientation(n,t,r,o)}}),i;if(t="number"!=typeof t?i._orientation[1]:t,r="number"!=typeof r?i._orientation[2]:r,void 0===o){if("number"!=typeof n)return i._orientation;i._orientation=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._orientation;p._orientation=[n,t,r],p._node&&(p._panner||(p._pos||(p._pos=i._pos||[0,0,-.5]),e(p,"spatial")),void 0!==p._panner.orientationX?(p._panner.orientationX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.orientationY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.orientationZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setOrientation(n,t,r)),i._emit("orientation",p._id)}}return i},Howl.prototype.pannerAttr=function(){var n,t,r,o=this,i=arguments;if(!o._webAudio)return o;if(0===i.length)return o._pannerAttr;if(1===i.length){if("object"!=typeof i[0])return r=o._soundById(parseInt(i[0],10)),r?r._pannerAttr:o._pannerAttr;n=i[0],void 0===t&&(n.pannerAttr||(n.pannerAttr={coneInnerAngle:n.coneInnerAngle,coneOuterAngle:n.coneOuterAngle,coneOuterGain:n.coneOuterGain,distanceModel:n.distanceModel,maxDistance:n.maxDistance,refDistance:n.refDistance,rolloffFactor:n.rolloffFactor,panningModel:n.panningModel}),o._pannerAttr={coneInnerAngle:void 0!==n.pannerAttr.coneInnerAngle?n.pannerAttr.coneInnerAngle:o._coneInnerAngle,coneOuterAngle:void 0!==n.pannerAttr.coneOuterAngle?n.pannerAttr.coneOuterAngle:o._coneOuterAngle,coneOuterGain:void 0!==n.pannerAttr.coneOuterGain?n.pannerAttr.coneOuterGain:o._coneOuterGain,distanceModel:void 0!==n.pannerAttr.distanceModel?n.pannerAttr.distanceModel:o._distanceModel,maxDistance:void 0!==n.pannerAttr.maxDistance?n.pannerAttr.maxDistance:o._maxDistance,refDistance:void 0!==n.pannerAttr.refDistance?n.pannerAttr.refDistance:o._refDistance,rolloffFactor:void 0!==n.pannerAttr.rolloffFactor?n.pannerAttr.rolloffFactor:o._rolloffFactor,panningModel:void 0!==n.pannerAttr.panningModel?n.pannerAttr.panningModel:o._panningModel})}else 2===i.length&&(n=i[0],t=parseInt(i[1],10));for(var a=o._getSoundIds(t),s=0;s<a.length;s++)if(r=o._soundById(a[s])){var p=r._pannerAttr;p={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:p.coneInnerAngle,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:p.coneOuterAngle,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:p.coneOuterGain,distanceModel:void 0!==n.distanceModel?n.distanceModel:p.distanceModel,maxDistance:void 0!==n.maxDistance?n.maxDistance:p.maxDistance,refDistance:void 0!==n.refDistance?n.refDistance:p.refDistance,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:p.rolloffFactor,panningModel:void 0!==n.panningModel?n.panningModel:p.panningModel};var c=r._panner;c?(c.coneInnerAngle=p.coneInnerAngle,c.coneOuterAngle=p.coneOuterAngle,c.coneOuterGain=p.coneOuterGain,c.distanceModel=p.distanceModel,c.maxDistance=p.maxDistance,c.refDistance=p.refDistance,c.rolloffFactor=p.rolloffFactor,c.panningModel=p.panningModel):(r._pos||(r._pos=o._pos||[0,0,-.5]),e(r,"spatial"))}return o},Sound.prototype.init=function(e){return function(){var n=this,t=n._parent;n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,e.call(this),n._stereo?t.stereo(n._stereo):n._pos&&t.pos(n._pos[0],n._pos[1],n._pos[2],n._id)}}(Sound.prototype.init),Sound.prototype.reset=function(e){return function(){var n=this,t=n._parent;return n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,n._stereo?t.stereo(n._stereo):n._pos?t.pos(n._pos[0],n._pos[1],n._pos[2],n._id):n._panner&&(n._panner.disconnect(0),n._panner=void 0,t._refreshBuffer(n)),e.call(this)}}(Sound.prototype.reset);var e=function(e,n){n=n||"spatial","spatial"===n?(e._panner=Howler.ctx.createPanner(),e._panner.coneInnerAngle=e._pannerAttr.coneInnerAngle,e._panner.coneOuterAngle=e._pannerAttr.coneOuterAngle,e._panner.coneOuterGain=e._pannerAttr.coneOuterGain,e._panner.distanceModel=e._pannerAttr.distanceModel,e._panner.maxDistance=e._pannerAttr.maxDistance,e._panner.refDistance=e._pannerAttr.refDistance,e._panner.rolloffFactor=e._pannerAttr.rolloffFactor,e._panner.panningModel=e._pannerAttr.panningModel,void 0!==e._panner.positionX?(e._panner.positionX.setValueAtTime(e._pos[0],Howler.ctx.currentTime),e._panner.positionY.setValueAtTime(e._pos[1],Howler.ctx.currentTime),e._panner.positionZ.setValueAtTime(e._pos[2],Howler.ctx.currentTime)):e._panner.setPosition(e._pos[0],e._pos[1],e._pos[2]),void 0!==e._panner.orientationX?(e._panner.orientationX.setValueAtTime(e._orientation[0],Howler.ctx.currentTime),e._panner.orientationY.setValueAtTime(e._orientation[1],Howler.ctx.currentTime),e._panner.orientationZ.setValueAtTime(e._orientation[2],Howler.ctx.currentTime)):e._panner.setOrientation(e._orientation[0],e._orientation[1],e._orientation[2])):(e._panner=Howler.ctx.createStereoPanner(),e._panner.pan.setValueAtTime(e._stereo,Howler.ctx.currentTime)),e._panner.connect(e._node),e._paused||e._parent.pause(e._id,!0).play(e._id,!0)}}();
/* pako 1.0.2 nodeca/pako */
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.pako=t()}}(function(){return function t(e,a,i){function n(s,o){if(!a[s]){if(!e[s]){var l="function"==typeof require&&require;if(!o&&l)return l(s,!0);if(r)return r(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var d=a[s]={exports:{}};e[s][0].call(d.exports,function(t){var a=e[s][1][t];return n(a?a:t)},d,d.exports,t,e,a,i)}return a[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)n(i[s]);return n}({1:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=l.assign({level:w,method:v,chunkSize:16384,windowBits:15,memLevel:8,strategy:p,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=o.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==b)throw new Error(d[a]);if(e.header&&o.deflateSetHeader(this.strm,e.header),e.dictionary){var n;if(n="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===_.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=o.deflateSetDictionary(this.strm,n),a!==b)throw new Error(d[a]);this._dict_set=!0}}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}function s(t,e){return e=e||{},e.gzip=!0,n(t,e)}var o=t("./zlib/deflate"),l=t("./utils/common"),h=t("./utils/strings"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=Object.prototype.toString,u=0,c=4,b=0,g=1,m=2,w=-1,p=0,v=8;i.prototype.push=function(t,e){var a,i,n=this.strm,r=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:e===!0?c:u,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===_.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new l.Buf8(r),n.next_out=0,n.avail_out=r),a=o.deflate(n,i),a!==g&&a!==b)return this.onEnd(a),this.ended=!0,!1;0!==n.avail_out&&(0!==n.avail_in||i!==c&&i!==m)||("string"===this.options.to?this.onData(h.buf2binstring(l.shrinkBuf(n.output,n.next_out))):this.onData(l.shrinkBuf(n.output,n.next_out)))}while((n.avail_in>0||0===n.avail_out)&&a!==g);return i===c?(a=o.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===b):i!==m||(this.onEnd(b),n.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===b&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=l.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Deflate=i,a.deflate=n,a.deflateRaw=r,a.gzip=s},{"./utils/common":3,"./utils/strings":4,"./zlib/deflate":8,"./zlib/messages":13,"./zlib/zstream":15}],2:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0===(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=s.inflateInit2(this.strm,e.windowBits);if(a!==h.Z_OK)throw new Error(d[a]);this.header=new _,s.inflateGetHeader(this.strm,this.header)}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}var s=t("./zlib/inflate"),o=t("./utils/common"),l=t("./utils/strings"),h=t("./zlib/constants"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=t("./zlib/gzheader"),u=Object.prototype.toString;i.prototype.push=function(t,e){var a,i,n,r,d,f,_=this.strm,c=this.options.chunkSize,b=this.options.dictionary,g=!1;if(this.ended)return!1;i=e===~~e?e:e===!0?h.Z_FINISH:h.Z_NO_FLUSH,"string"==typeof t?_.input=l.binstring2buf(t):"[object ArrayBuffer]"===u.call(t)?_.input=new Uint8Array(t):_.input=t,_.next_in=0,_.avail_in=_.input.length;do{if(0===_.avail_out&&(_.output=new o.Buf8(c),_.next_out=0,_.avail_out=c),a=s.inflate(_,h.Z_NO_FLUSH),a===h.Z_NEED_DICT&&b&&(f="string"==typeof b?l.string2buf(b):"[object ArrayBuffer]"===u.call(b)?new Uint8Array(b):b,a=s.inflateSetDictionary(this.strm,f)),a===h.Z_BUF_ERROR&&g===!0&&(a=h.Z_OK,g=!1),a!==h.Z_STREAM_END&&a!==h.Z_OK)return this.onEnd(a),this.ended=!0,!1;_.next_out&&(0!==_.avail_out&&a!==h.Z_STREAM_END&&(0!==_.avail_in||i!==h.Z_FINISH&&i!==h.Z_SYNC_FLUSH)||("string"===this.options.to?(n=l.utf8border(_.output,_.next_out),r=_.next_out-n,d=l.buf2string(_.output,n),_.next_out=r,_.avail_out=c-r,r&&o.arraySet(_.output,_.output,n,r,0),this.onData(d)):this.onData(o.shrinkBuf(_.output,_.next_out)))),0===_.avail_in&&0===_.avail_out&&(g=!0)}while((_.avail_in>0||0===_.avail_out)&&a!==h.Z_STREAM_END);return a===h.Z_STREAM_END&&(i=h.Z_FINISH),i===h.Z_FINISH?(a=s.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===h.Z_OK):i!==h.Z_SYNC_FLUSH||(this.onEnd(h.Z_OK),_.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===h.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Inflate=i,a.inflate=n,a.inflateRaw=r,a.ungzip=n},{"./utils/common":3,"./utils/strings":4,"./zlib/constants":6,"./zlib/gzheader":9,"./zlib/inflate":11,"./zlib/messages":13,"./zlib/zstream":15}],3:[function(t,e,a){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;a.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(var i in a)a.hasOwnProperty(i)&&(t[i]=a[i])}}return t},a.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,a,i,n){if(e.subarray&&t.subarray)return void t.set(e.subarray(a,a+i),n);for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){var e,a,i,n,r,s;for(i=0,e=0,a=t.length;e<a;e++)i+=t[e].length;for(s=new Uint8Array(i),n=0,e=0,a=t.length;e<a;e++)r=t[e],s.set(r,n),n+=r.length;return s}},r={arraySet:function(t,e,a,i,n){for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){return[].concat.apply([],t)}};a.setTyped=function(t){t?(a.Buf8=Uint8Array,a.Buf16=Uint16Array,a.Buf32=Int32Array,a.assign(a,n)):(a.Buf8=Array,a.Buf16=Array,a.Buf32=Array,a.assign(a,r))},a.setTyped(i)},{}],4:[function(t,e,a){"use strict";function i(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&r))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var a="",i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a}var n=t("./common"),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var o=new n.Buf8(256),l=0;l<256;l++)o[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;o[254]=o[254]=1,a.string2buf=function(t){var e,a,i,r,s,o=t.length,l=0;for(r=0;r<o;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),l+=a<128?1:a<2048?2:a<65536?3:4;for(e=new n.Buf8(l),s=0,r=0;s<l;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},a.buf2binstring=function(t){return i(t,t.length)},a.binstring2buf=function(t){for(var e=new n.Buf8(t.length),a=0,i=e.length;a<i;a++)e[a]=t.charCodeAt(a);return e},a.buf2string=function(t,e){var a,n,r,s,l=e||t.length,h=new Array(2*l);for(n=0,a=0;a<l;)if(r=t[a++],r<128)h[n++]=r;else if(s=o[r],s>4)h[n++]=65533,a+=s-1;else{for(r&=2===s?31:3===s?15:7;s>1&&a<l;)r=r<<6|63&t[a++],s--;s>1?h[n++]=65533:r<65536?h[n++]=r:(r-=65536,h[n++]=55296|r>>10&1023,h[n++]=56320|1023&r)}return i(h,n)},a.utf8border=function(t,e){var a;for(e=e||t.length,e>t.length&&(e=t.length),a=e-1;a>=0&&128===(192&t[a]);)a--;return a<0?e:0===a?e:a+o[t[a]]>e?a:e}},{"./common":3}],5:[function(t,e,a){"use strict";function i(t,e,a,i){for(var n=65535&t|0,r=t>>>16&65535|0,s=0;0!==a;){s=a>2e3?2e3:a,a-=s;do n=n+e[i++]|0,r=r+n|0;while(--s);n%=65521,r%=65521}return n|r<<16|0}e.exports=i},{}],6:[function(t,e,a){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],7:[function(t,e,a){"use strict";function i(){for(var t,e=[],a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e}function n(t,e,a,i){var n=r,s=i+a;t^=-1;for(var o=i;o<s;o++)t=t>>>8^n[255&(t^e[o])];return t^-1}var r=i();e.exports=n},{}],8:[function(t,e,a){"use strict";function i(t,e){return t.msg=D[e],e}function n(t){return(t<<1)-(t>4?9:0)}function r(t){for(var e=t.length;--e>=0;)t[e]=0}function s(t){var e=t.state,a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(R.arraySet(t.output,e.pending_buf,e.pending_out,a,t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))}function o(t,e){C._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,s(t.strm)}function l(t,e){t.pending_buf[t.pending++]=e}function h(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function d(t,e,a,i){var n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,R.arraySet(e,t.input,t.next_in,n,a),1===t.state.wrap?t.adler=N(t.adler,e,n,a):2===t.state.wrap&&(t.adler=O(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)}function f(t,e){var a,i,n=t.max_chain_length,r=t.strstart,s=t.prev_length,o=t.nice_match,l=t.strstart>t.w_size-ft?t.strstart-(t.w_size-ft):0,h=t.window,d=t.w_mask,f=t.prev,_=t.strstart+dt,u=h[r+s-1],c=h[r+s];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do if(a=e,h[a+s]===c&&h[a+s-1]===u&&h[a]===h[r]&&h[++a]===h[r+1]){r+=2,a++;do;while(h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&r<_);if(i=dt-(_-r),r=_-dt,i>s){if(t.match_start=e,s=i,i>=o)break;u=h[r+s-1],c=h[r+s]}}while((e=f[e&d])>l&&0!==--n);return s<=t.lookahead?s:t.lookahead}function _(t){var e,a,i,n,r,s=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-ft)){R.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,a=t.hash_size,e=a;do i=t.head[--e],t.head[e]=i>=s?i-s:0;while(--a);a=s,e=a;do i=t.prev[--e],t.prev[e]=i>=s?i-s:0;while(--a);n+=s}if(0===t.strm.avail_in)break;if(a=d(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=a,t.lookahead+t.insert>=ht)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+ht-1])&t.hash_mask,t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<ht)););}while(t.lookahead<ft&&0!==t.strm.avail_in)}function u(t,e){var a=65535;for(a>t.pending_buf_size-5&&(a=t.pending_buf_size-5);;){if(t.lookahead<=1){if(_(t),0===t.lookahead&&e===I)return vt;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+a;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,o(t,!1),0===t.strm.avail_out))return vt;if(t.strstart-t.block_start>=t.w_size-ft&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.strstart>t.block_start&&(o(t,!1),0===t.strm.avail_out)?vt:vt}function c(t,e){for(var a,i;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a)),t.match_length>=ht)if(i=C._tr_tally(t,t.strstart-t.match_start,t.match_length-ht),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ht){t.match_length--;do t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(0!==--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function b(t,e){for(var a,i,n;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ht-1,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a),t.match_length<=5&&(t.strategy===q||t.match_length===ht&&t.strstart-t.match_start>4096)&&(t.match_length=ht-1)),t.prev_length>=ht&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-ht,i=C._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-ht),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(0!==--t.prev_length);if(t.match_available=0,t.match_length=ht-1,t.strstart++,i&&(o(t,!1),0===t.strm.avail_out))return vt}else if(t.match_available){if(i=C._tr_tally(t,0,t.window[t.strstart-1]),i&&o(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return vt}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=C._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function g(t,e){for(var a,i,n,r,s=t.window;;){if(t.lookahead<=dt){if(_(t),t.lookahead<=dt&&e===I)return vt;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=ht&&t.strstart>0&&(n=t.strstart-1,i=s[n],i===s[++n]&&i===s[++n]&&i===s[++n])){r=t.strstart+dt;do;while(i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&n<r);t.match_length=dt-(r-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ht?(a=C._tr_tally(t,1,t.match_length-ht),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function m(t,e){for(var a;;){if(0===t.lookahead&&(_(t),0===t.lookahead)){if(e===I)return vt;break}if(t.match_length=0,a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function w(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}function p(t){t.window_size=2*t.w_size,r(t.head),t.max_lazy_match=Z[t.level].max_lazy,t.good_match=Z[t.level].good_length,t.nice_match=Z[t.level].nice_length,t.max_chain_length=Z[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ht-1,t.match_available=0,t.ins_h=0}function v(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=V,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new R.Buf16(2*ot),this.dyn_dtree=new R.Buf16(2*(2*rt+1)),this.bl_tree=new R.Buf16(2*(2*st+1)),r(this.dyn_ltree),r(this.dyn_dtree),r(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new R.Buf16(lt+1),this.heap=new R.Buf16(2*nt+1),r(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new R.Buf16(2*nt+1),r(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function k(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=Q,e=t.state,e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?ut:wt,t.adler=2===e.wrap?0:1,e.last_flush=I,C._tr_init(e),H):i(t,K)}function y(t){var e=k(t);return e===H&&p(t.state),e}function x(t,e){return t&&t.state?2!==t.state.wrap?K:(t.state.gzhead=e,H):K}function z(t,e,a,n,r,s){if(!t)return K;var o=1;if(e===Y&&(e=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),r<1||r>$||a!==V||n<8||n>15||e<0||e>9||s<0||s>W)return i(t,K);8===n&&(n=9);var l=new v;return t.state=l,l.strm=t,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+ht-1)/ht),l.window=new R.Buf8(2*l.w_size),l.head=new R.Buf16(l.hash_size),l.prev=new R.Buf16(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new R.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=s,l.method=a,y(t)}function B(t,e){return z(t,e,V,tt,et,J)}function S(t,e){var a,o,d,f;if(!t||!t.state||e>L||e<0)return t?i(t,K):K;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===pt&&e!==F)return i(t,0===t.avail_out?P:K);if(o.strm=t,a=o.last_flush,o.last_flush=e,o.status===ut)if(2===o.wrap)t.adler=0,l(o,31),l(o,139),l(o,8),o.gzhead?(l(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),l(o,255&o.gzhead.time),l(o,o.gzhead.time>>8&255),l(o,o.gzhead.time>>16&255),l(o,o.gzhead.time>>24&255),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(l(o,255&o.gzhead.extra.length),l(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=O(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=ct):(l(o,0),l(o,0),l(o,0),l(o,0),l(o,0),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,zt),o.status=wt);else{var _=V+(o.w_bits-8<<4)<<8,u=-1;u=o.strategy>=G||o.level<2?0:o.level<6?1:6===o.level?2:3,_|=u<<6,0!==o.strstart&&(_|=_t),_+=31-_%31,o.status=wt,h(o,_),0!==o.strstart&&(h(o,t.adler>>>16),h(o,65535&t.adler)),t.adler=1}if(o.status===ct)if(o.gzhead.extra){for(d=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending!==o.pending_buf_size));)l(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=bt)}else o.status=bt;if(o.status===bt)if(o.gzhead.name){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.gzindex=0,o.status=gt)}else o.status=gt;if(o.status===gt)if(o.gzhead.comment){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.status=mt)}else o.status=mt;if(o.status===mt&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&s(t),o.pending+2<=o.pending_buf_size&&(l(o,255&t.adler),l(o,t.adler>>8&255),t.adler=0,o.status=wt)):o.status=wt),0!==o.pending){if(s(t),0===t.avail_out)return o.last_flush=-1,H}else if(0===t.avail_in&&n(e)<=n(a)&&e!==F)return i(t,P);if(o.status===pt&&0!==t.avail_in)return i(t,P);if(0!==t.avail_in||0!==o.lookahead||e!==I&&o.status!==pt){var c=o.strategy===G?m(o,e):o.strategy===X?g(o,e):Z[o.level].func(o,e);if(c!==yt&&c!==xt||(o.status=pt),c===vt||c===yt)return 0===t.avail_out&&(o.last_flush=-1),H;if(c===kt&&(e===U?C._tr_align(o):e!==L&&(C._tr_stored_block(o,0,0,!1),e===T&&(r(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),s(t),0===t.avail_out))return o.last_flush=-1,H}return e!==F?H:o.wrap<=0?j:(2===o.wrap?(l(o,255&t.adler),l(o,t.adler>>8&255),l(o,t.adler>>16&255),l(o,t.adler>>24&255),l(o,255&t.total_in),l(o,t.total_in>>8&255),l(o,t.total_in>>16&255),l(o,t.total_in>>24&255)):(h(o,t.adler>>>16),h(o,65535&t.adler)),s(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?H:j)}function E(t){var e;return t&&t.state?(e=t.state.status,e!==ut&&e!==ct&&e!==bt&&e!==gt&&e!==mt&&e!==wt&&e!==pt?i(t,K):(t.state=null,e===wt?i(t,M):H)):K}function A(t,e){var a,i,n,s,o,l,h,d,f=e.length;if(!t||!t.state)return K;if(a=t.state,s=a.wrap,2===s||1===s&&a.status!==ut||a.lookahead)return K;for(1===s&&(t.adler=N(t.adler,e,f,0)),a.wrap=0,f>=a.w_size&&(0===s&&(r(a.head),a.strstart=0,a.block_start=0,a.insert=0),d=new R.Buf8(a.w_size),R.arraySet(d,e,f-a.w_size,a.w_size,0),e=d,f=a.w_size),o=t.avail_in,l=t.next_in,h=t.input,t.avail_in=f,t.next_in=0,t.input=e,_(a);a.lookahead>=ht;){i=a.strstart,n=a.lookahead-(ht-1);do a.ins_h=(a.ins_h<<a.hash_shift^a.window[i+ht-1])&a.hash_mask,a.prev[i&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=i,i++;while(--n);a.strstart=i,a.lookahead=ht-1,_(a)}return a.strstart+=a.lookahead,a.block_start=a.strstart,a.insert=a.lookahead,a.lookahead=0,a.match_length=a.prev_length=ht-1,a.match_available=0,t.next_in=l,t.input=h,t.avail_in=o,a.wrap=s,H}var Z,R=t("../utils/common"),C=t("./trees"),N=t("./adler32"),O=t("./crc32"),D=t("./messages"),I=0,U=1,T=3,F=4,L=5,H=0,j=1,K=-2,M=-3,P=-5,Y=-1,q=1,G=2,X=3,W=4,J=0,Q=2,V=8,$=9,tt=15,et=8,at=29,it=256,nt=it+1+at,rt=30,st=19,ot=2*nt+1,lt=15,ht=3,dt=258,ft=dt+ht+1,_t=32,ut=42,ct=69,bt=73,gt=91,mt=103,wt=113,pt=666,vt=1,kt=2,yt=3,xt=4,zt=3;Z=[new w(0,0,0,0,u),new w(4,4,8,4,c),new w(4,5,16,8,c),new w(4,6,32,32,c),new w(4,4,16,16,b),new w(8,16,32,32,b),new w(8,16,128,128,b),new w(8,32,128,256,b),new w(32,128,258,1024,b),new w(32,258,258,4096,b)],a.deflateInit=B,a.deflateInit2=z,a.deflateReset=y,a.deflateResetKeep=k,a.deflateSetHeader=x,a.deflate=S,a.deflateEnd=E,a.deflateSetDictionary=A,a.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./messages":13,"./trees":14}],9:[function(t,e,a){"use strict";function i(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}e.exports=i},{}],10:[function(t,e,a){"use strict";var i=30,n=12;e.exports=function(t,e){var a,r,s,o,l,h,d,f,_,u,c,b,g,m,w,p,v,k,y,x,z,B,S,E,A;a=t.state,r=t.next_in,E=t.input,s=r+(t.avail_in-5),o=t.next_out,A=t.output,l=o-(e-t.avail_out),h=o+(t.avail_out-257),d=a.dmax,f=a.wsize,_=a.whave,u=a.wnext,c=a.window,b=a.hold,g=a.bits,m=a.lencode,w=a.distcode,p=(1<<a.lenbits)-1,v=(1<<a.distbits)-1;t:do{g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=m[b&p];e:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,0===y)A[o++]=65535&k;else{if(!(16&y)){if(0===(64&y)){k=m[(65535&k)+(b&(1<<y)-1)];continue e}if(32&y){a.mode=n;break t}t.msg="invalid literal/length code",a.mode=i;break t}x=65535&k,y&=15,y&&(g<y&&(b+=E[r++]<<g,g+=8),x+=b&(1<<y)-1,b>>>=y,g-=y),g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=w[b&v];a:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,!(16&y)){if(0===(64&y)){k=w[(65535&k)+(b&(1<<y)-1)];continue a}t.msg="invalid distance code",a.mode=i;break t}if(z=65535&k,y&=15,g<y&&(b+=E[r++]<<g,g+=8,g<y&&(b+=E[r++]<<g,g+=8)),z+=b&(1<<y)-1,z>d){t.msg="invalid distance too far back",a.mode=i;break t}if(b>>>=y,g-=y,y=o-l,z>y){if(y=z-y,y>_&&a.sane){t.msg="invalid distance too far back",a.mode=i;break t}if(B=0,S=c,0===u){if(B+=f-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}else if(u<y){if(B+=f+u-y,y-=u,y<x){x-=y;do A[o++]=c[B++];while(--y);if(B=0,u<x){y=u,x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}}else if(B+=u-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}for(;x>2;)A[o++]=S[B++],A[o++]=S[B++],A[o++]=S[B++],x-=3;x&&(A[o++]=S[B++],x>1&&(A[o++]=S[B++]))}else{B=o-z;do A[o++]=A[B++],A[o++]=A[B++],A[o++]=A[B++],x-=3;while(x>2);x&&(A[o++]=A[B++],x>1&&(A[o++]=A[B++]))}break}}break}}while(r<s&&o<h);x=g>>3,r-=x,g-=x<<3,b&=(1<<g)-1,t.next_in=r,t.next_out=o,t.avail_in=r<s?5+(s-r):5-(r-s),t.avail_out=o<h?257+(h-o):257-(o-h),a.hold=b,a.bits=g}},{}],11:[function(t,e,a){"use strict";function i(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function n(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new w.Buf16(320),this.work=new w.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function r(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=T,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new w.Buf32(bt),e.distcode=e.distdyn=new w.Buf32(gt),e.sane=1,e.back=-1,Z):N}function s(t){var e;return t&&t.state?(e=t.state,e.wsize=0,e.whave=0,e.wnext=0,r(t)):N}function o(t,e){var a,i;return t&&t.state?(i=t.state,e<0?(a=0,e=-e):(a=(e>>4)+1,e<48&&(e&=15)),e&&(e<8||e>15)?N:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,s(t))):N}function l(t,e){var a,i;return t?(i=new n,t.state=i,i.window=null,a=o(t,e),a!==Z&&(t.state=null),a):N}function h(t){return l(t,wt)}function d(t){if(pt){var e;for(g=new w.Buf32(512),m=new w.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(y(z,t.lens,0,288,g,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;y(B,t.lens,0,32,m,0,t.work,{bits:5}),pt=!1}t.lencode=g,t.lenbits=9,t.distcode=m,t.distbits=5}function f(t,e,a,i){var n,r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new w.Buf8(r.wsize)),i>=r.wsize?(w.arraySet(r.window,e,a-r.wsize,r.wsize,0),r.wnext=0,r.whave=r.wsize):(n=r.wsize-r.wnext,n>i&&(n=i),w.arraySet(r.window,e,a-i,n,r.wnext),i-=n,i?(w.arraySet(r.window,e,a-i,i,0),r.wnext=i,r.whave=r.wsize):(r.wnext+=n,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=n))),0}function _(t,e){var a,n,r,s,o,l,h,_,u,c,b,g,m,bt,gt,mt,wt,pt,vt,kt,yt,xt,zt,Bt,St=0,Et=new w.Buf8(4),At=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return N;a=t.state,a.mode===X&&(a.mode=W),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,c=l,b=h,xt=Z;t:for(;;)switch(a.mode){case T:if(0===a.wrap){a.mode=W;break}for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(2&a.wrap&&35615===_){a.check=0,Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0),_=0,u=0,a.mode=F;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",a.mode=_t;break}if((15&_)!==U){t.msg="unknown compression method",a.mode=_t;break}if(_>>>=4,u-=4,yt=(15&_)+8,0===a.wbits)a.wbits=yt;else if(yt>a.wbits){t.msg="invalid window size",a.mode=_t;break}a.dmax=1<<yt,t.adler=a.check=1,a.mode=512&_?q:X,_=0,u=0;break;case F:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(a.flags=_,(255&a.flags)!==U){t.msg="unknown compression method",a.mode=_t;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=_t;break}a.head&&(a.head.text=_>>8&1),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=L;case L:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.time=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,Et[2]=_>>>16&255,Et[3]=_>>>24&255,a.check=v(a.check,Et,4,0)),_=0,u=0,a.mode=H;case H:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.xflags=255&_,a.head.os=_>>8),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=j;case j:if(1024&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length=_,a.head&&(a.head.extra_len=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0}else a.head&&(a.head.extra=null);a.mode=K;case K:if(1024&a.flags&&(g=a.length,g>l&&(g=l),g&&(a.head&&(yt=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),w.arraySet(a.head.extra,n,s,g,yt)),512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,a.length-=g),a.length))break t;a.length=0,a.mode=M;case M:if(2048&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.name+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=P;case P:if(4096&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.comment+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.comment=null);a.mode=Y;case Y:if(512&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(65535&a.check)){t.msg="header crc mismatch",a.mode=_t;break}_=0,u=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=X;break;case q:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}t.adler=a.check=i(_),_=0,u=0,a.mode=G;case G:if(0===a.havedict)return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,C;t.adler=a.check=1,a.mode=X;case X:if(e===E||e===A)break t;case W:if(a.last){_>>>=7&u,u-=7&u,a.mode=ht;break}for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}switch(a.last=1&_,_>>>=1,u-=1,3&_){case 0:a.mode=J;break;case 1:if(d(a),a.mode=at,e===A){_>>>=2,u-=2;break t}break;case 2:a.mode=$;break;case 3:t.msg="invalid block type",a.mode=_t}_>>>=2,u-=2;break;case J:for(_>>>=7&u,u-=7&u;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if((65535&_)!==(_>>>16^65535)){t.msg="invalid stored block lengths",a.mode=_t;break}if(a.length=65535&_,_=0,u=0,a.mode=Q,e===A)break t;case Q:a.mode=V;case V:if(g=a.length){if(g>l&&(g=l),g>h&&(g=h),0===g)break t;w.arraySet(r,n,s,g,o),l-=g,s+=g,h-=g,o+=g,a.length-=g;break}a.mode=X;break;case $:for(;u<14;){if(0===l)break t;
l--,_+=n[s++]<<u,u+=8}if(a.nlen=(31&_)+257,_>>>=5,u-=5,a.ndist=(31&_)+1,_>>>=5,u-=5,a.ncode=(15&_)+4,_>>>=4,u-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=_t;break}a.have=0,a.mode=tt;case tt:for(;a.have<a.ncode;){for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.lens[At[a.have++]]=7&_,_>>>=3,u-=3}for(;a.have<19;)a.lens[At[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,zt={bits:a.lenbits},xt=y(x,a.lens,0,19,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid code lengths set",a.mode=_t;break}a.have=0,a.mode=et;case et:for(;a.have<a.nlen+a.ndist;){for(;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(wt<16)_>>>=gt,u-=gt,a.lens[a.have++]=wt;else{if(16===wt){for(Bt=gt+2;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_>>>=gt,u-=gt,0===a.have){t.msg="invalid bit length repeat",a.mode=_t;break}yt=a.lens[a.have-1],g=3+(3&_),_>>>=2,u-=2}else if(17===wt){for(Bt=gt+3;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=3+(7&_),_>>>=3,u-=3}else{for(Bt=gt+7;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=11+(127&_),_>>>=7,u-=7}if(a.have+g>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=_t;break}for(;g--;)a.lens[a.have++]=yt}}if(a.mode===_t)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=_t;break}if(a.lenbits=9,zt={bits:a.lenbits},xt=y(z,a.lens,0,a.nlen,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid literal/lengths set",a.mode=_t;break}if(a.distbits=6,a.distcode=a.distdyn,zt={bits:a.distbits},xt=y(B,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,zt),a.distbits=zt.bits,xt){t.msg="invalid distances set",a.mode=_t;break}if(a.mode=at,e===A)break t;case at:a.mode=it;case it:if(l>=6&&h>=258){t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,k(t,b),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,a.mode===X&&(a.back=-1);break}for(a.back=0;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(mt&&0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.lencode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,a.length=wt,0===mt){a.mode=lt;break}if(32&mt){a.back=-1,a.mode=X;break}if(64&mt){t.msg="invalid literal/length code",a.mode=_t;break}a.extra=15&mt,a.mode=nt;case nt:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=rt;case rt:for(;St=a.distcode[_&(1<<a.distbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.distcode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,64&mt){t.msg="invalid distance code",a.mode=_t;break}a.offset=wt,a.extra=15&mt,a.mode=st;case st:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.offset+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=_t;break}a.mode=ot;case ot:if(0===h)break t;if(g=b-h,a.offset>g){if(g=a.offset-g,g>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=_t;break}g>a.wnext?(g-=a.wnext,m=a.wsize-g):m=a.wnext-g,g>a.length&&(g=a.length),bt=a.window}else bt=r,m=o-a.offset,g=a.length;g>h&&(g=h),h-=g,a.length-=g;do r[o++]=bt[m++];while(--g);0===a.length&&(a.mode=it);break;case lt:if(0===h)break t;r[o++]=a.length,h--,a.mode=it;break;case ht:if(a.wrap){for(;u<32;){if(0===l)break t;l--,_|=n[s++]<<u,u+=8}if(b-=h,t.total_out+=b,a.total+=b,b&&(t.adler=a.check=a.flags?v(a.check,r,b,o-b):p(a.check,r,b,o-b)),b=h,(a.flags?_:i(_))!==a.check){t.msg="incorrect data check",a.mode=_t;break}_=0,u=0}a.mode=dt;case dt:if(a.wrap&&a.flags){for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=_t;break}_=0,u=0}a.mode=ft;case ft:xt=R;break t;case _t:xt=O;break t;case ut:return D;case ct:default:return N}return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,(a.wsize||b!==t.avail_out&&a.mode<_t&&(a.mode<ht||e!==S))&&f(t,t.output,t.next_out,b-t.avail_out)?(a.mode=ut,D):(c-=t.avail_in,b-=t.avail_out,t.total_in+=c,t.total_out+=b,a.total+=b,a.wrap&&b&&(t.adler=a.check=a.flags?v(a.check,r,b,t.next_out-b):p(a.check,r,b,t.next_out-b)),t.data_type=a.bits+(a.last?64:0)+(a.mode===X?128:0)+(a.mode===at||a.mode===Q?256:0),(0===c&&0===b||e===S)&&xt===Z&&(xt=I),xt)}function u(t){if(!t||!t.state)return N;var e=t.state;return e.window&&(e.window=null),t.state=null,Z}function c(t,e){var a;return t&&t.state?(a=t.state,0===(2&a.wrap)?N:(a.head=e,e.done=!1,Z)):N}function b(t,e){var a,i,n,r=e.length;return t&&t.state?(a=t.state,0!==a.wrap&&a.mode!==G?N:a.mode===G&&(i=1,i=p(i,e,r,0),i!==a.check)?O:(n=f(t,e,r,r))?(a.mode=ut,D):(a.havedict=1,Z)):N}var g,m,w=t("../utils/common"),p=t("./adler32"),v=t("./crc32"),k=t("./inffast"),y=t("./inftrees"),x=0,z=1,B=2,S=4,E=5,A=6,Z=0,R=1,C=2,N=-2,O=-3,D=-4,I=-5,U=8,T=1,F=2,L=3,H=4,j=5,K=6,M=7,P=8,Y=9,q=10,G=11,X=12,W=13,J=14,Q=15,V=16,$=17,tt=18,et=19,at=20,it=21,nt=22,rt=23,st=24,ot=25,lt=26,ht=27,dt=28,ft=29,_t=30,ut=31,ct=32,bt=852,gt=592,mt=15,wt=mt,pt=!0;a.inflateReset=s,a.inflateReset2=o,a.inflateResetKeep=r,a.inflateInit=h,a.inflateInit2=l,a.inflate=_,a.inflateEnd=u,a.inflateGetHeader=c,a.inflateSetDictionary=b,a.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./inffast":10,"./inftrees":12}],12:[function(t,e,a){"use strict";var i=t("../utils/common"),n=15,r=852,s=592,o=0,l=1,h=2,d=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],f=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],_=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,a,c,b,g,m,w){var p,v,k,y,x,z,B,S,E,A=w.bits,Z=0,R=0,C=0,N=0,O=0,D=0,I=0,U=0,T=0,F=0,L=null,H=0,j=new i.Buf16(n+1),K=new i.Buf16(n+1),M=null,P=0;for(Z=0;Z<=n;Z++)j[Z]=0;for(R=0;R<c;R++)j[e[a+R]]++;for(O=A,N=n;N>=1&&0===j[N];N--);if(O>N&&(O=N),0===N)return b[g++]=20971520,b[g++]=20971520,w.bits=1,0;for(C=1;C<N&&0===j[C];C++);for(O<C&&(O=C),U=1,Z=1;Z<=n;Z++)if(U<<=1,U-=j[Z],U<0)return-1;if(U>0&&(t===o||1!==N))return-1;for(K[1]=0,Z=1;Z<n;Z++)K[Z+1]=K[Z]+j[Z];for(R=0;R<c;R++)0!==e[a+R]&&(m[K[e[a+R]]++]=R);if(t===o?(L=M=m,z=19):t===l?(L=d,H-=257,M=f,P-=257,z=256):(L=_,M=u,z=-1),F=0,R=0,Z=C,x=g,D=O,I=0,k=-1,T=1<<O,y=T-1,t===l&&T>r||t===h&&T>s)return 1;for(var Y=0;;){Y++,B=Z-I,m[R]<z?(S=0,E=m[R]):m[R]>z?(S=M[P+m[R]],E=L[H+m[R]]):(S=96,E=0),p=1<<Z-I,v=1<<D,C=v;do v-=p,b[x+(F>>I)+v]=B<<24|S<<16|E|0;while(0!==v);for(p=1<<Z-1;F&p;)p>>=1;if(0!==p?(F&=p-1,F+=p):F=0,R++,0===--j[Z]){if(Z===N)break;Z=e[a+m[R]]}if(Z>O&&(F&y)!==k){for(0===I&&(I=O),x+=C,D=Z-I,U=1<<D;D+I<N&&(U-=j[D+I],!(U<=0));)D++,U<<=1;if(T+=1<<D,t===l&&T>r||t===h&&T>s)return 1;k=F&y,b[k]=O<<24|D<<16|x-g|0}}return 0!==F&&(b[x+F]=Z-I<<24|64<<16|0),w.bits=O,0}},{"../utils/common":3}],13:[function(t,e,a){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],14:[function(t,e,a){"use strict";function i(t){for(var e=t.length;--e>=0;)t[e]=0}function n(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function r(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function s(t){return t<256?lt[t]:lt[256+(t>>>7)]}function o(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function l(t,e,a){t.bi_valid>W-a?(t.bi_buf|=e<<t.bi_valid&65535,o(t,t.bi_buf),t.bi_buf=e>>W-t.bi_valid,t.bi_valid+=a-W):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)}function h(t,e,a){l(t,a[2*e],a[2*e+1])}function d(t,e){var a=0;do a|=1&t,t>>>=1,a<<=1;while(--e>0);return a>>>1}function f(t){16===t.bi_valid?(o(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}function _(t,e){var a,i,n,r,s,o,l=e.dyn_tree,h=e.max_code,d=e.stat_desc.static_tree,f=e.stat_desc.has_stree,_=e.stat_desc.extra_bits,u=e.stat_desc.extra_base,c=e.stat_desc.max_length,b=0;for(r=0;r<=X;r++)t.bl_count[r]=0;for(l[2*t.heap[t.heap_max]+1]=0,a=t.heap_max+1;a<G;a++)i=t.heap[a],r=l[2*l[2*i+1]+1]+1,r>c&&(r=c,b++),l[2*i+1]=r,i>h||(t.bl_count[r]++,s=0,i>=u&&(s=_[i-u]),o=l[2*i],t.opt_len+=o*(r+s),f&&(t.static_len+=o*(d[2*i+1]+s)));if(0!==b){do{for(r=c-1;0===t.bl_count[r];)r--;t.bl_count[r]--,t.bl_count[r+1]+=2,t.bl_count[c]--,b-=2}while(b>0);for(r=c;0!==r;r--)for(i=t.bl_count[r];0!==i;)n=t.heap[--a],n>h||(l[2*n+1]!==r&&(t.opt_len+=(r-l[2*n+1])*l[2*n],l[2*n+1]=r),i--)}}function u(t,e,a){var i,n,r=new Array(X+1),s=0;for(i=1;i<=X;i++)r[i]=s=s+a[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=d(r[o]++,o))}}function c(){var t,e,a,i,r,s=new Array(X+1);for(a=0,i=0;i<K-1;i++)for(dt[i]=a,t=0;t<1<<et[i];t++)ht[a++]=i;for(ht[a-1]=i,r=0,i=0;i<16;i++)for(ft[i]=r,t=0;t<1<<at[i];t++)lt[r++]=i;for(r>>=7;i<Y;i++)for(ft[i]=r<<7,t=0;t<1<<at[i]-7;t++)lt[256+r++]=i;for(e=0;e<=X;e++)s[e]=0;for(t=0;t<=143;)st[2*t+1]=8,t++,s[8]++;for(;t<=255;)st[2*t+1]=9,t++,s[9]++;for(;t<=279;)st[2*t+1]=7,t++,s[7]++;for(;t<=287;)st[2*t+1]=8,t++,s[8]++;for(u(st,P+1,s),t=0;t<Y;t++)ot[2*t+1]=5,ot[2*t]=d(t,5);_t=new n(st,et,M+1,P,X),ut=new n(ot,at,0,Y,X),ct=new n(new Array(0),it,0,q,J)}function b(t){var e;for(e=0;e<P;e++)t.dyn_ltree[2*e]=0;for(e=0;e<Y;e++)t.dyn_dtree[2*e]=0;for(e=0;e<q;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*Q]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function g(t){t.bi_valid>8?o(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function m(t,e,a,i){g(t),i&&(o(t,a),o(t,~a)),N.arraySet(t.pending_buf,t.window,e,a,t.pending),t.pending+=a}function w(t,e,a,i){var n=2*e,r=2*a;return t[n]<t[r]||t[n]===t[r]&&i[e]<=i[a]}function p(t,e,a){for(var i=t.heap[a],n=a<<1;n<=t.heap_len&&(n<t.heap_len&&w(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!w(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i}function v(t,e,a){var i,n,r,o,d=0;if(0!==t.last_lit)do i=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],n=t.pending_buf[t.l_buf+d],d++,0===i?h(t,n,e):(r=ht[n],h(t,r+M+1,e),o=et[r],0!==o&&(n-=dt[r],l(t,n,o)),i--,r=s(i),h(t,r,a),o=at[r],0!==o&&(i-=ft[r],l(t,i,o)));while(d<t.last_lit);h(t,Q,e)}function k(t,e){var a,i,n,r=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,l=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=G,a=0;a<l;a++)0!==r[2*a]?(t.heap[++t.heap_len]=h=a,t.depth[a]=0):r[2*a+1]=0;for(;t.heap_len<2;)n=t.heap[++t.heap_len]=h<2?++h:0,r[2*n]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=s[2*n+1]);for(e.max_code=h,a=t.heap_len>>1;a>=1;a--)p(t,r,a);n=l;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],p(t,r,1),i=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=i,r[2*n]=r[2*a]+r[2*i],t.depth[n]=(t.depth[a]>=t.depth[i]?t.depth[a]:t.depth[i])+1,r[2*a+1]=r[2*i+1]=n,t.heap[1]=n++,p(t,r,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],_(t,e),u(r,h,t.bl_count)}function y(t,e,a){var i,n,r=-1,s=e[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=s,s=e[2*(i+1)+1],++o<l&&n===s||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==r&&t.bl_tree[2*n]++,t.bl_tree[2*V]++):o<=10?t.bl_tree[2*$]++:t.bl_tree[2*tt]++,o=0,r=n,0===s?(l=138,h=3):n===s?(l=6,h=3):(l=7,h=4))}function x(t,e,a){var i,n,r=-1,s=e[1],o=0,d=7,f=4;for(0===s&&(d=138,f=3),i=0;i<=a;i++)if(n=s,s=e[2*(i+1)+1],!(++o<d&&n===s)){if(o<f){do h(t,n,t.bl_tree);while(0!==--o)}else 0!==n?(n!==r&&(h(t,n,t.bl_tree),o--),h(t,V,t.bl_tree),l(t,o-3,2)):o<=10?(h(t,$,t.bl_tree),l(t,o-3,3)):(h(t,tt,t.bl_tree),l(t,o-11,7));o=0,r=n,0===s?(d=138,f=3):n===s?(d=6,f=3):(d=7,f=4)}}function z(t){var e;for(y(t,t.dyn_ltree,t.l_desc.max_code),y(t,t.dyn_dtree,t.d_desc.max_code),k(t,t.bl_desc),e=q-1;e>=3&&0===t.bl_tree[2*nt[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}function B(t,e,a,i){var n;for(l(t,e-257,5),l(t,a-1,5),l(t,i-4,4),n=0;n<i;n++)l(t,t.bl_tree[2*nt[n]+1],3);x(t,t.dyn_ltree,e-1),x(t,t.dyn_dtree,a-1)}function S(t){var e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return D;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return I;for(e=32;e<M;e++)if(0!==t.dyn_ltree[2*e])return I;return D}function E(t){bt||(c(),bt=!0),t.l_desc=new r(t.dyn_ltree,_t),t.d_desc=new r(t.dyn_dtree,ut),t.bl_desc=new r(t.bl_tree,ct),t.bi_buf=0,t.bi_valid=0,b(t)}function A(t,e,a,i){l(t,(T<<1)+(i?1:0),3),m(t,e,a,!0)}function Z(t){l(t,F<<1,3),h(t,Q,st),f(t)}function R(t,e,a,i){var n,r,s=0;t.level>0?(t.strm.data_type===U&&(t.strm.data_type=S(t)),k(t,t.l_desc),k(t,t.d_desc),s=z(t),n=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=n&&(n=r)):n=r=a+5,a+4<=n&&e!==-1?A(t,e,a,i):t.strategy===O||r===n?(l(t,(F<<1)+(i?1:0),3),v(t,st,ot)):(l(t,(L<<1)+(i?1:0),3),B(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),v(t,t.dyn_ltree,t.dyn_dtree)),b(t),i&&g(t)}function C(t,e,a){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&a,t.last_lit++,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(ht[a]+M+1)]++,t.dyn_dtree[2*s(e)]++),t.last_lit===t.lit_bufsize-1}var N=t("../utils/common"),O=4,D=0,I=1,U=2,T=0,F=1,L=2,H=3,j=258,K=29,M=256,P=M+1+K,Y=30,q=19,G=2*P+1,X=15,W=16,J=7,Q=256,V=16,$=17,tt=18,et=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],at=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],it=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],nt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],rt=512,st=new Array(2*(P+2));i(st);var ot=new Array(2*Y);i(ot);var lt=new Array(rt);i(lt);var ht=new Array(j-H+1);i(ht);var dt=new Array(K);i(dt);var ft=new Array(Y);i(ft);var _t,ut,ct,bt=!1;a._tr_init=E,a._tr_stored_block=A,a._tr_flush_block=R,a._tr_tally=C,a._tr_align=Z},{"../utils/common":3}],15:[function(t,e,a){"use strict";function i(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}e.exports=i},{}],"/":[function(t,e,a){"use strict";var i=t("./lib/utils/common").assign,n=t("./lib/deflate"),r=t("./lib/inflate"),s=t("./lib/zlib/constants"),o={};i(o,n,r,s),e.exports=o},{"./lib/deflate":1,"./lib/inflate":2,"./lib/utils/common":3,"./lib/zlib/constants":6}]},{},[])("/")});

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var saveAs=saveAs||function(e){"use strict";if(typeof e==="undefined"||typeof navigator!=="undefined"&&/MSIE [1-9]\./.test(navigator.userAgent)){return}var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,a=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},i=/constructor/i.test(e.HTMLElement)||e.safari,f=/CriOS\/[\d]+/.test(navigator.userAgent),u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},s="application/octet-stream",d=1e3*40,c=function(e){var t=function(){if(typeof e==="string"){n().revokeObjectURL(e)}else{e.remove()}};setTimeout(t,d)},l=function(e,t,n){t=[].concat(t);var r=t.length;while(r--){var o=e["on"+t[r]];if(typeof o==="function"){try{o.call(e,n||e)}catch(a){u(a)}}}},p=function(e){if(/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)){return new Blob([String.fromCharCode(65279),e],{type:e.type})}return e},v=function(t,u,d){if(!d){t=p(t)}var v=this,w=t.type,m=w===s,y,h=function(){l(v,"writestart progress write writeend".split(" "))},S=function(){if((f||m&&i)&&e.FileReader){var r=new FileReader;r.onloadend=function(){var t=f?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");var n=e.open(t,"_blank");if(!n)e.location.href=t;t=undefined;v.readyState=v.DONE;h()};r.readAsDataURL(t);v.readyState=v.INIT;return}if(!y){y=n().createObjectURL(t)}if(m){e.location.href=y}else{var o=e.open(y,"_blank");if(!o){e.location.href=y}}v.readyState=v.DONE;h();c(y)};v.readyState=v.INIT;if(o){y=n().createObjectURL(t);setTimeout(function(){r.href=y;r.download=u;a(r);h();c(y);v.readyState=v.DONE});return}S()},w=v.prototype,m=function(e,t,n){return new v(e,t||e.name||"download",n)};if(typeof navigator!=="undefined"&&navigator.msSaveOrOpenBlob){return function(e,t,n){t=t||e.name||"download";if(!n){e=p(e)}return navigator.msSaveOrOpenBlob(e,t)}}w.abort=function(){};w.readyState=w.INIT=0;w.WRITING=1;w.DONE=2;w.error=w.onwritestart=w.onprogress=w.onwrite=w.onabort=w.onerror=w.onwriteend=null;return m}(typeof self!=="undefined"&&self||typeof window!=="undefined"&&window||this.content);if(typeof module!=="undefined"&&module.exports){module.exports.saveAs=saveAs}else if(typeof define!=="undefined"&&define!==null&&define.amd!==null){define("FileSaver.js",function(){return saveAs})}

if(typeof define == "function" && define.__amd) {
	define.amd = define.__amd;
	delete define.__amd;
}